@using MUCOBADI.Models;
@using System.Collections;
@using Microsoft.EntityFrameworkCore;
@using Syncfusion.Blazor.Data;
@using System.IO;
@using Syncfusion.DocIO.DLS;
@using Syncfusion.DocIORenderer;
@using Syncfusion.Pdf;
@inject MUCOBADIContext _context;
@inject NavigationManager Navigation;
@using MUCOBADI.Data;
@inject UserManagement userManagement;
@using Microsoft.AspNetCore.Hosting;
@inject IWebHostEnvironment hostingEnv;

<style>
    .pp {
        color: ghostwhite;
        background-color: #6F1E51;
        padding: 10px;
    }
</style>

<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;"> <strong>Daily Meal Descriptions</strong></li>
</ol>

<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>


<SfGrid @ref="ADailyMealsGrid" TValue="ADailyMeals"
        Toolbar="@(new string[] {"Add","Edit","Delete","Update","Cancel","ColumnChooser"})" ShowColumnChooser="true" AllowTextWrap="true"
        AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true">

    <SfDataManager AdaptorInstance="@typeof(ADailyMealsAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
    <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
    <GridEvents OnActionBegin="OnADailyMealsActionBegin" TValue="ADailyMeals"></GridEvents>
    <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog">

        <HeaderTemplate>
            @{
                var text = GetFaclityHeader((context as ADailyMeals));
                <div class="headerbandimg" /><span>@text</span>
            }
        </HeaderTemplate>
        <Template Context="AdministrationPhaseContext">
            @{
                var EnrollmentData = (AdministrationPhaseContext as ADailyMeals);
                <div style="padding:15px;">
                    <div class="form-row">
                        <div class="form-group col-md-12" hidden>
                            <SfNumericTextBox ID="MealId" @bind-Value="@(EnrollmentData.MealId)" Enabled="false" Placeholder="id" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                        </div>
                        <div class="form-group col-md-12">
                            <SfTextBox Multiline="false" ID="MealDescription" @bind-Value="@(EnrollmentData.MealDescription)" Enabled="true" Placeholder="Meal Description" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                        </div>
                     <div class="form-group col-md-12">
                            <SfNumericTextBox ID="MealScore" @bind-Value="@(EnrollmentData.MealScore)" Enabled="true" Placeholder="Meal Score" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                        </div>
                    </div>
                </div>
            }
        </Template>
    </GridEditSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSize="20"></GridPageSettings>
    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
        <GridColumn Field=@nameof(ADailyMeals.MealId) HeaderText=" Id" TextAlign="TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
        <GridColumn Field=@nameof(ADailyMeals.MealDescription) HeaderText="Meal Description"></GridColumn>
        <GridColumn Field=@nameof(ADailyMeals.MealScore) HeaderText="Meal Score"></GridColumn>




    </GridColumns>
</SfGrid>

@code {
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
{
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    #endregion Toasters

    private SfGrid<ADailyMeals> ADailyMealsGrid;

    public string ButtonText { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!userManagement.IsSignedIn())
            {
                Navigation.NavigateTo("/", true);
            }
            else
            {

            }

        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }

    #region ClientCareModality

    public class ADailyMealsAdapter : DataAdaptor
    {
        public IToastService toastService;
        private UserManagement _userManagement;
        public ADailyMealsAdapter(IToastService ts, UserManagement userManagement)
        {
            _userManagement = userManagement;
            toastService = ts;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<ADailyMeals>();
            try
            {
                using (var dbContext = new MUCOBADIContext())
                {
                    data = await dbContext.ADailyMeals.ToListAsync();
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<ADailyMeals>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                using (var dbContext = new MUCOBADIContext())
                {
                    var val = (value as ADailyMeals);
                    var exists = dbContext.ADailyMeals.FirstOrDefault(o => o.MealId == val.MealId);
                    if (exists == null)
                    {
                        int id = 1;
                        var last = dbContext.ADailyMeals.OrderBy(o => o.MealId).LastOrDefault();
                        if (last != null)
                        {
                            id = (last.MealId + 1);
                        }
                        val.MealId = id;

                        dbContext.ADailyMeals.Add(val);
                    }
                    await dbContext.SaveChangesAsync();
                    toastService.ShowSuccess("Record saved successfully.");
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }
        public override async Task<object> RemoveAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                int data = (int)value;
                using (var dbContext = new MUCOBADIContext())
                {
                    var exists = dbContext.ADailyMeals.FirstOrDefault(o => o.MealId == data);
                    if (exists != null)
                    {
                        dbContext.ADailyMeals.Remove(exists);
                    }
                    await dbContext.SaveChangesAsync();
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }


            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                using (var dbContext = new MUCOBADIContext())
                {
                    var val = (value as ADailyMeals);
                    var exists = dbContext.ADailyMeals.FirstOrDefault(o => o.MealId == val.MealId);
                    if (exists != null)
                    {
                        dbContext.Entry(exists).CurrentValues.SetValues(val);
                        dbContext.Entry(exists).State = EntityState.Modified;
                    }

                    await dbContext.SaveChangesAsync();
                    toastService.ShowSuccess("Record updated successfully.");
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
    }

    public void OnADailyMealsActionBegin(ActionEventArgs<ADailyMeals> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (string.IsNullOrEmpty(args.Data.MealDescription))
            {
                ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please fill in the Meal Description before saving this record.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.MealScore == null)
            {
                ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please fill in the Meal Score before saving this record.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }

            else
            {
                using (var db = new MUCOBADIContext())
                {
                    var exists = db.ADailyMeals.FirstOrDefault(o => o.MealDescription.ToLower() == args.Data.MealDescription.ToLower());
                    if (exists != null && exists.MealId != args.Data.MealId)
                    {
                        ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = "This Meal Description already exists in the database and will not be saved.", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                        args.Cancel = true;
                    }
                }
            }
        }
    }

    public string GetFaclityHeader(ADailyMeals Value)
    {
        if (Value.MealId == 0)
        {
            ButtonText = "Insert";
            return "Add a New Meal Description";
        }
        else
        {
            ButtonText = "Save Changes";
            return "Edit Details for " + Value.MealDescription;
        }
    }

    #endregion DailyMeals



}












