@page "/DashboardPage"
@using MUCOBADI.DTOs.Dashboard;
@using MUCOBADI.Models;
@using MUCOBADI.Data;
@using Microsoft.EntityFrameworkCore;
@using Syncfusion.Blazor;
@using Syncfusion.Blazor.ProgressBar;
@*@inject MUCOBADIContext db;*@
@inject MUCOBADIContext _dbcontext;
@inject IToastService toastService;
@inject NavigationManager Navigation;

<style>
	.pp {
		color: ghostwhite;
		background-color: #808285;
		padding: 10px;
	}

	.control-container {
		background-color: #adb5bd;
		height: 300px;
		margin: 0 auto;
		width: 500px;
	}

	.e-carousel .slide-content {
		align-items: center;
		display: flex;
		font-size: 1.25rem;
		height: 100%;
		justify-content: center;
	}

	/*Customize carousel*/
	.e-carousel .e-carousel-navigators .e-next .e-btn:not(:disabled) .e-btn-icon,
	.e-carousel .e-carousel-navigators .e-previous .e-btn:not(:disabled) .e-btn-icon
	{
		color: blackyellow;
		font-size: 25px;
	}

	.e-carousel .e-carousel-navigators {
		top: 150px;
	}

	.e-carousel .e-carousel-navigators .e-previous .e-btn:not(:disabled) .e-btn-icon, .e-carousel .e-carousel-navigators .e-next .e-btn:not(:disabled) .e-btn-icon, .e-carousel .e-carousel-navigators .e-play-pause .e-btn:not(:disabled) .e-btn-icon {
    color: black;
	}

	table, th, td {
  border: 1px solid black;
}

h5 {
  display: block;
  font-size: -1em;
  font-weight: bold;
  color:maroon;
  background-color: white;
}

h6 {
        color: ghostwhite;
        background-color: #268cff;
        padding: 10px;
        width: 100%;
        font-size: 10px;
    }

    h4 {
        color: black;
        background-color: deepskyblue;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

    h3 {
        color: black;
        background-color: darkorange;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }
</style>

<div class="row">
	<div class="col-md-12">
		<ol class="breadcrumb" style="margin-top:5px;">
			<li class="breadcrumb-item active" style="color: brown;"> <strong>DASHBOARD</strong></li>
		</ol>
    </div>
</div>


<div class="col-md-9">
	@{
		<p style="color:purple;"><center><strong>DATA FOR QTR @QuarterNo @DateTime.Now.Year</strong></center></p>
	}	
</div>


<div class="row" style="margin-top:5px;">
			<SfCarousel AnimationEffect="CarouselAnimationEffect.Fade"
                    AutoPlay="true"
                    Interval="60000" 
					ButtonsVisibility="CarouselButtonVisibility.Visible"
					ShowIndicators="false">
					@try
					{
						<CarouselItem>
							<h5>OVC_SERV. Vs TARGET (0-18+ YEARS)</h5>
							<table style="width:100%;font-size:20px">
								<tr>
									<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
										<strong>District</strong>
									</td>
									@*<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;" hidden>
										<strong>Year</strong>
									</td>*@
									<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
										<strong>FY @DateTime.Now.Year  Target</strong>
									</td>
									<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
										<strong>Active</strong>
									</td>
									<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
										<strong>Graduated</strong>
									</td>
									<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
										<strong>OVC_SERV. (0-18+ Yrs)</strong>
									</td>
									@*<td>
										<strong>Year</strong>
									</td>*@
									<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
										<strong>% OVC_SERV. Against Target</strong>
									</td>
								</tr>
								@{
									double? totaltarget = 0;
									double? totalovcserve = 0;
									double? totalpercentage = 0;
									double? totalactive = 0;
									double? totalgraduated = 0;
								}
								@try
								{
									@foreach(var item in TargetsList)
									{
										double? percentagevalue = 0;
									<tr>
										<td>
											@item.DistrictDescription
										</td>
										@*<td style="text-align:right" hidden>									
											@item.FinancialYearDesc
										</td>*@
										<td style="text-align:right">
											@{
												totaltarget += item.TargetValue;
											}
											@if (@item.TargetValue != null)
											{
												@item.TargetValue.Value.ToString("#,##0")
											}											
										</td>
										@*Active*@
										<td style="text-align:right">
											@{
												totalactive += item.Active;
											}
											@if(@item.Active != null)
											{
												@item.Active.Value.ToString("#,##0")
											}
										</td>
										@*Graduated*@
										<td style="text-align:right">
											@{
												totalgraduated += item.Graduated;
											}
											@if(@item.Graduated != null)
											{
												@item.Graduated.Value.ToString("#,##0")
											}
										</td>
										<td style="text-align:right">
											@{
												totalovcserve += item.ActualValue;
											}
											@if(@item.ActualValue != null)
											{
												@item.ActualValue.Value.ToString("#,##0")
											}											
										</td>
								
											@if(item.TargetValue>0)
											{
												@if (totaltarget > 0)
												{
													totalpercentage = Math.Round(((double)totalovcserve / (double)totaltarget) * 100, 1);
												}											
												if(@item.Percentage < 75)
												{
													<td style="text-align:right;background-color:red;color:ghostwhite;font-weight:bold;">
														<p style="color:ghostwhite;font-weight:bold;">@item.Percentage%</p>
													</td>
												}
												else if(@item.Percentage >= 75 && @item.Percentage < 95)
												{
													<td style="text-align:right;background-color:yellow;color:black;font-weight:bold;">
														<p style="color:black;font-weight:bold;">@item.Percentage%</p>
													</td>
												}
												else if (@item.Percentage > 95)
												{
													<td style="text-align:right;background-color:green;color:ghostwhite;font-weight:bold;">
														<p style="color:black;font-weight:bold;">@item.Percentage%</p>
													</td>
												}
											}
											else
											{
													<td style="text-align:right;background-color:red;color:ghostwhite;font-weight:bold;">
														<p style="color:ghostwhite;font-weight:bold;">0%</p>
													</td>
											}
									</tr>							
									}
								}
								catch(Exception ex)
								{
									throw ex;
								}
								finally
								{
									@*LoadingDialogue.HideAsync();*@
								}
							<tr>							
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;"><strong>Total</strong></td>
								@*<td></td>*@
								<td style="text-align:right"><strong>@totaltarget.Value.ToString("#,##0")</strong></td>
								<td style="text-align:right"><strong>@totalactive.Value.ToString("#,##0")</strong></td>
								<td style="text-align:right"><strong>@totalgraduated.Value.ToString("#,##0")</strong></td>
								<td style="text-align:right"><strong>@totalovcserve.Value.ToString("#,##0")</strong></td>
							
								@if(@totalpercentage < 75)
								{
												<td style="text-align:right;background-color:red;color:ghostwhite;font-weight:bold;">
													<p style="color:ghostwhite;font-weight:bold;">@totalpercentage.Value.ToString("#,##0")%</p>
												</td>
								}
								else if(@totalpercentage >= 75 && @totalpercentage < 95)
								{
												<td style="text-align:right;background-color:yellow;color:black;font-weight:bold;">
													<p style="color:black;font-weight:bold;">@totalpercentage.Value.ToString("#,##0")%</p>
												</td>
								}
								else if (@totalpercentage > 95)
								{
												<td style="text-align:right;background-color:green;color:black;font-weight:bold;">
													<p style="color:black;font-weight:bold;">@totalpercentage.Value.ToString("#,##0")%</p>
												</td>
								}
							</tr>
							</table>
						</CarouselItem>
						<CarouselItem>
							<h5>OVC_SERV.</h5>
								<table style="width:100%;font-size:20px">
									<tr>
										<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
											<strong>District</strong>
										</td>
										<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
											<strong>OVC_SERV.</strong>
										</td>
										<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
											<strong>Children (0-17 Years)</strong>
										</td>
										<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
											<strong>Adults (18+ Years)</strong>
										</td>
										<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
											<strong>% Children</strong>
										</td>
										<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
											<strong>% Adults</strong>
										</td>
									</tr>
									@{
										double? totalovc = 0;
										double? totalchildren = 0;
										double? totaladults = 0;
										double? percentagechildren = 0;
										double? percentageadults = 0;
									}
									@if (ovcservagegroups != null)
									{
										@foreach (var item in ovcservagegroups)
										{
											<tr>
												<td>
													@item.DistrictDescription
												</td>
												<td style="text-align:right">
													@{
														totalovc += item.OVCServTotal;
													}
													@if(@item.OVCServTotal != null)
													{
														@item.OVCServTotal.Value.ToString("#,##0")
													}													
												</td>
												<td style="text-align:right">
													@{
														totalchildren += item.Children;
													}
													@if(@item.Children != null)
													{
														@item.Children.Value.ToString("#,##0")
													}
												</td>
												<td style="text-align:right">
													@{
														totaladults += item.Adults;
													}
													@if(@item.Adults != null)
													{
														@item.Adults.Value.ToString("#,##0")
													}
												</td>
												<td style="text-align:right">
													@{
														@if (totalovc > 0)
														{
															percentagechildren = Math.Round(((double)totalchildren / (double)totalovc) * 100, 1);
														}
														@if(@item.PercentageChildren != null)
														{
															@item.PercentageChildren.Value.ToString("#,##0")
														}
													}
												</td>
												<td style="text-align:right">
													@{
														@if (totalovc > 0)
														{
															percentageadults = Math.Round(((double)totaladults / (double)totalovc) * 100, 1);
														}
														@if(@item.PercentageAdults != null)
														{
															@item.PercentageAdults.Value.ToString("#,##0")
														}
													}
												</td>										
											</tr>
										}
									}
									<tr>
										<td>
											<strong>Total</strong>
										</td>
										<td style="text-align:right">
											<strong>@totalovc.Value.ToString("#,##0")</strong>
										</td>
										<td style="text-align:right">
											<strong>@totalchildren.Value.ToString("#,##0")</strong>
										</td>
										<td style="text-align:right">
											<strong>@totaladults.Value.ToString("#,##0")</strong>
										</td>
										<td style="text-align:right">
											<strong>@percentagechildren%</strong>
										</td>
										<td style="text-align:right">
											<strong>@percentageadults%</strong>
										</td>
									</tr>
								</table>
						</CarouselItem>
						@*<CarouselItem>
							<p>3</p>
						</CarouselItem>*@
					}
					
					catch(Exception ex)
					{
					
					}
					finally
					{
						LoadingDialogue.HideAsync();
					}
			</SfCarousel>

</div>

<div>
	<SfDialog @ref="@LoadingDialogue"
			  ID="LoadingDialog"
			  Height="auto"
			  Width="20%"
			  AllowDragging="true"
			  Target=".mainbody"
			  ShowCloseIcon="false"
			  IsModal=true
			  Visible="false">
		<DialogTemplates>
			<Content>
				<div style="padding:25px">
					<div class="loader">
						<div class="loader--dot"></div>
						<div class="loader--dot"></div>
						<div class="loader--dot"></div>
						<div class="loader--dot"></div>
						<div class="loader--dot"></div>
						<div class="loader--dot"></div>
						<div class="loader-Loading-text"></div>
						@*<div class="loader-Saving-text"></div>*@
					</div>
				</div>
			</Content>
			<FooterTemplate>

			</FooterTemplate>
		</DialogTemplates>
	</SfDialog>
</div>

@code {
	#region Toasters
	public static string ToastContent { get; set; }
	SfToast ToastObj;
	SfToast DeleteToastObj;
	private string ToastPosition = "Right";
	private int AlarmTimeout { get; set; } = 120000;
	private List<ToastModel> Toast = new List<ToastModel>
	{
		new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
		new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
		new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
		new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
	};
	#endregion Toasters

	string QuarterNo { get; set; }
	string Qtr = null;
	string PreviousQtr = null;
	string Yr = null;
	private List<ViewDashboardBeneficiaryIdentificationRegister> TotalHouseHoldsToVisit { get; set; }
	private List<spDashboardHouseHoldsGetAllResult> TotalHouseholdsVisited { get; set; }
	List<ViewDashboardOvcserveVsTarget> OvcServeData { get; set; }
	List<ViewDashboardTnrhivstatus> UnknownTNRData { get; set; }
	List<ViewATargets> TargetsData { get; set; }
	List<DasboardDistricts> data { get; set; }
	List<ViewDashboardBeneficiariesonIcarepivot> ICAREBeneficiariesData { get; set; }
	List<ViewDashboardOvcServiceReportingToolDetail> HomeVisitData { get; set; }
	List<AKnownRiskFactorsBinding> RiskFactorsData { get; set; }
	List<ViewDashboardHouseHoldNoVisits> HHNoVisitsData { get; set; }
	List<AFinancialYear> YearsDataSource { get; set; }
	List<ADistrict> DistrictsDataSource { get; set; }
	List<ASubcounty> SubcountiesDataSource { get; set; }

	private Syncfusion.Blazor.Theme Theme { get; set; }
	private double[] Spacing = new double[] { 15, 15 };
	private double Ratio = 160 / 100;
	SearchPanel SearchModel { get; set; } = new();
	List<SeriesModel> AgeCategoryData { get; set; }
	List<SeriesModel> DistrictData { get; set; }
	List<SeriesModel> HIVStatusdData { get; set; }
	List<SeriesModel> ProgramStatusData { get; set; }
	List<SeriesModel> ClientsOnArtData { get; set; }
	List<SeriesModel> ClientsEligibleforVLTestDoneData { get; set; }
	List<SeriesModel> ClientsEligibleforVLData { get; set; }
	List<SeriesModel> ClientsVLTestResultsReceivedData { get; set; }
	List<SeriesModel> ClientsWithSuppressedResultsData { get; set; }
	List<SeriesModel> RiskFactorData { get; set; }
	List<DashboardModel> PositiveNegativeUnknownData { get; set; }
	List<DashboardModel> PositiveNegativeUnknownData18Plus { get; set; }
	public static double? TotalCALHIV { get; set; } = 0;
	List<SeriesModel>? NumberofActiveBeneficiariesData { get; set; }
	List<SeriesModel>? NumberofClientWithHealthServiceData { get; set; }
	List<SeriesModel>? NumberofClientWithHealthServiceDataChildren { get; set; }
	List<SeriesModel>? NumberClientsWithChildProtectionServiceData { get; set; }
	List<SeriesModel>? NumberClientsWithChildProtectionServiceData1 { get; set; }
	List<string> SeriesColors { get; set; } = new List<string>()
	{
		"#2485FA","#4d0702","#808285","#6002EE","#008b00","#262626","#424d44","#472b42","#1e4167","#3d1d00"
	};
	SfDialog? LoadingDialogue;
	private UtilitiesSearchPanel InputModel = new();
	List<AQuarter> QuarterData { get; set; }
	bool isQuarterEnabled { get; set; } = true;
	bool isSubcountyEnabled  { get; set; } = false;
	bool Downloadreport { get; set; } = false;

	public class OvcHivStat
	{
		public string DistrictDescription { get; set; }
		public double? OVCServ { get; set; }
		public double? HivPositive { get; set; }
		public double? HivNegative { get; set; }
		public double? Unknownstatus { get; set; }
		public double? UnknownTNR { get; set; }
		public double? CALHIV { get; set; }
	}
	public class OvcServeAgeGroups
	{
		public string DistrictDescription { get; set; }
		public double? OVCServTotal { get; set; }
		public double? Children { get; set; }
		public double? Adults { get; set; }
		public double? PercentageChildren { get; set; }
		public double? PercentageAdults { get; set; }
	}

	List<OvcHivStat> ovchivchildren = new List<OvcHivStat>();
	List<OvcHivStat> ovcadults = new List<OvcHivStat>();
	List<OvcServeAgeGroups> ovcservagegroups = new List<OvcServeAgeGroups>();

	public class OVCServeValueTargets
	{
		public double? TargetValue { get; set; }
		public int? DistrictId { get; set; }
		public int? FinancialYearId { get; set; }
		public string DistrictDescription { get; set; }
		public string FinancialYearDesc { get; set; }
		public int? VisitationMonth { get; set; }
		public int? Qtr { get; set; }
		public int? VisitationYear { get; set; }
		public double? ActualValue { get; set; }
		public double? Active { get; set; }
		public double? Graduated { get; set; }
		public double? Percentage { get; set; }
	}

	List<OVCServeValueTargets> TargetsList = new List<OVCServeValueTargets>();

	public class BeneficiaryRiskFactor
	{
		public string DistrictDescription { get; set; }
		public string KnownRiskFactorDescription { get; set; }
		public double? TotalNumber { get; set; }
		public int? DistrictId { get; set; }
		public double? AdolescentMother { get; set; }
		public double CALHIV { get; set; }
		public double ChildofFSW { get; set; }
		public double FSW { get; set; }
		public double HEI { get; set; }
		public double LivinginHHwithAdolescentMother { get; set; }
		public double LivinginHHwithFSW { get; set; }
		public double LivinginHHwithHEI { get; set; }
		public double LivinginHHwithPLHIV { get; set; }
		public double LivinginHHwithSVAC { get; set; }
		public double Other { get; set; }
		public double PLHIV { get; set; }
		public double SVAC { get; set; }
	}
	List<BeneficiaryRiskFactor> beneficiaryriskfactorchildren = new List<BeneficiaryRiskFactor>();

	public class DasboardDistricts
	{
		public int? DistrictId { get; set; }
		public string DistrictDescription { get; set; }
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			await base.OnInitializedAsync();

			//Timer to refresh dashboard page			
			System.Timers.Timer timer = new System.Timers.Timer();
			timer.Interval = 300000;
			timer.Elapsed += timer_Elapsed;
			timer.Start();

			QuarterData = await _dbcontext
			.AQuarter
			.Where(o=>o.QuarterId >= 1 && o.QuarterId <= 4)
			.ToListAsync();

			YearsDataSource = await _dbcontext
			.AFinancialYear
			.OrderBy(o=>o.FinancialYearDesc)
			.ToListAsync();

			DistrictsDataSource = await _dbcontext
			.ADistrict
			.OrderBy(o=>o.DistrictDescription)
			.ToListAsync();

			SubcountiesDataSource = await _dbcontext
			.ASubcounty
			.OrderBy(o=>o.SubcountyDescription)
			.ToListAsync();

			await LoadDashboards();


		}
		catch(Exception ex)
		{
			throw ex;
		}

		finally
		{


		}
	}

	async void timer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)	
	{
		await LoadDashboards();
	}

	public class PreviousQtrsClass
	{
		public string PreviousQtrs { get; set; }
	}

	private async Task LoadDashboards()
	{
		try
		{	
			
		}
		catch(Exception ex)
		{			

		}
		finally
		{
			using (var _dbcontext = new MUCOBADIContext())
			{
				//Navigation.NavigateTo("/ICAREDashboardPage", true);
				var currentMonth = DateTime.Now.Month;
				var currentYear = DateTime.Now.Year;

				SearchModel = new SearchPanel();
				SearchModel.Startdate = new DateTime(DateTime.Now.Year, 1, 1);
				SearchModel.Enddate = new DateTime(DateTime.Now.Year, 12, 31);

				int StartMonth = 1;
				int EndMonth = 12;

				if (currentMonth >= 1 && currentMonth <= 3)
				{
					QuarterNo = "TWO (JAN-MAR)";
					Qtr = "2";
					PreviousQtr = "1";
					StartMonth = 1;
					EndMonth = 3;
				}
				else if (currentMonth >= 4 && currentMonth <= 6)
				{
					QuarterNo = "THREE (APR-JUN)";
					Qtr = "3";
					PreviousQtr = "2";
					StartMonth = 4;
					EndMonth = 6;
				}
				else if (currentMonth >= 7 && currentMonth <= 9)
				{
					QuarterNo = "FOUR (JUL-SEP)";
					Qtr = "4";
					PreviousQtr = "3";
					StartMonth = 7;
					EndMonth = 9;
				}
				else if (currentMonth >= 10 && currentMonth <= 12)
				{
					QuarterNo = "ONE (OCT-DEC)";
					Qtr = "1";
					PreviousQtr = "4";
					StartMonth = 10;
					EndMonth = 12;
				}

				//Datasources to load OVCServe Data and Targets

				TargetsData = await _dbcontext.ViewATargets.Where(o => o.FinancialYearDesc.Trim() == currentYear.ToString()).ToListAsync();

				OvcServeData = _dbcontext.ViewDashboardOvcserveVsTarget
				.Where(o => o.VisitationYear == currentYear && (o.Qtr.ToString() == Qtr
				|| (o.Qtr.ToString() == PreviousQtr && o.ProgramParticipationId == 2)))
				.ToList();

				UnknownTNRData = await _dbcontext.ViewDashboardTnrhivstatus.Where(o => o.VisitationYear == currentYear && o.Qtr.ToString() == Qtr).ToListAsync();
				ICAREBeneficiariesData = await _dbcontext.ViewDashboardBeneficiariesonIcarepivot.Where(o => o.VisitationYear == currentYear && (o.Qtr.ToString() == Qtr/*|| o.Qtr.ToString() == PreviousQtr*/)).ToListAsync();
				RiskFactorsData = await _dbcontext.AKnownRiskFactorsBinding.ToListAsync();
				HHNoVisitsData = await _dbcontext.ViewDashboardHouseHoldNoVisits.Where(o => o.VisitationYear == currentYear && o.Qtr == Qtr).ToListAsync();
				HomeVisitData = await _dbcontext.ViewDashboardOvcServiceReportingToolDetail.Where(o => o.VisitationYear == currentYear && o.Qtr == Qtr).ToListAsync();

				ovchivchildren = new List<OvcHivStat>();
				ovcadults = new List<OvcHivStat>();

				var _data = OvcServeData.Select(o => new { o.DistrictId, o.DistrictDescription, o.VisitationYear }).Distinct().ToList();

				//OvcHivStat
				foreach (var item in _data)
				{
					OvcHivStat mm = new OvcHivStat();
					mm.DistrictDescription = item.DistrictDescription;
					mm.OVCServ = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.AgeCategory == "0-17 Years").ToList().Count();
					mm.HivPositive = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.HivstatusId == 1 && o.AgeCategory == "0-17 Years").ToList().Count();
					mm.HivNegative = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.HivstatusId == 2 && o.AgeCategory == "0-17 Years").ToList().Count();
					mm.Unknownstatus = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.HivstatusId == 3 && o.AgeCategory == "0-17 Years").ToList().Count();
					mm.UnknownTNR = UnknownTNRData.Where(o => o.DistrictId == item.DistrictId && o.AgeCategory == "0-17 Years").ToList().Count();

					if (mm.HivPositive > 0)
					{
						mm.CALHIV = Math.Round((((double)mm.HivPositive / (double)mm.OVCServ) * 100), 1);
					}
					ovchivchildren.Add(mm);
				}
				ovchivchildren = ovchivchildren.OrderByDescending(o => o.CALHIV).ToList();

				//OvcHIVAdults
				foreach (var item in _data)
				{
					OvcHivStat mm = new OvcHivStat();
					mm.DistrictDescription = item.DistrictDescription;
					mm.OVCServ = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.AgeCategory == "18+ Years").ToList().Count();
					mm.HivPositive = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.HivstatusId == 1 && o.AgeCategory == "18+ Years" && o.IsCareGiver == 1).ToList().Count();
					mm.HivNegative = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.HivstatusId == 2 && o.AgeCategory == "18+ Years" && o.IsCareGiver == 1).ToList().Count();
					mm.Unknownstatus = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.HivstatusId == 3 && o.AgeCategory == "18+ Years" && o.IsCareGiver == 1).ToList().Count();
					mm.UnknownTNR = UnknownTNRData.Where(o => o.DistrictId == item.DistrictId && o.AgeCategory == "18+ Years" && o.IsCareGiver == 1).ToList().Count();

					if (mm.HivPositive > 0)
					{
						mm.CALHIV = Math.Round((((double)mm.HivPositive / (double)mm.OVCServ) * 100), 1);
					}
					ovcadults.Add(mm);
				}
				ovcadults = ovcadults.OrderByDescending(o => o.CALHIV).ToList();

				//OVC_Serv Vs Target
				foreach (var item in _data)
				{
					int count = 0;
					int countactive = 0;
					int countgraduated = 0;
					if (OvcServeData != null && OvcServeData.Count > 0)
					{
						//Actual Values
						var ovcservefilter = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.VisitationYear.ToString() == item.VisitationYear.ToString()).ToList();
						if (ovcservefilter != null)
						{
							count = ovcservefilter.Count();
						}

						//Active
						var ovcservefilteractive = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.VisitationYear.ToString() == item.VisitationYear.ToString() && o.ProgramParticipationId == 1).ToList();
						if (ovcservefilteractive != null)
						{
							countactive = ovcservefilteractive.Count();
						}

						//Graduated
						var ovcservefiltergraduated = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.VisitationYear.ToString() == item.VisitationYear.ToString() && o.ProgramParticipationId == 2).ToList();
						if (ovcservefiltergraduated != null)
						{
							countgraduated = ovcservefiltergraduated.Count();
						}

					}

					OVCServeValueTargets mm = new OVCServeValueTargets();
					mm.DistrictDescription = item.DistrictDescription;
					mm.FinancialYearDesc = item.VisitationYear.ToString();
					var tvalue = TargetsData.FirstOrDefault(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc == item.VisitationYear.ToString());
					if (tvalue != null)
					{
						mm.TargetValue = tvalue.TargetValue;
					}
					else
					{
						mm.TargetValue = 0;
					}

					mm.ActualValue = count;
					mm.Active = countactive;
					mm.Graduated = countgraduated;

					if (mm.TargetValue > 0)
					{
						mm.Percentage = Math.Round((((double)mm.ActualValue / (double)mm.TargetValue) * 100), 1);
					}

					TargetsList.Add(mm);
				}

				TargetsList = TargetsList.OrderByDescending(o => o.Percentage).ToList();

				//Beneficiaries KnownRiskFactor
				foreach (var item in ICAREBeneficiariesData)
				{
					BeneficiaryRiskFactor mm = new BeneficiaryRiskFactor();
					mm.DistrictDescription = item.DistrictDescription;
					mm.AdolescentMother = item.AdolescentMother;
					mm.CALHIV = item.Calhiv;
					mm.ChildofFSW = item.ChildofFsw;
					mm.FSW = item.Fsw;
					mm.HEI = item.Hei;
					mm.LivinginHHwithAdolescentMother = item.LivinginHhwithAdolescentMother;
					mm.LivinginHHwithFSW = item.LivinginHhwithFsw;
					mm.LivinginHHwithHEI = item.LivinginHhwithHei;
					mm.LivinginHHwithPLHIV = item.LivinginHhwithPlhiv;
					mm.LivinginHHwithSVAC = item.LivinginHhwithSvac;
					mm.Other = item.Other;
					mm.PLHIV = item.Plhiv;
					mm.SVAC = item.Svac;

					beneficiaryriskfactorchildren.Add(mm);
				}
				beneficiaryriskfactorchildren = beneficiaryriskfactorchildren.OrderBy(o => o.DistrictDescription).ThenByDescending(o => o.TotalNumber).ToList();

				//OvcServeAgeGroups
				foreach (var item in _data)
				{
					OvcServeAgeGroups mm = new OvcServeAgeGroups();
					mm.DistrictDescription = item.DistrictDescription;
					mm.OVCServTotal = OvcServeData.Where(o => o.DistrictId == item.DistrictId).ToList().Count();
					mm.Children = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.AgeCategory == "0-17 Years").ToList().Count();
					mm.Adults = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.AgeCategory == "18+ Years" && o.IsCareGiver == 1).ToList().Count();

					if (mm.OVCServTotal > 0)
					{
						mm.PercentageChildren = Math.Round((((double)mm.Children / (double)mm.OVCServTotal) * 100), 1);
						mm.PercentageAdults = Math.Round((((double)mm.Adults / (double)mm.OVCServTotal) * 100), 1);
					}
					ovcservagegroups.Add(mm);
				}
				ovcservagegroups = ovcservagegroups.OrderByDescending(o => o.PercentageAdults).ThenByDescending(o => o.PercentageChildren).ToList();

			}
		}
	}

	public void OnDistrictChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
	{
		if (args.Value != null)
		{
			isSubcountyEnabled = true;
			using (var db = new MUCOBADIContext())
			{
				SubcountiesDataSource = db.ASubcounty.Where(o => args.Value.Any(a => a == o.DistrictId) == true).ToList();
				isSubcountyEnabled = true;
			}
		}
	}



}
