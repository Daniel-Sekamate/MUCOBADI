@page "/VSLAShareOutPage"
@using MUCOBADI.Models;
@using MUCOBADI.Data;
@using System.Collections.ObjectModel;
@using System.IO;
@using Microsoft.EntityFrameworkCore;
@using System.Collections;
@inject UserManagement userManagement;
@inject NavigationManager Navigation;
@using Microsoft.AspNetCore.Hosting;
@inject IWebHostEnvironment hostingEnv;

<style>
    h4 {
        background-color: black;
        color: whitesmoke;
        padding: 10px;
    }

    td {
        padding: 10px;
    }

    h3 {
        color: red;
    }

    .pp {
        color: ghostwhite;
        background-color: #6F1E51;
        padding: 10px;
    }
</style>
<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;"> <strong>USAID ICARE |</strong> VSLA ACTION AUDIT (SHARE OUT) TOOL </li>
</ol>
<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>
<div class="form-row">
    <div class="form-group col-md-12">
        <SfAccordion ExpandMode="@ExpandMode.Single">
            <AccordionItems>
                <AccordionItem Expanded="false">
                    <HeaderTemplate>Search Panel</HeaderTemplate>
                    <ContentTemplate>
                        <div style="padding:10px;">
                            <EditForm Model="@InputModel" OnValidSubmit="@SearchRecords">
                                <div class="form-row">
                                    <div class="form-group col-md-3">
                                        <p>District</p>
                                        <SfMultiSelect @bind-Value="@InputModel.DistrictId" Enabled="@isEnabled" TValue="int?[]" TItem="ADistrict" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_DistrictData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search District" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                            <MultiSelectFieldSettings Value="@nameof(ADistrict.DistrictId)" Text="@nameof(ADistrict.DistrictDescription)"></MultiSelectFieldSettings>
                                            <MultiSelectEvents TValue="int?[]" TItem="ADistrict" ValueChange="OnDistrictChange"></MultiSelectEvents>
                                        </SfMultiSelect>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <p>Sub-County</p>
                                        <SfMultiSelect @bind-Value="@InputModel.SubcountyId" TValue="int?[]" TItem="ASubcounty" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_SubcountyData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Sub-county" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                            <MultiSelectFieldSettings Value="@nameof(ASubcounty.SubcountyId)" Text="@nameof(ASubcounty.SubcountyDescription)"></MultiSelectFieldSettings>
                                            <MultiSelectEvents TValue="int?[]" TItem="ASubcounty" ValueChange="OnSubcountyChange"></MultiSelectEvents>
                                        </SfMultiSelect>
                                    </div>
                                    <div class="form-group col-md-3" hidden>
                                        <p>Parish</p>
                                        <SfMultiSelect @bind-Value="@InputModel.ParishId" TValue="int?[]" TItem="AParish" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_ParishData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Parish" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                            <MultiSelectFieldSettings Value="@nameof(AParish.ParishId)" Text="@nameof(AParish.ParishDescription)"></MultiSelectFieldSettings>
                                            <MultiSelectEvents TValue="int?[]" TItem="AParish" ValueChange="OnParishChange"></MultiSelectEvents>
                                        </SfMultiSelect>
                                    </div>
                                    <div class="form-group col-md-3" hidden>
                                        <p>Village</p>
                                        <SfMultiSelect @bind-Value="@InputModel.VillageId" TValue="int?[]" TItem="AVillage" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_VillageData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Village" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                            <MultiSelectFieldSettings Value="@nameof(AVillage.VillageId)" Text="@nameof(AVillage.VillageDescription)"></MultiSelectFieldSettings>
                                        </SfMultiSelect>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <BSButton Color="Color.Primary" ButtonType="BlazorStrap.ButtonType.Submit">Search</BSButton>
                                        <BSButton Color="Color.Secondary" ButtonType="BlazorStrap.ButtonType.Button" @onclick="ClearSearchBtnClick">Clear Search</BSButton>
                                    </div>
                                    <div class="form-group col-md-12">
                                        <DataAnnotationsValidator />
                                        <ValidationSummary />
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </ContentTemplate>
                </AccordionItem>
            </AccordionItems>
        </SfAccordion>
    </div>
    <div class="form-group col-md-12">
        <SfGrid @ref="VslaGroupShareOutHeaderGrid" TValue="VslaGroupShareOutHeader" Query="@MainQuery" Width="100%"
                Toolbar="@(new string[] {"Add","Edit","Delete","Update","Cancel","ColumnChooser"})" AllowGrouping="false" ShowColumnChooser="true" AllowTextWrap="true"
                AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true">
            <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
            <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
            <SfDataManager AdaptorInstance="@typeof(VslaGroupShareOutHeaderAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
            <GridEvents OnActionBegin="OnVslaGroupShareOutHeaderActionBegin" OnActionComplete="@OnVslaGroupShareOutHeaderActionComplete" TValue="VslaGroupShareOutHeader"></GridEvents>
            <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog">
                <Template Context="VslaGroupShareOutHeaderContext">
                    @{
                        VslaGroupShareOutHeaderReviewData = (VslaGroupShareOutHeaderContext as VslaGroupShareOutHeader);
                        <div style="margin-top: 10px; padding: 10px; border-color: black; border-width: 2px; border-style: solid; ">
                            <div class="form-row">
                                <div class="form-group col-md-12" hidden>
                                    <SfNumericTextBox @bind-Value="@VslaGroupShareOutHeaderReviewData.VslashareOutHeaderId" Enabled="false"></SfNumericTextBox>
                                </div>
                                <div class="form-group col-md-12">
                                    <h4 style="text-align:center;">USAID ICARE VSLA ACTION AUDIT (SHARE OUT) TOOL</h4>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>District</p>
                                    <SfDropDownList @bind-Value="@(VslaGroupShareOutHeaderReviewData.DistrictId)" Enabled="true" TItem="ADistrict" TValue="int?" DataSource="@DistrictData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                        <DropDownListFieldSettings Value="@nameof(ADistrict.DistrictId)" Text="@nameof(ADistrict.DistrictDescription)"></DropDownListFieldSettings>
                                        <DropDownListEvents TItem="ADistrict" TValue="int?" ValueChange="OnADistrictChange"></DropDownListEvents>
                                    </SfDropDownList>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>Sub-County</p>
                                    <SfDropDownList @bind-Value="@(VslaGroupShareOutHeaderReviewData.SubcountyId)" Enabled="true" TItem="ASubcounty" TValue="int?" DataSource="@_SubcountyData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                        <DropDownListFieldSettings Value="@nameof(ASubcounty.SubcountyId)" Text="@nameof(ASubcounty.SubcountyDescription)"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>Cycle Saving start Date</p>
                                    <SfDatePicker @bind-Value="@(VslaGroupShareOutHeaderReviewData.CycleSavingStartDate)" Format="dd/MM/yyyy" Placeholder="Enter Date and time" FloatLabelType="FloatLabelType.Never"> </SfDatePicker>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>Group Name </p>
                                    <SfDropDownList @bind-Value="@(VslaGroupShareOutHeaderReviewData.GroupId)" Enabled="true" TItem="AGroups" TValue="int?" DataSource="@GroupsData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                        <DropDownListFieldSettings Value="@nameof(AGroups.GroupId)" Text="@nameof(AGroups.GroupName)"></DropDownListFieldSettings>
                                        <DropDownListEvents TItem="AGroups" TValue="int?" ValueChange="OnGroupsChange"></DropDownListEvents>
                                    </SfDropDownList>
                                </div>
                                
                                <div class="form-group col-md-3">
                                    <p>Cycle</p>
                                    <SfDropDownList @bind-Value="@(VslaGroupShareOutHeaderReviewData.GroupCycleId)" Enabled="true" TItem="AGroupCycle" TValue="int?" DataSource="@GroupCycleData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                        <DropDownListFieldSettings Value="@nameof(AGroupCycle.GroupCycleId)" Text="@nameof(AGroupCycle.GroupCycleDesc)"></DropDownListFieldSettings>
                                        <DropDownListEvents TItem="AGroupCycle" TValue="int" ValueChange="OnGroupCycleChange"></DropDownListEvents>
                                    </SfDropDownList>
                                </div>
                                <div class="form-group col-md-3" hidden>
                                    <p>Group Name</p>
                                    <SfDropDownList @bind-Value="@(VslaGroupShareOutHeaderReviewData.GroupCompositionCode)" PopupWidth="150%" Enabled="true" TItem="ViewGroupComposition" TValue="int?" DataSource="@GroupCompositionData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                        <DropDownListTemplates TItem="ViewGroupComposition">
                                            <ItemTemplate>
                                                <div style="margin-left:10px;">
                                                    <table>
                                                        <tr>
                                                            <td><p>Code:@((context as ViewGroupComposition).GroupCode)</p></td>
                                                            <td><p style="margin-left:10px;">Name: @((context as ViewGroupComposition).GroupName)</p></td>
                                                            <td><p style="margin-left:10px;">Cycle :@((context as ViewGroupComposition).GroupCycleDesc)</p></td>
                                                        </tr>
                                                    </table>
                                                </div>
                                            </ItemTemplate>
                                            <ValueTemplate>
                                                <div>
                                                    <p style="margin-left:10px;">@((context as ViewGroupComposition).GroupCode) | @((context as ViewGroupComposition).GroupName) | @((context as ViewGroupComposition).GroupCycleDesc)</p>
                                                </div>
                                            </ValueTemplate>
                                        </DropDownListTemplates>
                                        <DropDownListFieldSettings Value="@nameof(ViewGroupComposition.GroupCompositionCode)" Text="@nameof(ViewGroupComposition.GroupName)" GroupBy="@(nameof(ViewGroupComposition.GroupTypeDesc))"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>Total Dividends paid this Cycle (UGX)</p>
                                    <SfNumericTextBox @bind-Value="@VslaGroupShareOutHeaderReviewData.TotalDividentPaid" Enabled="true"></SfNumericTextBox>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>Old share Value</p>
                                    <SfNumericTextBox @bind-Value="@VslaGroupShareOutHeaderReviewData.OldShareValue" Enabled="true"></SfNumericTextBox>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>Share out date</p>
                                    <SfDatePicker @bind-Value="@(VslaGroupShareOutHeaderReviewData.ShareOutDate)" Format="dd/MM/yyyy" Placeholder="Enter Date and time" FloatLabelType="FloatLabelType.Never"> </SfDatePicker>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>Group Code </p>
                                    <SfDropDownList @bind-Value="@(VslaGroupShareOutHeaderReviewData.GroupCode)" Enabled="true" TItem="ViewGroupCode" TValue="string" DataSource="@ViewGroupCodeData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                        <DropDownListFieldSettings Value="@nameof(ViewGroupCode.GroupCode)" Text="@nameof(ViewGroupCode.GroupCode)"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>Write of this cycle</p>
                                    <SfTextBox Multiline="false" @bind-Value="@(VslaGroupShareOutHeaderReviewData.WriteOfThisCycle)" Enabled="true" Placeholder="Please enter" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>CBT name</p>
                                    <SfTextBox Multiline="false" @bind-Value="@(VslaGroupShareOutHeaderReviewData.Cbtname)" Enabled="true" Placeholder="Please enter the Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>Total cash available to be shared</p>
                                    <SfNumericTextBox @bind-Value="@VslaGroupShareOutHeaderReviewData.TotalCashAvailableToBeShared" Enabled="true"></SfNumericTextBox>
                                </div>
                                <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>

                                @if (VslaGroupShareOutHeaderReviewData.GroupCompositionCode > 0 && VslaGroupShareOutHeaderReviewData.GroupCycleId > 0 && VslaGroupShareOutHeaderReviewData.CycleSavingStartDate != null && VslaGroupShareOutHeaderReviewData.TotalDividentPaid != null)
                                {
                                    <div class="form-group col-md-12">
                                        <h4>Direct Beneficiaries</h4>
                                    </div>
                                    <div class="form-group col-md-12">
                                        @{
                                            var mQuery = new Query().AddParams("GroupCompositionCode", VslaGroupShareOutHeaderReviewData.GroupCompositionCode);
                                            if (VslaGroupShareOutHeaderReviewData.VslashareOutHeaderId > 0)
                                            {
                                                mQuery.AddParams("VSLAShareOutHeaderId", VslaGroupShareOutHeaderReviewData.VslashareOutHeaderId);
                                            }
                                        }
                                        <SfGrid @ref="VslaGroupShareOutDirectMemberGrid" TValue="spVSLA_Group_ShareOut_Direct_MemberGetAllResult" AllowPaging="true" AllowFiltering="true" Query="@mQuery"
                                                GridLines="GridLine.Both" AllowTextWrap="true" AllowSelection="true" AllowGrouping="false" Toolbar="@(new string[] {"Edit","Delete","Update","Cancel","ColumnChooser"})">
                                            <GridPageSettings PageSize="20"></GridPageSettings>
                                            <SfDataManager AdaptorInstance="@typeof(ShareOutDirectMemberAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
                                            <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" ShowConfirmDialog="false" Mode="@EditMode.Dialog">
                                                <Template Context="VslaGroupDirectMemberContext">
                                                    @{
                                                        var VslaGroupDirectMemberReviewData = (VslaGroupDirectMemberContext as spVSLA_Group_ShareOut_Direct_MemberGetAllResult);
                                                        <div class="form-row" style="padding:10px;">
                                                            <div class="form-group col-md-12" hidden>
                                                                <SfNumericTextBox @bind-Value="@VslaGroupDirectMemberReviewData.VSLAShareOutDirectMemberId" Enabled="false"></SfNumericTextBox>
                                                            </div>
                                                            <div class="form-group col-md-12" hidden>
                                                                <SfNumericTextBox @bind-Value="@VslaGroupDirectMemberReviewData.VSLAShareOutHeaderId" Enabled="false"></SfNumericTextBox>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>
                                                                    HH INDIVIDUAL CODE
                                                                </p>
                                                                <p>@VslaGroupDirectMemberReviewData.HouseHoldMemberCode</p>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>
                                                                    NAME
                                                                </p>
                                                                <p>@VslaGroupDirectMemberReviewData.FullName</p>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>
                                                                    Sex
                                                                </p>
                                                                <p>@VslaGroupDirectMemberReviewData.GenderDescription</p>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>Total number of shares bought</p>
                                                                <SfNumericTextBox @bind-Value="@VslaGroupDirectMemberReviewData.Total_number_of_shares_bought" Enabled="true"></SfNumericTextBox>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>Total saving</p>
                                                                <SfNumericTextBox @bind-Value="@VslaGroupDirectMemberReviewData.Total_Saving" Enabled="true"></SfNumericTextBox>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>New share Value</p>
                                                                <SfNumericTextBox @bind-Value="@VslaGroupDirectMemberReviewData.New_share_Value" Enabled="true"></SfNumericTextBox>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>Calculated amount to be shared out</p>
                                                                <SfNumericTextBox @bind-Value="@VslaGroupDirectMemberReviewData.Calculated_amount_to_be_shared_out" Enabled="true"></SfNumericTextBox>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>Actual amount shared</p>
                                                                <SfNumericTextBox @bind-Value="@VslaGroupDirectMemberReviewData.Actual_amount_shared" Enabled="true"></SfNumericTextBox>
                                                            </div>
                                                        </div>
                                                    }
                                                </Template>
                                            </GridEditSettings>
                                            @*<GridSearchSettings IgnoreCase="true"></GridSearchSettings>*@
                                            <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Both"></GridSelectionSettings>
                                            <GridEvents OnActionComplete="@TemplateActionComplete" OnActionBegin="@VslaGroupDirectMemberActionBegin" TValue="spVSLA_Group_ShareOut_Direct_MemberGetAllResult"></GridEvents>
                                            @*<GridEvents CellSaved="OnCellSaved" OnActionComplete="TemplateActionComplete" OnBatchSave="BatchSaveHandler" QueryCellInfo="QueryCellInfoHandler" TValue="CouncilofDecisionsCountry"></GridEvents>*@
                                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                            <GridColumns>
                                                <GridColumn HeaderText="Manage Records" Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left">
                                                    <GridCommandColumns>
                                                        <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="Edit" })" Title="Edit"></GridCommandColumn>
                                                    </GridCommandColumns>
                                                </GridColumn>
                                                <GridColumn Field=@nameof(spVSLA_Group_ShareOut_Direct_MemberGetAllResult.VSLAShareOutDirectMemberId) Visible="false" HeaderText="Graduation Checklist Detail Id" IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="110"> </GridColumn>
                                                <GridColumn Field=@nameof(spVSLA_Group_ShareOut_Direct_MemberGetAllResult.HouseHoldMemberCode) Visible="true" HeaderText="HouseHold Member Code" Width="200"></GridColumn>
                                                <GridColumn Field=@nameof(spVSLA_Group_ShareOut_Direct_MemberGetAllResult.FullName) HeaderText="Name" Width="200"></GridColumn>
                                                <GridColumn Field=@nameof(spVSLA_Group_ShareOut_Direct_MemberGetAllResult.Total_number_of_shares_bought) Visible="true" HeaderText="Total number of shares bought" TextAlign="TextAlign.Left" Width="180" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                                                <GridColumn Field=@nameof(spVSLA_Group_ShareOut_Direct_MemberGetAllResult.Total_Saving) Visible="true" HeaderText="Total saving" TextAlign="TextAlign.Left" Width="180" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                                                <GridColumn Field=@nameof(spVSLA_Group_ShareOut_Direct_MemberGetAllResult.New_share_Value) Visible="true" HeaderText="New share Value" TextAlign="TextAlign.Left" Width="180" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                                                <GridColumn Field=@nameof(spVSLA_Group_ShareOut_Direct_MemberGetAllResult.Calculated_amount_to_be_shared_out) Visible="true" HeaderText="Calculated amount to be shared out" TextAlign="TextAlign.Left" Width="180" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                                                <GridColumn Field=@nameof(spVSLA_Group_ShareOut_Direct_MemberGetAllResult.Actual_amount_shared) Visible="true" HeaderText="Actual amount shared" TextAlign="TextAlign.Left" Width="180" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                                            </GridColumns>
                                        </SfGrid>
                                    </div>
                                    <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                    <div class="form-group col-md-12">
                                        <h4>Indirect Beneficiaries</h4>
                                    </div>
                                    <div>
                                        <p><b>Note:</b> All Indirect Beneficiaries should be given codes in this order.  Starting with the Indirect District Code (IBU), then Sub county code (01 for Budhaya), then VSLA+ group Code (starting V01), then HH Code (Starting with 1000 for every group) and Lastly the Individual Code (Starting with 01) e.g.<b>IBU-01-V01-1000-01</b>.  </p>
                                        <p>In instances where there are two (2) or more indirect beneficiaries from the same Household, the last individual code should be changed e.g. <b>IBU-01-V01-1000-01</b> for One HH member then,<b>IBU-01-V01-1000-02</b>  for the next member and so on.   </p>
                                    </div>
                                    <div class="form-group col-md-12">
                                        <SfGrid @ref="VslaGroupShareOutIndirectMemberGrid" TValue="spVSLAGroupShareOutIndirectMemberGetAllResult" AllowPaging="true" AllowFiltering="true" Query="@mQuery"
                                                GridLines="GridLine.Both" AllowTextWrap="true" AllowSelection="true" AllowGrouping="false" Toolbar="@(new string[] {"Add","Edit","Delete","Update","Cancel","ColumnChooser"})">
                                            <GridPageSettings PageSize="20"></GridPageSettings>
                                            <SfDataManager AdaptorInstance="@typeof(ShareOutIndirectMemberAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
                                            <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" ShowConfirmDialog="false" Mode="@EditMode.Dialog">
                                                <Template Context="VslaGroupShareOutIndirectMemberContext">
                                                    @{
                                                        var VslaGroupShareOutIndirectMemberReviewData = (VslaGroupShareOutIndirectMemberContext as spVSLAGroupShareOutIndirectMemberGetAllResult);
                                                        <div class="form-row" style="padding:10px;">
                                                            <div class="form-group col-md-12" hidden>
                                                                <SfNumericTextBox @bind-Value="@VslaGroupShareOutIndirectMemberReviewData.VSLAShareOutHeaderId" Enabled="false"></SfNumericTextBox>
                                                            </div>
                                                            <div class="form-group col-md-12" hidden>
                                                                <SfNumericTextBox @bind-Value="@VslaGroupShareOutIndirectMemberReviewData.VSLAShareOutInDirectMemberId" Enabled="false"></SfNumericTextBox>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>
                                                                    Indirect Member Code
                                                                </p>
                                                                <p>@VslaGroupShareOutIndirectMemberReviewData.IndirectMemberCode</p>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>Name</p>
                                                                <p>@VslaGroupShareOutIndirectMemberReviewData.MemberName</p>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>Total number of shares bought</p>
                                                                <SfNumericTextBox @bind-Value="@VslaGroupShareOutIndirectMemberReviewData.Total_number_of_shares_bought" Enabled="true"></SfNumericTextBox>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>Total saving</p>
                                                                <SfNumericTextBox @bind-Value="@VslaGroupShareOutIndirectMemberReviewData.Total_Saving" Enabled="true"></SfNumericTextBox>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>New share Value</p>
                                                                <SfNumericTextBox @bind-Value="@VslaGroupShareOutIndirectMemberReviewData.New_share_Value" Enabled="true"></SfNumericTextBox>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>Calculated amount to be shared out</p>
                                                                <SfNumericTextBox @bind-Value="@VslaGroupShareOutIndirectMemberReviewData.Calculated_amount_to_be_shared_out" Enabled="true"></SfNumericTextBox>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>Actual amount shared</p>
                                                                <SfNumericTextBox @bind-Value="@VslaGroupShareOutIndirectMemberReviewData.Actual_amount_shared" Enabled="true"></SfNumericTextBox>
                                                            </div>
                                                        </div>
                                                    }
                                                </Template>
                                            </GridEditSettings>
                                            @*<GridSearchSettings IgnoreCase="true"></GridSearchSettings>*@
                                            <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Both"></GridSelectionSettings>
                                            <GridEvents OnActionComplete="@VslaGroupShareOutIndirectMemberActionComplete" OnActionBegin="@VslaGroupShareOutIndirectMemberActionBegin" TValue="spVSLAGroupShareOutIndirectMemberGetAllResult"></GridEvents>
                                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                            <GridColumns>
                                                <GridColumn HeaderText="Manage Records" Width="80" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left">
                                                    <GridCommandColumns>
                                                        <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="Edit" })" Title="Edit"></GridCommandColumn>
                                                    </GridCommandColumns>
                                                </GridColumn>
                                                <GridColumn Field=@nameof(spVSLAGroupShareOutIndirectMemberGetAllResult.VSLAShareOutInDirectMemberId) Visible="false" HeaderText="Graduation Checklist Detail Id" IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="110"> </GridColumn>
                                                <GridColumn Field=@nameof(spVSLAGroupShareOutIndirectMemberGetAllResult.IndirectMemberCode) Visible="true" HeaderText="Indirect Member Code" Width="200"></GridColumn>
                                                <GridColumn Field=@nameof(spVSLAGroupShareOutIndirectMemberGetAllResult.MemberName) HeaderText="Member Name" Width="200"></GridColumn>
                                                <GridColumn Field=@nameof(spVSLAGroupShareOutIndirectMemberGetAllResult.Total_number_of_shares_bought) Visible="true" HeaderText="Total number of shares bought" TextAlign="TextAlign.Left" Width="180" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                                                <GridColumn Field=@nameof(spVSLAGroupShareOutIndirectMemberGetAllResult.Total_Saving) Visible="true" HeaderText="Total saving" TextAlign="TextAlign.Left" Width="180" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                                                <GridColumn Field=@nameof(spVSLAGroupShareOutIndirectMemberGetAllResult.New_share_Value) Visible="true" HeaderText="New share Value" TextAlign="TextAlign.Left" Width="180" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                                                <GridColumn Field=@nameof(spVSLAGroupShareOutIndirectMemberGetAllResult.Calculated_amount_to_be_shared_out) Visible="true" HeaderText="Calculated amount to be shared out" TextAlign="TextAlign.Left" Width="180" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                                                <GridColumn Field=@nameof(spVSLAGroupShareOutIndirectMemberGetAllResult.Actual_amount_shared) Visible="true" HeaderText="Actual amount shared" TextAlign="TextAlign.Left" Width="180" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                                            </GridColumns>
                                        </SfGrid>
                                    </div>
                                    <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                }
                                <div class="form-group col-md-6">
                                    <p>Chair person’s Name</p>
                                    <SfTextBox Multiline="false" @bind-Value="@(VslaGroupShareOutHeaderReviewData.ChairPersonName)" Enabled="true" Placeholder="Pleses enter the name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                </div>
                                <div class="form-group col-md-6">
                                    <p>Tel</p>
                                    <SfTextBox Multiline="false" @bind-Value="@(VslaGroupShareOutHeaderReviewData.ChairPersonTele)" Enabled="true" Placeholder="Pleses enter the Phone Number" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                </div>
                                <div class="form-group col-md-6">
                                    <p>Secretary’s Name</p>
                                    <SfTextBox Multiline="false" @bind-Value="@(VslaGroupShareOutHeaderReviewData.SecretaryName)" Enabled="true" Placeholder="Pleses enter the name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                </div>
                                <div class="form-group col-md-6">
                                    <p>Tel:</p>
                                    <SfTextBox Multiline="false" @bind-Value="@(VslaGroupShareOutHeaderReviewData.SecretaryTele)" Enabled="true" Placeholder="Pleses enter the Phone Number" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                </div>
                                <div class="form-group col-md-6">
                                    <p>Treasurer’s Name</p>
                                    <SfTextBox Multiline="false" @bind-Value="@(VslaGroupShareOutHeaderReviewData.TreasurerName)" Enabled="true" Placeholder="Pleses enter the name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                </div>
                                <div class="form-group col-md-6">
                                    <p>Tel</p>
                                    <SfTextBox Multiline="false" @bind-Value="@(VslaGroupShareOutHeaderReviewData.TreasurerTele)" Enabled="true" Placeholder="Pleses enter the Phone Number" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                </div>
                            </div>
                        </div>
                    }
                </Template>
                <FooterTemplate>
                    <SfButton CssClass="e-btn e-success" OnClick="SaveVslaGroupShareOutHeaderBtnClick"> Save Form</SfButton>
                    <SfButton CssClass="e-btn e-danger" OnClick="CancelVslaGroupShareOutHeaderBtnClick"> Cancel</SfButton>
                </FooterTemplate>
            </GridEditSettings>
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
            <GridPageSettings PageSize="20"></GridPageSettings>
            <GridColumns>
                @*<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>*@
                <GridColumn HeaderText="Manage Records" Width="120" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left">
                    <GridCommandColumns>
                        <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="Edit" })" Title="Edit"></GridCommandColumn>
                    </GridCommandColumns>
                </GridColumn>
                <GridColumn Field=@nameof(VslaGroupShareOutHeader.VslashareOutHeaderId) HeaderText="Group Composition Id" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
                <GridForeignColumn Field=@nameof(VslaGroupShareOutHeader.DistrictId) HeaderText="District" ForeignKeyField="@nameof(ADistrict.DistrictId)" ForeignKeyValue="@nameof(ADistrict.DistrictDescription)" ForeignDataSource="@DistrictData" Width="200"></GridForeignColumn>
                <GridForeignColumn Field=@nameof(VslaGroupShareOutHeader.SubcountyId) HeaderText="Sub-County" ForeignKeyField="@nameof(ASubcounty.SubcountyId)" ForeignKeyValue="@nameof(ASubcounty.SubcountyDescription)" ForeignDataSource="@SubcountyData" Width="200"></GridForeignColumn>
                <GridColumn Field=@nameof(VslaGroupShareOutHeader.CycleSavingStartDate) HeaderText="Cycle Saving start Date" Format="dd/MM/yyyy" EditType="EditType.DatePickerEdit" Width="160"></GridColumn>
                <GridForeignColumn Field=@nameof(VslaGroupShareOutHeader.GroupCompositionCode) HeaderText="Group Name"  ForeignKeyField="@nameof(ViewGroupComposition.GroupCompositionCode)" ForeignKeyValue="@nameof(ViewGroupComposition.GroupName)" ForeignDataSource="@GroupCompositionData" Width="220"></GridForeignColumn>
                <GridColumn Field=@nameof(VslaGroupShareOutHeader.GroupCode) HeaderText="Group Code" Width="120"></GridColumn>
                <GridForeignColumn Field=@nameof(VslaGroupShareOutHeader.GroupCycleId) HeaderText=" Cycle"  ForeignKeyField="@nameof(AGroupCycle.GroupCycleId)" ForeignKeyValue="@nameof(AGroupCycle.GroupCycleDesc)" ForeignDataSource="@GroupCycleData" Width="220"></GridForeignColumn>
                <GridColumn Field=@nameof(VslaGroupShareOutHeader.TotalDividentPaid) HeaderText="Total Dividends paid this Cycle (UGX)" Width="220"></GridColumn>
                <GridColumn Field=@nameof(VslaGroupShareOutHeader.OldShareValue) HeaderText="Old share Value" Width="220"></GridColumn>
                <GridColumn Field=@nameof(VslaGroupShareOutHeader.ShareOutDate) HeaderText="Share out date" Format="dd/MM/yyyy" EditType="EditType.DatePickerEdit" Width="160"></GridColumn>
                <GridColumn Field=@nameof(VslaGroupShareOutHeader.WriteOfThisCycle) HeaderText="Write of this cycle" Width="220"></GridColumn>
                <GridColumn Field=@nameof(VslaGroupShareOutHeader.Cbtname) HeaderText="CBT name" Width="220"></GridColumn>
                <GridColumn Field=@nameof(VslaGroupShareOutHeader.TotalCashAvailableToBeShared) HeaderText="Total cash available to be shared" Width="220"></GridColumn>
                <GridColumn Field=@nameof(VslaGroupShareOutHeader.ChairPersonName) HeaderText="Chair person’s Name" Width="220"></GridColumn>
                <GridColumn Field=@nameof(VslaGroupShareOutHeader.SecretaryName) HeaderText="Secretary’s Name" Width="220"></GridColumn>
                <GridColumn Field=@nameof(VslaGroupShareOutHeader.TreasurerName) HeaderText="Treasurer’s Name" Width="220"></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>
@code {
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
        {
            new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
            new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
            new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
            new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
        };
    #endregion Toasters
    SfGrid<VslaGroupShareOutHeader> VslaGroupShareOutHeaderGrid;
    private VslaGroupShareOutHeader VslaGroupShareOutHeaderReviewData { get; set; }

    SfGrid<spVSLA_Group_ShareOut_Direct_MemberGetAllResult> VslaGroupShareOutDirectMemberGrid;
    List<spVSLA_Group_ShareOut_Direct_MemberGetAllResult> VslaGroupDirectMemberDatasource = new();

    SfGrid<spVSLAGroupShareOutIndirectMemberGetAllResult> VslaGroupShareOutIndirectMemberGrid;
    List<spVSLAGroupShareOutIndirectMemberGetAllResult> VslaGroupShareOutIndirectMemberDatasource = new();

    List<ViewHouseHoldMembers> HouseHoldMembersData { get; set; }
    List<ASubcounty> SubcountyData { get; set; }
    List<AParish> ParishData { get; set; }
    List<AVillage> VillageData { get; set; }
    List<AGender> GenderData { get; set; }
    List<AGroupPosition> GroupPositionData { get; set; }
    List<ADistrict> DistrictData { get; set; }
    List<ViewGroupComposition> GroupCompositionData { get; set; }
    List<AGroupCycle> GroupCycleData { get; set; }
    List<AGroups> GroupsData { get; set; }
    List<ViewGroupCode> ViewGroupCodeData { get; set; }

    public Query MainQuery = new Query();
    public Query ChildQuery = new Query();

    private SearchPanel InputModel = new();



    List<AVillage> _VillageData { get; set; }
    List<AParish> _ParishData { get; set; }
    List<ASubcounty> _SubcountyData { get; set; }
    List<ADistrict> _DistrictData { get; set; }
    bool isEnabled { get; set; } = false;

    private async Task SaveVslaGroupShareOutHeaderBtnClick()
    {
        await VslaGroupShareOutDirectMemberGrid.EndEditAsync();
        await VslaGroupShareOutHeaderGrid.EndEditAsync();
    }
    private async Task CancelVslaGroupShareOutHeaderBtnClick()
    {
        await VslaGroupShareOutDirectMemberGrid.EndEditAsync();
        await VslaGroupShareOutHeaderGrid.CloseEditAsync();
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            if (!userManagement.IsSignedIn())
            {
                Navigation.NavigateTo("/", true);
            }
            else
            {
                using (var db = new MUCOBADIContext())
                {
                    SubcountyData = db.ASubcounty.AsNoTracking().ToList();
                    ParishData = db.AParish.AsNoTracking().ToList();
                    GenderData = db.AGender.AsNoTracking().ToList();
                    VillageData = db.AVillage.AsNoTracking().ToList();
                    GroupPositionData = db.AGroupPosition.AsNoTracking().ToList();
                    DistrictData = db.ADistrict.AsNoTracking().ToList();
                    //HouseHoldMembersData = db.ViewHouseHoldMembers.AsNoTracking().ToList();
                    GroupCompositionData = db.ViewGroupComposition.AsNoTracking().ToList();
                    GroupCycleData = db.AGroupCycle.AsNoTracking().ToList();
                    GroupsData = db.AGroups.AsNoTracking().ToList();
                    ViewGroupCodeData = db.ViewGroupCode.AsNoTracking().ToList();

                    InputModel = new();
                    _DistrictData = db.ADistrict.AsNoTracking().ToList();
                    var user = db.ViewUserManagement.FirstOrDefault(o => o.UserName == userManagement.GetUserName());
                    if (!user.RoleName.Contains("Super Administrator") && !user.RoleName.Contains("Administrator") && !user.RoleName.Contains("mel director") && !user.RoleName.Contains("mel manager") && !user.RoleName.Contains("cluster manager"))
                    {
                        var districtlist = userManagement.GetUserDistrict();
                        if (districtlist != null && districtlist.Count > 0)
                        {
                            List<int?> m = new List<int?>();
                            foreach (var n in districtlist)
                            {
                                m.Add(n);
                            }

                            InputModel.DistrictId = m.ToArray();
                            _SubcountyData = db.ASubcounty.AsNoTracking().ToList().Where(o => districtlist.Any(a => a == o.DistrictId)).ToList();
                            MainQuery = new Query();
                            MainQuery.AddParams("DistrictId", string.Join(",", districtlist.ToArray()));
                        }
                        var subcountyList = userManagement.GetUserSubcounty();
                        if (subcountyList != null && subcountyList.Count > 0)
                        {
                            List<int?> m = new List<int?>();
                            foreach (var n in subcountyList)
                            {
                                m.Add(n);
                            }
                            InputModel.SubcountyId = m.ToArray();
                            _ParishData = db.AParish.AsNoTracking().ToList().Where(o => subcountyList.Any(a => a == o.SubcountyId)).ToList();
                            MainQuery = new Query();
                            MainQuery.AddParams("SubcountyId", string.Join(",", subcountyList.ToArray()));
                        }
                    }
                    else
                    {
                        isEnabled = true;
                    }


                }
            }

        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }

    private void SearchRecords()
    {
        try
        {
            MainQuery = new Query();
            if (InputModel.DistrictId != null)
            {
                MainQuery.AddParams("DistrictId", string.Join(",", InputModel.DistrictId));
            }
            if (InputModel.SubcountyId != null)
            {
                MainQuery.AddParams("SubcountyId", string.Join(",", InputModel.SubcountyId));
            }
            if (InputModel.ParishId != null)
            {
                MainQuery.AddParams("ParishId", string.Join(",", InputModel.ParishId));
            }
            if (InputModel.VillageId != null)
            {
                MainQuery.AddParams("VillageId", string.Join(",", InputModel.VillageId));
            }
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    private void ClearSearchBtnClick()
    {
        InputModel = new();
        MainQuery = new Query();
        using (var db = new MUCOBADIContext())
        {
            var user = db.ViewUserManagement.FirstOrDefault(o => o.UserName == userManagement.GetUserName());
            if (!user.RoleName.Contains("Super Administrator") && !user.RoleName.Contains("Administrator") && !user.RoleName.Contains("mel director") && !user.RoleName.Contains("mel manager") && !user.RoleName.Contains("cluster manager"))
            {
                var districtlist = userManagement.GetUserDistrict();
                if (districtlist != null && districtlist.Count > 0)
                {
                    List<int?> m = new List<int?>();
                    foreach (var n in districtlist)
                    {
                        m.Add(n);
                    }

                    InputModel.DistrictId = m.ToArray();
                    _SubcountyData = db.ASubcounty.AsNoTracking().ToList().Where(o => districtlist.Any(a => a == o.DistrictId)).ToList();
                    MainQuery = new Query();
                    MainQuery.AddParams("DistrictId", string.Join(",", districtlist.ToArray()));
                }
                var subcountyList = userManagement.GetUserSubcounty();
                if (subcountyList != null && subcountyList.Count > 0)
                {
                    List<int?> m = new List<int?>();
                    foreach (var n in subcountyList)
                    {
                        m.Add(n);
                    }
                    InputModel.SubcountyId = m.ToArray();
                    _ParishData = db.AParish.AsNoTracking().ToList().Where(o => subcountyList.Any(a => a == o.SubcountyId)).ToList();
                    MainQuery = new Query();
                    MainQuery.AddParams("SubcountyId", string.Join(",", subcountyList.ToArray()));
                }
            }
            else
            {
                isEnabled = true;
            }
        }
    }

    private void OnGroupsChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AGroups> args)
    {
        if (args.ItemData != null)
        {
            using (var db = new MUCOBADIContext())
            {
                ViewGroupCodeData = db.ViewGroupCode.Where(o => o.GroupId == args.Value).AsNoTracking().ToList();
                if (VslaGroupShareOutHeaderReviewData.GroupCycleId > 0 && VslaGroupShareOutHeaderReviewData.GroupId != null)
                {
                    GroupCompositionData = db.ViewGroupComposition.Where(o => o.GroupId == args.Value && o.GroupCycleId == VslaGroupShareOutHeaderReviewData.GroupId).OrderBy(o => o.GroupCompositionCode).AsNoTracking().ToList();
                    var last = GroupCompositionData.LastOrDefault();
                    if (last != null)
                    {
                        VslaGroupShareOutHeaderReviewData.GroupCompositionCode = last.GroupCompositionCode;
                        VslaGroupShareOutHeaderReviewData.GroupCode = last.GroupCode;
                    }
                }
            }
        }
    }

    private void OnGroupCycleChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, AGroupCycle> args)
    {
        if (args.ItemData != null)
        {
            if (VslaGroupShareOutHeaderReviewData.GroupCycleId > 0 && VslaGroupShareOutHeaderReviewData.GroupId != null)
            {
                using (var db = new MUCOBADIContext())
                {
                    GroupCompositionData = db.ViewGroupComposition.Where(o => o.GroupCycleId == args.Value && o.GroupId == VslaGroupShareOutHeaderReviewData.GroupId).OrderBy(o => o.GroupCompositionCode).AsNoTracking().ToList();
                    var last = GroupCompositionData.LastOrDefault();
                    if (last != null)
                    {
                        VslaGroupShareOutHeaderReviewData.GroupCompositionCode = last.GroupCompositionCode;
                        VslaGroupShareOutHeaderReviewData.GroupCode = last.GroupCode;
                    }
                }
            }

        }
    }
    public void OnDistrictChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            using (var db = new MUCOBADIContext())
            {
                _SubcountyData = db.ASubcounty.Where(o => args.Value.Any(a => a == o.DistrictId) == true).AsNoTracking().ToList();
            }
        }
    }
    public void OnSubcountyChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            using (var db = new MUCOBADIContext())
            {
                _ParishData = db.AParish.Where(o => args.Value.Any(a => a == o.SubcountyId) == true).AsNoTracking().ToList();
            }
        }
    }
    public void OnParishChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            using (var db = new MUCOBADIContext())
            {
                _VillageData = db.AVillage.Where(o => args.Value.Any(a => a == o.ParishId) == true).AsNoTracking().ToList();
            }
        }
    }
    public void OnADistrictChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ADistrict> args)
    {
        if (args.ItemData != null)
        {
            using (var db = new MUCOBADIContext())
            {
                _SubcountyData = db.ASubcounty.Where(o => o.DistrictId == args.Value).AsNoTracking().ToList();
                HouseHoldMembersData = db.ViewHouseHoldMembers.AsNoTracking().Where(o=> o.DistrictId==args.Value).ToList();
            }
        }
    }

    #region Graduation Checklist Header
    public class VslaGroupShareOutHeaderAdapter : DataAdaptor
    {
        public IToastService toastService;
        //private UserManagement _userManagement;
        public VslaGroupShareOutHeaderAdapter(IToastService ts/*, UserManagement userManagement*/)
        {
            //_userManagement = userManagement;
            toastService = ts;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<VslaGroupShareOutHeader>();
            try
            {
                string DistrictId = null;
                string SubcountyId = null;
                string ParishId = null;
                string VillageId = null;
                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;
                    if (val.FirstOrDefault(o => o.Key == "DistrictId").Value != null)
                    {
                        DistrictId = val.FirstOrDefault(o => o.Key == "DistrictId").Value.ToString();
                    }
                    if (val.FirstOrDefault(o => o.Key == "SubcountyId").Value != null)
                    {
                        SubcountyId = val.FirstOrDefault(o => o.Key == "SubcountyId").Value.ToString();
                    }
                    if (val.FirstOrDefault(o => o.Key == "ParishId").Value != null)
                    {
                        ParishId = val.FirstOrDefault(o => o.Key == "ParishId").Value.ToString();
                    }
                    if (val.FirstOrDefault(o => o.Key == "VillageId").Value != null)
                    {
                        VillageId = val.FirstOrDefault(o => o.Key == "VillageId").Value.ToString();
                    }
                }

                string[] _district = new string[] { };
                if (!string.IsNullOrEmpty(DistrictId))
                {
                    _district = DistrictId.Split(',');
                }
                string[] _SubcountyId = new string[] { };
                if (!string.IsNullOrEmpty(SubcountyId))
                {
                    _SubcountyId = SubcountyId.Split(',');
                }
                string[] _ParishId = new string[] { };
                if (!string.IsNullOrEmpty(ParishId))
                {
                    _ParishId = ParishId.Split(',');
                }
                string[] _VillageId = new string[] { };
                if (!string.IsNullOrEmpty(VillageId))
                {
                    _VillageId = VillageId.Split(',');
                }

                using (var dbContext = new SPToCoreContext())
                {
                    data = await dbContext.VslaGroupShareOutHeader.Where(o => (_district.Length == 0 || (o.DistrictId != null && _district.Any(a => a == o.DistrictId.ToString()) == true)) &&
                (_SubcountyId.Length == 0 || (o.SubcountyId != null && _SubcountyId.Any(a => a == o.SubcountyId.ToString()) == true))).ToListAsync();
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<VslaGroupShareOutHeader>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override Object Insert(DataManager dataManager, object value, string key)
        {
            try
            {
                var val = (value as VslaGroupShareOutHeader);
                using (var db = new MUCOBADIContext())
                {
                    var exist = db.VslaGroupShareOutHeader.FirstOrDefault(o => o.VslashareOutHeaderId == val.VslashareOutHeaderId);
                    if (exist == null)
                    {
                        int id = 1;
                        var last = db.VslaGroupShareOutHeader.OrderBy(o => o.VslashareOutHeaderId).LastOrDefault();
                        if (last != null)
                        {
                            id = (last.VslashareOutHeaderId + 1);
                        }
                        val.VslashareOutHeaderId = id;
                        db.VslaGroupShareOutHeader.Add(val);
                        db.SaveChanges();
                        toastService.ShowSuccess("Record Saved Successfully", "Success");
                    }
                    else
                    {
                        db.Entry(exist).CurrentValues.SetValues(val);
                        db.Entry(exist).State = EntityState.Modified;
                        db.SaveChanges();
                        toastService.ShowSuccess("Record Savedpdated Successfully", "Success");
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message, "Error");
            }
            return value;
        }
        public override object Remove(DataManager dataManager, object value, string keyField, string key)
        {
            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                var val = (value as VslaGroupShareOutHeader);
                using (var db = new MUCOBADIContext())
                {
                    var exist = db.VslaGroupShareOutHeader.FirstOrDefault(o => o.VslashareOutHeaderId == val.VslashareOutHeaderId);
                    if (exist != null)
                    {
                        db.Entry(exist).CurrentValues.SetValues(val);
                        db.Entry(exist).State = EntityState.Modified;
                        await db.SaveChangesAsync();
                        toastService.ShowSuccess("Record updated Successfully", "Success");
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message, "Error");
            }
            return value;
        }
    }
    public async Task OnVslaGroupShareOutHeaderActionBegin(Syncfusion.Blazor.Grids.ActionEventArgs<VslaGroupShareOutHeader> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {
                //using (var db = new SPToCoreContext())
                //{
                //    _SubcountyData = db.ASubcounty.Where(o => o.DistrictId == args.Data.DistrictId).AsNoTracking().ToList();
                //    HouseHoldMembersData = db.ViewHouseHoldMembers.AsNoTracking().Where(o=> o.DistrictId==args.Data.DistrictId).ToList();
                //    //VslaGroupDirectMemberDatasource = await db.VslaGroupShareOutDirectMember.Where(o => o.VslashareOutHeaderId == args.RowData.VslashareOutHeaderId).ToListAsync();
                //    //VslaGroupShareOutIndirectMemberDatasource = await db.VslaGroupShareOutIndirectMember.Where(o => o.VslashareOutHeaderId == args.RowData.VslashareOutHeaderId).ToListAsync();
                //}
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {
                using (var db = new SPToCoreContext())
                {
                    //VslaGroupDirectMemberDatasource = await db.VslaGroupShareOutDirectMember.Where(o => o.VslashareOutHeaderId == args.RowData.VslashareOutHeaderId).ToListAsync();
                    //VslaGroupShareOutIndirectMemberDatasource = await db.VslaGroupShareOutIndirectMember.Where(o => o.VslashareOutHeaderId == args.RowData.VslashareOutHeaderId).ToListAsync();
                }
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (args.Data.GroupCompositionCode== 0)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please Enter the group name", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (args.Data.GroupCycleId== null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Cycle", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (args.Data.CycleSavingStartDate == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Cycle Saving start Date.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (args.Data.SubcountyId == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the sub-county.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (args.Data.DistrictId == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the District.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (String.IsNullOrEmpty(args.Data.WriteOfThisCycle))
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Write of this cycle.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (String.IsNullOrEmpty(args.Data.Cbtname))
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the CBT name.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (args.Data.TotalDividentPaid == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Total Dividends paid this Cycle (UGX).", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (args.Data.OldShareValue == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Old share Value.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (args.Data.TotalCashAvailableToBeShared == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Total cash available to be shared.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (String.IsNullOrEmpty(args.Data.ChairPersonName))
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Chair person’s Name ", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (String.IsNullOrEmpty(args.Data.ChairPersonTele))
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Chair person’s Phone number.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (String.IsNullOrEmpty(args.Data.SecretaryName))
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Secretary’s Name", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (String.IsNullOrEmpty(args.Data.SecretaryTele))
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Secretary’s Phone Number.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (String.IsNullOrEmpty(args.Data.TreasurerName))
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Treasurer’s Name", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (String.IsNullOrEmpty(args.Data.TreasurerTele))
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Treasurer’s Phone Number.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else
                {

                }
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    public void OnVslaGroupShareOutHeaderActionComplete(Syncfusion.Blazor.Grids.ActionEventArgs<VslaGroupShareOutHeader> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            VslaGroupShareOutHeaderGrid.PreventRender(false);
        }
        try{
            
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
                {
                    using (var db = new SPToCoreContext())
                    {
                        _SubcountyData = db.ASubcounty.Where(o => o.DistrictId == args.Data.DistrictId).AsNoTracking().ToList();
                        HouseHoldMembersData = db.ViewHouseHoldMembers.AsNoTracking().Where(o=> o.DistrictId==args.Data.DistrictId).ToList();
                        //VslaGroupDirectMemberDatasource = await db.VslaGroupShareOutDirectMember.Where(o => o.VslashareOutHeaderId == args.RowData.VslashareOutHeaderId).ToListAsync();
                        //VslaGroupShareOutIndirectMemberDatasource = await db.VslaGroupShareOutIndirectMember.Where(o => o.VslashareOutHeaderId == args.RowData.VslashareOutHeaderId).ToListAsync();
                    }
                }
        }
        catch(Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }

    public async Task CellSelectHandler(CellSelectEventArgs<VslaGroupShareOutDirectMember> args)
    {
        //get selected cell index
        var CellIndexes = await VslaGroupShareOutDirectMemberGrid.GetSelectedRowCellIndexes();

        //get the row and cell index
        var CurrentEditRowIndex = CellIndexes[0].Item1;
        var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

        //get the available fields
        var fields = await VslaGroupShareOutDirectMemberGrid.GetColumnFieldNames();
        //await VslaGroupShareOutDirectMemberGrid.ClearSelectionAsync();
        // edit the selected cell using the cell index and column name
        await VslaGroupShareOutDirectMemberGrid.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
    }
    public void TemplateActionComplete(ActionEventArgs<spVSLA_Group_ShareOut_Direct_MemberGetAllResult> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            VslaGroupShareOutDirectMemberGrid.PreventRender(false);
        }

    }
    public void VslaGroupShareOutIndirectMemberActionComplete(ActionEventArgs<spVSLAGroupShareOutIndirectMemberGetAllResult> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            VslaGroupShareOutIndirectMemberGrid.PreventRender(false);
        }

    }
    public async Task VslaGroupDirectMemberActionBegin(Syncfusion.Blazor.Grids.ActionEventArgs<spVSLA_Group_ShareOut_Direct_MemberGetAllResult> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (args.Data.VSLA_Group_Direct_Member_Id == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please Enter the Indirect Member Code", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.Total_number_of_shares_bought == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Total number of shares bought", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.Total_Saving == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Total saving", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.New_share_Value == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the New share Value", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.Calculated_amount_to_be_shared_out == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Calculated amount to be shared out", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.Actual_amount_shared == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Actual amount shared", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else
            {
                if (VslaGroupShareOutHeaderReviewData.VslashareOutHeaderId == 0)
                {
                    using (var db = new MUCOBADIContext())
                    {
                        var exist = db.VslaGroupShareOutHeader.FirstOrDefault(o => o.VslashareOutHeaderId == VslaGroupShareOutHeaderReviewData.VslashareOutHeaderId);
                        if (exist == null)
                        {
                            int id = 1;
                            var last = db.VslaGroupShareOutHeader.OrderBy(o => o.VslashareOutHeaderId).LastOrDefault();
                            if (last != null)
                            {
                                id = (last.VslashareOutHeaderId + 1);
                            }
                            VslaGroupShareOutHeaderReviewData.VslashareOutHeaderId = id;
                            args.Data.VSLAShareOutHeaderId = id;
                            db.VslaGroupShareOutHeader.Add(VslaGroupShareOutHeaderReviewData);
                            db.SaveChanges();
                        }
                    }
                }
                else
                {
                    args.Data.VSLAShareOutHeaderId = VslaGroupShareOutHeaderReviewData.VslashareOutHeaderId;
                }
            }
        }
    }
    public async Task VslaGroupShareOutIndirectMemberActionBegin(Syncfusion.Blazor.Grids.ActionEventArgs<spVSLAGroupShareOutIndirectMemberGetAllResult> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (args.Data.VSLA_Group_Indirect_Member_Id==null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please Enter the Indirect Member Code", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.Total_number_of_shares_bought == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Total number of shares bought", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.Total_Saving == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Total saving", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.New_share_Value == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the New share Value", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.Calculated_amount_to_be_shared_out == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Calculated amount to be shared out", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.Actual_amount_shared == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Actual amount shared", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else
            {
                if (VslaGroupShareOutHeaderReviewData.VslashareOutHeaderId==0)
                {
                    using (var db = new MUCOBADIContext())
                    {
                        var exist = db.VslaGroupShareOutHeader.FirstOrDefault(o => o.VslashareOutHeaderId == VslaGroupShareOutHeaderReviewData.VslashareOutHeaderId);
                        if (exist == null)
                        {
                            int id = 1;
                            var last = db.VslaGroupShareOutHeader.OrderBy(o => o.VslashareOutHeaderId).LastOrDefault();
                            if (last != null)
                            {
                                id = (last.VslashareOutHeaderId + 1);
                            }
                            VslaGroupShareOutHeaderReviewData.VslashareOutHeaderId = id;
                            args.Data.VSLAShareOutHeaderId = id;
                            db.VslaGroupShareOutHeader.Add(VslaGroupShareOutHeaderReviewData);
                            db.SaveChanges();
                        }
                    }
                }
                else
                {
                    args.Data.VSLAShareOutHeaderId = VslaGroupShareOutHeaderReviewData.VslashareOutHeaderId;
                }
            }
        }
    }
    #endregion Graduation Checklist Header
    #region Group Members
    public class ShareOutDirectMemberAdapter : DataAdaptor
    {
        public IToastService toastService;
        //private UserManagement _userManagement;
        public ShareOutDirectMemberAdapter(IToastService ts/*, UserManagement userManagement*/)
        {
            //_userManagement = userManagement;
            toastService = ts;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<spVSLA_Group_ShareOut_Direct_MemberGetAllResult>();
            try
            {
                int? GroupCompositionCode = null;
                int? VSLAShareOutHeaderId = null;
                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;
                    if (val.FirstOrDefault(o => o.Key == "VSLAShareOutHeaderId").Value != null)
                    {
                        VSLAShareOutHeaderId = Convert.ToInt32(val.FirstOrDefault(o => o.Key == "VSLAShareOutHeaderId").Value.ToString());
                    }
                    if (val.FirstOrDefault(o => o.Key == "GroupCompositionCode").Value != null)
                    {
                        GroupCompositionCode = Convert.ToInt32(val.FirstOrDefault(o => o.Key == "GroupCompositionCode").Value.ToString());
                    }
                }
                using (var dbContext = new SPToCoreContext())
                {
                    data = await dbContext.spVSLA_Group_ShareOut_Direct_MemberGetAllAsync(VSLAShareOutHeaderId, GroupCompositionCode);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<spVSLA_Group_ShareOut_Direct_MemberGetAllResult>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override Object Insert(DataManager dataManager, object value, string key)
        {
            try
            {
                var val = (value as spVSLA_Group_ShareOut_Direct_MemberGetAllResult);
                using (var db = new MUCOBADIContext())
                {
                    var _exist = db.VslaGroupShareOutDirectMember.FirstOrDefault(o => o.VslashareOutHeaderId == val.VSLAShareOutHeaderId && o.VslaGroupDirectMemberId == val.VSLA_Group_Direct_Member_Id);
                    if (_exist == null)
                    {
                        VslaGroupShareOutDirectMember m = new();
                        m.VslashareOutHeaderId = val.VSLAShareOutHeaderId.Value;
                        m.VslaGroupDirectMemberId = val.VSLA_Group_Direct_Member_Id;
                        m.TotalNumberOfSharesBought = val.Total_number_of_shares_bought;
                        m.TotalSaving = val.Total_Saving;
                        m.NewShareValue = val.New_share_Value;
                        m.CalculatedAmountToBeSharedOut = val.Calculated_amount_to_be_shared_out;
                        m.ActualAmountShared = val.Actual_amount_shared;
                        int id = 1;
                        var last = db.VslaGroupShareOutDirectMember.OrderBy(o => o.VslashareOutDirectMemberId).LastOrDefault();
                        if (last != null)
                        {
                            id = (last.VslashareOutDirectMemberId + 1);
                        }
                        m.VslashareOutDirectMemberId = id;
                        db.VslaGroupShareOutDirectMember.Add(m);
                        db.SaveChanges();
                    }
                    else
                    {
                        _exist.TotalNumberOfSharesBought = val.Total_number_of_shares_bought;
                        _exist.TotalSaving = val.Total_Saving;
                        _exist.NewShareValue = val.New_share_Value;
                        _exist.CalculatedAmountToBeSharedOut = val.Calculated_amount_to_be_shared_out;
                        _exist.ActualAmountShared = val.Actual_amount_shared;
                        db.Entry(_exist).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }
            return value;
        }
        public override object Remove(DataManager dataManager, object value, string keyField, string key)
        {
            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                var val = (value as spVSLA_Group_ShareOut_Direct_MemberGetAllResult);
                using (var db = new MUCOBADIContext())
                {
                    var _exist = db.VslaGroupShareOutDirectMember.FirstOrDefault(o => o.VslashareOutHeaderId == val.VSLAShareOutHeaderId && o.VslaGroupDirectMemberId == val.VSLA_Group_Direct_Member_Id);
                    if (_exist == null)
                    {
                        VslaGroupShareOutDirectMember m = new();
                        m.VslashareOutHeaderId = val.VSLAShareOutHeaderId.Value;
                        m.VslaGroupDirectMemberId = val.VSLA_Group_Direct_Member_Id;
                        m.TotalNumberOfSharesBought = val.Total_number_of_shares_bought;
                        m.TotalSaving = val.Total_Saving;
                        m.NewShareValue = val.New_share_Value;
                        m.CalculatedAmountToBeSharedOut = val.Calculated_amount_to_be_shared_out;
                        m.ActualAmountShared = val.Actual_amount_shared;
                        int id = 1;
                        var last = db.VslaGroupShareOutDirectMember.OrderBy(o => o.VslashareOutDirectMemberId).LastOrDefault();
                        if (last != null)
                        {
                            id = (last.VslashareOutDirectMemberId + 1);
                        }
                        m.VslashareOutDirectMemberId = id;
                        db.VslaGroupShareOutDirectMember.Add(m);
                        db.SaveChanges();
                    }
                    else
                    {
                        _exist.TotalNumberOfSharesBought = val.Total_number_of_shares_bought;
                        _exist.TotalSaving = val.Total_Saving;
                        _exist.NewShareValue = val.New_share_Value;
                        _exist.CalculatedAmountToBeSharedOut = val.Calculated_amount_to_be_shared_out;
                        _exist.ActualAmountShared = val.Actual_amount_shared;
                        db.Entry(_exist).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }
            return value;
        }
    }
    public class ShareOutIndirectMemberAdapter : DataAdaptor
    {
        public IToastService toastService;
        //private UserManagement _userManagement;
        public ShareOutIndirectMemberAdapter(IToastService ts/*, UserManagement userManagement*/)
        {
            //_userManagement = userManagement;
            toastService = ts;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<spVSLAGroupShareOutIndirectMemberGetAllResult>();
            try
            {
                int? GroupCompositionCode = null;
                int? VSLAShareOutHeaderId = null;
                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;
                    if (val.FirstOrDefault(o => o.Key == "VSLAShareOutHeaderId").Value != null)
                    {
                        VSLAShareOutHeaderId = Convert.ToInt32(val.FirstOrDefault(o => o.Key == "VSLAShareOutHeaderId").Value.ToString());
                    }
                    if (val.FirstOrDefault(o => o.Key == "GroupCompositionCode").Value != null)
                    {
                        GroupCompositionCode = Convert.ToInt32(val.FirstOrDefault(o => o.Key == "GroupCompositionCode").Value.ToString());
                    }
                }
                using (var dbContext = new SPToCoreContext())
                {
                    data = await dbContext.spVSLAGroupShareOutIndirectMemberGetAllAsync(VSLAShareOutHeaderId, GroupCompositionCode);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<spVSLAGroupShareOutIndirectMemberGetAllResult>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override Object Insert(DataManager dataManager, object value, string key)
        {
            try
            {
                var val = (value as spVSLAGroupShareOutIndirectMemberGetAllResult);
                using (var db = new MUCOBADIContext())
                {
                    var _exist = db.VslaGroupShareOutIndirectMember.FirstOrDefault(o => o.VslashareOutHeaderId == val.VSLAShareOutHeaderId && o.VslaGroupIndirectMemberId == val.VSLA_Group_Indirect_Member_Id);
                    if (_exist == null)
                    {
                        VslaGroupShareOutIndirectMember m = new();
                        m.VslashareOutHeaderId = val.VSLAShareOutHeaderId.Value;
                        m.VslaGroupIndirectMemberId = val.VSLA_Group_Indirect_Member_Id;
                        m.TotalNumberOfSharesBought = val.Total_number_of_shares_bought;
                        m.TotalSaving = val.Total_Saving;
                        m.NewShareValue = val.New_share_Value;
                        m.CalculatedAmountToBeSharedOut = val.Calculated_amount_to_be_shared_out;
                        m.ActualAmountShared = val.Actual_amount_shared;
                        int id = 1;
                        var last = db.VslaGroupShareOutIndirectMember.OrderBy(o => o.VslashareOutInDirectMemberId).LastOrDefault();
                        if (last != null)
                        {
                            id = (last.VslashareOutInDirectMemberId + 1);
                        }
                        m.VslashareOutInDirectMemberId = id;
                        db.VslaGroupShareOutIndirectMember.Add(m);
                        db.SaveChanges();
                    }
                    else
                    {
                        _exist.TotalNumberOfSharesBought = val.Total_number_of_shares_bought;
                        _exist.TotalSaving = val.Total_Saving;
                        _exist.NewShareValue = val.New_share_Value;
                        _exist.CalculatedAmountToBeSharedOut = val.Calculated_amount_to_be_shared_out;
                        _exist.ActualAmountShared = val.Actual_amount_shared;
                        db.Entry(_exist).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }
            return value;
        }
        public override object Remove(DataManager dataManager, object value, string keyField, string key)
        {
            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                var val = (value as spVSLAGroupShareOutIndirectMemberGetAllResult);
                using (var db = new MUCOBADIContext())
                {
                    var _exist = db.VslaGroupShareOutIndirectMember.FirstOrDefault(o => o.VslashareOutHeaderId == val.VSLAShareOutHeaderId && o.VslaGroupIndirectMemberId == val.VSLA_Group_Indirect_Member_Id);
                    if (_exist == null)
                    {
                        VslaGroupShareOutIndirectMember m = new();
                        m.VslashareOutHeaderId = val.VSLAShareOutHeaderId.Value;
                        m.VslaGroupIndirectMemberId = val.VSLA_Group_Indirect_Member_Id;
                        m.TotalNumberOfSharesBought = val.Total_number_of_shares_bought;
                        m.TotalSaving = val.Total_Saving;
                        m.NewShareValue = val.New_share_Value;
                        m.CalculatedAmountToBeSharedOut = val.Calculated_amount_to_be_shared_out;
                        m.ActualAmountShared = val.Actual_amount_shared;
                        int id = 1;
                        var last = db.VslaGroupShareOutIndirectMember.OrderBy(o => o.VslashareOutInDirectMemberId).LastOrDefault();
                        if (last != null)
                        {
                            id = (last.VslashareOutInDirectMemberId + 1);
                        }
                        m.VslashareOutInDirectMemberId = id;
                        db.VslaGroupShareOutIndirectMember.Add(m);
                        db.SaveChanges();
                    }
                    else
                    {
                        _exist.TotalNumberOfSharesBought = val.Total_number_of_shares_bought;
                        _exist.TotalSaving = val.Total_Saving;
                        _exist.NewShareValue = val.New_share_Value;
                        _exist.CalculatedAmountToBeSharedOut = val.Calculated_amount_to_be_shared_out;
                        _exist.ActualAmountShared = val.Actual_amount_shared;
                        db.Entry(_exist).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }
            return value;
        }
    }
    #endregion Group Members
}
