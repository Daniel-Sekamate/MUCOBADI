@page "/LCDPage"
@using MUCOBADI.DTOs.Dashboard;
@using MUCOBADI.Models;
@using MUCOBADI.Data;
@using Microsoft.EntityFrameworkCore;
@using Syncfusion.Blazor;
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.ProgressBar;
@using System.Text.RegularExpressions;
@*@inject MUCOBADIContext db;*@
@inject SPToCoreContext _dbcontext;
@inject IToastService toastService;
@inject NavigationManager Navigation;

<style>
	.pp {
		color: ghostwhite;
		background-color: #808285;
		padding: 10px;
	}

	.control-container {
		background-color: #adb5bd;
		height: 300px;
		margin: 0 auto;
		width: 500px;
	}

	.e-carousel .slide-content {
		align-items: center;
		display: flex;
		font-size: 1.25rem;
		height: 100%;
		justify-content: center;
	}

	/*Customize carousel*/
	.e-carousel .e-carousel-navigators .e-next .e-btn:not(:disabled) .e-btn-icon,
	.e-carousel .e-carousel-navigators .e-previous .e-btn:not(:disabled) .e-btn-icon
	{
		color: blackyellow;
		font-size: 25px;
	}

	.e-carousel .e-carousel-navigators {
		top: 150px;
	}

	.e-carousel .e-carousel-navigators .e-previous .e-btn:not(:disabled) .e-btn-icon, .e-carousel .e-carousel-navigators .e-next .e-btn:not(:disabled) .e-btn-icon, .e-carousel .e-carousel-navigators .e-play-pause .e-btn:not(:disabled) .e-btn-icon {
    color: black;
	}

	/*Put Previous and Next Buttons Top*/
	.e-carousel .e-carousel-navigators {
	height: auto;
	}

		.indicator-type.e-carousel .e-next-icon::before,
		.indicator-type.e-carousel .e-previous-icon::before {
			color: black;
	}


	table, th, td {
  border: 1px solid black;
}

h5 {
  display: block;
  font-size: -1em;
  font-weight: bold;
  color:black;
  background-color: white;
}

h6 {
        color: ghostwhite;
        background-color: #268cff;
        padding: 10px;
        width: 100%;
        font-size: 10px;
    }

    h4 {
        color: black;
        background-color: deepskyblue;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

    h3 {
        color: black;
        background-color: darkorange;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }
</style>

<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;">
        <strong>
            <img src="/login/images/mucobadilogo2.png" width="40" height="25" /> ICARE
        </strong>| DASHBOARD
    </li>
</ol>


<SfChip>
	<ChipItems>
		<ChipItem Text="@CurrentDate" CssClass="e-info">
		</ChipItem>

		@if (daysdifference <= 30){
			<ChipItem Text="@_daysLeftInQuarter" CssClass="e-danger">
					</ChipItem>
		}
		else if (daysdifference >= 31 && daysdifference <= 60){
			<ChipItem Text="@_daysLeftInQuarter" CssClass="e-warning">
					</ChipItem>
		}
		else if (daysdifference >= 61 && daysdifference <= 93)
		{
				<ChipItem Text="@_daysLeftInQuarter" CssClass="e-info">
			</ChipItem>
		}
	
	</ChipItems>
</SfChip>

<div class="row" style="margin-top:5px;">
			<SfCarousel AnimationEffect="CarouselAnimationEffect.Fade"
                    AutoPlay="true"
                    Interval="60000" 
					ButtonsVisibility="CarouselButtonVisibility.Visible"
					ShowIndicators="false">
					@try
					{
			    <CarouselItem>
				<div class="row">
					<div class="col-md-2">
						<div class="col-md-12">
							<div class="card l-bg-cherry" style="margin-bottom:8px;">
								<div class="card-statistic-3 p-4">
									<div class="card-icon card-icon-large"></div>
									<div class="mb-4">
										<p class="card-title mb-0" style="color:white;">OVC_SERV TARGET</p>
									</div>
									<div class="row align-items-center mb-2 d-flex">
										<div class="col-8">
											@if (annualTargetValue > 0)
											{
												<p class="d-flex align-items-center mb-0" style="color:white; font-size:16px;">
													@annualTargetValue
												</p>
											}
											else
											{
												<p class="d-flex align-items-center mb-0" style="color:white; font-size:16px;">
													0
												</p>
											}
										</div>

									</div>

								</div>
							</div>
						</div>
						<div class="col-md-12">
							<div class="card l-bg-orange-dark" style="margin-bottom:8px;">
								<div class="card-statistic-3 p-4">
									<div class="card-icon card-icon-large"></div>
									<div class="mb-4">
										<p class="card-title mb-0" style="color:white;">OVC_SERV ACTIVE</p>
									</div>
									<div class="row align-items-center mb-2 d-flex">
										<div class="col-8">
											@if (annualAchievedValue > 0)
											{
												<p class="d-flex align-items-center mb-0" style="color:white; font-size:16px;">
													@annualAchievedValue
												</p>
											}
											else
											{
												<p class="d-flex align-items-center mb-0" style="color:white; font-size:16px;">
													0
												</p>
											}
										</div>

									</div>

								</div>
							</div>
						</div>
						<div class="col-md-12">
							<div class="card l-bg-blue-dark" style="margin-bottom:8px;">
								<div class="card-statistic-3 p-4">
									<div class="card-icon card-icon-large"></div>
									<div class="mb-4">
										<p class="card-title mb-0" style="color:white;">% OVC_SERV</p>
									</div>
									<div class="row align-items-center mb-2 d-flex">
										<div class="col-8">
											@if (_PercentageTotalHHValue > 0)
											{
												<p class="d-flex align-items-center mb-0" style="color:white; font-size:16px;">
													@_PercentageTotalHHValue
												</p>
											}
											else
											{
												<p class="d-flex align-items-center mb-0" style="color:white; font-size:16px;">
													0
												</p>
											}
										</div>

									</div>

								</div>
							</div>
						</div>
						<div class="col-md-12">
							<div class="card l-bg-green-dark" style="margin-bottom:8px;">
								<div class="card-statistic-3 p-4">
									<div class="card-icon card-icon-large"></div>
									<div class="mb-4">
										<p class="card-title mb-0" style="color:white;">HOUSE HOLDS</p>
									</div>
									<div class="row align-items-center mb-2 d-flex">
										<div class="col-8">
											@if (TotalHHValue > 0)
											{
												<p class="d-flex align-items-center mb-0" style="color:white; font-size:16px;">
													@TotalHHValue
												</p>
											}
											else
											{
												<p class="d-flex align-items-center mb-0" style="color:white; font-size:16px;">
													0
												</p>
											}
										</div>

									</div>

								</div>
							</div>
						</div>
					</div>
					<div class="col-md-8">
						<div class="control-section" align='center'>
							<div class="control-section">
								@if(TargetsList != null && TargetsList.Count > 0 && HeatDataSource != null)
								{
									<h5>OVC_SERV. Vs TARGET (0-18+ YEARS) PERFORMANCE</h5>
									<SfGrid DataSource="@TargetsList" AllowExcelExport="true" AllowPdfExport="true" AllowFiltering="false"
											AllowSorting="true" GridLines="GridLine.Both" AllowTextWrap="true">
										<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
										<GridEvents QueryCellInfo="QueryCellInfoHandler" TValue="OVCServeValueTargets"></GridEvents>

										<GridColumns>
											<GridColumn Field=@nameof(OVCServeValueTargets.DistrictId) Visible="false" HeaderText="DistrictId" Width="110"> </GridColumn>
											<GridColumn Field=@nameof(OVCServeValueTargets.DistrictDescription) HeaderText="District" Width="100"></GridColumn>
											<GridColumn Field=@nameof(OVCServeValueTargets.TargetValue) HeaderText="Target" Width="80"></GridColumn>
											<GridColumn HeaderText="Age Disaggregation" HeaderTextAlign="TextAlign.Center">
												<GridColumns>
													<GridColumn Field=@nameof(OVCServeValueTargets.ageCategory17) HeaderText="0-17 Served" Width="100"></GridColumn>
													<GridColumn Field=@nameof(OVCServeValueTargets.ageCategory18) HeaderText="18+ Served" Width="100"></GridColumn>
												</GridColumns>
											</GridColumn>
											<GridColumn HeaderText="Sex Disaggregation" HeaderTextAlign="TextAlign.Center">
												<GridColumns>
													<GridColumn Field=@nameof(OVCServeValueTargets.FemaleActive) HeaderText="Female" Width="100"></GridColumn>
													<GridColumn Field=@nameof(OVCServeValueTargets.MaleActive) HeaderText="Male" Width="100"></GridColumn>
												</GridColumns>
											</GridColumn>
											<GridColumn Field=@nameof(OVCServeValueTargets.numberOfHouseHolds) HeaderText="House Holds" Width="100"></GridColumn>
											<GridColumn Field=@nameof(OVCServeValueTargets.Percentage) HeaderText="% OVC_SERV" Format="N1" Width="130">
												<Template>
													@{
														var ImplementationStatusProgressData = (context as OVCServeValueTargets);
														string Progress = ImplementationStatusProgressData.Percentage + "%";
														string textcolor = "##34495e";
														string progColor = "#ffffff";
														//<b>textcolor</b>
														if (ImplementationStatusProgressData.Percentage < 75)
														{
															progColor = "#c0392b";
														}
														else if (ImplementationStatusProgressData.Percentage >= 75 && ImplementationStatusProgressData.Percentage < 95)
														{
															progColor = "#f1c40f";
														}
														else if (ImplementationStatusProgressData.Percentage >= 95 && ImplementationStatusProgressData.Percentage <= 200)
														{
															progColor = "#2ecc71";
														}

														<SfProgressBar Type="ProgressType.Linear" Height="15"
																	   Width="100%"
																	   TrackThickness="30"
																	   ProgressThickness="30"
																	   ProgressColor="@progColor"
																	   Value="ImplementationStatusProgressData.Percentage" Minimum="0" Maximum="200" ShowProgressValue="true">
															<ProgressBarLabelStyle Text=@Progress TextAlignment="TextAlignmentType.Center" Color="@textcolor" />

														</SfProgressBar>
													}
												</Template>
											</GridColumn>
										</GridColumns>

									</SfGrid>
								}
								else
								{
									<center style="margin-top:10px;">	<h5>OVC_SERV. Vs TARGET (0-18+ YEARS) PERFORMANCE</h5></center>
									<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
										<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
									</div>
								}
							</div>
						</div>
					</div>
					<div class="col-md-2">
			   <div class="control-section card-control-section tile_layout">
					<div class="e-card-layout">
						@if (this.CardDatas.Count == 0)
						{
							<div class="e-error">
								<div class="e-error-content">No results found. Please try a different search.</div>
							</div>
						}
						else
						{
							if (CardDatas != null && CardDatas.Count > 0 && HeatDataSource != null)
							{
								<div class="col-md-12 col-sm-12" style="width: 100%">
									<div id="card_sample_1" class="card_sample" style="text-align: left">
										<SfCard>
											@foreach (CardDataModel card in CardDatas)
											{
												<CardHeader Title="@card.Title" />
												<CardContent>
												 @((MarkupString)card.Content)
												</CardContent>
											}
										</SfCard>
									</div>
								</div>
							}
						}
					</div>
				 </div>
					</div>
				</div>
			</CarouselItem>
			<CarouselItem>
			<div class="row">
				@if (this.BugiriData.Count == 0 &&
						this.BugweriData.Count == 0 &&
						this.BuikweData.Count == 0)
				{
					<div class="e-error">
						<div class="e-error-content">No results found. Please try a different search.</div>
					</div>
				}
				else
				{
					if ((BugiriData != null && BugiriData.Count > 0) ||
					(BugweriData != null && BugweriData.Count > 0) ||
					(BuikweData != null && BuikweData.Count > 0))
					{
						<div class="row">
							<div class="col-md-4" style="width: calc(100vw - 20rem);">
								<SfCard ID="Card1">
									<CardHeader Title="BUGIRI" />
									<CardContent>
								    	<div>
												<SfGrid DataSource="@BugiriData" AllowPaging="true" AllowSorting="true" RowHeight="20" Width="100%">
													<GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>

													<GridPageSettings PageSize="7"></GridPageSettings>
													<GridColumns>
														<GridColumn Field="@nameof(SubcountyDetails.SubcountyDescription)" HeaderText="Sub-County" Width="120"></GridColumn>
														<GridColumn HeaderText="Visitations" HeaderTextAlign="TextAlign.Center">
															<GridColumns>
																<GridColumn Field="@nameof(SubcountyDetails.VisitedOnce)" HeaderText="1" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
																<GridColumn Field="@nameof(SubcountyDetails.VisitedTwice)" HeaderText="2" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
																<GridColumn Field="@nameof(SubcountyDetails.VisitedThrice)" HeaderText="3" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
															</GridColumns>
														</GridColumn>
														@* <GridColumn Field="@nameof(SubcountyDetails.PercentageVisited)" HeaderText="% age" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn> *@
													</GridColumns>
												</SfGrid>
							            </div>
										<div style="margin:-75px">
												@if (BugiriPieChartPoints != null)
												{
													<SfAccumulationChart EnableBorderOnMouseMove="false" EnableAnimation="false" Theme="@Theme" 
														Title="Bugiri visitation trends across f.year quarters">
														<AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
														<AccumulationChartSeriesCollection>
															<AccumulationChartSeries DataSource="@BugiriPieChartPoints" XName="Browser" YName="Users" Name="Browser" StartAngle="115" EndAngle="45" Radius="45%" InnerRadius="20%">
																<AccumulationDataLabelSettings EnableRotation="true" Visible="true" Name="DataLabelMappingName" Position="AccumulationLabelPosition.Inside">
																	<AccumulationChartConnector Length="20px" Type="ConnectorType.Curve"></AccumulationChartConnector>
																	<AccumulationChartDataLabelFont Size="@FontSize" FontWeight="500" Color="#ffffff"></AccumulationChartDataLabelFont>
																</AccumulationDataLabelSettings>
															</AccumulationChartSeries>
														</AccumulationChartSeriesCollection>
													</SfAccumulationChart>
												}
										</div>
									</CardContent>
								</SfCard>
							</div>
							<div class="col-md-4" style="width: calc(100vw - 20rem);">
								<SfCard ID="Card1">
									<CardHeader Title="BUGWERI" />
									<CardContent>
										<div>
										   <SfGrid DataSource="@BugweriData" AllowPaging="true" AllowSorting="true" RowHeight="20" Width="100%">
												<GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
												<GridPageSettings PageSize="10"></GridPageSettings>
												<GridColumns>
													<GridColumn Field="@nameof(SubcountyDetails.SubcountyDescription)" HeaderText="Sub-County" Width="120"></GridColumn>
													<GridColumn HeaderText="Visitations" HeaderTextAlign="TextAlign.Center">
														<GridColumns>
															<GridColumn Field="@nameof(SubcountyDetails.VisitedOnce)" HeaderText="1" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
															<GridColumn Field="@nameof(SubcountyDetails.VisitedTwice)" HeaderText="2" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
															<GridColumn Field="@nameof(SubcountyDetails.VisitedThrice)" HeaderText="3" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
														</GridColumns>
													</GridColumn>
													@* <GridColumn Field="@nameof(SubcountyDetails.PercentageVisited)" HeaderText="% age" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn> *@
												</GridColumns>
											</SfGrid>
						        		</div>
										<div style="margin:-85px">
												@if (BugweriPieChartPoints != null)
												{
													<SfAccumulationChart EnableBorderOnMouseMove="false" EnableAnimation="false" Theme="@Theme"
														Title="Bugweri visitation trends across f.year quarters">
														<AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
														<AccumulationChartSeriesCollection>
															<AccumulationChartSeries DataSource="@BugweriPieChartPoints" XName="Browser" YName="Users" Name="Browser" StartAngle="115" EndAngle="45" Radius="45%" InnerRadius="20%">
																<AccumulationDataLabelSettings EnableRotation="true" Visible="true" Name="DataLabelMappingName" Position="AccumulationLabelPosition.Inside">
																	<AccumulationChartConnector Length="20px" Type="ConnectorType.Curve"></AccumulationChartConnector>
																	<AccumulationChartDataLabelFont Size="@FontSize" FontWeight="500" Color="#ffffff"></AccumulationChartDataLabelFont>
																</AccumulationDataLabelSettings>
															</AccumulationChartSeries>
														</AccumulationChartSeriesCollection>
													</SfAccumulationChart>
												}
										</div>
									</CardContent>
								</SfCard>
							</div>
							<div class="col-md-4" style="width: calc(100vw - 20rem);">
								<SfCard ID="Card1">
									<CardHeader Title="BUIKWE" />
									<CardContent>
									<div>
						            	<SfGrid DataSource="@BuikweData" AllowPaging="true" AllowSorting="true" RowHeight="20" Width="100%">
											<GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
											<GridPageSettings PageSize="7"></GridPageSettings>
											<GridColumns>
												<GridColumn Field="@nameof(SubcountyDetails.SubcountyDescription)" HeaderText="Sub-County" Width="120"></GridColumn>
												<GridColumn HeaderText="Visitations" HeaderTextAlign="TextAlign.Center">
													<GridColumns>
														<GridColumn Field="@nameof(SubcountyDetails.VisitedOnce)" HeaderText="1" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
														<GridColumn Field="@nameof(SubcountyDetails.VisitedTwice)" HeaderText="2" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
														<GridColumn Field="@nameof(SubcountyDetails.VisitedThrice)" HeaderText="3" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
													</GridColumns>
												</GridColumn>
												@* <GridColumn Field="@nameof(SubcountyDetails.PercentageVisited)" HeaderText="% age" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn> *@
											</GridColumns>
										</SfGrid>
						         	</div>
									<div style="margin:-75px">
											@if (BuikwePieChartPoints != null)
											{
												<SfAccumulationChart EnableBorderOnMouseMove="false" EnableAnimation="false" Theme="@Theme"
													 Title="Buikwe visitation trends across f.year quarters">
													<AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
													<AccumulationChartSeriesCollection>
														<AccumulationChartSeries DataSource="@BuikwePieChartPoints" XName="Browser" YName="Users" Name="Browser" StartAngle="115" EndAngle="45" Radius="45%" InnerRadius="20%">
															<AccumulationDataLabelSettings EnableRotation="true" Visible="true" Name="DataLabelMappingName" Position="AccumulationLabelPosition.Inside">
																<AccumulationChartConnector Length="20px" Type="ConnectorType.Curve"></AccumulationChartConnector>
																<AccumulationChartDataLabelFont Size="@FontSize" FontWeight="500" Color="#ffffff"></AccumulationChartDataLabelFont>
															</AccumulationDataLabelSettings>
														</AccumulationChartSeries>
													</AccumulationChartSeriesCollection>
												</SfAccumulationChart>
								    		}
									</div>
									</CardContent>
										
								</SfCard>
							</div>
						</div>
					}
				}
			</div>
			</CarouselItem>
	    	<CarouselItem>
				<div class="row">
					@if (this.JinjaData.Count == 0 &&
							this.JinjaCityData.Count == 0 &&
							this.IgangaData.Count == 0)
					{
						<div class="e-error">
							<div class="e-error-content">No results found. Please try a different search.</div>
						</div>
					}
					else
					{
						if ((JinjaData != null && JinjaData.Count > 0) ||
						(JinjaCityData != null && JinjaCityData.Count > 0) || 
						(IgangaData != null && IgangaData.Count > 0))
						{
							<div class="row">
								<div class="col-md-4" style="width: calc(100vw - 20rem);">
									<SfCard ID="Card1">
										<CardHeader Title="IGANGA" />
										<CardContent>
											<div>
												<SfGrid DataSource="@IgangaData" AllowPaging="true" AllowSorting="true" RowHeight="20" Width="100%">
													<GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
													<GridPageSettings PageSize="6"></GridPageSettings>
													<GridColumns>
														<GridColumn Field="@nameof(SubcountyDetails.SubcountyDescription)" HeaderText="Sub-County" Width="120"></GridColumn>
														<GridColumn HeaderText="Visitations" HeaderTextAlign="TextAlign.Center">
															<GridColumns>
																<GridColumn Field="@nameof(SubcountyDetails.VisitedOnce)" HeaderText="1" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
																<GridColumn Field="@nameof(SubcountyDetails.VisitedTwice)" HeaderText="2" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
																<GridColumn Field="@nameof(SubcountyDetails.VisitedThrice)" HeaderText="3" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
															</GridColumns>
														</GridColumn>
														@* <GridColumn Field="@nameof(SubcountyDetails.PercentageVisited)" HeaderText="% age" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn> *@
													</GridColumns>
												</SfGrid>
								        	</div>
											<div style="margin:-85px">
												@if (IgangaPieChartPoints != null)
												{
													<SfAccumulationChart EnableBorderOnMouseMove="false" EnableAnimation="false" Theme="@Theme"
													 Title="Iganga visitation trends across f.year quarters">
														<AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
														<AccumulationChartSeriesCollection>
															<AccumulationChartSeries DataSource="@IgangaPieChartPoints" XName="Browser" YName="Users" Name="Browser" StartAngle="115" EndAngle="45" Radius="45%" InnerRadius="20%">
																<AccumulationDataLabelSettings EnableRotation="true" Visible="true" Name="DataLabelMappingName" Position="AccumulationLabelPosition.Inside">
																	<AccumulationChartConnector Length="20px" Type="ConnectorType.Curve"></AccumulationChartConnector>
																	<AccumulationChartDataLabelFont Size="@FontSize" FontWeight="500" Color="#ffffff"></AccumulationChartDataLabelFont>
																</AccumulationDataLabelSettings>
															</AccumulationChartSeries>
														</AccumulationChartSeriesCollection>
													</SfAccumulationChart>
												}
											</div>
										</CardContent>
									</SfCard>
								</div>
								<div class="col-md-4" style="width: calc(100vw - 20rem);">
									<SfCard ID="Card1">
										<CardHeader Title="JINJA" />
										<CardContent>
										<div>
										<SfGrid DataSource="@JinjaData" AllowPaging="true" AllowSorting="true" RowHeight="20" Width="100%">
												<GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
													<GridPageSettings PageSize="6"></GridPageSettings> 
												<GridColumns>
													<GridColumn Field="@nameof(SubcountyDetails.SubcountyDescription)" HeaderText="Sub-County" Width="120"></GridColumn>
													<GridColumn HeaderText="Visitations" HeaderTextAlign="TextAlign.Center">
														<GridColumns>
															<GridColumn Field="@nameof(SubcountyDetails.VisitedOnce)" HeaderText="1" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
															<GridColumn Field="@nameof(SubcountyDetails.VisitedTwice)" HeaderText="2" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
															<GridColumn Field="@nameof(SubcountyDetails.VisitedThrice)" HeaderText="3" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
														</GridColumns>
													</GridColumn>
													@* <GridColumn Field="@nameof(SubcountyDetails.PercentageVisited)" HeaderText="% age" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn> *@
												</GridColumns>
											</SfGrid>
										</div>
										<div style="margin:-85px">
												@if (JinjaPieChartPoints != null)
												{
													<SfAccumulationChart EnableBorderOnMouseMove="false" EnableAnimation="false" Theme="@Theme"
													 Title="Jinja visitation trends across f.year quarters">
														<AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
														<AccumulationChartSeriesCollection>
															<AccumulationChartSeries DataSource="@JinjaPieChartPoints" XName="Browser" YName="Users" Name="Browser" StartAngle="115" EndAngle="45" Radius="45%" InnerRadius="20%">
																<AccumulationDataLabelSettings EnableRotation="true" Visible="true" Name="DataLabelMappingName" Position="AccumulationLabelPosition.Inside">
																	<AccumulationChartConnector Length="20px" Type="ConnectorType.Curve"></AccumulationChartConnector>
																	<AccumulationChartDataLabelFont Size="@FontSize" FontWeight="500" Color="#ffffff"></AccumulationChartDataLabelFont>
																</AccumulationDataLabelSettings>
															</AccumulationChartSeries>
														</AccumulationChartSeriesCollection>
													</SfAccumulationChart>
												}
										</div>
										</CardContent>
									</SfCard>
								</div>
					<div class="col-md-4" style="width: calc(100vw - 20rem);">
									<SfCard ID="Card1">
										<CardHeader Title="JINJA CITY" />
										<CardContent>
											<div>
									         <SfGrid DataSource="@JinjaCityData" AllowPaging="true" AllowSorting="true" RowHeight="20" Width="100%">
												<GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
												 <GridPageSettings PageSize="10"></GridPageSettings> 
												<GridColumns>
													<GridColumn Field="@nameof(SubcountyDetails.SubcountyDescription)" HeaderText="Sub-County" Width="120"></GridColumn>
													<GridColumn HeaderText="Visitations" HeaderTextAlign="TextAlign.Center">
														<GridColumns>
															<GridColumn Field="@nameof(SubcountyDetails.VisitedOnce)" HeaderText="1" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
															<GridColumn Field="@nameof(SubcountyDetails.VisitedTwice)" HeaderText="2" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
															<GridColumn Field="@nameof(SubcountyDetails.VisitedThrice)" HeaderText="3" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
														</GridColumns>
													</GridColumn>
													@* <GridColumn Field="@nameof(SubcountyDetails.PercentageVisited)" HeaderText="% age" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn> *@
												</GridColumns>
											</SfGrid>
								        	</div>
											<div style="margin:-75px">
												@if (JinjaCityPieChartPoints != null)
												{
													<SfAccumulationChart EnableBorderOnMouseMove="false" EnableAnimation="false" Theme="@Theme"
														Title="Jinja city visitation trends across f.year quarters">
														<AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
														<AccumulationChartSeriesCollection>
															<AccumulationChartSeries DataSource="@JinjaCityPieChartPoints" XName="Browser" YName="Users" Name="Browser" StartAngle="115" EndAngle="45" Radius="45%" InnerRadius="20%">
																<AccumulationDataLabelSettings EnableRotation="true" Visible="true" Name="DataLabelMappingName" Position="AccumulationLabelPosition.Inside">
																	<AccumulationChartConnector Length="20px" Type="ConnectorType.Curve"></AccumulationChartConnector>
																	<AccumulationChartDataLabelFont Size="@FontSize" FontWeight="500" Color="#ffffff"></AccumulationChartDataLabelFont>
																</AccumulationDataLabelSettings>
															</AccumulationChartSeries>
														</AccumulationChartSeriesCollection>
													</SfAccumulationChart>
												}
											</div>
										</CardContent>
									</SfCard>
								</div>
		
							</div>
						}
					}
				</div>
        	</CarouselItem>

			<CarouselItem>
			<div class="row">
				@if (this.KamuliData.Count == 0 &&
						this.MayugeData.Count == 0 &&
						this.NamayingoData.Count == 0)
				{
					<div class="e-error">
						<div class="e-error-content">No results found. Please try a different search.</div>
					</div>
				}
				else
				{
					if ((KamuliData != null && KamuliData.Count > 0) ||
					(MayugeData != null && MayugeData.Count > 0) ||
					(NamayingoData != null && NamayingoData.Count > 0))
					{
						<div class="row">
							<div class="col-md-4" style="width: calc(100vw - 20rem);">
								<SfCard ID="Card1">
									<CardHeader Title="KAMULI" />
									<CardContent>
										  <div>
										   <SfGrid DataSource="@KamuliData" AllowPaging="true" AllowSorting="true" RowHeight="20" Width="100%">
												<GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
												 <GridPageSettings PageSize="10"></GridPageSettings> 
												<GridColumns>
													<GridColumn Field="@nameof(SubcountyDetails.SubcountyDescription)" HeaderText="Sub-County" Width="120"></GridColumn>
													<GridColumn HeaderText="Visitations" HeaderTextAlign="TextAlign.Center">
														<GridColumns>
															<GridColumn Field="@nameof(SubcountyDetails.VisitedOnce)" HeaderText="1" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
															<GridColumn Field="@nameof(SubcountyDetails.VisitedTwice)" HeaderText="2" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
															<GridColumn Field="@nameof(SubcountyDetails.VisitedThrice)" HeaderText="3" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
														</GridColumns>
													</GridColumn>
													@* <GridColumn Field="@nameof(SubcountyDetails.PercentageVisited)" HeaderText="% age" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn> *@
												</GridColumns>
											</SfGrid>
										  </div>
										
											<div style="margin:-85px">
												@if (KamuliPieChartPoints != null)
												{
													<SfAccumulationChart EnableBorderOnMouseMove="false" EnableAnimation="false" Theme="@Theme"
																		 Title="Kamuli visitation trends across f.year quarters">
														<AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
														<AccumulationChartSeriesCollection>
															<AccumulationChartSeries DataSource="@KamuliPieChartPoints" XName="Browser" YName="Users" Name="Browser" StartAngle="115" EndAngle="45" Radius="45%" InnerRadius="20%">
																<AccumulationDataLabelSettings EnableRotation="true" Visible="true" Name="DataLabelMappingName" Position="AccumulationLabelPosition.Inside">
																	<AccumulationChartConnector Length="20px" Type="ConnectorType.Curve"></AccumulationChartConnector>
																	<AccumulationChartDataLabelFont Size="@FontSize" FontWeight="500" Color="#ffffff"></AccumulationChartDataLabelFont>
																</AccumulationDataLabelSettings>
															</AccumulationChartSeries>
														</AccumulationChartSeriesCollection>
													</SfAccumulationChart>
												}
											</div>
									</CardContent>
								</SfCard>
							</div>
							<div class="col-md-4" style="width: calc(100vw - 20rem);">
								<SfCard ID="Card1">
									<CardHeader Title="MAYUGE" />
									<CardContent>
											<div>
												<SfGrid DataSource="@MayugeData" AllowPaging="true" AllowSorting="true" RowHeight="20" Width="100%">
													<GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
													 <GridPageSettings PageSize="10"></GridPageSettings> 
													<GridColumns>
														<GridColumn Field="@nameof(SubcountyDetails.SubcountyDescription)" HeaderText="Sub-County" Width="120"></GridColumn>
														<GridColumn HeaderText="Visitations" HeaderTextAlign="TextAlign.Center">
															<GridColumns>
																<GridColumn Field="@nameof(SubcountyDetails.VisitedOnce)" HeaderText="1" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
																<GridColumn Field="@nameof(SubcountyDetails.VisitedTwice)" HeaderText="2" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
																<GridColumn Field="@nameof(SubcountyDetails.VisitedThrice)" HeaderText="3" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
															</GridColumns>
														</GridColumn>
														@* <GridColumn Field="@nameof(SubcountyDetails.PercentageVisited)" HeaderText="% age" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn> *@
													</GridColumns>
												</SfGrid>
							    			</div>
											<div style="margin:-85px">
												@if (MayugePieChartPoints != null)
												{
													<SfAccumulationChart EnableBorderOnMouseMove="false" EnableAnimation="false" Theme="@Theme"
														Title="Mayuge visitation trends across f.year quarters">
														<AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
														<AccumulationChartSeriesCollection>
															<AccumulationChartSeries DataSource="@MayugePieChartPoints" XName="Browser" YName="Users" Name="Browser" StartAngle="115" EndAngle="45" Radius="45%" InnerRadius="20%">
																<AccumulationDataLabelSettings EnableRotation="true" Visible="true" Name="DataLabelMappingName" Position="AccumulationLabelPosition.Inside">
																	<AccumulationChartConnector Length="20px" Type="ConnectorType.Curve"></AccumulationChartConnector>
																	<AccumulationChartDataLabelFont Size="@FontSize" FontWeight="500" Color="#ffffff"></AccumulationChartDataLabelFont>
																</AccumulationDataLabelSettings>
															</AccumulationChartSeries>
														</AccumulationChartSeriesCollection>
													</SfAccumulationChart>
												}
											</div>
									</CardContent>
								</SfCard>
							</div>
							<div class="col-md-4" style="width: calc(100vw - 20rem);">
								<SfCard ID="Card1">
									<CardHeader Title="NAMAYINGO" />
									<CardContent>
										   <div>
											<SfGrid DataSource="@NamayingoData" AllowPaging="true" AllowSorting="true" RowHeight="20" Width="100%">
												<GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
												 <GridPageSettings PageSize="10"></GridPageSettings> 
												<GridColumns>
													<GridColumn Field="@nameof(SubcountyDetails.SubcountyDescription)" HeaderText="Sub-County" Width="120"></GridColumn>
													<GridColumn HeaderText="Visitations" HeaderTextAlign="TextAlign.Center">
														<GridColumns>
															<GridColumn Field="@nameof(SubcountyDetails.VisitedOnce)" HeaderText="1" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
															<GridColumn Field="@nameof(SubcountyDetails.VisitedTwice)" HeaderText="2" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
															<GridColumn Field="@nameof(SubcountyDetails.VisitedThrice)" HeaderText="3" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
														</GridColumns>
													</GridColumn>
													@* <GridColumn Field="@nameof(SubcountyDetails.PercentageVisited)" HeaderText="% age" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn> *@
												</GridColumns>
											</SfGrid>
										   </div>
											<div style="margin:-85px">
												@if (NamyingoPieChartPoints != null)
												{
													<SfAccumulationChart EnableBorderOnMouseMove="false" EnableAnimation="false" Theme="@Theme"
														 Title="Namayingo visitation trends across f.year quarters">
														<AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
														<AccumulationChartSeriesCollection>
															<AccumulationChartSeries DataSource="@NamyingoPieChartPoints" XName="Browser" YName="Users" Name="Browser" StartAngle="115" EndAngle="45" Radius="45%" InnerRadius="20%">
																<AccumulationDataLabelSettings EnableRotation="true" Visible="true" Name="DataLabelMappingName" Position="AccumulationLabelPosition.Inside">
																	<AccumulationChartConnector Length="20px" Type="ConnectorType.Curve"></AccumulationChartConnector>
																	<AccumulationChartDataLabelFont Size="@FontSize" FontWeight="500" Color="#ffffff"></AccumulationChartDataLabelFont>
																</AccumulationDataLabelSettings>
															</AccumulationChartSeries>
														</AccumulationChartSeriesCollection>
													</SfAccumulationChart>
												}
											</div>
									</CardContent>
								</SfCard>
							</div>
						</div>
					}
				}
			</div>
			</CarouselItem>
			<CarouselItem>
				<div class="row">
					@if (this.MukonoData.Count == 0 || this.KayungaData.Count == 0)
					{
						<div class="e-error">
							<div class="e-error-content">No results found. Please try a different search.</div>
						</div>
					}
					else
					{
						if ((MukonoData != null && MukonoData.Count > 0) ||
					    	(KayungaData != null && KayungaData.Count > 0))
						{
							<div class="row">
								<div class="col-md-4" style="width: calc(100vw - 20rem);">
									<SfCard ID="Card1">
										<CardHeader Title="KAYUNGA" />
										<CardContent>
											<div>
												<SfGrid DataSource="@KayungaData" AllowPaging="true" AllowSorting="true" RowHeight="20" Width="100%">
													<GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
													<GridPageSettings PageSize="10"></GridPageSettings>
													<GridColumns>
														<GridColumn Field="@nameof(SubcountyDetails.SubcountyDescription)" HeaderText="Sub-County" Width="120"></GridColumn>
														<GridColumn HeaderText="Visitations" HeaderTextAlign="TextAlign.Center">
															<GridColumns>
																<GridColumn Field="@nameof(SubcountyDetails.VisitedOnce)" HeaderText="1" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
																<GridColumn Field="@nameof(SubcountyDetails.VisitedTwice)" HeaderText="2" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
																<GridColumn Field="@nameof(SubcountyDetails.VisitedThrice)" HeaderText="3" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
															</GridColumns>
														</GridColumn>
														@* <GridColumn Field="@nameof(SubcountyDetails.PercentageVisited)" HeaderText="% age" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn> *@
													</GridColumns>
												</SfGrid>
											</div>

											<div style="margin:-85px">
												@if (KayungaPieChartPoints != null)
												{
													<SfAccumulationChart EnableBorderOnMouseMove="false" EnableAnimation="false" Theme="@Theme"
																		 Title="Kayunga visitation trends across f.year quarters">
														<AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
														<AccumulationChartSeriesCollection>
															<AccumulationChartSeries DataSource="@KayungaPieChartPoints" XName="Browser" YName="Users" Name="Browser" StartAngle="115" EndAngle="45" Radius="45%" InnerRadius="20%">
																<AccumulationDataLabelSettings EnableRotation="true" Visible="true" Name="DataLabelMappingName" Position="AccumulationLabelPosition.Inside">
																	<AccumulationChartConnector Length="20px" Type="ConnectorType.Curve"></AccumulationChartConnector>
																	<AccumulationChartDataLabelFont Size="@FontSize" FontWeight="500" Color="#ffffff"></AccumulationChartDataLabelFont>
																</AccumulationDataLabelSettings>
															</AccumulationChartSeries>
														</AccumulationChartSeriesCollection>
													</SfAccumulationChart>
												}
											</div>
										</CardContent>
									</SfCard>
								</div>
								<div class="col-md-4" style="width: calc(100vw - 20rem);">
									<SfCard ID="Card1">
										<CardHeader Title="MUKONO" />
										<CardContent>
											<div>
												<SfGrid DataSource="@MukonoData" AllowPaging="true" AllowSorting="true" RowHeight="20" Width="100%">
													<GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
													<GridPageSettings PageSize="8"></GridPageSettings>
													<GridColumns>
														<GridColumn Field="@nameof(SubcountyDetails.SubcountyDescription)" HeaderText="Sub-County" Width="120"></GridColumn>
														<GridColumn HeaderText="Visitations" HeaderTextAlign="TextAlign.Center">
															<GridColumns>
																<GridColumn Field="@nameof(SubcountyDetails.VisitedOnce)" HeaderText="1" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
																<GridColumn Field="@nameof(SubcountyDetails.VisitedTwice)" HeaderText="2" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
																<GridColumn Field="@nameof(SubcountyDetails.VisitedThrice)" HeaderText="3" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn>
															</GridColumns>
														</GridColumn>
														@* <GridColumn Field="@nameof(SubcountyDetails.PercentageVisited)" HeaderText="% age" Width="60" HeaderTextAlign="TextAlign.Center"></GridColumn> *@
													</GridColumns>
												</SfGrid>
											</div>
											<div style="margin:-85px">
												@if (MukonoPieChartPoints != null)
												{
													<SfAccumulationChart EnableBorderOnMouseMove="false" EnableAnimation="false" Theme="@Theme"
																		 Title="Mukono visitation trends across f.year quarters">
														<AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
														<AccumulationChartSeriesCollection>
															<AccumulationChartSeries DataSource="@MayugePieChartPoints" XName="Browser" YName="Users" Name="Browser" StartAngle="115" EndAngle="45" Radius="45%" InnerRadius="20%">
																<AccumulationDataLabelSettings EnableRotation="true" Visible="true" Name="DataLabelMappingName" Position="AccumulationLabelPosition.Inside">
																	<AccumulationChartConnector Length="20px" Type="ConnectorType.Curve"></AccumulationChartConnector>
																	<AccumulationChartDataLabelFont Size="@FontSize" FontWeight="500" Color="#ffffff"></AccumulationChartDataLabelFont>
																</AccumulationDataLabelSettings>
															</AccumulationChartSeries>
														</AccumulationChartSeriesCollection>
													</SfAccumulationChart>
												}
											</div>
										</CardContent>
									</SfCard>
								</div>
							</div>
						}
					}
				</div>
			</CarouselItem>
			<CarouselItem>
				<div class="row">
					<div class="col-md-3">
						<SfCard ID="Card">
							<CardHeader Title="USAID OVC Coverage Map" />
							<CardContent>
								<img src="/dashboard/CardImages/ovcCoverageMap.png" alt="USAID OVC Coverage Map" height="300px" width="100%" />
							</CardContent>
						</SfCard>
					</div>
					<div class="col-md-3">
						<SfCard ID="Card">
							<CardHeader Title="ICARE Activity Coverage" />
							<CardContent>
								<img src="/dashboard/CardImages/ICAREMap.png" alt="ICARE Activity Coverage" height="300px" width="100%" />
							</CardContent>
						</SfCard>
					</div>
					<div class="col-md-3">
						<SfCard ID="Card">
							<CardHeader Title="MUCOBADI-YAW % Female Supported" />
							<CardContent>
								<img src="/dashboard/CardImages/MucobadiYaw.png" alt="MUCOBADI-YAW % Female Supported" height="300px" width="100%" />
							</CardContent>
						</SfCard>
					</div>
					<div class="col-md-3">
						<SfCard ID="Card">
							<CardHeader Title="MUCOBADI-YAW Youth Supported" />
							<CardContent>
								<img src="/dashboard/CardImages/MucobadiYawyouth.png" alt="MUCOBADI-YAW Youth Supported" height="300px" width="100%" />
							</CardContent>
						</SfCard>
					</div>
				</div>
			</CarouselItem>
			<CarouselItem>
				<div class="row">
					<div class="col-md-4">
						<div class="control-section" align='center'>
							<div class="control-section">
								@if(MixedChartModelData != null && MixedChartModelData.Count > 0 && HeatDataSource != null)
								{
								<h5>PERCENTAGE OVC_SERV FEMALE/MALE BY DISTRICT</h5>
								<MUCOBADI.Pages.Dashboards.PartialViews.MixedChartDashboardPage MixedChartModelData="@MixedChartModelData">
								</MUCOBADI.Pages.Dashboards.PartialViews.MixedChartDashboardPage>
								}
								else
								{
									<center style="margin-top:10px;"><h5>PERCENTAGE OVC_SERV FEMALE/MALE BY DISTRICT</h5></center>
									<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
										<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
									</div>
								}
								
							</div>
					    </div>
					</div>
					<div class="col-md-6">
						
						<div class="control-section" align='center'>
							<div class="control-section">
								@if (HeatDataSource != null)
								{
								<h5>DISTRICTS OVC_SERV PERFORMANCE DISAGGRATED BY AGE/GENDER BANDS</h5>
								<MUCOBADI.Pages.Dashboards.PartialViews.LCDheatMapPage HeatDataSource="@HeatDataSource"
								XLabels="@XLabels" YLabels="@YLabels">
								</MUCOBADI.Pages.Dashboards.PartialViews.LCDheatMapPage>
								}
								else
								{
									<center style="margin-top:10px;"><h5>DISTRICTS OVC_SERV PERFORMANCE DISAGGRATED BY AGE BANDS</h5></center>
									<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
										<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
									</div>
								}
							 </div>
						 </div>
					 </div>
					<div class="col-md-2">
						<div class="control-section card-control-section tile_layout" style="height:60vh;">
							<div class="e-card-layout" style="height:60vh;">
								@if (this.CardDatas2.Count == 0)
								{
									<div class="e-error">
										<div class="e-error-content">No results found. Please try a different search.</div>
									</div>
								}
								else
								{
									if (CardDatas2 != null && CardDatas2.Count > 0 && HeatDataSource != null)
									{
										<div class="col-md-12 col-sm-12" style="width: 100%">
											<div id="card_sample_1" class="card_sample" style="text-align: left">
												<SfCard>
													@foreach (CardDataModel card in CardDatas2)
													{
														<CardHeader Title="@card.Title" />
														
														<CardContent>
															@((MarkupString)card.Content)
														</CardContent>
													}
												</SfCard>
											</div>
										</div>
									}
								}
							</div>
						</div>
					</div>
				 </div>
			</CarouselItem>
			<CarouselItem>
				<div class="row">
					<div class="col-md-12">
						<div class="control-section" align='center'>
							<div class="control-section">
								@if(TargetsList != null && TargetsList.Count > 0 && HeatDataSource != null)
								{
									<h5>DISTRICT OVC HIV_STAT Vs AGE CATEGORY</h5>
									<SfGrid DataSource="@TargetsList" AllowExcelExport="true" AllowPdfExport="true" AllowFiltering="false"
											AllowSorting="true" GridLines="GridLine.Both" AllowTextWrap="true">
										<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
										<GridEvents QueryCellInfo="QueryCellInfoHandler1" TValue="OVCServeValueTargets"></GridEvents>
										<GridAggregates>
											<GridAggregate>
												<GridAggregateColumns>
													<GridAggregateColumn Field="@nameof(OVCServeValueTargets.Active)" Type="AggregateType.Sum" Format="N0">
														<FooterTemplate>
															@{
																var aggregate = (context as AggregateTemplateContext);
																<div>
																	<span><p>@aggregate.Sum</p></span>
																</div>
															}
														</FooterTemplate>
													</GridAggregateColumn>
													<GridAggregateColumn Field="@nameof(OVCServeValueTargets.PercentageageCategory17)" Type="AggregateType.Average" Format="N1">
														<FooterTemplate>
															@{
																var aggregate = (context as AggregateTemplateContext);
																<div>
																	<span><p>@aggregate.Average</p></span>
																</div>
															}
														</FooterTemplate>
													</GridAggregateColumn>
													<GridAggregateColumn Field="@nameof(OVCServeValueTargets.PercentageageCategory18)" Type="AggregateType.Average" Format="N1">
														<FooterTemplate>
															@{
																var aggregate = (context as AggregateTemplateContext);
																<div>
																	<span><p>@aggregate.Average</p></span>
																</div>
															}
														</FooterTemplate>
													</GridAggregateColumn>
													<GridAggregateColumn Field="@nameof(OVCServeValueTargets.HIVpostive17)" Type="AggregateType.Sum" Format="N1">
														<FooterTemplate>
															@{
																var aggregate = (context as AggregateTemplateContext);
																<div>
																	<span><p>@aggregate.Sum</p></span>
																</div>
															}
														</FooterTemplate>
													</GridAggregateColumn>
													<GridAggregateColumn Field="@nameof(OVCServeValueTargets.HIVpostive18)" Type="AggregateType.Sum" Format="N1">
														<FooterTemplate>
															@{
																var aggregate = (context as AggregateTemplateContext);
																<div>
																	<span><p>@aggregate.Sum</p></span>
																</div>
															}
														</FooterTemplate>
													</GridAggregateColumn>
													<GridAggregateColumn Field="@nameof(OVCServeValueTargets.HIVnegative17)" Type="AggregateType.Sum" Format="N1">
														<FooterTemplate>
															@{
																var aggregate = (context as AggregateTemplateContext);
																<div>
																	<span><p>@aggregate.Sum</p></span>
																</div>
															}
														</FooterTemplate>
													</GridAggregateColumn>
													<GridAggregateColumn Field="@nameof(OVCServeValueTargets.HIVnegative18)" Type="AggregateType.Sum" Format="N1">
														<FooterTemplate>
															@{
																var aggregate = (context as AggregateTemplateContext);
																<div>
																	<span><p>@aggregate.Sum</p></span>
																</div>
															}
														</FooterTemplate>
													</GridAggregateColumn>
													<GridAggregateColumn Field="@nameof(OVCServeValueTargets.Unknwon17)" Type="AggregateType.Sum" Format="N1">
														<FooterTemplate>
															@{
																var aggregate = (context as AggregateTemplateContext);
																<div>
																	<span><p>@aggregate.Sum</p></span>
																</div>
															}
														</FooterTemplate>
													</GridAggregateColumn>
													<GridAggregateColumn Field="@nameof(OVCServeValueTargets.Unknwon18)" Type="AggregateType.Sum" Format="N1">
														<FooterTemplate>
															@{
																var aggregate = (context as AggregateTemplateContext);
																<div>
																	<span><p>@aggregate.Sum</p></span>
																</div>
															}
														</FooterTemplate>
													</GridAggregateColumn>
													<GridAggregateColumn Field="@nameof(OVCServeValueTargets.TNR18)" Type="AggregateType.Sum" Format="N1">
														<FooterTemplate>
															@{
																var aggregate = (context as AggregateTemplateContext);
																<div>
																	<span><p>@aggregate.Sum</p></span>
																</div>
															}
														</FooterTemplate>
													</GridAggregateColumn>
													<GridAggregateColumn Field="@nameof(OVCServeValueTargets.TNR17)" Type="AggregateType.Sum" Format="N1">
														<FooterTemplate>
															@{
																var aggregate = (context as AggregateTemplateContext);
																<div>
																	<span><p>@aggregate.Sum</p></span>
																</div>
															}
														</FooterTemplate>
													</GridAggregateColumn>
													<GridAggregateColumn Field="@nameof(OVCServeValueTargets.percentageC_ALHIV17)" Type="AggregateType.Average" Format="N1">
														<FooterTemplate>
															@{
																var aggregate = (context as AggregateTemplateContext);
																<div>
																	<span><p>@aggregate.Average</p></span>
																</div>
															}
														</FooterTemplate>
													</GridAggregateColumn>
													<GridAggregateColumn Field="@nameof(OVCServeValueTargets.percentageC_ALHIV18)" Type="AggregateType.Average" Format="N1">
														<FooterTemplate>
															@{
																var aggregate = (context as AggregateTemplateContext);
																<div>
																	<span><p>@aggregate.Average</p></span>
																</div>
															}
														</FooterTemplate>
													</GridAggregateColumn>
												</GridAggregateColumns>
											</GridAggregate>
										</GridAggregates>
										<GridColumns>
											<GridColumn Field=@nameof(OVCServeValueTargets.DistrictId) Visible="false" HeaderText="DistrictId" Width="110"> </GridColumn>
											<GridColumn Field=@nameof(OVCServeValueTargets.DistrictDescription) HeaderText="District" Width="100"></GridColumn>
											<GridColumn Field=@nameof(OVCServeValueTargets.Active) HeaderText="OVC_SERV.(0-18+)" Width="140"></GridColumn>
											<GridColumn HeaderText="0-17 Age Category" HeaderTextAlign="TextAlign.Center">
												<GridColumns>
													<GridColumn Field=@nameof(OVCServeValueTargets.PercentageageCategory17) Width="100" Visible="true" HeaderText="% OVC_SERV" Format="N1" AllowEditing="false" TextAlign="TextAlign.Right" MinWidth="10"></GridColumn>
													<GridColumn Field=@nameof(OVCServeValueTargets.HIVpostive17) Width="100" HeaderText="HIV +" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(OVCServeValueTargets.HIVnegative17) Width="100" HeaderText="HIV -" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(OVCServeValueTargets.Unknwon17) Width="100" HeaderText="Unkown Status" AllowEditing="true" TextAlign="TextAlign.Right" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(OVCServeValueTargets.TNR17) Width="100" HeaderText="TNR" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(OVCServeValueTargets.percentageC_ALHIV17) Width="100" HeaderText="%C/ALHIV" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
												</GridColumns>
											</GridColumn>
											<GridColumn HeaderText="18+ Age Category" HeaderTextAlign="TextAlign.Center">
												<GridColumns>
													<GridColumn Field=@nameof(OVCServeValueTargets.PercentageageCategory18) Width="100" Visible="true" HeaderText="% OVC_SERV" Format="N1" AllowEditing="false" TextAlign="TextAlign.Right" MinWidth="10"></GridColumn>
													<GridColumn Field=@nameof(OVCServeValueTargets.HIVpostive18) Width="100" HeaderText="HIV +" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(OVCServeValueTargets.HIVnegative18) Width="100" HeaderText="HIV -" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(OVCServeValueTargets.Unknwon18) Width="100" HeaderText="Unkown Status" AllowEditing="true" TextAlign="TextAlign.Right" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(OVCServeValueTargets.TNR18) Width="100" HeaderText="TNR" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(OVCServeValueTargets.percentageC_ALHIV18) Width="100" HeaderText="%C/ALHIV" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
												</GridColumns>
											</GridColumn>
										</GridColumns>
									</SfGrid>
								}
								else
								{
									<center style="margin-top:10px;"><h5>OVC HIV_STAT Vs AGE CATEGORY</h5></center>
									<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
										<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
									</div>
									
								}

							</div>
						</div>
					</div>

				</div>
				<div class="md-col-12">
					@if (TargetsList.Count > 0)
					{

						<div class="marquee-container">
							<marquee behavior="scroll" direction="left">
								<span class="marquee-text">
									Of FY @CurrentYear OVC_SERV target
							    	<span>@annualTargetValue</span>, currently at
									<span>@TargetsList[0].Percentage</span>,
									including
									<span>@TargetsList[0].PercentageFemaleActive</span> females and
									<span>@TargetsList[0].PercentageMaleActive</span> males,
									comprising
									<span>@TargetsList[0].PercentageageCategory17</span> aged between 0-17 and
									<span>@TargetsList[0].PercentageageCategory18</span> aged 18 and above.
								</span>
							@*FY @CurrentYear:Of <span>@annualTargetValue</span> OVC_SERV. (0-17 years) at SAPR,
								98.3% (disclosed a known HIV status proxy (KSP).
								Of these, 202 did not require an HIV test (TNR). Against 1st 95 ending epidemic target, 
								ICARE attained 97% known HIV status as positive and negative. During FY23_Q3, ICARE will
								assess the other 3% (305) siblings without a known HIV status for risk exposure
								and target eligible siblings of children with known risk factors for HIV testing*@
							</marquee>
						</div>

					}
				</div>
			</CarouselItem>
			<CarouselItem>
				<div class="row">
					<div class="col-md-6">
						<div class="control-section" align='center'>
							<div class="control-section">
								@if (TableOVCVLList != null && TableOVCVLList.Count > 0)
								{
									<h5>DISTRICT OVC HIV_STAT POSITIVE CLIENTS ELIGIBLE FOR VL</h5>
									<SfGrid DataSource="@TableOVCVLList" AllowExcelExport="true" AllowPdfExport="true" AllowFiltering="false"
											AllowSorting="true" GridLines="GridLine.Both" AllowTextWrap="true">
										<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
										<GridEvents QueryCellInfo="QueryCellInfoHandlerTable" TValue="TableOVCVL"></GridEvents>
										<GridColumns>
											<GridColumn Field=@nameof(TableOVCVL._DistrictId) Visible="false" HeaderText="DistrictId" Width="110"> </GridColumn>
											<GridColumn Field=@nameof(TableOVCVL._DistrictDescription) HeaderText="District" Width="100"></GridColumn>
											<GridColumn Field=@nameof(TableOVCVL._District_VL_Eligible) Width="110" HeaderText="Eligible(0-18+)" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
											<GridColumn HeaderText="0-17 Age Category" HeaderTextAlign="TextAlign.Center">
												<GridColumns>

													<GridColumn Field=@nameof(TableOVCVL._female0_17_VL_Eligible) Width="70" HeaderText="F" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._Male0_17_VL_Eligible) Width="70" HeaderText="M" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._percentage0_17_VL_Eligible) Width="90" Visible="true" HeaderText="% Eligible" Format="N1" AllowEditing="false" TextAlign="TextAlign.Right" MinWidth="10"></GridColumn>

												</GridColumns>
											</GridColumn>
											<GridColumn HeaderText="18+ Age Category" HeaderTextAlign="TextAlign.Center">
												<GridColumns>
													<GridColumn Field=@nameof(TableOVCVL._female18_VL_Eligible) Width="70" HeaderText="F" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._Male18_VL_Eligible) Width="70" HeaderText="M" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._percentage18_VL_Eligible) Width="90" Visible="true" HeaderText="% Eligible" Format="N1" AllowEditing="false" TextAlign="TextAlign.Right" MinWidth="10"></GridColumn>
												</GridColumns>
											</GridColumn>
										</GridColumns>
									</SfGrid>
								}
							</div>
						</div>
					</div>
					<div class="col-md-6">
						<div class="control-section" align='center'>
							<div class="control-section">
								@if (TableOVCVLList != null && TableOVCVLList.Count > 0)
								{
									<h5>DISTRICT OVC HIV_STAT POSITIVE CLIENTS WHOSE VL TEST DONE</h5>
									<SfGrid DataSource="@TableOVCVLList" AllowExcelExport="true" AllowPdfExport="true" AllowFiltering="false"
											AllowSorting="true" GridLines="GridLine.Both" AllowTextWrap="true">
										<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
										<GridEvents QueryCellInfo="QueryCellInfoHandlerTable" TValue="TableOVCVL"></GridEvents>
										<GridColumns>
											<GridColumn Field=@nameof(TableOVCVL._DistrictId) Visible="false" HeaderText="DistrictId" Width="110"> </GridColumn>
											<GridColumn Field=@nameof(TableOVCVL._DistrictDescription) HeaderText="District" Width="100"></GridColumn>
											<GridColumn Field=@nameof(TableOVCVL._District_VL_TestDone) Width="120" HeaderText="Test Done(0-18+)" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
											<GridColumn HeaderText="0-17 Age Category" HeaderTextAlign="TextAlign.Center">
												<GridColumns>

													<GridColumn Field=@nameof(TableOVCVL._female0_17_VL_TestDone) Width="70" HeaderText="F" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._Male0_17_VL_TestDone) Width="70" HeaderText="M" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._percentage0_17_VL_TestDone) Width="90" Visible="true" HeaderText="% Test Done" Format="N1" AllowEditing="false" TextAlign="TextAlign.Right" MinWidth="10"></GridColumn>

												</GridColumns>
											</GridColumn>
											<GridColumn HeaderText="18+ Age Category" HeaderTextAlign="TextAlign.Center">
												<GridColumns>
													<GridColumn Field=@nameof(TableOVCVL._female18_VL_TestDone) Width="70" HeaderText="F" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._Male18_VL_TestDone) Width="70" HeaderText="M" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._percentage18_VL_TestDone) Width="90" Visible="true" HeaderText="% Test Done" Format="N1" AllowEditing="false" TextAlign="TextAlign.Right" MinWidth="10"></GridColumn>
												</GridColumns>
											</GridColumn>
										</GridColumns>
									</SfGrid>
								}
							</div>
						</div>
					</div>
				</div>
			</CarouselItem>
			<CarouselItem>
				<div class="row">
					<div class="col-md-6">
						<div class="control-section" align='center'>
							<div class="control-section">
								@if (GroupedColumnModelData != null && GroupedColumnModelData.Count > 0)
								{
									<h5>DISTRICT AGE BAND OVC HIV_STAT POSITIVE CLIENTS ELIGIBLE FOR VL</h5>

									<MUCOBADI.Pages.Dashboards.PartialViews.LineChartPage GroupedColumnModelData="@GroupedColumnModelData" verticalAxis="Eligible Count">

									</MUCOBADI.Pages.Dashboards.PartialViews.LineChartPage>
								}
							</div>
						</div>
					</div>
					<div class="col-md-6">
						<div class="control-section" align='center'>
							<div class="control-section">
								@if (GroupedColumnModelData2 != null && GroupedColumnModelData2.Count > 0)
								{
									<h5>DISTRICT AGE BAND OVC HIV_STAT POSITIVE CLIENTS WHOSE VL TEST DONE</h5>

									<MUCOBADI.Pages.Dashboards.PartialViews.LineChartPage GroupedColumnModelData="@GroupedColumnModelData2" verticalAxis="Test Done Count">

									</MUCOBADI.Pages.Dashboards.PartialViews.LineChartPage>
								}
							</div>
						</div>
					</div>
				</div>
			</CarouselItem>
			<CarouselItem>
				<div class="row">
					<div class="col-md-6">
						<div class="control-section" align='center'>
							<div class="control-section">
								@if (TableOVCVLList != null && TableOVCVLList.Count > 0)
								{
									<h5>DISTRICT OVC HIV_STAT POSITIVE CLIENTS WITH SUPPRESSED RESULTS</h5>
									<SfGrid DataSource="@TableOVCVLList" AllowExcelExport="true" AllowPdfExport="true" AllowFiltering="false"
											AllowSorting="true" GridLines="GridLine.Both" AllowTextWrap="true">
										<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
										<GridEvents QueryCellInfo="QueryCellInfoHandlerTable" TValue="TableOVCVL"></GridEvents>
										<GridColumns>
											<GridColumn Field=@nameof(TableOVCVL._DistrictId) Visible="false" HeaderText="DistrictId" Width="110"> </GridColumn>
											<GridColumn Field=@nameof(TableOVCVL._DistrictDescription) HeaderText="District" Width="100"></GridColumn>
											<GridColumn Field=@nameof(TableOVCVL._District_VL_Eligible) Width="110" HeaderText="Suppressed(0-18+)" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
											<GridColumn HeaderText="0-17 Age Category" HeaderTextAlign="TextAlign.Center">
												<GridColumns>

													<GridColumn Field=@nameof(TableOVCVL.Female0_17SuppressedResults) Width="70" HeaderText="F" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL.Male0_17SuppressedResults) Width="70" HeaderText="M" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._percentage0_17SuppressedResults) Width="90" Visible="true" HeaderText="% Suppressed" Format="N1" AllowEditing="false" TextAlign="TextAlign.Right" MinWidth="10"></GridColumn>

												</GridColumns>
											</GridColumn>
											<GridColumn HeaderText="18+ Age Category" HeaderTextAlign="TextAlign.Center">
												<GridColumns>
													<GridColumn Field=@nameof(TableOVCVL.Female_18_SuppressedResults) Width="70" HeaderText="F" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL.Male_18_SuppressedResults) Width="70" HeaderText="M" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._percentage18SuppressedResults) Width="90" Visible="true" HeaderText="% Suppressed" Format="N1" AllowEditing="false" TextAlign="TextAlign.Right" MinWidth="10"></GridColumn>
												</GridColumns>
											</GridColumn>
										</GridColumns>
									</SfGrid>
								}

							</div>
						</div>
					</div>
					<div class="col-md-6">
						<div class="control-section" align='center'>
							<div class="control-section">
								@if (TableOVCVLList != null && TableOVCVLList.Count > 0)
								{
									<h5>DISTRICT OVC HIV_STAT POSITIVE CLIENTS WHOSE VL TEST RESULTS RECIEVED</h5>
									<SfGrid DataSource="@TableOVCVLList" AllowExcelExport="true" AllowPdfExport="true" AllowFiltering="false"
											AllowSorting="true" GridLines="GridLine.Both" AllowTextWrap="true">
										<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
										<GridEvents QueryCellInfo="QueryCellInfoHandlerTable" TValue="TableOVCVL"></GridEvents>
										<GridColumns>
											<GridColumn Field=@nameof(TableOVCVL._DistrictId) Visible="false" HeaderText="DistrictId" Width="110"> </GridColumn>
											<GridColumn Field=@nameof(TableOVCVL._DistrictDescription) HeaderText="District" Width="100"></GridColumn>
											<GridColumn Field=@nameof(TableOVCVL._District_VL_TestDone) Width="120" HeaderText="Test Done(0-18+)" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
											<GridColumn HeaderText="0-17 Age Category" HeaderTextAlign="TextAlign.Center">
												<GridColumns>

													<GridColumn Field=@nameof(TableOVCVL.Female0_17RecievedResults) Width="70" HeaderText="F" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL.Male0_17RecievedResults) Width="70" HeaderText="M" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._percentage0_17RecievedResults) Width="90" Visible="true" HeaderText="% Received" Format="N1" AllowEditing="false" TextAlign="TextAlign.Right" MinWidth="10"></GridColumn>

												</GridColumns>
											</GridColumn>
											<GridColumn HeaderText="18+ Age Category" HeaderTextAlign="TextAlign.Center">
												<GridColumns>
													<GridColumn Field=@nameof(TableOVCVL.Female_18_RecievedResults) Width="70" HeaderText="F" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL.Male_18_RecievedResults) Width="70" HeaderText="M" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._percentage18RecievedResults) Width="90" Visible="true" HeaderText="% Received" Format="N1" AllowEditing="false" TextAlign="TextAlign.Right" MinWidth="10"></GridColumn>
												</GridColumns>
											</GridColumn>
										</GridColumns>
									</SfGrid>
								}
							</div>
						</div>
					</div>
				</div>
			</CarouselItem>
			<CarouselItem>
				<div class="row">
					<div class="col-md-6">
						<div class="control-section" align='center'>
							<div class="control-section">
								@if (GroupedColumnModelData3 != null && GroupedColumnModelData3.Count > 0)
								{
									<h5>DISTRICT AGE BAND OVC HIV_STAT POSITIVE CLIENTS WITH SUPPRESSED RESULTS</h5>

									<MUCOBADI.Pages.Dashboards.PartialViews.LineChartPage GroupedColumnModelData="@GroupedColumnModelData3" verticalAxis="Suppressed Count">

									</MUCOBADI.Pages.Dashboards.PartialViews.LineChartPage>
								}
							</div>
						</div>
					</div>
					<div class="col-md-6">
						<div class="control-section" align='center'>
							<div class="control-section">
								@if (GroupedColumnModelData4 != null && GroupedColumnModelData4.Count > 0)
								{
									<h5>DISTRICT AGE BAND OVC HIV_STAT POSITIVE CLIENTS WHOSE VL TEST RESULTS RECIEVED</h5>

									<MUCOBADI.Pages.Dashboards.PartialViews.LineChartPage GroupedColumnModelData="@GroupedColumnModelData4" verticalAxis="Recieved Results Count">

									</MUCOBADI.Pages.Dashboards.PartialViews.LineChartPage>
								}
							</div>
						</div>
					</div>
				</div>
			</CarouselItem>
	@* 		<CarouselItem>
			</CarouselItem> *@
		
		}
					
					catch(Exception ex)
					{
					
					}
					finally
					{
						LoadingDialogue.HideAsync();
					}
			</SfCarousel>

</div>

<div>
	<SfDialog @ref="@LoadingDialogue"
			  ID="LoadingDialog"
			  Height="auto"
			  Width="20%"
			  AllowDragging="true"
			  Target=".mainbody"
			  ShowCloseIcon="false"
			  IsModal=true
			  Visible="false">
		<DialogTemplates>
			<Content>
				<div style="padding:25px">
					<div class="loader">
						<div class="loader--dot"></div>
						<div class="loader--dot"></div>
						<div class="loader--dot"></div>
						<div class="loader--dot"></div>
						<div class="loader--dot"></div>
						<div class="loader--dot"></div>
						<div class="loader-Loading-text"></div>
						
					</div>
				</div>
			</Content>
			<FooterTemplate>

			</FooterTemplate>
		</DialogTemplates>
	</SfDialog>
</div>
<style>
	#Card {
		width: 500px;
		height: 55vh;
		background-color: white;
	}

	#Card1 {
		width: 550px;
		height: 75vh;
		background-color: white;

	}

	#Card1 .Card1-header {
		font-family: 'Gill Sans MT';
		font-style: normal;
		color: black;
		font-weight:900;
		font-size: 24px;
	}

</style>
@code {
	public string _DistrictName { get; set; }
	public string DistrictHHVisited { get; set; }
	List<SubcountyDetails> SubcountyDetailsData = new List<SubcountyDetails>();
	public List<DistrictQuarter> DistrictQuarterData = new List<DistrictQuarter>();
	public Syncfusion.Blazor.Charts.LabelIntersectAction Label { get; set; } = Syncfusion.Blazor.Charts.LabelIntersectAction.Trim;
	private string CurrentDate = "Date:" + " " + DateTime.Now.ToString();
	private string CurrentYear1 => "Year:" + " " + DateTime.Now.Year.ToString();
	private string currentQuarter = null;
	private string currentDay = null;
	public string Quarter { get; set; }
	private string _daysLeftInQuarter;
	private int currentDistrictIndex = 0;
	private string CurrentYear => DateTime.Now.Year.ToString();
	public int count { get; set; }
	public int TNR18 { get; set; }
	public int countactive { get; set; }
	public int countOldActive { get; set; }
	public int TNR17 { get; set; }
	public int newEnrolled { get; set; }
	public int ageGroup17 { get; set; }
	public int ageGroup18 { get; set; }
	public int MaleActive { get; set; }
	public int FemaleActive { get; set; }
	public int HIVpostive17 { get; set; }
	public int HIVpostive18 { get; set; }
	public int HIVnegative17 { get; set; }
	public int HIVnegative18 { get; set; }
	public int Unknwon17 { get; set; }
	public int Unknwon18 { get; set; }
	public double numberOfHouseHolds = 0.0;
	public double annualTargetValue { get; set; }
	public double annualAchievedValue { get; set; }
	public double TotalHHValue { get; set; }
	public double _PercentageTotalHHValue{ get;set; }
	public double percentageOVC_SERV { get; set; }
	public double TotalHIVPositive17 { get; set; }
	public double TotalHIVNegative17 { get; set; }
	public double TotalUnknownStatus17 { get; set; }
	public double percentageCALHIV17 { get; set; }
	public double TotalHIVPositive18 { get; set; }
	public double TotalHIVNegative18 { get; set; }
	public double TotalUnknownStatus18 { get; set; }
	public double percentageCALHIV18 { get; set; }
	public string[] YLabels = new string[] { "BUGIRI", "BUGWERI", "IGANGA", "JINJA","JINJA CITY","KAMULI", "MAYUGE", "NAMAYINGO", "MUKONO", "KAYUNGA", "BUIKWE" };
	public string[] XLabels = new string[] { "F", "M", "F", "M", "F", "M", "F", "M", "F", "M", "F", "M","F", "M","F","M","Total" };
	string TitleDescription { get; set; } = null;
	int[,] HeatDataSource { get; set; }
	public double TotalUnder1 { get; set; } = 0;
	public double Total1_4 { get; set; } = 0;
	public double Total5_9 { get; set; } =0;
	public double Total10_14 { get; set; } = 0;
	public double Total15_17 { get; set; } =0;
	public double Total18_Plus { get; set; } = 0;
	public double percentageUnder1 { get; set; } = 0;
	public double percentage1_4 { get; set; } = 0;
	public double percentage5_9 { get; set; } = 0;
	public double percentage10_14 { get; set; } = 0;
	public double percentage15_17 { get; set; } = 0;
	public double percentage18_Plus { get; set; } = 0;
	public double? TotalMaleUnder1 { get; set; } = 0.0;
	public double? TotalFemaleUnder1 { get; set; } = 0.0;
	public double? TotalMale1_4 { get; set; }= 0.0;
	public double? TotalFemale1_4 { get; set; }= 0.0;
	public double? TotalMale5_9 { get; set; }= 0.0;
	public double? TotalFemale5_9 { get; set; }= 0.0;
	public double? TotalMale10_14 { get; set; }= 0.0;
	public double? TotalFemale10_14 { get; set; }= 0.0;
	public double? TotalMale15_17 { get; set; }= 0.0;
	public double? TotalFemale15_17 { get; set; }= 0.0;
	public double? TotalMale18plus { get; set; }= 0.0;
	public double? TotalFemale18plus { get; set; } = 0.0;
	List<DonutParameters>? DonutParameterDataSource { get; set; }
	string DistrictName { get; set; }
	string DistrictValueAchieved { get; set; }
	string DistrictValueAchieved1 { get; set; }
	string DistrictValueAchieved2 { get; set; }
	string DistrictValueAchieved3 { get; set; }
	string DistrictValueAchieved4 { get; set; }
	string DistrictValueAchieved5 { get; set; }
	string DistrictValueAchieved6 { get; set; }
	double MaximumValue { get; set; }
	List<BulletChartData> BulletsChartData = new List<BulletChartData>();
	List<BulletChartData> BulletsChartData1 = new List<BulletChartData>();
	List<BulletChartData> BulletsChartData2 = new List<BulletChartData>();
	List<BulletChartData> BulletsChartData3 = new List<BulletChartData>();
	List<BulletChartData> BulletsChartData4 = new List<BulletChartData>();
	List<BulletChartData> BulletsChartData5 = new List<BulletChartData>();
	List<BulletChartData> BulletsChartData6 = new List<BulletChartData>();
	#region Toasters
	public static string ToastContent { get; set; }
	SfToast ToastObj;
	SfToast DeleteToastObj;
	private string ToastPosition = "Right";
	private int AlarmTimeout { get; set; } = 120000;
	private List<ToastModel> Toast = new List<ToastModel>
	{
		new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
		new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
		new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
		new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
	};
	#endregion Toasters

	string QuarterNo { get; set; }
	string Qtr = null;
	string PreviousQtr = null;
	string Yr = null;
	private List<ViewDashboardBeneficiaryIdentificationRegister> TotalHouseHoldsToVisit { get; set; }
	private List<spDashboardHouseHoldsGetAllResult> TotalHouseholdsVisited { get; set; }
	List<spDashboard_OVC_SERVResult> OvcServeData { get; set; }
	List<spDashboard_OVC_SERV_Disagregated_By_AgeResult> OvcServeGenderDisagregationData { get; set; }
	List<ViewDashboardTnrhivstatus> UnknownTNRData { get; set; }
	List<ViewATargets> TargetsData { get; set; }
	List<DasboardDistricts> data { get; set; }
	List<AFinancialYear> YearsDataSource { get; set; }
	List<ADistrict> DistrictsDataSource { get; set; }
	List<ASubcounty> SubcountiesDataSource { get; set; }
	private Syncfusion.Blazor.Theme Theme { get; set; }
	private double[] Spacing = new double[] { 15, 15 };
	private double Ratio = 160 / 100;
	SearchPanel SearchModel { get; set; } = new();
	List<string> SeriesColors { get; set; } = new List<string>()
	{
		"#2485FA","#4d0702","#808285","#6002EE","#008b00","#262626","#424d44","#472b42","#1e4167","#3d1d00"
	};
	SfDialog? LoadingDialogue;
	private UtilitiesSearchPanel InputModel = new();
	List<AQuarter> QuarterData { get; set; }
	bool isQuarterEnabled { get; set; } = true;
	bool isSubcountyEnabled  { get; set; } = false;
	bool Downloadreport { get; set; } = false;
	Random random = new Random();
	public class OVCServeValueTargets
	{
		public double? TargetValue { get; set; }
		public int? DistrictId { get; set; }
		public int? FinancialYearId { get; set; }
		public string DistrictDescription { get; set; }
		public string FinancialYearDesc { get; set; }
		public int? VisitationMonth { get; set; }
		public int? Qtr { get; set; }
		public int? VisitationYear { get; set; }
		public double? ActualValue { get; set; }
		public double? Active { get; set; }
		public double? Graduated { get; set; }
		public double Percentage { get; set; }
		public double? ActivePreviousQtr { get; set; }
		public double? NewlyEnrolled { get; set; }
		public double? FinalServ { get; set; }
		public double? ageCategory17 { get; set; }
		public double? ageCategory18 { get; set; }
		public double? MaleActive { get; set; }
		public double? FemaleActive { get; set; }
		public double? PercentageMaleActive { get; set; }
		public double? PercentageFemaleActive { get; set; }
		public double? PercentageageCategory17 { get; set; }
		public double? PercentageageCategory18 { get; set; }
		public double? TNR17 { get; set; }
		public double? TNR18 { get; set; }
		public double? HIVpostive17 { get; set; }
		public double? HIVpostive18 { get; set; }
		public double? HIVnegative17 { get; set; }
		public double? HIVnegative18 { get; set; }
		public double? Unknwon17 { get; set; }
		public double? Unknwon18 { get; set; }
		public double? percentageC_ALHIV18 { get; set; }
		public double? percentageC_ALHIV17 { get; set; }
		public double? numberOfHouseHolds { get; set; }
	}
	List<OVCServeValueTargets> TargetsList = new List<OVCServeValueTargets>();
	List<CardDataModel> CardDatas = new List<CardDataModel>();
	List<CardDataModel> CardDatas2 = new List<CardDataModel>();
	List<MixedChartModel> MixedChartModelData = new List<MixedChartModel>();
	public class DasboardDistricts
	{
		public int? DistrictId { get; set; }
		public string DistrictDescription { get; set; }
	}

	int daysdifference{ get; set; }
	public string Width { get; set; } = "90%";
	public double Rotation { get; set; } = 0;
	protected override async Task OnInitializedAsync()
	{
		try
		{
			await base.OnInitializedAsync();
			Width = "100%";
			Rotation = -45;
			DateTime today = DateTime.Now;
			int currentMonth1 = today.Month;
			string _currentDate = DateTime.Now.ToString();
			int quarter = (currentMonth1 - 1) / 3 + 1;
			DateTime lastDateOfQuarter;
			DateTime currentDate = DateTime.Now;
			StartAngle = 70;
			Radius = "40%";
			ConnectorLength = "10px";
			Size = "8px";
			if (currentMonth1 >= 10 && currentMonth1 <= 12)
			{
				quarter = 1;
				Quarter = "Quarter:One";
				lastDateOfQuarter = new DateTime(currentDate.Year, 12, 31);
				TimeSpan difference = lastDateOfQuarter - currentDate;
				daysdifference = difference.Days;
				_daysLeftInQuarter = Convert.ToString(difference.Days) + " " + "Days left to end of quarter one";
			}
			else if (currentMonth1 >= 1 && currentMonth1 <= 3)
			{
				quarter = 2;
				Quarter = "Quarter:Two";
				lastDateOfQuarter = new DateTime(currentDate.Year, 3, 31);
				TimeSpan difference = lastDateOfQuarter - currentDate;
				daysdifference = difference.Days;
				_daysLeftInQuarter = Convert.ToString(difference.Days) + " " + "Days left to end of quarter two";
			}
			else if (currentMonth1 >= 4 && currentMonth1 <= 6)
			{
				quarter = 3;
				Quarter = "Quarter:Three";
				lastDateOfQuarter = new DateTime(currentDate.Year, 6, 30);
				TimeSpan difference = lastDateOfQuarter - currentDate;
				daysdifference = difference.Days;
				_daysLeftInQuarter = Convert.ToString(difference.Days) + " " + "Days left to end of quarter three";
			}
			else if (currentMonth1 >= 7 && currentMonth1 <= 9)
			{
				quarter = 4;
				Quarter = "Quarter:Four";
				lastDateOfQuarter = new DateTime(currentDate.Year, 9, 30);
				TimeSpan difference = lastDateOfQuarter - currentDate;
				daysdifference = difference.Days;
				_daysLeftInQuarter = Convert.ToString(difference.Days) + " " + "Days left to end of quarter four";
			}

			QuarterData = await _dbcontext
			.AQuarter
			.Where(o => o.QuarterId >= 1 && o.QuarterId <= 4)
			.ToListAsync();

			YearsDataSource = await _dbcontext
			.AFinancialYear
			.OrderBy(o => o.FinancialYearDesc)
			.ToListAsync();

			DistrictsDataSource = await _dbcontext
			.ADistrict
			.OrderBy(o => o.DistrictDescription)
			.ToListAsync();

			SubcountiesDataSource = await _dbcontext
			.ASubcounty
			.OrderBy(o => o.SubcountyDescription)
			.ToListAsync();

			await LoadDashboards();
			await GetCardDatas();
			await GetSubcountyCardDatas();

		}
		catch(Exception ex)
		{
			throw ex;
		}

		finally
		{


		}
	}

	public class PreviousQtrsClass
	{
		public string PreviousQtrs { get; set; }
	}
	public class CardDataModel
	{
		public string ImageUrl { get; set; }
		public string Title { get; set; }
		public string SubTitle { get; set; }
		public string Content { get; set; }
		public string NavUrl { get; set; }
		public string Tag { get; set; }
	}
	List<GroupedColumnModel> GroupedColumnModelData = new List<GroupedColumnModel>();
	List<GroupedColumnModel> GroupedColumnModelData2 = new List<GroupedColumnModel>();
	List<GroupedColumnModel> GroupedColumnModelData3 = new List<GroupedColumnModel>();
	List<GroupedColumnModel> GroupedColumnModelData4 = new List<GroupedColumnModel>();
	private List<CardDataModel> _cardDatas;
	public List<CardDataModel> CardDatass
	{
		get { return _cardDatas; }
		set { _cardDatas = value; }
	}
	//Table OVC Eligible
	public double female0_17_VL_Eligible { get; set; }
	public double Male0_17_VL_Eligible { get; set; }
	public double female18_VL_Eligible { get; set; }
	public double Male18_VL_Eligible { get; set; }
	public double District_VL_Eligible { get; set; }
	//public double Ditrict18_VL_Eligible { get; set; }
	public double female0_17_VL_TestDone { get; set; }
	public double Male0_17_VL_TestDone { get; set; }
	public double female18_VL_TestDone { get; set; }
	public double Male18_VL_TestDone { get; set; }
	public double District_VL_TestDone { get; set; }
	//public double Ditrict18_VL_TestDone {get;set;}
	public double percentage18_VL_TestDone { get; set; }
	public double percentage0_17_VL_TestDone { get; set; }
	public double percentage0_17_VL_Eligible { get; set; }
	public double percentage18_VL_Eligible { get; set; }
	public double Total_Eligible { get; set; }
	public double Total_TestDone { get; set; }
	public double Total_EligibleF18 { get; set; }
	public double Total_TestDoneF18 { get; set; }
	public double Total_EligibleF17 { get; set; }
	public double Total_TestDoneF17 { get; set; }
	public double Total_EligibleM18 { get; set; }
	public double Total_TestDoneM18 { get; set; }
	public double Total_EligibleM17 { get; set; }
	public double Total_TestDoneM17 { get; set; }
	public string DistrictDescription { get; set; }
	public double lessthan1 { get; set; }
	public double OnetoFour { get; set; }
	public double FivetoNine { get; set; }
	public double TentoFourteen { get; set; }
	public double FifteentoSeventeen { get; set; }
	public double Eighteento25YearsPlus { get; set; }
	public double Suppressed_LessThanOne { get; set; }
	public double Suppressed_OnetoFour { get; set; }
	public double Suppressed_FivetoNine { get; set; }
	public double Suppressed_TentoFourteen { get; set; }
	public double Suppressed_FifteentoSeventeen { get; set; }
	public double Suppressed_18YearsPlus { get; set; }
	public double TestDone_LessThanOne { get; set; }
	public double TestDone_OnetoFour { get; set; }
	public double TestDone_FivetoNine { get; set; }
	public double TestDone_TentoFourteen { get; set; }
	public double TestDone_FifteentoSeventeen { get; set; }
	public double TestDone_18YearsPlus { get; set; }
	public double RecievedResults_LessThanOne { get; set; }
	public double RecievedResults_OnetoFour { get; set; }
	public double RecievedResults_FivetoNine { get; set; }
	public double RecievedResults_TentoFourteen { get; set; }
	public double RecievedResults_FifteentoSeventeen { get; set; }
	public double RecievedResults_18YearsPlus { get; set; }
	public class TableOVCVL
	{
		public double _female0_17_VL_Eligible { get; set; }
		public double _Male0_17_VL_Eligible { get; set; }
		public double _female18_VL_Eligible { get; set; }
		public double _Male18_VL_Eligible { get; set; }
		public double _District_VL_Eligible { get; set; }
		public double _female0_17_VL_TestDone { get; set; }
		public double _Male0_17_VL_TestDone { get; set; }
		public double _female18_VL_TestDone { get; set; }
		public double _Male18_VL_TestDone { get; set; }
		public double _District_VL_TestDone { get; set; }
		public double _percentage18_VL_TestDone { get; set; }
		public double _percentage0_17_VL_TestDone { get; set; }
		public double _percentage0_17_VL_Eligible { get; set; }
		public double _percentage18_VL_Eligible { get; set; }
		public double _percentage0_17RecievedResults { get; set; }
		public double _percentage18RecievedResults { get; set; }
		public double _Total_Eligible { get; set; }
		public double _Total_TestDone { get; set; }
		public string _DistrictDescription { get; set; }
		public int _DistrictId { get; set; }
		public double Female0_17RecievedResults { get; set; }
		public double Female_18_RecievedResults { get; set; }
		public double Male0_17RecievedResults { get; set; }
		public double Male_18_RecievedResults { get; set; }
		public double RecievedResultsTotal0_17 { get; set; }
		public double RecievedResultsTotal18 { get; set; }
		public double _percentage18SuppressedResults { get; set; }
		public double _percentage0_17SuppressedResults { get; set; }
		public double Female0_17SuppressedResults { get; set; }
		public double Female_18_SuppressedResults { get; set; }
		public double Male0_17SuppressedResults { get; set; }
		public double Male_18_SuppressedResults { get; set; }
		public double SuppressedResultsTotal0_17 { get; set; }
		public double SuppressedResultsTotal18 { get; set; }
		public double Suppressed_Results_District { get; set; }
		public double Recieved_Results_District { get; set; }
		//Age bands
		public double _lessthan1 { get; set; }
		public double _OnetoFour { get; set; }
		public double _FivetoNine { get; set; }
		public double _TentoFourteen { get; set; }
		public double _FifteentoSeventeen { get; set; }
		public double _Eighteento25YearsPlus { get; set; }
		public double _Suppressed_LessThanOne { get; set; }
		public double _Suppressed_OnetoFour { get; set; }
		public double _Suppressed_FivetoNine { get; set; }
		public double _Suppressed_TentoFourteen { get; set; }
		public double _Suppressed_FifteentoSeventeen { get; set; }
		public double _Suppressed_18YearsPlus { get; set; }
		public double _TestDone_LessThanOne { get; set; }
		public double _TestDone_OnetoFour { get; set; }
		public double _TestDone_FivetoNine { get; set; }
		public double _TestDone_TentoFourteen { get; set; }
		public double _TestDone_FifteentoSeventeen { get; set; }
		public double _TestDone_18YearsPlus { get; set; }
	}
	List<TableOVCVL> TableOVCVLList = new List<TableOVCVL>();
	List<DistrictSubcounty> CardList = new List<DistrictSubcounty>();
	List<SubcountyDetails> SubcountyList = new List<SubcountyDetails>();
	List<DistrictSubcounty> SubcountyCardDatas = new List<DistrictSubcounty>();

	private void ClearSearchBtnClick()
	{
		InputModel = new();
	}

	private async Task GetCardDatas()
	{
		try
		{
			using (var _dbcontext = new SPToCoreContext())
			{
				var currentMonth = DateTime.Now.Month;
				var currentYear = DateTime.Now.Year;
				var previousYear = currentYear - 1;
				string startDate = null;
				string endDate = null;
				//currentMonth = 7;
				var _financialYear = new AFinancialYear();
				//	var _financialYear = _dbcontext.AFinancialYear.FirstOrDefault(o => o.FinancialYearDesc.Trim() == (currentYear - 1).ToString());
				SearchModel = new SearchPanel();
				SearchModel.Startdate = new DateTime(DateTime.Now.Year, 1, 1);
				SearchModel.Enddate = new DateTime(DateTime.Now.Year, 12, 31);

				int StartMonth = 1;
				int EndMonth = 12;

				if (currentMonth >= 1 && currentMonth <= 3)
				{
					QuarterNo = "TWO (JAN-MAR)";
					startDate = currentYear + "-01-01";
					endDate = currentYear + "-03-31";
					Qtr = "2";
					PreviousQtr = "1";
					StartMonth = 1;
					EndMonth = 3;
					_financialYear = _dbcontext.AFinancialYear.FirstOrDefault(o => o.FinancialYearDesc.Trim() == (currentYear - 1).ToString());
				}
				else if (currentMonth >= 4 && currentMonth <= 6)
				{
					QuarterNo = "THREE (APR-JUN)";
					startDate = currentYear + "-04-01";
					endDate = currentYear + "-06-30";
					Qtr = "3";
					PreviousQtr = "2";
					StartMonth = 4;
					EndMonth = 6;
					_financialYear = _dbcontext.AFinancialYear.FirstOrDefault(o => o.FinancialYearDesc.Trim() == (currentYear-1).ToString());
				}
				else if (currentMonth >= 7 && currentMonth <= 9)
				{
					QuarterNo = "FOUR (JUL-SEP)";
					startDate = currentYear + "-07-01";
					endDate = currentYear + "-09-30";
					Qtr = "4";
					PreviousQtr = "3";
					StartMonth = 7;
					EndMonth = 9;
					_financialYear = _dbcontext.AFinancialYear.FirstOrDefault(o => o.FinancialYearDesc.Trim() == (currentYear-1).ToString());
				}
				else if (currentMonth >= 10 && currentMonth <= 12)
				{
					QuarterNo = "ONE (OCT-DEC)";
					startDate = currentYear + "-10-01";
					endDate = currentYear + "-12-31";
					Qtr = "1";
					PreviousQtr = "4";
					StartMonth = 10;
					EndMonth = 12;
					_financialYear = _dbcontext.AFinancialYear.FirstOrDefault(o => o.FinancialYearDesc.Trim() == currentYear.ToString());
				}

				TargetsData = await _dbcontext.ViewATargets.Where(o => o.FinancialYearDesc.Trim() == _financialYear.FinancialYearDesc).ToListAsync();
			    OvcServeData = await _dbcontext.spDashboard_OVC_SERVAsync(null, null, _financialYear.FinancialYearId.ToString(), null, null, Convert.ToDateTime(startDate), Convert.ToDateTime(endDate));
				OvcServeGenderDisagregationData = await _dbcontext.spDashboard_OVC_SERV_Disagregated_By_AgeAsync(null, null, _financialYear.FinancialYearId.ToString(), null, null, Convert.ToDateTime(startDate), Convert.ToDateTime(endDate));
				HomeVisitsCountSummaryData = await _dbcontext.spHomeVisitsCountSummaryAsync(Convert.ToDateTime(startDate), Convert.ToDateTime(endDate), null, _financialYear.FinancialYearId);
				
				var _data = OvcServeData.Select(o => new {o.FinancialYearDesc }).Distinct();
				var records  = OvcServeData.Select(o => new {o.FinancialYearDesc }).Distinct().FirstOrDefault();
				var _card2Data = OvcServeGenderDisagregationData.Select(o => new { o.FinancialYearDesc }).Distinct();
				//Card Data
				#region CardData
				double comprehensiveOVCProgramTarget = 0;
				double reachedOVC = 0;
				double performancePercentage = 0;
				double femaleCount = 0;
				double femalePercentage = 0;
				double maleCount = 0;
				double malePercentage = 0;
				double childrenCount = 0;
				double childrenPercentage = 0;
				double lowestRatio = 0;
				string text = null;
				double SumageGroup18 = 0;
				if (OvcServeData != null && OvcServeData.Count > 0)
				{
					//Target Values dont use it
					var ovcservefilter = OvcServeData.Where(o => o.FinancialYearDesc.ToString() == records.FinancialYearDesc.ToString()).ToList();
					if (ovcservefilter != null)
					{
						lowestRatio = ovcservefilter.Count();
					}
					//Active Current Qtr
					var ovcservefilterCurrentactive = OvcServeData.Where(o => o.FinancialYearDesc.ToString() == records.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1).ToList();
					if (ovcservefilterCurrentactive != null)
					{
						reachedOVC = ovcservefilterCurrentactive.Count();
					}
					//Active 17
					var ovcserveageGroup17 = OvcServeData.Where(o => o.FinancialYearDesc.ToString() == records.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "0-17 Years").ToList();
					if (ovcserveageGroup17 != null)
					{
						childrenCount = ovcserveageGroup17.Count();
					}
					//Active 18
					var ovcserveageGroup18 = OvcServeData.Where(o => o.FinancialYearDesc.ToString() == records.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "18+ Years").ToList();
					if (ovcserveageGroup18 != null)
					{
						SumageGroup18 = ovcserveageGroup18.Count();
					}
					//Active Male
					var ovcserveMale = OvcServeData.Where(o => o.FinancialYearDesc.ToString() == records.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.GenderId == "M").ToList();
					if (ovcserveMale != null)
					{
						maleCount = ovcserveMale.Count();
					}
					//Active Female
					var ovcserveFemale = OvcServeData.Where(o => o.FinancialYearDesc.ToString() == records.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.GenderId == "F").ToList();
					if (ovcserveFemale != null)
					{
						femaleCount = ovcserveFemale.Count();
					}
					//HIV postive 0-17
					var HIVpostive177 = OvcServeData.Where(o => o.FinancialYearDesc.ToString() == records.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "0-17 Years" && o.HIVStatusId == 1).ToList();
					if (HIVpostive177 != null)
					{
						HIVpostive17 = HIVpostive177.Count();

					}
					//HIV -ve 0-17
					var HIVnegaive177 = OvcServeData.Where(o => o.FinancialYearDesc.ToString() == records.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "0-17 Years" && o.HIVStatusId == 2).ToList();
					if (HIVnegaive177 != null)
					{
						HIVnegative17 = HIVnegaive177.Count();

					}
					//Unknown status 0-17
					var Unknown177 = OvcServeData.Where(o => o.FinancialYearDesc.ToString() == records.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "0-17 Years" && o.HIVStatusId == 3).ToList();
					if (Unknown177 != null)
					{
						Unknwon17 = Unknown177.Count();

					}
					//HIV postive 18+
					var HIVpostive188 = OvcServeData.Where(o => o.FinancialYearDesc.ToString() == records.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "18+ Years" && o.HIVStatusId == 1).ToList();
					if (HIVpostive188 != null)
					{
						HIVpostive18 = HIVpostive188.Count();
					}
					//HIV _ve 18+
					var HIVnegative188 = OvcServeData.Where(o => o.FinancialYearDesc.ToString() == records.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "18+ Years" && o.HIVStatusId == 2).ToList();
					if (HIVnegative188 != null)
					{
						HIVnegative18 = HIVnegative188.Count();

					}
					//Unknown status 18+
					var Unknown188 = OvcServeData.Where(o => o.FinancialYearDesc.ToString() == records.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "18+ Years" && o.HIVStatusId == 3).ToList();
					if (Unknown188 != null)
					{
						Unknwon18 = Unknown188.Count();
					}
					//Test Not Required 17
					var filteredHouseholds17 = OvcServeData.Where(o => o.FinancialYearDesc.ToString() == records.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "0-17 Years")
														.GroupBy(data => data.HouseHoldId)
														.Where(group =>
															group.Count() > 1 &&
															group.All(data => data.HIVStatusId == 1) &&
															group.Any(data => data.HIVStatusId == 3)
														)
														.SelectMany(group => group);
					if (filteredHouseholds17 != null)
					{
						TNR17 = filteredHouseholds17.Count();
					}
					//Test Not Required 18
					var filteredHouseholds18 = OvcServeData.Where(o => o.FinancialYearDesc.ToString() == records.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "18+ Years")
														.GroupBy(data => data.HouseHoldId)
														.Where(group =>
															group.Count() > 1 &&
															group.All(data => data.HIVStatusId == 1) &&
															group.Any(data => data.HIVStatusId == 3)
														)
														.SelectMany(group => group);
					if (filteredHouseholds18 != null)
					{
						TNR18 = filteredHouseholds18.Count();
					}
					reachedOVC = childrenCount + SumageGroup18;
					annualAchievedValue = reachedOVC;
					var tvalue = TargetsData.Where(o => o.FinancialYearDesc == records.FinancialYearDesc.ToString()).ToList();
					if (tvalue != null && tvalue.Count > 0)
					{
						double totalTarget = 0;
						foreach (var item in tvalue)
						{
							totalTarget += item.TargetValue.Value;
						}
						comprehensiveOVCProgramTarget = totalTarget;
					}
					else
					{
						comprehensiveOVCProgramTarget = 0;
					}
					annualTargetValue = comprehensiveOVCProgramTarget;
					if (reachedOVC > 0)
					{
						femalePercentage = Math.Round((((double)femaleCount / (double)reachedOVC) * 100), 1);
						malePercentage = Math.Round((((double)maleCount / (double)reachedOVC) * 100), 1);
						childrenPercentage = Math.Round((((double)childrenCount / (double)reachedOVC) * 100), 1);
					}
					if (comprehensiveOVCProgramTarget > 0)
					{
						performancePercentage = Math.Round((((double)reachedOVC / (double)comprehensiveOVCProgramTarget) * 100), 1);
						_PercentageTotalHHValue = performancePercentage;
					}
					//string text = $"Disaggregation: Against a comprehensive OVC program target of {comprehensiveOVCProgramTarget} OVC (0-18+ years) with known risk factors, ICARE reached {reachedOVC} OVC (0-18+ years), attaining {performancePercentage}% performance. The {reachedOVC} OVC_SERV. included {femaleCount} ({femalePercentage}%) females & {maleCount} ({malePercentage}%) males. Additionally, these included {childrenCount} ({childrenPercentage}%) children (0-17 years) & {caregiverCount} ({caregiverPercentage}%) adult caregivers. Each of the {householdCount} household had a ratio of {highestRatio} children per caregiver, with the highest ratio of {highestRatio} children per caregiver in Bugiri district & the lowest ratio of {lowestRatio} children per caregiver in Jinja district.";
					text = $"Against a comprehensive OVC program target of <span style='color:red;'>{comprehensiveOVCProgramTarget}</span> OVC (0-18+ years) with known risk factors, ICARE reached <span style='color:red;'>{reachedOVC}</span> OVC (0-18+ years), attaining <span style='color:red;'>{performancePercentage}%</span> performance. The <span style='color:red;'>{reachedOVC}</span> OVC_SERV. included <span style='color:red;'>{femaleCount} ({femalePercentage}%)</span>females & <span style='color:red;'>{maleCount} ({malePercentage}%)</span> males. Additionally, these included <span style='color:red;'>{childrenCount} ({childrenPercentage}%)</span> children (0-17 years)</span>.";
				}
				CardDataModel cc = new CardDataModel();
				cc.Content = text;
				cc.Title = "Disaggregation";
				CardDatas.Add(cc);
				#endregion CardData
				//Card 2
				#region Card2
				var Card2records = OvcServeGenderDisagregationData.Select(o => new { o.FinancialYearDesc }).Distinct().FirstOrDefault();
				double? totalMaleUnder1 = 0.0;
				double? totalFemaleUnder1 = 0.0;
				double? totalMale1_4 = 0.0;
				double? totalFemale1_4 = 0.0;
				double? totalMale5_9 = 0.0;
				double? totalFemale5_9 = 0.0;
				double? totalMale10_14 = 0.0;
				double? totalFemale10_14 = 0.0;
				double? totalMale15_17 = 0.0;
				double? totalFemale15_17 = 0.0;
				double? totalMale18plus = 0.0;
				double? totalFemale18plus = 0.0;
				double? All_Male = 0.0;
				double? All_Female = 0.0;
				double percentageAll_Male = 0.0;
				double percentage_All_Female = 0.0;
				double percentage_Under1 = 0.0;
				double percentage_1_4 = 0.0;
				double percentage_5_9 = 0.0;
				double percentage_10_14 = 0.0;
				double percentage_15_17 = 0.0;
				double percentage18_Plus = 0.0;
				string card2Text = null;
				if(OvcServeGenderDisagregationData != null && OvcServeGenderDisagregationData.Count > 0)
				{
					//totalMaleUnderOne
					var total_Values = OvcServeGenderDisagregationData.Where(o => o.FinancialYearDesc.ToString() == Card2records.FinancialYearDesc.ToString()).ToList();
					if (total_Values != null && total_Values.Count > 0)
					{
						totalMaleUnder1 = total_Values.Sum(o => o.Male_Under_One_Year);
						totalFemaleUnder1 = total_Values.Sum(o => o.Female_Under_One_Year);
						totalMale1_4 = total_Values.Sum(o=>o.Male_1_4);
						totalFemale1_4 = total_Values.Sum(o=>o.Female_1_4);
						totalFemale5_9 = total_Values.Sum(o => o.Female_5_9);
						totalMale5_9 = total_Values.Sum(o => o.Male_5_9);
						totalMale10_14 = total_Values.Sum(o => o.Male_10_14);
						totalFemale10_14 = total_Values.Sum(o => o.Female_10_14);
						totalMale15_17 = total_Values.Sum(o => o.Male_15_17);
						totalFemale15_17 = total_Values.Sum(o => o.Female_15_17);
						totalMale18plus = total_Values.Sum(o => o.Male_18_24);
						totalFemale18plus = total_Values.Sum(o => o.Female_18_24);
						All_Male = total_Values.Sum(o=>o.MaleSum);
						All_Female = total_Values.Sum(o=>o.FemaleSum);

						if (totalMaleUnder1 != null)
						{
							TotalMaleUnder1 = totalMaleUnder1;
						}
						else
						{
							TotalMaleUnder1 = 0;
						}
						if (totalFemaleUnder1 != null)
						{
							TotalFemaleUnder1 = totalFemaleUnder1;
						}
						else
						{
							TotalFemaleUnder1 = 0;
						}

						if (totalMale1_4 != null)
						{
							TotalMale1_4 = totalMale1_4;
						}
						else
						{
							TotalMale1_4 = 0;
						}
						if (totalFemale1_4 != null)
						{
							TotalFemale1_4 = totalFemale1_4;
						}
						else
						{
							TotalFemale1_4 = 0;
						}

						if (totalMale5_9 != null)
						{
							TotalMale5_9 = totalMale5_9;
						}
						else
						{
							TotalMale5_9 = 0;
						}
						if (totalFemale5_9 != null)
						{
							TotalFemale5_9 = totalFemale5_9;
						}
						else
						{
							TotalFemale5_9 = 0;
						}

						if (totalMale10_14 != null)
						{
							TotalMale10_14 = totalMale10_14;
						}
						else
						{
							TotalMale10_14 = 0;
						}
						if (totalFemale10_14 != null)
						{
							TotalFemale10_14 = totalFemale10_14;
						}
						else
						{
							TotalFemale10_14 = 0;
						}

						if (totalMale15_17 != null)
						{
							TotalMale15_17 = totalMale15_17;
						}
						else
						{
							TotalMale15_17 = 0;
						}
						if (totalFemale15_17 != null)
						{
							TotalFemale15_17 = totalFemale15_17;
						}
						else
						{
							TotalFemale15_17 = 0;
						}

						if (totalMale18plus != null)
						{
							TotalMale18plus = totalMale18plus;
						}
						else
						{
							TotalMale18plus = 0;
						}
						if (totalFemale18plus != null)
						{
							TotalFemale18plus = totalFemale18plus;
						}
						else
						{
							TotalFemale18plus = 0;
						}
						if (totalMaleUnder1 != null || totalFemaleUnder1 != null)
						{
							TotalUnder1 = totalMaleUnder1.Value + totalFemaleUnder1.Value;
						}
						if (totalMale1_4 != null || totalFemale1_4 != null)
						{
							Total1_4 = totalMale1_4.Value + totalFemale1_4.Value;
						}
						if (totalMale5_9 != null || totalFemale5_9 != null)
						{
							Total5_9 = totalMale5_9.Value + totalFemale5_9.Value;
						}
						if (totalFemale10_14 != null || totalMale10_14 != null)
						{
							Total10_14 = totalFemale10_14.Value + totalMale10_14.Value;
						}
						if (totalFemale15_17 != null || totalMale15_17 != null)
						{
							Total15_17 = totalMale15_17.Value + totalFemale15_17.Value;
						}
						if (totalFemale18plus != null || totalMale18plus != null)
						{
							Total18_Plus = totalFemale18plus.Value + totalMale18plus.Value;
						}
						if (annualAchievedValue != null && annualAchievedValue > 0)
						{
							percentageAll_Male = Math.Round((((double)All_Male / (double)annualAchievedValue) * 100), 1);
							percentage_All_Female = Math.Round((((double)All_Female / (double)annualAchievedValue) * 100), 1);
							percentage_Under1 = Math.Round((((double)TotalUnder1 / (double)annualAchievedValue) * 100), 1);
							percentage_1_4 = Math.Round((((double)Total1_4 / (double)annualAchievedValue) * 100), 1);
							percentage_5_9 = Math.Round((((double)Total5_9 / (double)annualAchievedValue) * 100), 1);
							percentage_10_14 = Math.Round((((double)Total10_14 / (double)annualAchievedValue) * 100), 1);
							percentage_15_17 = Math.Round((((double)Total15_17 / (double)annualAchievedValue) * 100), 1);
							percentage18_Plus = Math.Round((((double)Total18_Plus / (double)annualAchievedValue) * 100), 1);
						}
						card2Text = $"Of <span style='color:red;'>{annualAchievedValue}</span> OVC (0-18+ years) reached with services; <span style='color:red;'>{percentage_All_Female}% ({All_Female})</span> were females while <span style='color:red;'>{percentageAll_Male}% ({All_Male})</span> were males. Under one year were <span style='color:red;'>{percentage_Under1}% ({TotalUnder1}: {TotalFemaleUnder1}F & {TotalMaleUnder1}M)</span>; 01-04 years were <span style='color:red;'>{percentage_1_4}% ({Total1_4}: {TotalFemale5_9}F & {TotalMale5_9}M)</span>; 05-09 years were <span style='color:red;'>{percentage_5_9}% ({Total5_9}: {TotalFemale5_9}F & {TotalMale5_9}M)</span>; 10-14 years were <span style='color:red;'>{percentage_10_14}% ({Total10_14}: {TotalFemale10_14}F & {TotalMale10_14}M)</span>; 15-17 years were <span style='color:red;'>{percentage_15_17}% ({Total15_17}: {TotalFemale15_17}F & {TotalMale15_17}M)</span> &; adults 18+ years were <span style='color:red;'>{percentage18_Plus}% ({Total18_Plus}: {TotalFemale18plus}F & {TotalMale18plus}M)</span>.";
					}
				}
				CardDataModel xx = new CardDataModel();
				xx.Content = card2Text;
				xx.Title = "Disaggregation";
				CardDatas2.Add(xx);
				var districtSums = OvcServeGenderDisagregationData.Select(g => new {g.DistrictId,g.DistrictDescription,g.FinancialYearDesc,g.Overall_Sum,g.FemaleSum,g.MaleSum});
				//double? overallSum = districtSums.Sum(r => r.Overall_Sum);
				foreach (var item in districtSums)
				{
					double TFemale = item.FemaleSum.Value;
					double TMale = item.MaleSum.Value;
					double TAll = item.Overall_Sum.Value;
					double percentFemale = 0.0;
					double percentMale = 0.0;
					double percentAll = 0.0;
					if(annualAchievedValue > 0)
					{
						percentFemale = Math.Round((((double)TFemale / (double)annualAchievedValue) * 100), 1);
						percentMale = Math.Round((((double)TMale / (double)annualAchievedValue) * 100), 1);
						percentAll = Math.Round((((double)TAll / (double)annualAchievedValue) * 100), 1);
					}
					MixedChartModel mc = new MixedChartModel();
					mc.Description = item.DistrictDescription;
					mc.Female = percentFemale;
					mc.Male = percentMale;
					mc.Overall = percentAll;
					MixedChartModelData.Add(mc);
				}
				#endregion Card2
				#region SubCountyData
				if(HomeVisitsCountSummaryData != null && HomeVisitsCountSummaryData.Count > 0)
				{

				}
				#endregion SubCountyData
			}
		}
		catch (Exception ex)
		{

			throw;
		}
	}
	private async Task LoadDashboards()
	{
		try
		{	
			using (var _dbcontext = new SPToCoreContext())
			{
				var currentMonth = DateTime.Now.Month;
				var currentYear = DateTime.Now.Year;
				var previousYear = currentYear - 1;
				string startDate = null;
				string endDate = null;
				var _financialYear = new AFinancialYear();
				//var _financialYear = _dbcontext.AFinancialYear.FirstOrDefault(o => o.FinancialYearDesc.Trim() == currentYear.ToString());
				SearchModel = new SearchPanel();
				SearchModel.Startdate = new DateTime(DateTime.Now.Year, 1, 1);
				SearchModel.Enddate = new DateTime(DateTime.Now.Year, 12, 31);

				int StartMonth = 1;
				int EndMonth = 12;

				if (currentMonth >= 1 && currentMonth <= 3)
				{
					QuarterNo = "TWO (JAN-MAR)";
					startDate = currentYear +"-01-01";
					endDate =  currentYear +"-03-31";
					Qtr = "2";
					PreviousQtr = "1";
					StartMonth = 1;
					EndMonth = 3;
					_financialYear = _dbcontext.AFinancialYear.FirstOrDefault(o => o.FinancialYearDesc.Trim() == (currentYear - 1).ToString());
				}
				else if (currentMonth >= 4 && currentMonth <= 6)
				{
					QuarterNo = "THREE (APR-JUN)";
					startDate = currentYear +"-04-01";
					endDate =  currentYear +"-06-30";
					Qtr = "3";
					PreviousQtr = "2";
					StartMonth = 4;
					EndMonth = 6;
					_financialYear = _dbcontext.AFinancialYear.FirstOrDefault(o => o.FinancialYearDesc.Trim() == (currentYear).ToString());
				}
				else if (currentMonth >= 7 && currentMonth <= 9)
				{
					QuarterNo = "FOUR (JUL-SEP)";
					startDate = currentYear +"-07-01";
					endDate =  currentYear +"-09-30";
					Qtr = "4";
					PreviousQtr = "3";
					StartMonth = 7;
					EndMonth = 9;
					_financialYear = _dbcontext.AFinancialYear.FirstOrDefault(o => o.FinancialYearDesc.Trim() == (currentYear).ToString());
				}
				else if (currentMonth >= 10 && currentMonth <= 12)
				{
					QuarterNo = "ONE (OCT-DEC)";
					startDate = currentYear +"-10-01";
					endDate =  currentYear +"-12-31";
					Qtr = "1";
					PreviousQtr = "4";
					StartMonth = 10;
					EndMonth = 12;
					_financialYear = _dbcontext.AFinancialYear.FirstOrDefault(o => o.FinancialYearDesc.Trim() == (currentYear).ToString());
				}
				TargetsData = await _dbcontext.ViewATargets.Where(o => o.FinancialYearDesc.Trim() == _financialYear.FinancialYearDesc).ToListAsync();
				OvcServeData = await _dbcontext.spDashboard_OVC_SERVAsync(null, null, _financialYear.FinancialYearId.ToString(), null, null, Convert.ToDateTime(startDate), Convert.ToDateTime(endDate));
				OvcServeGenderDisagregationData = await _dbcontext.spDashboard_OVC_SERV_Disagregated_By_AgeAsync(null, null, _financialYear.FinancialYearId.ToString(), null, null, Convert.ToDateTime(startDate), Convert.ToDateTime(endDate));
				// OvcServeData = await _dbcontext.spDashboard_OVC_SERVAsync(null, null, _financialYear.FinancialYearId.ToString(), null, null, Convert.ToDateTime(startDate), Convert.ToDateTime(endDate));
				// OvcServeGenderDisagregationData = await _dbcontext.spDashboard_OVC_SERV_Disagregated_By_AgeAsync(null, null, _financialYear.FinancialYearId.ToString(), null, null, Convert.ToDateTime(startDate), Convert.ToDateTime(endDate));

				var _data = OvcServeData.Select(o => new { o.DistrictId, o.DistrictDescription, o.FinancialYearDesc}).Distinct().ToList();
				//OVC_Serv Vs Target
				double totalHIVPositive18plus = 0.0;
				double totalHIVNegative18plus = 0.0;
				double totalUnknown18plus = 0.0;
				double totalHIVPositive17 = 0.0;
				double totalHIVNegative17 = 0.0;
				double totalUnknowm17 = 0.0;
				//OVC_Serv Vs Target
			

				foreach (var item in _data)
				{
					if (OvcServeData != null && OvcServeData.Count > 0)
					{
						//Target Values
						var ovcservefilter = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString()).ToList();
						if (ovcservefilter != null)
						{
							count = ovcservefilter.Count();
						}
						var HH = OvcServeData
							.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString())
							.ToList()
							.GroupBy(r => r.DistrictId)
							.ToDictionary(g => g.Key, g => g.Select(r => r.HouseHoldId).Distinct().ToList());

						if (HH.ContainsKey(item.DistrictId) && HH[item.DistrictId] != null && HH[item.DistrictId].Any())
						{
							numberOfHouseHolds = Convert.ToDouble(HH[item.DistrictId].Count); 
						}
						foreach (var districtId in HH.Keys)
						{
							if (HH.ContainsKey(districtId) && HH[districtId] != null && HH[districtId].Any())
							{
								double districtHouseHolds = Convert.ToDouble(HH[districtId].Count); // Retrieve the count for the current district
								TotalHHValue += districtHouseHolds; // Accumulate the count to the total sum
							}
						}
						//Active Current Qtr
						var ovcservefilterCurrentactive = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1).ToList();
						if (ovcservefilterCurrentactive != null)
						{
							countactive = ovcservefilterCurrentactive.Count();
						}
						//Active 17
						var ovcserveageGroup17 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "0-17 Years").ToList();
						if (ovcserveageGroup17 != null)
						{
							ageGroup17 = ovcserveageGroup17.Count();
							//sumAgeCategory17 = ovcserveageGroup17.Sum();
						}
						//Active 18
						var ovcserveageGroup18 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "18+ Years").ToList();
						if (ovcserveageGroup18 != null)
						{
							ageGroup18 = ovcserveageGroup18.Count();

						}
						//Active Male
						var ovcserveMale = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.GenderId == "M").ToList();
						if (ovcserveMale != null)
						{
							MaleActive = ovcserveMale.Count();
						}
						//Active Female
						var ovcserveFemale = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.GenderId == "F").ToList();
						if (ovcserveFemale != null)
						{
							FemaleActive = ovcserveFemale.Count();
						}
						//HIV postive 0-17
						var HIVpostive177 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "0-17 Years" && o.HIVStatusId == 1).ToList();
						if (HIVpostive177 != null)
						{
							HIVpostive17 = HIVpostive177.Count();
							totalHIVPositive17 = Convert.ToDouble(HIVpostive177.Sum(o => o.HIVStatusId));
						}
						//HIV -ve 0-17
						var HIVnegaive177 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "0-17 Years" && o.HIVStatusId == 2).ToList();
						if (HIVnegaive177 != null)
						{
							HIVnegative17 = HIVnegaive177.Count();
							totalHIVNegative17 = Convert.ToDouble(HIVnegaive177.Sum(o => o.HIVStatusId));
						}
						//Unknown status 0-17
						var Unknown177 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "0-17 Years" && o.HIVStatusId == 3).ToList();
						if (Unknown177 != null)
						{
							Unknwon17 = Unknown177.Count();
							totalUnknowm17 = Convert.ToDouble(Unknown177.Sum(o => o.HIVStatusId));
						}
						//HIV postive 18+
						var HIVpostive188 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "18+ Years" && o.HIVStatusId == 1).ToList();
						if (HIVpostive188 != null)
						{
							HIVpostive18 = HIVpostive188.Count();
							totalHIVPositive18plus = Convert.ToDouble(HIVpostive188.Sum(o => o.HIVStatusId));
						}
						//HIV _ve 18+
						var HIVnegative188 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "18+ Years" && o.HIVStatusId == 2).ToList();
						if (HIVnegative188 != null)
						{
							HIVnegative18 = HIVnegative188.Count();
							totalHIVNegative18plus = Convert.ToDouble(HIVnegative188.Sum(o => o.HIVStatusId));
						}
						//Unknown status 18+
						var Unknown188 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "18+ Years" && o.HIVStatusId == 3).ToList();
						if (Unknown188 != null)
						{
							Unknwon18 = Unknown188.Count();
							totalUnknown18plus = Convert.ToDouble(Unknown188.Sum(o => o.HIVStatusId));
						}
						//Test Not Required 17
						var filteredHouseholds17 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "0-17 Years")
														.GroupBy(data => data.HouseHoldId)
														.Where(group => 
															group.Count() > 1 &&
															group.All(data => data.HIVStatusId == 1) &&
															group.Any(data => data.HIVStatusId == 3) 
														)
														.SelectMany(group => group);
						if(filteredHouseholds17 != null)
						{
							TNR17 = filteredHouseholds17.Count();
						}

						//Test Not Required 18
						var filteredHouseholds18 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "18+ Years")
														.GroupBy(data => data.HouseHoldId)
														.Where(group => 
															group.Count() > 1 &&
															group.All(data => data.HIVStatusId == 1) &&
															group.Any(data => data.HIVStatusId == 3) 
														)
														.SelectMany(group => group);
						if(filteredHouseholds18 != null)
						{
							TNR18 = filteredHouseholds18.Count();
						}
					}
					OVCServeValueTargets mm = new OVCServeValueTargets();
					mm.DistrictDescription = item.DistrictDescription;
					mm.FinancialYearDesc = item.FinancialYearDesc.ToString();
					mm.ActivePreviousQtr = countOldActive;
					mm.FinalServ = countactive + newEnrolled;
					mm.ageCategory17 = ageGroup17;
					mm.ageCategory18 = ageGroup18;
					mm.FemaleActive = FemaleActive;
					mm.MaleActive = MaleActive;
					mm.TNR17 = TNR17;
					mm.TNR18 = TNR18;
					mm.HIVpostive17 = HIVpostive17;
					mm.HIVpostive18 = HIVpostive18;
					mm.HIVnegative17 = HIVnegative17;
					mm.HIVnegative18 = HIVnegative18;
					mm.Unknwon17 = Unknwon17;
					mm.Unknwon18 = Unknwon18;
					mm.numberOfHouseHolds = numberOfHouseHolds;
					var tvalue = TargetsData.FirstOrDefault(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc == item.FinancialYearDesc.ToString());
					if (tvalue != null)
					{
						mm.TargetValue = tvalue.TargetValue;
					}
					else
					{
						mm.TargetValue = 0;
					}
					mm.ActualValue = count;
					mm.Active = ageGroup17 + ageGroup18;
					if (mm.TargetValue > 0)
					{
						mm.Percentage = Math.Round((((double)mm.Active / (double)mm.TargetValue) * 100), 1);
					}
					if (mm.Active > 0)
					{
						mm.PercentageFemaleActive = Math.Round((((double)mm.FemaleActive / (double)mm.Active) * 100), 1);
						mm.PercentageMaleActive = Math.Round((((double)mm.MaleActive / (double)mm.Active) * 100), 1);
						mm.PercentageageCategory17 = Math.Round((((double)mm.ageCategory17 / (double)mm.Active) * 100), 1);
						mm.PercentageageCategory18 = Math.Round((((double)mm.ageCategory18 / (double)mm.Active) * 100), 1);
						mm.percentageC_ALHIV17 = Math.Round((((double)mm.HIVpostive17 / (double)mm.Active) * 100), 1);
						mm.percentageC_ALHIV18 = Math.Round((((double)mm.HIVpostive18 / (double)mm.Active) * 100), 1);
						percentageCALHIV17 = mm.percentageC_ALHIV17.Value;
						percentageCALHIV18 = mm.percentageC_ALHIV18.Value;
					}
					//Scroll Details
					TotalHIVPositive17 = totalHIVPositive17;
					TotalHIVNegative17 = totalHIVNegative17;
					TotalUnknownStatus17 = totalUnknowm17;
					TotalHIVPositive18 = totalHIVPositive18plus;
					TotalHIVNegative18 = totalHIVNegative18plus;
					TotalUnknownStatus18 = totalUnknown18plus;
					if(annualTargetValue > 0)
					{
						percentageOVC_SERV  = Math.Round((((double)annualAchievedValue/ (double)annualTargetValue) * 100), 1);
					}
					TargetsList.Add(mm);
				}
				TargetsList = TargetsList.OrderByDescending(o => o.Percentage).ToList();

				//Heat Map
				HeatDataSource = new int[15, YLabels.Length];
				if(OvcServeGenderDisagregationData != null && OvcServeGenderDisagregationData.Count > 0)
				{
					foreach (var item in YLabels)
					{
						var data = OvcServeGenderDisagregationData.FirstOrDefault(o => o.DistrictDescription == item);
						if (data != null)
						{
							int index = YLabels.IndexOf(item);

							HeatDataSource[0, index] = Convert.ToInt32(data.Female_Under_One_Year.Value);
							HeatDataSource[1, index] = Convert.ToInt32(data.Male_Under_One_Year.Value);
							HeatDataSource[2, index] = Convert.ToInt32(data.Female_1_4.Value);
							HeatDataSource[3, index] = Convert.ToInt32(data.Male_1_4.Value);
							HeatDataSource[4, index] = Convert.ToInt32(data.Female_5_9.Value);
							HeatDataSource[5, index] = Convert.ToInt32(data.Male_5_9.Value);
							HeatDataSource[6, index] = Convert.ToInt32(data.Female_10_14.Value);
							HeatDataSource[7, index] = Convert.ToInt32(data.Male_10_14.Value);
							HeatDataSource[8, index] = Convert.ToInt32(data.Female_15_17.Value);
							HeatDataSource[9, index] = Convert.ToInt32(data.Male_15_17.Value);
							HeatDataSource[10, index] = Convert.ToInt32(data.Female_18_24.Value);
							HeatDataSource[11, index] = Convert.ToInt32(data.Male_18_24.Value);
							HeatDataSource[12, index] = Convert.ToInt32(data.FemaleSum.Value);
							HeatDataSource[13, index] = Convert.ToInt32(data.MaleSum.Value);
							HeatDataSource[14, index] = Convert.ToInt32(data.Overall_Sum.Value);
						}
						else
						{
							int index = YLabels.IndexOf(item);

							HeatDataSource[0, index] = 0;
							HeatDataSource[1, index] = 0;
							HeatDataSource[2, index] = 0;
							HeatDataSource[3, index] = 0;
							HeatDataSource[4, index] = 0;
							HeatDataSource[5, index] = 0;
							HeatDataSource[6, index] = 0;
							HeatDataSource[7, index] = 0;
							HeatDataSource[8, index] = 0;
							HeatDataSource[9, index] = 0;
							HeatDataSource[10, index] = 0;
							HeatDataSource[11, index] = 0;
							HeatDataSource[12, index] = 0;
							HeatDataSource[13, index] = 0;
							HeatDataSource[14, index] = 0;
						}
					}
				}
				//Bullet Chart

				var _BulletChartdata = OvcServeGenderDisagregationData.Select(o => new { o.DistrictId, o.DistrictDescription, o.FinancialYearDesc,o.FemaleSum, o.MaleSum, o.Overall_Sum}).Distinct().ToList();
				if (_BulletChartdata != null && _BulletChartdata.Count > 0)
				{
					double DistrictTotal = 0.0;
					double DistrictTotal1 = 0.0;
					double DistrictTotal2 = 0.0;
					double DistrictTotal3 = 0.0;
					double DistrictTotal4 = 0.0;
					double DistrictTotal5 = 0.0;
					double DistrictTotal6 = 0.0;
					double pDistrictTotal = 0.0;
					double pDistrictTotal1 = 0.0;
					double pDistrictTotal2 = 0.0;
					double pDistrictTotal3 = 0.0;
					double pDistrictTotal4 = 0.0;
					double pDistrictTotal5 = 0.0;
					double pDistrictTotal6 = 0.0;
					var _item = _BulletChartdata.FirstOrDefault();
					//foreach (var _item in _BulletChartdata)
					//{
					var filterDistrictTotal = OvcServeGenderDisagregationData.Where(o => o.DistrictId == 6 && o.FinancialYearDesc.ToString() == _item.FinancialYearDesc.ToString()).FirstOrDefault();
					if (filterDistrictTotal != null)
					{
						DistrictTotal = filterDistrictTotal.Overall_Sum.Value;
						if(DistrictTotal != null)
						{
							DistrictValueAchieved = Convert.ToString(DistrictTotal);
						}

					}
					var filterDistrictTotal1 = OvcServeGenderDisagregationData.Where(o => o.DistrictId == 7 && o.FinancialYearDesc.ToString() == _item.FinancialYearDesc.ToString()).FirstOrDefault();
					if (filterDistrictTotal1 != null)
					{
						DistrictTotal1 = filterDistrictTotal1.Overall_Sum.Value;
						if(DistrictTotal1 != null)
						{
							DistrictValueAchieved1 = Convert.ToString(DistrictTotal1);
						}
					}
					var filterDistrictTotal2 = OvcServeGenderDisagregationData.Where(o => o.DistrictId == 2 && o.FinancialYearDesc.ToString() == _item.FinancialYearDesc.ToString()).FirstOrDefault();
					if (filterDistrictTotal2 != null)
					{
						DistrictTotal2 = filterDistrictTotal2.Overall_Sum.Value;
						if(DistrictTotal2 != null)
						{
							DistrictValueAchieved2 = Convert.ToString(DistrictTotal2);
						}
					}
					var filterDistrictTotal3 = OvcServeGenderDisagregationData.Where(o => o.DistrictId == 1 && o.FinancialYearDesc.ToString() == _item.FinancialYearDesc.ToString()).FirstOrDefault();
					if (filterDistrictTotal3 != null)
					{
						DistrictTotal3 = filterDistrictTotal3.Overall_Sum.Value;
						if(DistrictTotal3 != null)
						{
							DistrictValueAchieved3 = Convert.ToString(DistrictTotal3);
						}
					}
					var filterDistrictTotal4 = OvcServeGenderDisagregationData.Where(o => o.DistrictId == 4 && o.FinancialYearDesc.ToString() == _item.FinancialYearDesc.ToString()).FirstOrDefault();
					if (filterDistrictTotal4 != null)
					{
						DistrictTotal4 = filterDistrictTotal4.Overall_Sum.Value;
						if(DistrictTotal4 != null)
						{
							DistrictValueAchieved4 = Convert.ToString(DistrictTotal4);
						}
					}
					var filterDistrictTotal5 = OvcServeGenderDisagregationData.Where(o => o.DistrictId == 3 && o.FinancialYearDesc.ToString() == _item.FinancialYearDesc.ToString()).FirstOrDefault();
					if (filterDistrictTotal5 != null)
					{
						DistrictTotal5 = filterDistrictTotal5.Overall_Sum.Value;
						if(DistrictTotal5 != null)
						{
							DistrictValueAchieved5 = Convert.ToString(DistrictTotal5);
						}
					}
					var filterDistrictTotal6 = OvcServeGenderDisagregationData.Where(o => o.DistrictId == 5 && o.FinancialYearDesc.ToString() == _item.FinancialYearDesc.ToString()).FirstOrDefault();
					if (filterDistrictTotal6 != null)
					{
						DistrictTotal6 = filterDistrictTotal6.Overall_Sum.Value;
						if(DistrictTotal6 != null)
						{
							DistrictValueAchieved6 = Convert.ToString(DistrictTotal6);
						}
					}
					BulletChartData bb = new BulletChartData();
					if(annualAchievedValue > 0)
					{
						pDistrictTotal = Math.Round((((double)DistrictTotal / (double)annualAchievedValue) * 100), 1);
						bb.FieldValue = pDistrictTotal;
					}
					bb.TargetValue = 100;
					BulletsChartData.Add(bb);

					BulletChartData bb1 = new BulletChartData();
					if(annualAchievedValue > 0)
					{
						pDistrictTotal1 = Math.Round((((double)DistrictTotal1 / (double)annualAchievedValue) * 100), 1);
						bb.FieldValue1 = pDistrictTotal1;
					}
					bb.TargetValue1 = 100;
					BulletsChartData1.Add(bb1);

					BulletChartData bb2 = new BulletChartData();
					if(annualAchievedValue > 0)
					{
						pDistrictTotal2 = Math.Round((((double)DistrictTotal2 / (double)annualAchievedValue) * 100), 1);
						bb.FieldValue2 = pDistrictTotal2;
					}
					bb.TargetValue2 = 100;
					BulletsChartData2.Add(bb2);

					BulletChartData bb3 = new BulletChartData();
					if(annualAchievedValue > 0)
					{
						pDistrictTotal3 = Math.Round((((double)DistrictTotal3 / (double)annualAchievedValue) * 100), 1);
						bb.FieldValue3 = pDistrictTotal3;
					}
					bb.TargetValue3 = 100;
					BulletsChartData3.Add(bb3);

					BulletChartData bb4 = new BulletChartData();
					if (annualAchievedValue > 0)
					{
						pDistrictTotal4 = Math.Round((((double)DistrictTotal4 / (double)annualAchievedValue) * 100), 1);
						bb.FieldValue4 = pDistrictTotal4;
					}
					bb.TargetValue4 = 100;
					BulletsChartData4.Add(bb4);

					BulletChartData bb5 = new BulletChartData();
					if(annualAchievedValue > 0)
					{
						pDistrictTotal5 = Math.Round((((double)DistrictTotal5 / (double)annualAchievedValue) * 100), 1);
						bb.FieldValue5 = pDistrictTotal5;
					}
					bb.TargetValue5 = 100;
					BulletsChartData5.Add(bb5);

					BulletChartData bb6 = new BulletChartData();
					if(annualAchievedValue > 0)
					{
						pDistrictTotal6 = Math.Round((((double)DistrictTotal6 / (double)annualAchievedValue) * 100), 1);
						bb.FieldValue6 = pDistrictTotal6;
					}
					bb.TargetValue6 = 100;
					BulletsChartData6.Add(bb6);
				}



				//ELIGIBLE / TEST DONE / SUPPRESSED / 
				//Table Data
				var TableData = await _dbcontext.ViewDashboardOvcHiv
				.Where(o => o.FollowUpMonth >= StartMonth && o.FollowUpMonth <= EndMonth && o.FollowUpYear == currentYear).AsNoTracking()
				.ToListAsync();
				double female0_17RecievedResults = 0.0;
				double female_18_RecievedResults = 0.0;
				double male0_17RecievedResults = 0.0;
				double male_18_RecievedResults = 0.0;
				double percentage0_17 = 0.0;
				double Total0_17 = 0.0;
				double percentage18 = 0.0;
				double Total18 = 0.0;
				double TotalRecieved = 0.0;
				//Suppressed
				double female0_17SuppressedResults = 0.0;
				double female_18_SuppressedResults = 0.0;
				double male0_17SuppressedResults = 0.0;
				double male_18_SuppressedResults = 0.0;
				double SuppressedPercentage0_17 = 0.0;
				double SuppressedTotal0_17 = 0.0;
				double SuppressedPercentage18 = 0.0;
				double SuppressedTotal18 = 0.0;
				double TotalSuppressed = 0.0;
				var _TableData = TableData.Select(o => new { o.DistrictId, o.DistrictDescription }).Distinct().ToList();
				foreach (var _item in _TableData)
				{
					if (TableData != null && TableData.Count > 0)
					{
						//Total Eligible For VL
						var _Total_Eligible = TableData.Where(o => o.IsClientEligibleForViralload == 1).ToList();
						if (_Total_Eligible != null)
						{
							Total_Eligible = _Total_Eligible.Count();
						}
						//Total Test Done VL
						var _Total_VL_TestDone = TableData.Where(o => o.ViralloadTestDone == 1).ToList();
						if (_Total_VL_TestDone != null)
						{
							Total_TestDone = _Total_VL_TestDone.Count();
						}
						/////Eligible For VL
						//Female 0-17
						var Female0_17_Eligible = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "F" && o.AgeCategory == "0-17 Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (Female0_17_Eligible != null)
						{
							female0_17_VL_Eligible = Female0_17_Eligible.Count();
						}
						//Female 18
						var Female18_Eligible = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "F" && o.AgeCategory == "18+ Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (Female18_Eligible != null)
						{
							female18_VL_Eligible = Female18_Eligible.Count();
						}
						//TTotal Female Eligible
						var TTFemale0_17_Eligible = TableData.Where(o => o.GenderId == "F" && o.AgeCategory == "0-17 Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (TTFemale0_17_Eligible != null)
						{
							Total_EligibleF17 = TTFemale0_17_Eligible.Count();
						}
						var TTFemale18_Eligible = TableData.Where(o => o.GenderId == "F" && o.AgeCategory == "18+ Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (TTFemale18_Eligible != null)
						{
							Total_EligibleF18 = TTFemale18_Eligible.Count();
						}
						//Male 0_17
						var Male17_Eligible = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "M" && o.AgeCategory == "0-17 Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (Male17_Eligible != null)
						{
							Male0_17_VL_Eligible = Male17_Eligible.Count();
						}
						//Male 0_18
						var Male18_Eligible = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "M" && o.AgeCategory == "18+ Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (Male18_Eligible != null)
						{
							Male18_VL_Eligible = Male18_Eligible.Count();
						}
						//TTotal Male Eligible
						var TTMale17_Eligible = TableData.Where(o => o.GenderId == "M" && o.AgeCategory == "0-17 Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (TTMale17_Eligible != null)
						{
							Total_EligibleM17 = TTMale17_Eligible.Count();
						}
						var TTMale18_Eligible = TableData.Where(o => o.GenderId == "M" && o.AgeCategory == "18+ Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (TTMale18_Eligible != null)
						{
							Total_EligibleM18 = TTMale18_Eligible.Count();
						}
						/////VL Tests Done
						var Female0_17_Tests_Done = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "F" && o.AgeCategory == "0-17 Years" && o.ViralloadTestDone == 1).ToList();
						if (Female0_17_Tests_Done != null)
						{
							female0_17_VL_TestDone = Female0_17_Tests_Done.Count();
						}
						//Female 18
						var Female18_TestDone = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "F" && o.AgeCategory == "18+ Years" && o.ViralloadTestDone == 1).ToList();
						if (Female18_TestDone != null)
						{
							female18_VL_TestDone = Female18_TestDone.Count();
						}
						///Total Female Test Done
						var TTFemale0_17_Tests_Done = TableData.Where(o => o.GenderId == "F" && o.AgeCategory == "0-17 Years" && o.ViralloadTestDone == 1).ToList();
						if (TTFemale0_17_Tests_Done != null)
						{
							Total_TestDoneF17 = TTFemale0_17_Tests_Done.Count();
						}
						var TTFemale18_TestDone = TableData.Where(o => o.GenderId == "F" && o.AgeCategory == "18+ Years" && o.ViralloadTestDone == 1).ToList();
						if (TTFemale18_TestDone != null)
						{
							Total_TestDoneF18 = TTFemale18_TestDone.Count();
						}
						//Male 0_17
						var Male17_TestDone = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "M" && o.AgeCategory == "0-17 Years" && o.ViralloadTestDone == 1).ToList();
						if (Male17_TestDone != null)
						{
							Male0_17_VL_TestDone = Male17_TestDone.Count();
						}
						//Male 0_18
						var Male18_TestDone = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "M" && o.AgeCategory == "18+ Years" && o.ViralloadTestDone == 1).ToList();
						if (Male18_TestDone != null)
						{
							Male18_VL_TestDone = Male18_TestDone.Count();
						}
						// Total Male Test Done
						var TTMale17_TestDone = TableData.Where(o => o.GenderId == "M" && o.AgeCategory == "0-17 Years" && o.ViralloadTestDone == 1).ToList();
						if (TTMale17_TestDone != null)
						{
							Total_TestDoneM17 = TTMale17_TestDone.Count();
						}
						var TTMale18_TestDone = TableData.Where(o => o.GenderId == "M" && o.AgeCategory == "18+ Years" && o.ViralloadTestDone == 1).ToList();
						if (TTMale18_TestDone != null)
						{
							Total_TestDoneM18 = TTMale18_TestDone.Count();
						}
						double sum17EligibleTT = female0_17_VL_Eligible + Male0_17_VL_Eligible;
						double sum18EligibleTT = female18_VL_Eligible + Male18_VL_Eligible;
						double overallSumEligible = sum18EligibleTT + sum17EligibleTT;
						double sum17VL_TestDone = female0_17_VL_TestDone + Male0_17_VL_TestDone;
						double sum18VL_TestDone = female18_VL_TestDone + Male18_VL_TestDone;
						double overallSumTestDone = sum17VL_TestDone + sum18VL_TestDone;
						DistrictDescription = _item.DistrictDescription;

						District_VL_Eligible = sum17EligibleTT + sum18EligibleTT;
						District_VL_TestDone = sum17VL_TestDone + sum18VL_TestDone;
						//var totalAgeGroup =
						//percentage18_VL_TestDone
						if (Total_Eligible > 0)
						{
							percentage0_17_VL_Eligible = Math.Round((((double)sum17EligibleTT / (double)Total_Eligible) * 100), 1);
							percentage18_VL_Eligible = Math.Round((((double)sum18EligibleTT / (double)Total_Eligible) * 100), 1);
							percentage0_17_VL_TestDone = Math.Round((((double)sum17VL_TestDone / (double)Total_TestDone) * 100), 1);
							percentage18_VL_TestDone = Math.Round((((double)sum18VL_TestDone / (double)Total_TestDone) * 100), 1);
						}
						//RECIEVED RESULTS
						//OverallTotal
						var RecievedResults = TableData.Where(o => o.ViralloadResultsReceived == 1).ToList();
						if (RecievedResults != null)
						{
							TotalRecieved = RecievedResults.Count();
						}
						//Female 0-17
						var Female0_17_RecievedResults = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "F" && o.AgeCategory == "0-17 Years" && o.ViralloadResultsReceived == 1).ToList();
						if (Female0_17_RecievedResults != null)
						{
							female0_17RecievedResults = Female0_17_RecievedResults.Count();
						}
						//Female 18
						var Female18_RecievedResults = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "F" && o.AgeCategory == "18+ Years" && o.ViralloadResultsReceived == 1).ToList();
						if (Female18_RecievedResults != null)
						{
							female_18_RecievedResults = Female18_RecievedResults.Count();
						}
						//Male 0-17
						var Male0_17_RecievedResults = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "M" && o.AgeCategory == "0-17 Years" && o.ViralloadResultsReceived == 1).ToList();
						if (Male0_17_RecievedResults != null)
						{
							male0_17RecievedResults = Male0_17_RecievedResults.Count();
						}
						//Male 18
						var Male18_RecievedResults = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "M" && o.AgeCategory == "18+ Years" && o.ViralloadResultsReceived == 1).ToList();
						if (Male18_RecievedResults != null)
						{
							male_18_RecievedResults = Female18_RecievedResults.Count();
						}
						Total0_17 = female0_17RecievedResults + male0_17RecievedResults;
						Total18 = female_18_RecievedResults + male_18_RecievedResults;
						if (TotalRecieved > 0)
						{
							percentage0_17 = Math.Round((((double)Total0_17 / (double)TotalRecieved) * 100), 1);
							percentage18 = Math.Round((((double)Total18 / (double)TotalRecieved) * 100), 1);
						}

						//SUPPRESSED RESULTS
						//OverallTotal
						var SuppressedResults = TableData.Where(o => o.ViralLoadSuppressedId == 1).ToList();
						if (SuppressedResults != null)
						{
							TotalSuppressed = SuppressedResults.Count();
						}
						//Female 0-17
						var Female0_17_SuppressedResults = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "F" && o.AgeCategory == "0-17 Years" && o.ViralLoadSuppressedId == 1).ToList();
						if (Female0_17_SuppressedResults != null)
						{
							female0_17SuppressedResults = Female0_17_SuppressedResults.Count();
						}
						//Female 18
						var Female18_SuppressedResults = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "F" && o.AgeCategory == "18+ Years" && o.ViralLoadSuppressedId == 1).ToList();
						if (Female18_SuppressedResults != null)
						{
							female_18_SuppressedResults = Female18_SuppressedResults.Count();
						}
						//Male 0-17
						var Male0_17_SuppressedResults = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "M" && o.AgeCategory == "0-17 Years" && o.ViralLoadSuppressedId == 1).ToList();
						if (Male0_17_SuppressedResults != null)
						{
							male0_17SuppressedResults = Male0_17_SuppressedResults.Count();
						}
						//Male 18
						var Male18_SuppressedResults = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "M" && o.AgeCategory == "18+ Years" && o.ViralLoadSuppressedId == 1).ToList();
						if (Male18_SuppressedResults != null)
						{
							male_18_SuppressedResults = Female18_SuppressedResults.Count();
						}
						SuppressedTotal0_17 = female0_17SuppressedResults + male0_17SuppressedResults;
						SuppressedTotal18 = female_18_SuppressedResults + male_18_SuppressedResults;
						if (TotalSuppressed > 0)
						{
							SuppressedPercentage0_17 = Math.Round((((double)SuppressedTotal0_17 / (double)TotalSuppressed) * 100), 1);
							SuppressedPercentage18 = Math.Round((((double)SuppressedTotal18 / (double)TotalSuppressed) * 100), 1);
						}
						//AGE BANDS DATA ELIGIBLE FOR VL
						//Less than 1
						var Lessthan1 = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "1 Year" && o.IsClientEligibleForViralload == 1).ToList();
						if (Lessthan1 != null)
						{
							lessthan1 = Lessthan1.Count();
						}
						//1 to 4
						var one_Four = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "1-4 Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (one_Four != null)
						{
							OnetoFour = one_Four.Count();
						}
						// 5 to 9
						var five_Nine = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "5-9 Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (five_Nine != null)
						{
							FivetoNine = five_Nine.Count();
						}
						// 10 to 14
						var ten_Fourteen = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "10-14 Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (ten_Fourteen != null)
						{
							TentoFourteen = ten_Fourteen.Count();
						}
						// 15 to 17
						var fifteen_Seventeen = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "15-17 Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (fifteen_Seventeen != null)
						{
							FifteentoSeventeen = fifteen_Seventeen.Count();
						}
						// 18 plus
						var eightyrs_plusz = TableData.Where(o => o.DistrictId == _item.DistrictId && (o.AgeBands == "15-17 Years" || o.AgeBands == "18-24 Years" || o.AgeBands == "25+ Years") && o.IsClientEligibleForViralload == 1).ToList();
						if (eightyrs_plusz != null)
						{
							Eighteento25YearsPlus = eightyrs_plusz.Count();
						}
						//AGE BANDS DATA TestDone FOR VL
						//Less than 1
						var TestDone_Lessthan1 = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "1 Year" && o.ViralloadTestDone == 1).ToList();
						if (TestDone_Lessthan1 != null)
						{
							TestDone_LessThanOne = TestDone_Lessthan1.Count();
						}
						//1 to 4
						var TestDone_one_Four = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "1-4 Years" && o.ViralloadTestDone == 1).ToList();
						if (TestDone_one_Four != null)
						{
							TestDone_OnetoFour = TestDone_one_Four.Count();
						}
						// 5 to 9
						var TestDone_five_Nine = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "5-9 Years" && o.ViralloadTestDone == 1).ToList();
						if (five_Nine != null)
						{
							TestDone_FivetoNine = TestDone_five_Nine.Count();
						}
						// 10 to 14
						var TestDone_ten_Fourteen = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "10-14 Years" && o.ViralloadTestDone == 1).ToList();
						if (ten_Fourteen != null)
						{
							TestDone_TentoFourteen = TestDone_ten_Fourteen.Count();
						}
						// 15 to 17
						var TestDone_fifteen_Seventeen = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "15-17 Years" && o.ViralloadTestDone == 1).ToList();
						if (fifteen_Seventeen != null)
						{
							TestDone_FifteentoSeventeen = TestDone_fifteen_Seventeen.Count();
						}
						// 18 plus
						var TestDone_eightyrs_plusz = TableData.Where(o => o.DistrictId == _item.DistrictId && (o.AgeBands == "15-17 Years" || o.AgeCategory == "18-24 Years" || o.AgeCategory == "25+ Years") && o.ViralloadTestDone == 1).ToList();
						if (eightyrs_plusz != null)
						{
							TestDone_18YearsPlus = TestDone_eightyrs_plusz.Count();
						}
						//SUPPRESED AGE BANDS
						//Less than 1
						var Suppressed_Lessthan1 = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "1 Year" && o.ViralLoadSuppressedId == 1).ToList();
						if (Suppressed_Lessthan1 != null)
						{
							Suppressed_LessThanOne = Suppressed_Lessthan1.Count();
						}
						//1 to 4
						var Suppressed_one_Four = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "1-4 Years" && o.ViralLoadSuppressedId == 1).ToList();
						if (Suppressed_one_Four != null)
						{
							Suppressed_OnetoFour = Suppressed_one_Four.Count();
						}
						// 5 to 9
						var Suppressed_five_Nine = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "5-9 Years" && o.ViralLoadSuppressedId == 1).ToList();
						if (five_Nine != null)
						{
							Suppressed_FivetoNine = Suppressed_five_Nine.Count();
						}
						// 10 to 14
						var Suppressed_ten_Fourteen = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "10-14 Years" && o.ViralLoadSuppressedId == 1).ToList();
						if (ten_Fourteen != null)
						{
							Suppressed_TentoFourteen = Suppressed_ten_Fourteen.Count();
						}
						// 15 to 17
						var Suppressed_fifteen_Seventeen = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "15-17 Years" && o.ViralLoadSuppressedId == 1).ToList();
						if (fifteen_Seventeen != null)
						{
							Suppressed_FifteentoSeventeen = Suppressed_fifteen_Seventeen.Count();
						}
						// 18 plus
						var Suppressed_eightyrs_plusz = TableData.Where(o => o.DistrictId == _item.DistrictId && (o.AgeBands == "15-17 Years" || o.AgeCategory == "18-24 Years" || o.AgeCategory == "25+ Years") && o.ViralLoadSuppressedId == 1).ToList();
						if (eightyrs_plusz != null)
						{
							Suppressed_18YearsPlus = Suppressed_eightyrs_plusz.Count();
						}
						//RECIEVED RESULTS
						//Less than 1
						var RecievedResults_Lessthan1 = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "1 Year" && o.ViralloadResultsReceived == 1).ToList();
						if (RecievedResults_Lessthan1 != null)
						{
							RecievedResults_LessThanOne = RecievedResults_Lessthan1.Count();
						}
						//1 to 4
						var RecievedResults_one_Four = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "1-4 Years" && o.ViralloadResultsReceived == 1).ToList();
						if (RecievedResults_one_Four != null)
						{
							RecievedResults_OnetoFour = RecievedResults_one_Four.Count();
						}
						// 5 to 9
						var RecievedResults_five_Nine = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "5-9 Years" && o.ViralloadResultsReceived == 1).ToList();
						if (five_Nine != null)
						{
							RecievedResults_FivetoNine = RecievedResults_five_Nine.Count();
						}
						// 10 to 14
						var RecievedResults_ten_Fourteen = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "10-14 Years" && o.ViralloadResultsReceived == 1).ToList();
						if (ten_Fourteen != null)
						{
							RecievedResults_TentoFourteen = RecievedResults_ten_Fourteen.Count();
						}
						// 15 to 17
						var RecievedResults_fifteen_Seventeen = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "15-17 Years" && o.ViralloadResultsReceived == 1).ToList();
						if (fifteen_Seventeen != null)
						{
							RecievedResults_FifteentoSeventeen = RecievedResults_fifteen_Seventeen.Count();
						}
						// 18 plus
						var RecievedResults_eightyrs_plusz = TableData.Where(o => o.DistrictId == _item.DistrictId && (o.AgeBands == "15-17 Years" || o.AgeCategory == "18-24 Years" || o.AgeCategory == "25+ Years") && o.ViralloadResultsReceived == 1).ToList();
						if (eightyrs_plusz != null)
						{
							RecievedResults_18YearsPlus = RecievedResults_eightyrs_plusz.Count();
						}
					}
					TableOVCVL tOVC = new TableOVCVL();
					tOVC._District_VL_Eligible = District_VL_Eligible;
					tOVC._District_VL_TestDone = District_VL_TestDone;
					tOVC._DistrictDescription = DistrictDescription;

					tOVC._female0_17_VL_Eligible = female0_17_VL_Eligible;
					tOVC._female18_VL_Eligible = female18_VL_Eligible;
					tOVC._female0_17_VL_TestDone = female0_17_VL_TestDone;
					tOVC._female18_VL_TestDone = female18_VL_TestDone;
					tOVC._Male0_17_VL_Eligible = Male0_17_VL_Eligible;
					tOVC._Male18_VL_Eligible = Male18_VL_Eligible;
					tOVC._Male0_17_VL_TestDone = Male0_17_VL_TestDone;
					tOVC._Male18_VL_TestDone = Male18_VL_TestDone;
					tOVC._percentage0_17_VL_Eligible = percentage0_17_VL_Eligible;
					tOVC._percentage18_VL_Eligible = percentage18_VL_Eligible;
					tOVC._percentage0_17_VL_TestDone = percentage0_17_VL_TestDone;
					tOVC._percentage18_VL_TestDone = percentage18_VL_TestDone;
					//RESULTS RECIEVED
					tOVC._percentage18RecievedResults = percentage18;
					tOVC._percentage0_17RecievedResults = percentage0_17;
					tOVC.Female0_17RecievedResults = female0_17RecievedResults;
					tOVC.Female_18_RecievedResults = female_18_RecievedResults;
					tOVC.Male0_17RecievedResults = male0_17RecievedResults;
					tOVC.Male_18_RecievedResults = male_18_RecievedResults;
					tOVC.RecievedResultsTotal0_17 = Total0_17;
					tOVC.RecievedResultsTotal18 = Total18;
					tOVC.Recieved_Results_District = Total0_17 + Total18;
					//SUPPRESSED RESULTS
					tOVC._percentage18SuppressedResults = SuppressedPercentage18;
					tOVC._percentage0_17SuppressedResults = SuppressedPercentage0_17;
					tOVC.Female0_17SuppressedResults = female0_17SuppressedResults;
					tOVC.Female_18_SuppressedResults = female_18_SuppressedResults;
					tOVC.Male0_17SuppressedResults = male0_17SuppressedResults;
					tOVC.Male_18_SuppressedResults = male_18_SuppressedResults;
					tOVC.SuppressedResultsTotal0_17 = SuppressedTotal0_17;
					tOVC.SuppressedResultsTotal18 = SuppressedTotal18;
					tOVC.Suppressed_Results_District = SuppressedTotal0_17 + SuppressedTotal18;
					//AGE
					TableOVCVLList.Add(tOVC);

					GroupedColumnModel _GroupedColumnModelData = new GroupedColumnModel();
					_GroupedColumnModelData.DistrictDescription = DistrictDescription;
					_GroupedColumnModelData.DistrictName = DistrictDescription;
					_GroupedColumnModelData.LessThanOne = lessthan1;
					_GroupedColumnModelData.OnetoFour = OnetoFour;
					_GroupedColumnModelData.FivetoNine = FivetoNine;
					_GroupedColumnModelData.TentoFourteen = TentoFourteen;
					_GroupedColumnModelData.FifteentoSeventeen = FifteentoSeventeen;
					_GroupedColumnModelData.EigteenPlus = Eighteento25YearsPlus;
					GroupedColumnModelData.Add(_GroupedColumnModelData);


					GroupedColumnModel _GroupedColumnModelData2 = new GroupedColumnModel();
					_GroupedColumnModelData2.DistrictDescription = DistrictDescription;
					_GroupedColumnModelData2.DistrictName = DistrictDescription;
					_GroupedColumnModelData2.LessThanOne = TestDone_LessThanOne;
					_GroupedColumnModelData2.OnetoFour = TestDone_OnetoFour;
					_GroupedColumnModelData2.FivetoNine = TestDone_FivetoNine;
					_GroupedColumnModelData2.TentoFourteen = TestDone_TentoFourteen;
					_GroupedColumnModelData2.FifteentoSeventeen = TestDone_FifteentoSeventeen;
					_GroupedColumnModelData2.EigteenPlus = TestDone_18YearsPlus;
					GroupedColumnModelData2.Add(_GroupedColumnModelData2);

					//Suppressed
					GroupedColumnModel _GroupedColumnModelData3 = new GroupedColumnModel();
					_GroupedColumnModelData3.DistrictDescription = DistrictDescription;
					_GroupedColumnModelData3.DistrictName = DistrictDescription;
					_GroupedColumnModelData3.LessThanOne = Suppressed_LessThanOne;
					_GroupedColumnModelData3.OnetoFour = Suppressed_OnetoFour;
					_GroupedColumnModelData3.FivetoNine = Suppressed_FivetoNine;
					_GroupedColumnModelData3.TentoFourteen = Suppressed_TentoFourteen;
					_GroupedColumnModelData3.FifteentoSeventeen = Suppressed_FifteentoSeventeen;
					_GroupedColumnModelData3.EigteenPlus = Suppressed_18YearsPlus;
					GroupedColumnModelData3.Add(_GroupedColumnModelData3);

					//Recieved
					GroupedColumnModel _GroupedColumnModelData4 = new GroupedColumnModel();
					_GroupedColumnModelData4.DistrictDescription = DistrictDescription;
					_GroupedColumnModelData4.DistrictName = DistrictDescription;
					_GroupedColumnModelData4.LessThanOne = RecievedResults_LessThanOne;
					_GroupedColumnModelData4.OnetoFour = RecievedResults_OnetoFour;
					_GroupedColumnModelData4.FivetoNine = RecievedResults_FivetoNine;
					_GroupedColumnModelData4.TentoFourteen = RecievedResults_TentoFourteen;
					_GroupedColumnModelData4.FifteentoSeventeen = RecievedResults_FifteentoSeventeen;
					_GroupedColumnModelData4.EigteenPlus = RecievedResults_18YearsPlus;
					GroupedColumnModelData4.Add(_GroupedColumnModelData4);
				}

			}
		}
		catch(Exception ex)
		{			

		}
		finally
		{

		}
	}
	public void OnDistrictChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
	{
		if (args.Value != null)
		{
			isSubcountyEnabled = true;
			using (var db = new MUCOBADIContext())
			{
				SubcountiesDataSource = db.ASubcounty.Where(o => args.Value.Any(a => a == o.DistrictId) == true).ToList();
				isSubcountyEnabled = true;
			}
		}
	}
	public void QueryCellInfoHandler(QueryCellInfoEventArgs<OVCServeValueTargets> Args)
	{

		if (Args.Column.Field == nameof(OVCServeValueTargets.ageCategory17))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#d1ccc0", "color:#353b48", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(OVCServeValueTargets.ageCategory18))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#d1ccc0", "color:#353b48", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(OVCServeValueTargets.FemaleActive))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#84817a", "color:#ffffff", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(OVCServeValueTargets.MaleActive))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#84817a", "color:#ffffff", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(OVCServeValueTargets.Percentage))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#ecf0f1", "color:#2c3e50", "font-weight:bold" });
		}

	}
	public void QueryCellInfoHandler1(QueryCellInfoEventArgs<OVCServeValueTargets> Args)
	{
		if (Args.Column.Field == nameof(OVCServeValueTargets.PercentageMaleActive))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#fdcb6e", "color:#2c3e50", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(OVCServeValueTargets.PercentageFemaleActive))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#fdcb6e", "color:#2c3e50", "font-weight:bold" });
		}
		//PercentageageCategory17
		if (Args.Column.Field == nameof(OVCServeValueTargets.PercentageageCategory17))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#fdcb6e", "color:#2c3e50", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(OVCServeValueTargets.PercentageageCategory18))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#fdcb6e", "color:#2c3e50", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(OVCServeValueTargets.HIVpostive17))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#e74c3c", "color:ghostwhite", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(OVCServeValueTargets.HIVpostive18))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#e74c3c", "color:ghostwhite", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(OVCServeValueTargets.HIVnegative17))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#2ecc71", "color:ghostwhite", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(OVCServeValueTargets.HIVnegative18))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#2ecc71", "color:ghostwhite", "font-weight:bold" });
		}      
	}
	public void QueryCellInfoHandlerTable(QueryCellInfoEventArgs<TableOVCVL> Args)
	{
		if (Args.Column.Field == nameof(TableOVCVL._female0_17_VL_TestDone))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#d2dae2", "color:#1e272e", "font-weight:bold" });
		}

		if (Args.Column.Field == nameof(TableOVCVL._Male0_17_VL_TestDone))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#d2dae2", "color:#1e272e", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(TableOVCVL._percentage0_17_VL_TestDone))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#d2dae2", "color:#1e272e", "font-weight:bold" });
		}

		if (Args.Column.Field == nameof(TableOVCVL._female18_VL_TestDone))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#808e9b", "color:#ffffff", "font-weight:bold" });
		}

		if (Args.Column.Field == nameof(TableOVCVL._Male18_VL_TestDone))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#808e9b", "color:#ffffff", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(TableOVCVL._percentage18_VL_TestDone))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#808e9b", "color:#ffffff", "font-weight:bold" });
		}
		//
		if (Args.Column.Field == nameof(TableOVCVL._female0_17_VL_Eligible))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#d2dae2", "color:#1e272e", "font-weight:bold" });
		}

		if (Args.Column.Field == nameof(TableOVCVL._Male0_17_VL_Eligible))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#d2dae2", "color:#1e272e", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(TableOVCVL._percentage0_17_VL_Eligible))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#d2dae2", "color:#1e272e", "font-weight:bold" });
		}

		if (Args.Column.Field == nameof(TableOVCVL._female18_VL_Eligible))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#808e9b", "color:#ffffff", "font-weight:bold" });
		}

		if (Args.Column.Field == nameof(TableOVCVL._Male18_VL_Eligible))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#808e9b", "color:#ffffff", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(TableOVCVL._percentage18_VL_Eligible))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#808e9b", "color:#ffffff", "font-weight:bold" });
		}
		////////
		if (Args.Column.Field == nameof(TableOVCVL.Female0_17SuppressedResults))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#d1ccc0", "color:#1e272e", "font-weight:bold" });
		}

		if (Args.Column.Field == nameof(TableOVCVL.Male0_17SuppressedResults))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#d1ccc0", "color:#1e272e", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(TableOVCVL._percentage0_17SuppressedResults))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#d1ccc0", "color:#1e272e", "font-weight:bold" });
		}

		if (Args.Column.Field == nameof(TableOVCVL.Female_18_SuppressedResults))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#192a56", "color:#ffffff", "font-weight:bold" });
		}

		if (Args.Column.Field == nameof(TableOVCVL.Male_18_SuppressedResults))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#192a56", "color:#ffffff", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(TableOVCVL._percentage18SuppressedResults))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#192a56", "color:#ffffff", "font-weight:bold" });
		}
		//
		if (Args.Column.Field == nameof(TableOVCVL.Female0_17RecievedResults))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#d1ccc0", "color:#1e272e", "font-weight:bold" });
		}

		if (Args.Column.Field == nameof(TableOVCVL.Male0_17RecievedResults))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#d1ccc0", "color:#1e272e", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(TableOVCVL._percentage0_17RecievedResults))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#d1ccc0", "color:#1e272e", "font-weight:bold" });
		}

		if (Args.Column.Field == nameof(TableOVCVL.Female_18_RecievedResults))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#192a56", "color:#ffffff", "font-weight:bold" });
		}

		if (Args.Column.Field == nameof(TableOVCVL.Male_18_RecievedResults))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#192a56", "color:#ffffff", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(TableOVCVL._percentage18RecievedResults))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#192a56", "color:#ffffff", "font-weight:bold" });
		}
	}
	List<SubcountyDetails> JinjaData = new List<SubcountyDetails>();
	List<SubcountyDetails> JinjaCityData = new List<SubcountyDetails>();
	List<SubcountyDetails> BugiriData = new List<SubcountyDetails>();
	List<SubcountyDetails> BugweriData = new List<SubcountyDetails>();
	List<SubcountyDetails> IgangaData = new List<SubcountyDetails>();
	List<SubcountyDetails> KamuliData = new List<SubcountyDetails>();
	List<SubcountyDetails> MayugeData = new List<SubcountyDetails>();
	List<SubcountyDetails> NamayingoData = new List<SubcountyDetails>();
	List<SubcountyDetails> MukonoData = new List<SubcountyDetails>();
	List<SubcountyDetails> BuikweData = new List<SubcountyDetails>();
	List<SubcountyDetails> KayungaData = new List<SubcountyDetails>();
	List<PieData> BugiriPieChartPoints = new List<PieData>();
	List<PieData> BugweriPieChartPoints = new List<PieData>();
	List<PieData> BuikwePieChartPoints = new List<PieData>();
	List<PieData> JinjaPieChartPoints = new List<PieData>();
	List<PieData> JinjaCityPieChartPoints = new List<PieData>();
	List<PieData> IgangaPieChartPoints = new List<PieData>();
	List<PieData> KamuliPieChartPoints = new List<PieData>();
	List<PieData> MayugePieChartPoints = new List<PieData>();
	List<PieData> MukonoPieChartPoints = new List<PieData>();
	List<PieData> NamyingoPieChartPoints = new List<PieData>();
	List<PieData> KayungaPieChartPoints = new List<PieData>();

	public string FontSize { get; set; } = "11px";
	public string TextSize { get; set; } = "14px";

	List<spHomeVisitsCountSummary_Per_Dsitrict_Per_QuarterResult> HomeVisitsCountDistrictQuarterSummaryData { get; set; }
	List<SubCountyLine> JinjaChartPointData = new List<SubCountyLine>();
	List<spHomeVisitsCountSummaryResult> HomeVisitsCountSummaryData { get; set; }
	public int ExplodeIndex { get; set; } = 1;
	public string ExplodeRadius = "7%";
	public string Radius { get; set; } = "42%";
	public string ConnectorLength { get; set; } = "20px";
	public int StartAngle = 25;
	public string Size { get; set; } = "12px";
	private async Task GetSubcountyCardDatas()
	{
		using (var _dbcontext = new SPToCoreContext())
		{
			var currentMonth = DateTime.Now.Month;
			var currentYear = DateTime.Now.Year;

			var previousYear = currentYear - 1;
			string startDate = null;
			string endDate = null;
			//currentMonth = 7;
			//var _financialYear = _dbcontext.AFinancialYear.FirstOrDefault(o => o.FinancialYearDesc.Trim() == currentYear.ToString());
			var _financialYear = new AFinancialYear();
			SearchModel = new SearchPanel();
			SearchModel.Startdate = new DateTime(DateTime.Now.Year, 1, 1);
			SearchModel.Enddate = new DateTime(DateTime.Now.Year, 12, 31);

			int StartMonth = 1;
			int EndMonth = 12;

			if (currentMonth >= 1 && currentMonth <= 3)
			{
				QuarterNo = "TWO (JAN-MAR)";
				startDate = currentYear + "-01-01";
				endDate = currentYear + "-03-31";
				Qtr = "2";
				PreviousQtr = "1";
				StartMonth = 1;
				EndMonth = 3;
				_financialYear = _dbcontext.AFinancialYear.FirstOrDefault(o => o.FinancialYearDesc.Trim() == (currentYear - 1).ToString());
			}
			else if (currentMonth >= 4 && currentMonth <= 6)
			{
				QuarterNo = "THREE (APR-JUN)";
				startDate = currentYear + "-04-01";
				endDate = currentYear + "-06-30";
				Qtr = "3";
				PreviousQtr = "2";
				StartMonth = 4;
				EndMonth = 6;
				_financialYear = _dbcontext.AFinancialYear.FirstOrDefault(o => o.FinancialYearDesc.Trim() == (currentYear).ToString());
			}
			else if (currentMonth >= 7 && currentMonth <= 9)
			{
				QuarterNo = "FOUR (JUL-SEP)";
				startDate = currentYear + "-07-01";
				endDate = currentYear + "-09-30";
				Qtr = "4";
				PreviousQtr = "3";
				StartMonth = 7;
				EndMonth = 9;
				_financialYear = _dbcontext.AFinancialYear.FirstOrDefault(o => o.FinancialYearDesc.Trim() == (currentYear).ToString());
			}
			else if (currentMonth >= 10 && currentMonth <= 12)
			{
				QuarterNo = "ONE (OCT-DEC)";
				startDate = currentYear + "-10-01";
				endDate = currentYear + "-12-31";
				Qtr = "1";
				PreviousQtr = "4";
				StartMonth = 10;
				EndMonth = 12;
				_financialYear = _dbcontext.AFinancialYear.FirstOrDefault(o => o.FinancialYearDesc.Trim() == (currentYear).ToString());
			}
			TargetsData = await _dbcontext.ViewATargets.Where(o => o.FinancialYearDesc.Trim() == _financialYear.FinancialYearDesc).ToListAsync();
			HomeVisitsCountSummaryData = await _dbcontext.spHomeVisitsCountSummaryAsync(Convert.ToDateTime(startDate), Convert.ToDateTime(endDate), null, null);
			HomeVisitsCountDistrictQuarterSummaryData = await _dbcontext.spHomeVisitsCountSummary_Per_Dsitrict_Per_QuarterAsync(null, null, null, null, null);
			string? subcountyDescription = null;
			string? DistrictName = null;
			double VisistedOnce = 0.0;
			double VisistedTwice = 0.0;
			double VisitedThrice = 0.0;
			double? percentageVisited = 0.0;
			if (HomeVisitsCountSummaryData != null && HomeVisitsCountSummaryData.Count > 0)
			{
				var distinctFinancialYears = HomeVisitsCountSummaryData
					.Select(g => g.FinancialYear)
					.Distinct()
					.ToList();

				if (distinctFinancialYears != null)
				{
					foreach (var financialYear in distinctFinancialYears)
					{
						//JINJA
						var filteredJinja = HomeVisitsCountSummaryData
							.Where(o => o.DistrictId == 1 && o.FinancialYear == financialYear && o.SubcountyId != null)
							.ToList();
						if (filteredJinja != null && filteredJinja.Count > 0)
						{
							List<SubcountyDetails> subcountyDetailsList = new List<SubcountyDetails>();

							foreach (var x in filteredJinja)
							{
								SubcountyDetails jinja = new SubcountyDetails
									{
										SubcountyDescription = x.SubcountyDescription,
										VisitedOnce = Convert.ToDouble(x.VisitedOnce),
										VisitedTwice = Convert.ToDouble(x.VisitedTwice),
										VisitedThrice = Convert.ToDouble(x.VisitedThrice)
									};
								subcountyDetailsList.Add(jinja);
							}
							JinjaData.AddRange(subcountyDetailsList);
						}
						//JinjaCity
						var filteredJinjaCity = HomeVisitsCountSummaryData
							.Where(o => o.DistrictId == 8 && o.FinancialYear == financialYear && o.SubcountyId != null)
							.ToList();
						if (filteredJinjaCity != null && filteredJinjaCity.Count > 0)
						{
							List<SubcountyDetails> jinjaCityList = new List<SubcountyDetails>();

							foreach (var x in filteredJinjaCity)
							{
								SubcountyDetails jinjaCity = new SubcountyDetails
									{
										SubcountyDescription = x.SubcountyDescription,
										VisitedOnce = Convert.ToDouble(x.VisitedOnce),
										VisitedTwice = Convert.ToDouble(x.VisitedTwice),
										VisitedThrice = Convert.ToDouble(x.VisitedThrice)
									};

								jinjaCityList.Add(jinjaCity);
							}
							JinjaCityData.AddRange(jinjaCityList);
						}
						//Bugiri BugiriData
						var filterBugiri = HomeVisitsCountSummaryData
						.Where(o => o.DistrictId == 6 && o.FinancialYear == financialYear && o.SubcountyId != null)
						.ToList();
						if (filterBugiri != null && filterBugiri.Count > 0)
						{
							List<SubcountyDetails> bugiriList = new List<SubcountyDetails>();

							foreach (var x in filterBugiri)
							{
								SubcountyDetails bugiri = new SubcountyDetails
									{
										SubcountyDescription = x.SubcountyDescription,
										VisitedOnce = Convert.ToDouble(x.VisitedOnce),
										VisitedTwice = Convert.ToDouble(x.VisitedTwice),
										VisitedThrice = Convert.ToDouble(x.VisitedThrice)
									};
								bugiriList.Add(bugiri);
							}
							BugiriData.AddRange(bugiriList);
						}
						//BugweriData
						var filterBugweri = HomeVisitsCountSummaryData
						.Where(o => o.DistrictId == 7 && o.FinancialYear == financialYear && o.SubcountyId != null)
						.ToList();
						if (filterBugweri != null && filterBugweri.Count > 0)
						{
							List<SubcountyDetails> BugweriList = new List<SubcountyDetails>();

							foreach (var x in filterBugweri)
							{
								SubcountyDetails Bugweri = new SubcountyDetails
									{
										SubcountyDescription = x.SubcountyDescription,
										VisitedOnce = Convert.ToDouble(x.VisitedOnce),
										VisitedTwice = Convert.ToDouble(x.VisitedTwice),
										VisitedThrice = Convert.ToDouble(x.VisitedThrice)
									};

								BugweriList.Add(Bugweri);
							}
							BugweriData.AddRange(BugweriList);
						}
						//IgangaData
						var filterIganga = HomeVisitsCountSummaryData
						.Where(o => o.DistrictId == 2 && o.FinancialYear == financialYear && o.SubcountyId != null)
						.ToList();
						if (filterIganga != null && filterIganga.Count > 0)
						{
							List<SubcountyDetails> IgangaList = new List<SubcountyDetails>();

							foreach (var x in filterIganga)
							{
								SubcountyDetails Iganga = new SubcountyDetails
									{
										SubcountyDescription = x.SubcountyDescription,
										VisitedOnce = Convert.ToDouble(x.VisitedOnce),
										VisitedTwice = Convert.ToDouble(x.VisitedTwice),
										VisitedThrice = Convert.ToDouble(x.VisitedThrice)
									};

								IgangaList.Add(Iganga);
							}
							IgangaData.AddRange(IgangaList);
						}
						//Kamuli data
						var filterKamuli = HomeVisitsCountSummaryData
						.Where(o => o.DistrictId == 4 && o.FinancialYear == financialYear && o.SubcountyId != null)
						.ToList();
						if (filterKamuli != null && filterKamuli.Count > 0)
						{
							List<SubcountyDetails> KamuliList = new List<SubcountyDetails>();

							foreach (var x in filterKamuli)
							{
								SubcountyDetails Kamuli = new SubcountyDetails
									{
										SubcountyDescription = x.SubcountyDescription,
										VisitedOnce = Convert.ToDouble(x.VisitedOnce),
										VisitedTwice = Convert.ToDouble(x.VisitedTwice),
										VisitedThrice = Convert.ToDouble(x.VisitedThrice)
									};

								KamuliList.Add(Kamuli);
							}
							KamuliData.AddRange(KamuliList);
						}
						//Mayuge
						var filterMayuge = HomeVisitsCountSummaryData
						.Where(o => o.DistrictId == 3 && o.FinancialYear == financialYear && o.SubcountyId != null)
						.ToList();
						if (filterMayuge != null && filterMayuge.Count > 0)
						{
							List<SubcountyDetails> MayugeList = new List<SubcountyDetails>();

							foreach (var x in filterMayuge)
							{
								SubcountyDetails Mayuge = new SubcountyDetails
									{
										SubcountyDescription = x.SubcountyDescription,
										VisitedOnce = Convert.ToDouble(x.VisitedOnce),
										VisitedTwice = Convert.ToDouble(x.VisitedTwice),
										VisitedThrice = Convert.ToDouble(x.VisitedThrice)
									};

								MayugeList.Add(Mayuge);
							}
							MayugeData.AddRange(MayugeList);
						}
						//Namayingo
						var filterNamayingo = HomeVisitsCountSummaryData
						.Where(o => o.DistrictId == 5 && o.FinancialYear == financialYear && o.SubcountyId != null)
						.ToList();
						if (filterNamayingo != null && filterNamayingo.Count > 0)
						{
							List<SubcountyDetails> NamayingoList = new List<SubcountyDetails>();

							foreach (var x in filterNamayingo)
							{
								SubcountyDetails Namayingo = new SubcountyDetails
									{
										SubcountyDescription = x.SubcountyDescription,
										VisitedOnce = Convert.ToDouble(x.VisitedOnce),
										VisitedTwice = Convert.ToDouble(x.VisitedTwice),
										VisitedThrice = Convert.ToDouble(x.VisitedThrice)
									};

								NamayingoList.Add(Namayingo);
							}
							NamayingoData.AddRange(NamayingoList);
						}
						//Mukono
						var filterMukono = HomeVisitsCountSummaryData
						.Where(o => o.DistrictId == 11 && o.FinancialYear == financialYear && o.SubcountyId != null)
						.ToList();
						if (filterMukono != null && filterMukono.Count > 0)
						{
							List<SubcountyDetails> MukonoList = new List<SubcountyDetails>();

							foreach (var x in filterMukono)
							{
								SubcountyDetails Mukono = new SubcountyDetails
									{
										SubcountyDescription = x.SubcountyDescription,
										VisitedOnce = Convert.ToDouble(x.VisitedOnce),
										VisitedTwice = Convert.ToDouble(x.VisitedTwice),
										VisitedThrice = Convert.ToDouble(x.VisitedThrice)
									};

								MukonoList.Add(Mukono);
							}
							MukonoData.AddRange(MukonoList);
						}
						//Buikwe
						var filterBuikwe = HomeVisitsCountSummaryData
						.Where(o => o.DistrictId == 10 && o.FinancialYear == financialYear && o.SubcountyId != null)
						.ToList();
						if (filterBuikwe != null && filterBuikwe.Count > 0)
						{
							List<SubcountyDetails> BuikweList = new List<SubcountyDetails>();

							foreach (var x in filterBuikwe)
							{
								SubcountyDetails Buikwe = new SubcountyDetails
									{
										SubcountyDescription = x.SubcountyDescription,
										VisitedOnce = Convert.ToDouble(x.VisitedOnce),
										VisitedTwice = Convert.ToDouble(x.VisitedTwice),
										VisitedThrice = Convert.ToDouble(x.VisitedThrice)
									};

								BuikweList.Add(Buikwe);
							}
							BuikweData.AddRange(BuikweList);
						}
						//Kayunga
						var filterKayunga = HomeVisitsCountSummaryData
						.Where(o => o.DistrictId == 9 && o.FinancialYear == financialYear && o.SubcountyId != null)
						.ToList();
						if (filterKayunga != null && filterKayunga.Count > 0)
						{
							List<SubcountyDetails> KayungaList = new List<SubcountyDetails>();
							foreach (var x in filterKayunga)
							{
								SubcountyDetails Kayunga = new SubcountyDetails
									{
										SubcountyDescription = x.SubcountyDescription,
										VisitedOnce = Convert.ToDouble(x.VisitedOnce),
										VisitedTwice = Convert.ToDouble(x.VisitedTwice),
										VisitedThrice = Convert.ToDouble(x.VisitedThrice)
									};

								KayungaList.Add(Kayunga);
							}
							KayungaData.AddRange(KayungaList);
						}

					}
				}
			}

			double visitedQ1 = 0.0;
			double visitedQ2 = 0.0;
			double visitedQ3 = 0.0;
			double visitedQ4 = 0.0;
			if (HomeVisitsCountDistrictQuarterSummaryData != null && HomeVisitsCountDistrictQuarterSummaryData.Count > 0)
			{
				if (currentMonth >= 10)
				{
			    //Jinja
					var JinjaData = HomeVisitsCountDistrictQuarterSummaryData
										.Where(o => o.DistrictId == 1 && o.FinancialYear != null && o.FinancialYear == currentYear).ToList();
					if(JinjaData != null && JinjaData.Count > 0)
					{
						var q1 = JinjaData.FirstOrDefault(o=>o.Qtr == 1);
						if(q1 != null)
						{
							visitedQ1 = Convert.ToDouble((q1.VisitedTwice + q1.VisitedOnce + q1.VisitedOnce));
						}
						var q2 = JinjaData.FirstOrDefault(o => o.Qtr == 2);
						if(q2 != null){
							visitedQ2 = Convert.ToDouble((q2.VisitedTwice + q2.VisitedOnce + q2.VisitedOnce));
						}
						var q3 = JinjaData.FirstOrDefault(o => o.Qtr == 3);
						if(q3 != null){
							visitedQ3 = Convert.ToDouble((q3.VisitedTwice + q3.VisitedOnce + q3.VisitedOnce));
						}
						var q4 = JinjaData.FirstOrDefault(o => o.Qtr == 4);
						if(q4 != null){
							visitedQ4 = Convert.ToDouble((q4.VisitedTwice + q4.VisitedOnce + q4.VisitedOnce));
						}
						JinjaPieChartPoints = new List<PieData>
							{
							 new PieData
							 {
								 Browser = "Quarter 1",
								 Users = visitedQ1,
								 DataLabelMappingName  = " Q1 " + "  " + visitedQ1
							 },
							  new PieData
							 {
								 Browser = "Quarter 2",
								 Users = visitedQ2,
								 DataLabelMappingName = " Q2 " + "  " + visitedQ2
							 },
							  new PieData
							 {
								 Browser = "Quarter 3",
								 Users = visitedQ3,
								 DataLabelMappingName = " Q3 " + "  " + visitedQ3
							 },
							  new PieData
							 {
								 Browser = "Quarter 4",
								 Users = visitedQ4,
								 DataLabelMappingName = " Q4 " +"  "+ visitedQ4
							 }
							};
					}
				//Bigiri
					var BugiriData = HomeVisitsCountDistrictQuarterSummaryData
										.Where(o => o.DistrictId == 6 && o.FinancialYear != null && o.FinancialYear == currentYear).ToList();
					if(BugiriData != null && BugiriData.Count > 0)
					{
						var q1 = BugiriData.FirstOrDefault(o=>o.Qtr == 1);
						if(q1 != null){
								visitedQ1 = Convert.ToDouble((q1.VisitedTwice + q1.VisitedOnce + q1.VisitedThrice));
						}
					
						var q2 = BugiriData.FirstOrDefault(o => o.Qtr == 2);
						if(q2 != null){
							visitedQ2 = Convert.ToDouble((q2.VisitedTwice + q2.VisitedOnce + q2.VisitedThrice));
						}
						
						var q3 = BugiriData.FirstOrDefault(o => o.Qtr == 3);
						if(q3 != null){
							visitedQ3 = Convert.ToDouble((q3.VisitedTwice + q3.VisitedOnce + q3.VisitedThrice));
						}
					
						var q4 = BugiriData.FirstOrDefault(o => o.Qtr == 4);
						if(q4 != null)
						{
							visitedQ4 = Convert.ToDouble((q4.VisitedTwice + q4.VisitedOnce + q4.VisitedThrice));
						}
						BugiriPieChartPoints = new List<PieData>
							{
							 new PieData
							 {
								 Browser = "Quarter 1",
								 Users = visitedQ1,
								 DataLabelMappingName  = "Q1" + "  " + visitedQ1
								
							 },
							  new PieData
							 {
								 Browser = "Quarter 2",
								 Users = visitedQ2,
								 DataLabelMappingName = "Q2" + "  " + visitedQ2
							 },
							  new PieData
							 {
								 Browser = "Quarter 3",
								 Users = visitedQ3,
								 DataLabelMappingName = "Q3" +" "+ visitedQ3
							 },
							  new PieData
							 {
								 Browser = "Quarter 4",
								 Users = visitedQ4,
								 DataLabelMappingName = "Q4" +" "+ visitedQ4
							 }
							};
					}
				//Kayunga
					var KayungaData = HomeVisitsCountDistrictQuarterSummaryData
								.Where(o => o.DistrictId == 9 && o.FinancialYear != null && o.FinancialYear == currentYear).ToList();
					if (KayungaData != null && KayungaData.Count > 0)
					{
						var q1 = KayungaData.FirstOrDefault(o => o.Qtr == 1);
						if (q1 != null)
						{
							visitedQ1 = Convert.ToDouble((q1.VisitedTwice + q1.VisitedOnce + q1.VisitedThrice));
						}
						var q2 = KayungaData.FirstOrDefault(o => o.Qtr == 2);
						if (q2 != null)
						{
						 visitedQ2 = Convert.ToDouble((q2.VisitedTwice + q2.VisitedOnce + q2.VisitedThrice));
						}
						var q3 = KayungaData.FirstOrDefault(o => o.Qtr == 3);
						if (q3 != null)
						{
							visitedQ3 = Convert.ToDouble((q3.VisitedTwice + q3.VisitedOnce + q3.VisitedThrice));
						}
						var q4 = KayungaData.FirstOrDefault(o => o.Qtr == 4);
						if (q4 != null)
						{
							visitedQ4 = Convert.ToDouble((q4.VisitedTwice + q4.VisitedOnce + q4.VisitedThrice));
						}
						KayungaPieChartPoints = new List<PieData>
						{
						 new PieData
						 {
							 Browser = "Quarter 1",
							 Users = visitedQ1,
							 DataLabelMappingName  = "Q1" + "  " + visitedQ1

						 },
						  new PieData
						 {
							 Browser = "Quarter 2",
							 Users = visitedQ2,
							 DataLabelMappingName = "Q2" + "  " + visitedQ2
						 },
						  new PieData
						 {
							 Browser = "Quarter 3",
							 Users = visitedQ3,
							 DataLabelMappingName = "Q3" + " "+ visitedQ3
						 },
						  new PieData
						 {
							 Browser = "Quarter 4",
							 Users = visitedQ4,
							 DataLabelMappingName = "Q4" +" "+ visitedQ4
						 }
						};
					}
				//Namayingo
					var NamyingoData = HomeVisitsCountDistrictQuarterSummaryData
						.Where(o => o.DistrictId == 5 && o.FinancialYear != null && o.FinancialYear == currentYear).ToList();
					if (NamyingoData != null && NamyingoData.Count > 0)
					{
						var q1 = NamyingoData.FirstOrDefault(o => o.Qtr == 1);
						if (q1 != null)
						{
							visitedQ1 = Convert.ToDouble((q1.VisitedTwice + q1.VisitedOnce + q1.VisitedThrice));
						}
						var q2 = NamyingoData.FirstOrDefault(o => o.Qtr == 2);
						if (q2 != null)
						{
							visitedQ2 = Convert.ToDouble((q2.VisitedTwice + q2.VisitedOnce + q2.VisitedThrice));
						}
						var q3 = NamyingoData.FirstOrDefault(o => o.Qtr == 3);
						if (q3 != null)
						{
							visitedQ3 = Convert.ToDouble((q3.VisitedTwice + q3.VisitedOnce + q3.VisitedThrice));
						}
						var q4 = NamyingoData.FirstOrDefault(o => o.Qtr == 4);
						if (q4 != null)
						{
							visitedQ4 = Convert.ToDouble((q4.VisitedTwice + q4.VisitedOnce + q4.VisitedThrice));
						}
						NamyingoPieChartPoints = new List<PieData>
				{
				 new PieData
				 {
					 Browser = "Quarter 1",
					 Users = visitedQ1,
					 DataLabelMappingName  = "Q1" + "  " + visitedQ1

				 },
				  new PieData
				 {
					 Browser = "Quarter 2",
					 Users = visitedQ2,
					 DataLabelMappingName = "Q2" + "  " + visitedQ2
				 },
				  new PieData
				 {
					 Browser = "Quarter 3",
					 Users = visitedQ3,
					 DataLabelMappingName = "Q3" +" "+ visitedQ3
				 },
				  new PieData
				 {
					 Browser = "Quarter 4",
					 Users = visitedQ4,
					 DataLabelMappingName = "Q4" +" "+ visitedQ4
				 }
				};
					}
			 	//Mukono
					var MukonoData = HomeVisitsCountDistrictQuarterSummaryData
							.Where(o => o.DistrictId == 11 && o.FinancialYear != null && o.FinancialYear == currentYear).ToList();
					if (MukonoData != null && MukonoData.Count > 0)
					{
						var q1 = MukonoData.FirstOrDefault(o => o.Qtr == 1);
						if (q1 != null)
						{
							visitedQ1 = Convert.ToDouble((q1.VisitedTwice + q1.VisitedOnce + q1.VisitedThrice));
						}
						var q2 = MukonoData.FirstOrDefault(o => o.Qtr == 2);
						if (q2 != null)
						{
							visitedQ2 = Convert.ToDouble((q2.VisitedTwice + q2.VisitedOnce + q2.VisitedThrice));
						}
						var q3 = MukonoData.FirstOrDefault(o => o.Qtr == 3);
						if (q3 != null)
						{
							visitedQ3 = Convert.ToDouble((q3.VisitedTwice + q3.VisitedOnce + q3.VisitedThrice));
						}
						var q4 = MukonoData.FirstOrDefault(o => o.Qtr == 4);
						if (q4 != null)
						{
							visitedQ4 = Convert.ToDouble((q4.VisitedTwice + q4.VisitedOnce + q4.VisitedThrice));
						}
						MukonoPieChartPoints = new List<PieData>
				{
				 new PieData
				 {
					 Browser = "Quarter 1",
					 Users = visitedQ1,
					 DataLabelMappingName  = "Q1" + "  " + visitedQ1

				 },
				  new PieData
				 {
					 Browser = "Quarter 2",
					 Users = visitedQ2,
					 DataLabelMappingName = "Q2" + "  " + visitedQ2
				 },
				  new PieData
				 {
					 Browser = "Quarter 3",
					 Users = visitedQ3,
					 DataLabelMappingName = "Q3" +" "+ visitedQ3
				 },
				  new PieData
				 {
					 Browser = "Quarter 4",
					 Users = visitedQ4,
					 DataLabelMappingName = "Q4" +" "+ visitedQ4
				 }
				};
					}
				//Mayuge
					var MayugeData = HomeVisitsCountDistrictQuarterSummaryData
						.Where(o => o.DistrictId == 3 && o.FinancialYear != null && o.FinancialYear == currentYear).ToList();
					if (MayugeData != null && MayugeData.Count > 0)
					{
						var q1 = MayugeData.FirstOrDefault(o => o.Qtr == 1);
						if (q1 != null)
						{
							visitedQ1 = Convert.ToDouble((q1.VisitedTwice + q1.VisitedOnce + q1.VisitedThrice));
						}
						var q2 = MayugeData.FirstOrDefault(o => o.Qtr == 2);
						if (q2 != null)
						{
							visitedQ2 = Convert.ToDouble((q2.VisitedTwice + q2.VisitedOnce + q2.VisitedThrice));
						}
						var q3 = MayugeData.FirstOrDefault(o => o.Qtr == 3);
						if (q3 != null)
						{
							visitedQ3 = Convert.ToDouble((q3.VisitedTwice + q3.VisitedOnce + q3.VisitedThrice));
						}
						var q4 = MayugeData.FirstOrDefault(o => o.Qtr == 4);
						if (q4 != null)
						{
							visitedQ4 = Convert.ToDouble((q4.VisitedTwice + q4.VisitedOnce + q4.VisitedThrice));
						}
						MayugePieChartPoints = new List<PieData>
						{
						 new PieData
						 {
										 Browser = "Quarter 1",
										 Users = visitedQ1,
										 DataLabelMappingName  = "Q1" + "  " + visitedQ1

						 },
						  new PieData
						 {
										 Browser = "Quarter 2",
										 Users = visitedQ2,
										 DataLabelMappingName = "Q2" + "  " + visitedQ2
						 },
						  new PieData
						 {
										 Browser = "Quarter 3",
										 Users = visitedQ3,
										 DataLabelMappingName = "Q3" +" "+ visitedQ3
						 },
						  new PieData
						 {
										 Browser = "Quarter 4",
										 Users = visitedQ4,
										 DataLabelMappingName = "Q4" +" "+ visitedQ4
						 }
						};
											}
				//Jinja City
					var JinjaCityData = HomeVisitsCountDistrictQuarterSummaryData
							.Where(o => o.DistrictId == 8 && o.FinancialYear != null && o.FinancialYear == currentYear).ToList();
					if (JinjaCityData != null && JinjaCityData.Count > 0)
					{
						var q1 = JinjaCityData.FirstOrDefault(o => o.Qtr == 1);
						if (q1 != null)
						{
							visitedQ1 = Convert.ToDouble((q1.VisitedTwice + q1.VisitedOnce + q1.VisitedThrice));
						}
						var q2 = JinjaCityData.FirstOrDefault(o => o.Qtr == 2);
						if (q2 != null)
						{
							visitedQ2 = Convert.ToDouble((q2.VisitedTwice + q2.VisitedOnce + q2.VisitedThrice));
						}
						var q3 = JinjaCityData.FirstOrDefault(o => o.Qtr == 3);
						if (q3 != null)
						{
							visitedQ3 = Convert.ToDouble((q3.VisitedTwice + q3.VisitedOnce + q3.VisitedThrice));
						}
						var q4 = JinjaCityData.FirstOrDefault(o => o.Qtr == 4);
						if (q4 != null)
						{
							visitedQ4 = Convert.ToDouble((q4.VisitedTwice + q4.VisitedOnce + q4.VisitedThrice));
						}
						JinjaCityPieChartPoints = new List<PieData>
						{
						 new PieData
						 {
						 Browser = "Quarter 1",
						 Users = visitedQ1,
						 DataLabelMappingName  = "Q1" + "  " + visitedQ1

						 },
						  new PieData
						 {
										 Browser = "Quarter 2",
										 Users = visitedQ2,
										 DataLabelMappingName = "Q2" + "  " + visitedQ2
						 },
						  new PieData
						 {
										 Browser = "Quarter 3",
										 Users = visitedQ3,
										 DataLabelMappingName = "Q3" +" "+ visitedQ3
						 },
						  new PieData
						 {
										 Browser = "Quarter 4",
										 Users = visitedQ4,
										 DataLabelMappingName = "Q4" +" "+ visitedQ4
						 }
						};
					}
				//Kamuli
					var KamuliData = HomeVisitsCountDistrictQuarterSummaryData
							.Where(o => o.DistrictId == 4 && o.FinancialYear != null && o.FinancialYear == currentYear).ToList();
					if (KamuliData != null && KamuliData.Count > 0)
					{
						var q1 = KamuliData.FirstOrDefault(o => o.Qtr == 1);
						if (q1 != null)
						{
							visitedQ1 = Convert.ToDouble((q1.VisitedTwice + q1.VisitedOnce + q1.VisitedThrice));
						}
						var q2 = KamuliData.FirstOrDefault(o => o.Qtr == 2);
						if (q2 != null)
						{
							visitedQ2 = Convert.ToDouble((q2.VisitedTwice + q2.VisitedOnce + q2.VisitedThrice));
						}
						var q3 = KamuliData.FirstOrDefault(o => o.Qtr == 3);
						if (q3 != null)
						{
							visitedQ3 = Convert.ToDouble((q3.VisitedTwice + q3.VisitedOnce + q3.VisitedThrice));
						}
						var q4 = KamuliData.FirstOrDefault(o => o.Qtr == 4);
						if (q4 != null)
						{
							visitedQ4 = Convert.ToDouble((q4.VisitedTwice + q4.VisitedOnce + q4.VisitedThrice));
						}
						KamuliPieChartPoints = new List<PieData>
						{
						 new PieData
						 {
										 Browser = "Quarter 1",
										 Users = visitedQ1,
										 DataLabelMappingName  = "Q1" + "  " + visitedQ1

						 },
						  new PieData
						 {
										 Browser = "Quarter 2",
										 Users = visitedQ2,
										 DataLabelMappingName = "Q2" + "  " + visitedQ2
						 },
						  new PieData
						 {
										 Browser = "Quarter 3",
										 Users = visitedQ3,
										 DataLabelMappingName = "Q3" +" "+ visitedQ3
						 },
						  new PieData
						 {
										 Browser = "Quarter 4",
										 Users = visitedQ4,
										 DataLabelMappingName = "Q4" +" "+ visitedQ4
						 }
						};
					}
				//Iganga
				  var IgangaData = HomeVisitsCountDistrictQuarterSummaryData
				.Where(o => o.DistrictId == 2 && o.FinancialYear != null && o.FinancialYear == currentYear).ToList();
					if (IgangaData != null && IgangaData.Count > 0)
					{
						var q1 = IgangaData.FirstOrDefault(o => o.Qtr == 1);
						if (q1 != null)
						{
							visitedQ1 = Convert.ToDouble((q1.VisitedTwice + q1.VisitedOnce + q1.VisitedThrice));
						}
						var q2 = IgangaData.FirstOrDefault(o => o.Qtr == 2);
						if (q2 != null)
						{
							visitedQ2 = Convert.ToDouble((q2.VisitedTwice + q2.VisitedOnce + q2.VisitedThrice));
						}
						var q3 = IgangaData.FirstOrDefault(o => o.Qtr == 3);
						if (q3 != null)
						{
							visitedQ3 = Convert.ToDouble((q3.VisitedTwice + q3.VisitedOnce + q3.VisitedThrice));
						}
						var q4 = IgangaData.FirstOrDefault(o => o.Qtr == 4);
						if (q4 != null)
						{
							visitedQ4 = Convert.ToDouble((q4.VisitedTwice + q4.VisitedOnce + q4.VisitedThrice));
						}
						IgangaPieChartPoints = new List<PieData>
						{
						 new PieData
						 {
										 Browser = "Quarter 1",
										 Users = visitedQ1,
										 DataLabelMappingName  = "Q1" + "  " + visitedQ1

						 },
						  new PieData
						 {
										 Browser = "Quarter 2",
										 Users = visitedQ2,
										 DataLabelMappingName = "Q2" + "  " + visitedQ2
						 },
						  new PieData
						 {
										 Browser = "Quarter 3",
										 Users = visitedQ3,
										 DataLabelMappingName = "Q3" +" "+ visitedQ3
						 },
						  new PieData
						 {
										 Browser = "Quarter 4",
										 Users = visitedQ4,
										 DataLabelMappingName = "Q4" +" "+ visitedQ4
						 }
					};
					}
				//Buikwe
				 var BuikweData = HomeVisitsCountDistrictQuarterSummaryData
					.Where(o => o.DistrictId == 2 && o.FinancialYear != null && o.FinancialYear == currentYear).ToList();
				if (BuikweData != null && BuikweData.Count > 0)
				{
					var q1 = BuikweData.FirstOrDefault(o => o.Qtr == 1);
					if (q1 != null)
					{
						visitedQ1 = Convert.ToDouble((q1.VisitedTwice + q1.VisitedOnce + q1.VisitedThrice));
					}
					var q2 = BuikweData.FirstOrDefault(o => o.Qtr == 2);
					if (q2 != null)
					{
						visitedQ2 = Convert.ToDouble((q2.VisitedTwice + q2.VisitedOnce + q2.VisitedThrice));
					}
					var q3 = BuikweData.FirstOrDefault(o => o.Qtr == 3);
					if (q3 != null)
					{
						visitedQ3 = Convert.ToDouble((q3.VisitedTwice + q3.VisitedOnce + q3.VisitedThrice));
					}
					var q4 = BuikweData.FirstOrDefault(o => o.Qtr == 4);
					if (q4 != null)
					{
						visitedQ4 = Convert.ToDouble((q4.VisitedTwice + q4.VisitedOnce + q4.VisitedThrice));
					}
					BuikwePieChartPoints = new List<PieData>
					{
					 new PieData
					 {
									 Browser = "Quarter 1",
									 Users = visitedQ1,
									 DataLabelMappingName  = "Q1" + "  " + visitedQ1

					 },
					  new PieData
					 {
									 Browser = "Quarter 2",
									 Users = visitedQ2,
									 DataLabelMappingName = "Q2" + "  " + visitedQ2
					 },
					  new PieData
					 {
									 Browser = "Quarter 3",
									 Users = visitedQ3,
									 DataLabelMappingName = "Q3" +" "+ visitedQ3
					 },
					  new PieData
					 {
									 Browser = "Quarter 4",
									 Users = visitedQ4,
									 DataLabelMappingName = "Q4" +" "+ visitedQ4
					 }
					};
				}
				// Bugweri
					var BugweriData = HomeVisitsCountDistrictQuarterSummaryData
						.Where(o => o.DistrictId == 7 && o.FinancialYear != null && o.FinancialYear == currentYear).ToList();
					if (BugweriData != null && BugweriData.Count > 0)
					{
						var q1 = BugweriData.FirstOrDefault(o => o.Qtr == 1);
						if (q1 != null)
						{
							visitedQ1 = Convert.ToDouble((q1.VisitedTwice + q1.VisitedOnce + q1.VisitedThrice));
						}
						var q2 = BugweriData.FirstOrDefault(o => o.Qtr == 2);
						if (q2 != null)
						{
							visitedQ2 = Convert.ToDouble((q2.VisitedTwice + q2.VisitedOnce + q2.VisitedThrice));
						}
						var q3 = BugweriData.FirstOrDefault(o => o.Qtr == 3);
						if (q3 != null)
						{
							visitedQ3 = Convert.ToDouble((q3.VisitedTwice + q3.VisitedOnce + q3.VisitedThrice));
						}
						var q4 = BugweriData.FirstOrDefault(o => o.Qtr == 4);
						if (q4 != null)
						{
							visitedQ4 = Convert.ToDouble((q4.VisitedTwice + q4.VisitedOnce + q4.VisitedThrice));
						}
						BugweriPieChartPoints = new List<PieData>
					{
					 new PieData
					 {
									 Browser = "Quarter 1",
									 Users = visitedQ1,
									 DataLabelMappingName  = "Q1" + "  " + visitedQ1

					 },
					  new PieData
					 {
									 Browser = "Quarter 2",
									 Users = visitedQ2,
									 DataLabelMappingName = "Q2" + "  " + visitedQ2
					 },
					  new PieData
					 {
									 Browser = "Quarter 3",
									 Users = visitedQ3,
									 DataLabelMappingName = "Q3" +" "+ visitedQ3
					 },
					  new PieData
					 {
									 Browser = "Quarter 4",
									 Users = visitedQ4,
									 DataLabelMappingName = "Q4" +" "+ visitedQ4
					 }
					};
					}
				}
				else
				{
					//Bugiri
					var BugiriDataCurrent = HomeVisitsCountDistrictQuarterSummaryData
											.Where(o => o.DistrictId == 6 && o.FinancialYear != null && o.FinancialYear == currentYear).ToList();
					var BugiriDataPrevious = HomeVisitsCountDistrictQuarterSummaryData
										.Where(o => o.DistrictId == 6 && o.FinancialYear != null && o.FinancialYear == previousYear).ToList();
					if ((BugiriDataCurrent != null && BugiriDataCurrent.Count > 0) && (BugiriDataPrevious != null && BugiriDataPrevious.Count > 0))
					{
						var q1 = BugiriDataPrevious.FirstOrDefault(o => o.Qtr == 1);
						if(q1 != null){
							visitedQ1 = Convert.ToDouble((q1.VisitedTwice + q1.VisitedOnce + q1.VisitedThrice));
						}
						var q2 = BugiriDataCurrent.FirstOrDefault(o => o.Qtr == 2);
						if (q2 != null)
						{
							visitedQ2 = Convert.ToDouble((q2.VisitedTwice + q2.VisitedOnce + q2.VisitedThrice));
						}
						var q3 = BugiriDataCurrent.FirstOrDefault(o => o.Qtr == 3);
						if (q3 != null)
						{
							visitedQ3 = Convert.ToDouble((q3.VisitedTwice + q3.VisitedOnce + q3.VisitedThrice));
						}
						var q4 = BugiriDataCurrent.FirstOrDefault(o => o.Qtr == 4);
						if (q4 != null)
						{
							visitedQ4 = Convert.ToDouble((q4.VisitedTwice + q4.VisitedOnce + q4.VisitedThrice));
						}
						BugiriPieChartPoints = new List<PieData>
							{
							 new PieData
							 {
								 Browser = "Quarter 1",
								 Users = visitedQ1,
								 DataLabelMappingName  = "Q1" + "  "+ visitedQ1
							 },
							  new PieData
							 {
								 Browser = "Quarter 2",
								 Users = visitedQ2,
								 DataLabelMappingName = "Q2" + "  " + visitedQ2
							 },
							  new PieData
							 {
								 Browser = "Quarter 3",
								 Users = visitedQ3,
								 DataLabelMappingName = "Q3" +" "+ visitedQ3
							 },
							  new PieData
							 {
								 Browser = "Quarter 4",
								 Users = visitedQ4,
								 DataLabelMappingName = "Q4" +" "+ visitedQ4
							 }
							};
					}
					//Jinja
					var JinjaDataCurrent = HomeVisitsCountDistrictQuarterSummaryData
													.Where(o => o.DistrictId == 1 && o.FinancialYear != null && o.FinancialYear == currentYear).ToList();
					var JinjaDataPrevious = HomeVisitsCountDistrictQuarterSummaryData
											.Where(o => o.DistrictId == 1 && o.FinancialYear != null && o.FinancialYear == previousYear).ToList();
					if ((JinjaDataCurrent != null && JinjaDataCurrent.Count > 0) && (JinjaDataPrevious != null && JinjaDataPrevious.Count > 0))
					{

						var q1 = JinjaDataPrevious.FirstOrDefault(o => o.Qtr == 1);
						if(q1 != null){
							visitedQ1 = Convert.ToDouble((q1.VisitedTwice + q1.VisitedOnce + q1.VisitedThrice));
						}
						var q2 = JinjaDataCurrent.FirstOrDefault(o => o.Qtr == 2);
						if(q2 != null){
							visitedQ2 = Convert.ToDouble((q2.VisitedTwice + q2.VisitedOnce + q2.VisitedThrice));
						}
						var q3 = JinjaDataCurrent.FirstOrDefault(o => o.Qtr == 3);
						if(q3 != null){
							visitedQ3 = Convert.ToDouble((q3.VisitedTwice + q3.VisitedOnce + q3.VisitedThrice));
						}
						var q4 = JinjaDataCurrent.FirstOrDefault(o => o.Qtr == 4);
						if(q4 != null){
							visitedQ4 = Convert.ToDouble((q4.VisitedTwice + q4.VisitedOnce + q4.VisitedThrice));
						}
						JinjaPieChartPoints = new List<PieData>
							{
							 new PieData
							 {
								 Browser = "Quarter 1",
								 Users = visitedQ1,
								 DataLabelMappingName  = "Q1"+" "+visitedQ1
							 },
							  new PieData
							 {
								 Browser = "Quarter 2",
								 Users = visitedQ2,
								 DataLabelMappingName = "Q2"+" "+visitedQ2
							 },
							  new PieData
							 {
								 Browser = "Quarter 3",
								 Users = visitedQ3,
								 DataLabelMappingName = "Q3"+" "+visitedQ3
							 },
							  new PieData
							 {
								 Browser = "Quarter 4",
								 Users = visitedQ4,
								 DataLabelMappingName = "Q4"+" "+visitedQ4
							 }
							};
					}
					//Bugweri
					var BugweriDataCurrent = HomeVisitsCountDistrictQuarterSummaryData
													.Where(o => o.DistrictId == 7 && o.FinancialYear != null && o.FinancialYear == currentYear).ToList();
					var BugweriDataPrevious = HomeVisitsCountDistrictQuarterSummaryData
											.Where(o => o.DistrictId == 7 && o.FinancialYear != null && o.FinancialYear == previousYear).ToList();
					if ((BugweriDataCurrent != null && BugweriDataCurrent.Count > 0) && (BugweriDataPrevious != null && BugweriDataPrevious.Count > 0))
					{
						var q1 = BugweriDataPrevious.FirstOrDefault(o => o.Qtr == 1);
						if(q1 != null){
							visitedQ1 = Convert.ToDouble((q1.VisitedTwice + q1.VisitedOnce + q1.VisitedThrice));
						}
						var q2 = BugweriDataCurrent.FirstOrDefault(o => o.Qtr == 2);
						if(q2 != null){
							visitedQ2 = Convert.ToDouble((q2.VisitedTwice + q2.VisitedOnce + q2.VisitedThrice));
						}
						var q3 = BugweriDataCurrent.FirstOrDefault(o => o.Qtr == 3);
						if(q3 != null){
							visitedQ3 = Convert.ToDouble((q3.VisitedTwice + q3.VisitedOnce + q3.VisitedThrice));
						}
						var q4 = BugweriDataCurrent.FirstOrDefault(o => o.Qtr == 4);
						if(q4 != null)
						{
							visitedQ4 = Convert.ToDouble((q4.VisitedTwice + q4.VisitedOnce + q4.VisitedThrice));
						}
						BugweriPieChartPoints = new List<PieData>
							{
							 new PieData
							 {
								 Browser = "Quarter 1",
								 Users = visitedQ1,
								 DataLabelMappingName  = "Q1"+" "+visitedQ1
							 },
							  new PieData
							 {
								 Browser = "Quarter 2",
								 Users = visitedQ2,
								 DataLabelMappingName = "Q2"+" "+visitedQ2
							 },
							  new PieData
							 {
								 Browser = "Quarter 3",
								 Users = visitedQ3,
								 DataLabelMappingName = "Q3"+" "+visitedQ3
							 },
							  new PieData
							 {
								 Browser = "Quarter 4",
								 Users = visitedQ4,
								 DataLabelMappingName = "Q4"+" "+visitedQ4
							 }
							};
					}
					//Buikwe
					var BuikweDataCurrent = HomeVisitsCountDistrictQuarterSummaryData
														.Where(o => o.DistrictId == 10 && o.FinancialYear != null && o.FinancialYear == currentYear).ToList();
					var BuikweDataPrevious = HomeVisitsCountDistrictQuarterSummaryData
											.Where(o => o.DistrictId == 10 && o.FinancialYear != null && o.FinancialYear == previousYear).ToList();
					if ((BugweriDataCurrent != null && BugweriDataCurrent.Count > 0) && (BugweriDataPrevious != null && BugweriDataPrevious.Count > 0))
					{
						var q1 = BugweriDataPrevious.FirstOrDefault(o => o.Qtr == 1);
						if(q1 != null)
						{
							visitedQ1 = Convert.ToDouble((q1.VisitedTwice + q1.VisitedOnce + q1.VisitedThrice));
						}
						var q2 = BugweriDataCurrent.FirstOrDefault(o => o.Qtr == 2);
						if(q2 != null)
						{
							visitedQ2 = Convert.ToDouble((q2.VisitedTwice + q2.VisitedOnce + q2.VisitedThrice));
						}
						var q3 = BugweriDataCurrent.FirstOrDefault(o => o.Qtr == 3);
						if(q3 != null){
							visitedQ3 = Convert.ToDouble((q3.VisitedTwice + q3.VisitedOnce + q3.VisitedThrice));
						}
						var q4 = BugweriDataCurrent.FirstOrDefault(o => o.Qtr == 4);
						if(q4 != null)
						{
							visitedQ4 = Convert.ToDouble((q4.VisitedTwice + q4.VisitedOnce + q4.VisitedThrice));
						}
						BugweriPieChartPoints = new List<PieData>
							{
							 new PieData
							 {
								 Browser = "Quarter 1",
								 Users = visitedQ1,
								 DataLabelMappingName  = "Q1"+" "+visitedQ1
							 },
							  new PieData
							 {
								 Browser = "Quarter 2",
								 Users = visitedQ2,
								 DataLabelMappingName = "Q2"+" "+visitedQ2
							 },
							  new PieData
							 {
								 Browser = "Quarter 3",
								 Users = visitedQ3,
								 DataLabelMappingName = "Q3"+" "+visitedQ3
							 },
							  new PieData
							 {
								 Browser = "Quarter 4",
								 Users = visitedQ4,
								 DataLabelMappingName = "Q4"+" "+visitedQ4
							 }
							};
					}
					//Jinja City
					var JinjaCityDataCurrent = HomeVisitsCountDistrictQuarterSummaryData
														.Where(o => o.DistrictId == 8 && o.FinancialYear != null && o.FinancialYear == currentYear).ToList();
					var JinjaCityDataPrevious = HomeVisitsCountDistrictQuarterSummaryData
											.Where(o => o.DistrictId == 8 && o.FinancialYear != null && o.FinancialYear == previousYear).ToList();
					if ((JinjaCityDataCurrent != null && JinjaCityDataCurrent.Count > 0) && (JinjaCityDataPrevious != null && JinjaCityDataPrevious.Count > 0))
					{
						var q1 = JinjaCityDataPrevious.FirstOrDefault(o => o.Qtr == 1);
						if(q1 != null){
							visitedQ1 = Convert.ToDouble((q1.VisitedTwice + q1.VisitedOnce + q1.VisitedThrice));
						}
						var q2 = JinjaCityDataPrevious.FirstOrDefault(o => o.Qtr == 2);
						if(q2 != null){
							visitedQ2 = Convert.ToDouble((q2.VisitedTwice + q2.VisitedOnce + q2.VisitedThrice));
						}
						var q3 = JinjaCityDataPrevious.FirstOrDefault(o => o.Qtr == 3);
						if(q3 != null){
							visitedQ3 = Convert.ToDouble((q3.VisitedTwice + q3.VisitedOnce + q3.VisitedThrice));
						}
						var q4 = JinjaCityDataPrevious.FirstOrDefault(o => o.Qtr == 4);
						if(q4 != null){
							visitedQ4 = Convert.ToDouble((q4.VisitedTwice + q4.VisitedOnce + q4.VisitedThrice));
						}
						JinjaCityPieChartPoints = new List<PieData>
							{
							 new PieData
							 {
								 Browser = "Quarter 1",
								 Users = visitedQ1,
								 DataLabelMappingName  = "Q1"+" "+visitedQ1
							 },
							  new PieData
							 {
								 Browser = "Quarter 2",
								 Users = visitedQ2,
								 DataLabelMappingName = "Q2"+" "+visitedQ2
							 },
							  new PieData
							 {
								 Browser = "Quarter 3",
								 Users = visitedQ3,
								 DataLabelMappingName = "Q3"+" "+visitedQ3
							 },
							  new PieData
							 {
								 Browser = "Quarter 4",
								 Users = visitedQ4,
								 DataLabelMappingName = "Q4"+" "+visitedQ4
							 }
							};
					}
					//Mukono
					var MukonoDataCurrent = HomeVisitsCountDistrictQuarterSummaryData
														.Where(o => o.DistrictId == 11 && o.FinancialYear != null && o.FinancialYear == currentYear).ToList();
					var MukonoDataPrevious = HomeVisitsCountDistrictQuarterSummaryData
											.Where(o => o.DistrictId == 11 && o.FinancialYear != null && o.FinancialYear == previousYear).ToList();
					if ((MukonoDataCurrent != null && MukonoDataCurrent.Count > 0) && (MukonoDataPrevious != null && MukonoDataPrevious.Count > 0))
					{
						var q1 = MukonoDataPrevious.FirstOrDefault(o => o.Qtr == 1);
						if(q1 != null){
							visitedQ1 = Convert.ToDouble((q1.VisitedTwice + q1.VisitedOnce + q1.VisitedThrice));
						}
						var q2 = MukonoDataPrevious.FirstOrDefault(o => o.Qtr == 2);
						if(q2 != null)
						{
							visitedQ2 = Convert.ToDouble((q2.VisitedTwice + q2.VisitedOnce + q2.VisitedThrice));
						}
						var q3 = MukonoDataPrevious.FirstOrDefault(o => o.Qtr == 3);
						if (q3 != null)
						{
							visitedQ3 = Convert.ToDouble((q3.VisitedTwice + q3.VisitedOnce + q3.VisitedThrice));
						}
						var q4 = MukonoDataPrevious.FirstOrDefault(o => o.Qtr == 4);
						if(q4 != null){
							visitedQ4 = Convert.ToDouble((q4.VisitedTwice + q4.VisitedOnce + q4.VisitedThrice));
						}
						MukonoPieChartPoints = new List<PieData>
						{
						 new PieData
						 {
							 Browser = "Quarter 1",
							 Users = visitedQ1,
							 DataLabelMappingName  = "Q1"+" "+visitedQ1
						 },
						  new PieData
						 {
							 Browser = "Quarter 2",
							 Users = visitedQ2,
							 DataLabelMappingName = "Q2"+" "+visitedQ2
						 },
						  new PieData
						 {
							 Browser = "Quarter 3",
							 Users = visitedQ3,
							 DataLabelMappingName = "Q3"+" "+visitedQ3
						 },
						  new PieData
						 {
							 Browser = "Quarter 4",
							 Users = visitedQ4,
							 DataLabelMappingName = "Q4"+" "+visitedQ4
						 }
						};
					}
					//Namayingo
					var NamayingoDataCurrent = HomeVisitsCountDistrictQuarterSummaryData
														.Where(o => o.DistrictId == 5 && o.FinancialYear != null && o.FinancialYear == currentYear).ToList();
					var NamayingoDataPrevious = HomeVisitsCountDistrictQuarterSummaryData
											.Where(o => o.DistrictId == 5 && o.FinancialYear != null && o.FinancialYear == previousYear).ToList();
					if ((NamayingoDataCurrent != null && NamayingoDataCurrent.Count > 0) && (NamayingoDataPrevious != null && NamayingoDataPrevious.Count > 0))
					{
						var q1 = NamayingoDataPrevious.FirstOrDefault(o => o.Qtr == 1);
						if(q1 != null){
							visitedQ1 = Convert.ToDouble((q1.VisitedTwice + q1.VisitedOnce + q1.VisitedThrice));
						}
						var q2 = NamayingoDataPrevious.FirstOrDefault(o => o.Qtr == 2);
						if(q2 != null){
							visitedQ2 = Convert.ToDouble((q2.VisitedTwice + q2.VisitedOnce + q2.VisitedThrice));
						}
						var q3 = NamayingoDataPrevious.FirstOrDefault(o => o.Qtr == 3);
						if(q3 != null){
							visitedQ3 = Convert.ToDouble((q3.VisitedTwice + q3.VisitedOnce + q3.VisitedThrice));
						}
						var q4 = NamayingoDataPrevious.FirstOrDefault(o => o.Qtr == 4);
						if(q4 != null){
							visitedQ4 = Convert.ToDouble((q4.VisitedTwice + q4.VisitedOnce + q4.VisitedThrice));
						}
						NamyingoPieChartPoints = new List<PieData>
						{
						 new PieData
						 {
							 Browser = "Quarter 1",
							 Users = visitedQ1,
							 DataLabelMappingName  = "Q1"+" "+visitedQ1
						 },
						  new PieData
						 {
							 Browser = "Quarter 2",
							 Users = visitedQ2,
							 DataLabelMappingName = "Q2"+" "+visitedQ2
						 },
						  new PieData
						 {
							 Browser = "Quarter 3",
							 Users = visitedQ3,
							 DataLabelMappingName = "Q3"+" "+visitedQ3
						 },
						  new PieData
						 {
							 Browser = "Quarter 4",
							 Users = visitedQ4,
							 DataLabelMappingName = "Q4"+" "+visitedQ4
						 }
						};
					}
					//Kayunga
					var KayungaDataCurrent = HomeVisitsCountDistrictQuarterSummaryData
													.Where(o => o.DistrictId == 9 && o.FinancialYear != null && o.FinancialYear == currentYear).ToList();
					var KayungaDataPrevious = HomeVisitsCountDistrictQuarterSummaryData
											.Where(o => o.DistrictId == 9 && o.FinancialYear != null && o.FinancialYear == previousYear).ToList();
					if ((KayungaDataCurrent != null && KayungaDataCurrent.Count > 0) && (KayungaDataPrevious != null && KayungaDataPrevious.Count > 0))
					{
						var q1 = KayungaDataPrevious.FirstOrDefault(o => o.Qtr == 1);
						if(q1 != null)
						{
							visitedQ1 = Convert.ToDouble((q1.VisitedTwice + q1.VisitedOnce + q1.VisitedThrice));
						}
						var q2 = KayungaDataPrevious.FirstOrDefault(o => o.Qtr == 2);
						if(q2 != null){
							visitedQ2 = Convert.ToDouble((q2.VisitedTwice + q2.VisitedOnce + q2.VisitedThrice));
						}
						var q3 = KayungaDataPrevious.FirstOrDefault(o => o.Qtr == 3);
						if(q3 != null)
						{
							visitedQ3 = Convert.ToDouble((q3.VisitedTwice + q3.VisitedOnce + q3.VisitedThrice));
						}
						var q4 = KayungaDataPrevious.FirstOrDefault(o => o.Qtr == 4);
						if(q4 != null)
						{
							visitedQ4 = Convert.ToDouble((q4.VisitedTwice + q4.VisitedOnce + q4.VisitedThrice));
						}
						KayungaPieChartPoints = new List<PieData>
						{
						 new PieData
						 {
							 Browser = "Quarter 1",
							 Users = visitedQ1,
							 DataLabelMappingName  = "Q1"+" "+visitedQ1
						 },
						  new PieData
						 {
							 Browser = "Quarter 2",
							 Users = visitedQ2,
							 DataLabelMappingName = "Q2"+" "+visitedQ2
						 },
						  new PieData
						 {
							 Browser = "Quarter 3",
							 Users = visitedQ3,
							 DataLabelMappingName = "Q3"+" "+visitedQ3
						 },
						  new PieData
						 {
							 Browser = "Quarter 4",
							 Users = visitedQ4,
							 DataLabelMappingName = "Q4"+" "+visitedQ4
						 }
						};
					}
					//Mayuge
					var MayugeDataCurrent = HomeVisitsCountDistrictQuarterSummaryData
														.Where(o => o.DistrictId == 3 && o.FinancialYear != null && o.FinancialYear == currentYear).ToList();
					var MayugeDataPrevious = HomeVisitsCountDistrictQuarterSummaryData
											.Where(o => o.DistrictId == 3 && o.FinancialYear != null && o.FinancialYear == previousYear).ToList();
					if ((MayugeDataCurrent != null && MayugeDataCurrent.Count > 0) && (MayugeDataPrevious != null && MayugeDataPrevious.Count > 0))
					{
						var q1 = MayugeDataPrevious.FirstOrDefault(o => o.Qtr == 1);
						if(q1 != null){
							visitedQ1 = Convert.ToDouble((q1.VisitedTwice + q1.VisitedOnce + q1.VisitedThrice));
						}
						else
						{
							visitedQ1 = 0.0;
						}
						var q2 = MayugeDataPrevious.FirstOrDefault(o => o.Qtr == 2);
						if(q2 != null){
							visitedQ2 = Convert.ToDouble((q2.VisitedTwice + q2.VisitedOnce + q2.VisitedThrice));
						}
						else{
							visitedQ2 = 0.0;
						}
						var q3 = MayugeDataPrevious.FirstOrDefault(o => o.Qtr == 3);
						if(q3 != null){
							visitedQ3 = Convert.ToDouble((q3.VisitedTwice + q3.VisitedOnce + q3.VisitedThrice));
						}
						else
						{
							visitedQ3 = 0.0;
						}
						var q4 = MayugeDataPrevious.FirstOrDefault(o => o.Qtr == 4);
						if(q4 != null)
						{
							visitedQ4 = Convert.ToDouble((q4.VisitedTwice + q4.VisitedOnce + q4.VisitedThrice));
						}
						else
						{
							visitedQ4 = 0.0;
						}

						MayugePieChartPoints = new List<PieData>
						{
						 new PieData
						 {
							 Browser = "Quarter 1",
							 Users = visitedQ1,
							 DataLabelMappingName  = "Q1"+" "+visitedQ1
						 },
						  new PieData
						 {
							 Browser = "Quarter 2",
							 Users = visitedQ2,
							 DataLabelMappingName = "Q2"+" "+visitedQ2
						 },
						  new PieData
						 {
							 Browser = "Quarter 3",
							 Users = visitedQ3,
							 DataLabelMappingName = "Q3"+" "+visitedQ3
						 },
						  new PieData
						 {
							 Browser = "Quarter 4",
							 Users = visitedQ4,
							 DataLabelMappingName = "Q4"+" "+visitedQ4
						 }
						};
					}
					//Kamuli
					var KamuliDataCurrent = HomeVisitsCountDistrictQuarterSummaryData
														.Where(o => o.DistrictId == 4 && o.FinancialYear != null && o.FinancialYear == currentYear).ToList();
					var KamuliDataPrevious = HomeVisitsCountDistrictQuarterSummaryData
											.Where(o => o.DistrictId == 4 && o.FinancialYear != null && o.FinancialYear == previousYear).ToList();
					if ((KamuliDataCurrent != null && KamuliDataCurrent.Count > 0) && (KamuliDataPrevious != null && KamuliDataPrevious.Count > 0))
					{
						var q1 = KamuliDataPrevious.FirstOrDefault(o => o.Qtr == 1);
						if(q1 != null){
							visitedQ1 = Convert.ToDouble((q1.VisitedTwice + q1.VisitedOnce + q1.VisitedThrice));
						}
						else
						{
							visitedQ1 = 0.0;
						}

						var q2 = KamuliDataPrevious.FirstOrDefault(o => o.Qtr == 2);
						if(q2 != null){
							visitedQ2 = Convert.ToDouble((q2.VisitedTwice + q2.VisitedOnce + q2.VisitedThrice));
						}
						else
						{
							visitedQ2 = 0.0;
						}
						var q3 = KamuliDataPrevious.FirstOrDefault(o => o.Qtr == 3);
						if(q3 != null){
							visitedQ3 = Convert.ToDouble((q3.VisitedTwice + q3.VisitedOnce + q3.VisitedThrice));
						}
						else{
							visitedQ3 = 0.0;
						}

						var q4 = KamuliDataPrevious.FirstOrDefault(o => o.Qtr == 4);
						if(q4 != null){
							visitedQ4 = Convert.ToDouble((q4.VisitedTwice + q4.VisitedOnce + q4.VisitedThrice));
						}
						else
						{
							visitedQ4 = 0.0;
						}

						KamuliPieChartPoints = new List<PieData>
							{
							 new PieData
							 {
								 Browser = "Quarter 1",
								 Users = visitedQ1,
								 DataLabelMappingName  = "Q1"+" "+visitedQ1
							 },
							  new PieData
							 {
								 Browser = "Quarter 2",
								 Users = visitedQ2,
								 DataLabelMappingName = "Q2"+" "+visitedQ2
							 },
							  new PieData
							 {
								 Browser = "Quarter 3",
								 Users = visitedQ3,
								 DataLabelMappingName = "Q3"+" "+visitedQ3
							 },
							  new PieData
							 {
								 Browser = "Quarter 4",
								 Users = visitedQ4,
								 DataLabelMappingName = "Q4"+" "+visitedQ4
							 }
							};
					}

					//Iganga
					var IgangaDataCurrent = HomeVisitsCountDistrictQuarterSummaryData
														.Where(o => o.DistrictId == 2 && o.FinancialYear != null && o.FinancialYear == currentYear).ToList();
					var IgangaDataPrevious = HomeVisitsCountDistrictQuarterSummaryData
											.Where(o => o.DistrictId == 2 && o.FinancialYear != null && o.FinancialYear == previousYear).ToList();
					if ((IgangaDataCurrent != null && IgangaDataCurrent.Count > 0) && (IgangaDataPrevious != null && IgangaDataPrevious.Count > 0))
					{
						var q1 = IgangaDataPrevious.FirstOrDefault(o => o.Qtr == 1);
						if(q1 != null){
							visitedQ1 = Convert.ToDouble((q1.VisitedTwice + q1.VisitedOnce + q1.VisitedThrice));
						}
						else
						{
							visitedQ1 = 0.0;
						}
						var q2 = IgangaDataPrevious.FirstOrDefault(o => o.Qtr == 2);
						if(q2 != null){
							visitedQ2 = Convert.ToDouble((q2.VisitedTwice + q2.VisitedOnce + q2.VisitedThrice));
						}
						else
						{
							visitedQ2 = 0.0;
						}

						var q3 = IgangaDataPrevious.FirstOrDefault(o => o.Qtr == 3);
						if(q3 != null){
							visitedQ3 = Convert.ToDouble((q3.VisitedTwice + q3.VisitedOnce + q3.VisitedThrice));
						}
						else
						{
							visitedQ3 = 0.0;
						}

						var q4 = IgangaDataPrevious.FirstOrDefault(o => o.Qtr == 4);
						if(q4 != null){
								visitedQ4 = Convert.ToDouble((q4.VisitedTwice + q4.VisitedOnce + q4.VisitedThrice));
						}
						else
						{
							visitedQ4 = 0.0;
						}
					
						IgangaPieChartPoints = new List<PieData>
						{
						 new PieData
						 {
							 Browser = "Quarter 1",
							 Users = visitedQ1,
							 DataLabelMappingName  = "Q1"+" "+visitedQ1
						 },
						  new PieData
						 {
							 Browser = "Quarter 2",
							 Users = visitedQ2,
							 DataLabelMappingName = "Q2"+" "+visitedQ2
						 },
						  new PieData
						 {
							 Browser = "Quarter 3",
							 Users = visitedQ3,
							 DataLabelMappingName = "Q3"+" "+visitedQ3
						 },
						  new PieData
						 {
							 Browser = "Quarter 4",
							 Users = visitedQ4,
							 DataLabelMappingName = "Q4"+" "+visitedQ4
						 }
						};
					}
			
			}
			}
		}
	}
}
<style>
    /*Define Colors for Cells*/
    .NotImplemented {
        background-color: darkred;
    }

    .ImplementationComplete {
        background-color: forestgreen;
    }

    .ImplementationinProgress {
        background-color: yellow;
    }

    .Continous {
        background-color: darkblue;
    }

    .StatusNotReported {
        background-color: deepskyblue;
    }

    .PlannedStartDatez {
        background-color: purple
    }

    .NolongerApplicable {
        background-color: mediumvioletred;
    }

    .e-grid .e-gridcontent .e-rowcell.NotImplemented {
        color: ghostwhite;
    }
    /*.ImplementationComplete*/
    .e-grid .e-gridcontent .e-rowcell.ImplementationComplete {
        color: ghostwhite;
    }
    /*.ImplementationinProgress*/
    .e-grid .e-gridcontent .e-rowcell.ImplementationinProgress {
        color: darkred;
    }
    /*.Continous*/
    .e-grid .e-gridcontent .e-rowcell.Continous {
        color: ghostwhite;
    }
    /*.StatusNotReported*/
    .e-grid .e-gridcontent .e-rowcell.StatusNotReported {
        color: ghostwhite;
    }
    /*.NolongerApplicable*/
    .e-grid .e-gridcontent .e-rowcell.NolongerApplicable {
        color: ghostwhite;
    }
    /*QueryCellInfo*/
    .Low {
        background-color: green;
    }

    .Medium {
        background-color: lightseagreen;
    }

    .Medium-High {
        background-color: gold;
    }

    .High {
        background-color: red;
    }

	.marquee-container {
		position: relative;
	}

	.marquee-text {
		font-size: 24px;
		color: #000; /* Dark black color for static text */
	}

	.marquee-image {
		position: absolute;
		bottom: 0;
		right: 0;
		height: 24px;
	}

	.marquee-text span {
		color: #ff0000; /* Red color for dynamic text */
	}
	/*Card CSS*/
	.property-panel-section .property-panel-content td {
		padding: 0 0 15px 0;
	}

	.tile_layout.card-control-section .e-error {
		height: 100px;
		width: 100%;
	}

		.tile_layout.card-control-section .e-error .e-error-content {
			color: red;
			line-height: 100px;
			text-align: center;
		}

	.tile_layout.card-control-section .e-card .e-card-image {
		height: 180px;
		width: inherit;
	}

	.tile_layout.card-control-section .e-card .e-card-header .e-card-header-caption .e-card-header-title {
		font-size: 20px;
		font-family: Helvetica, 'Segoe UI';
		font-weight: bold;
	}

	.tile_layout.card-control-section .e-card .e-card-header .e-card-header-caption .e-card-sub-title {
		padding-top: 5px;
	}

	.tile_layout.card-control-section .e-card .e-card-content {
		padding-top: 0px;
		/*height: 110px;*/
	}

	#source_link {
		float: right;
		margin-right: 10px;
	}

	.e-card {
		background-color: whitesmoke;
		height:60vh;
	}

		.e-card .e-card-header {
			font-family: 'Gill Sans MT';
			font-style: normal;
			color: black;
			font-weight: bold;
			font-size: 24px;
		}

		.e-card .e-card-content {
			font-family: 'Gill Sans MT';
			font-size: 20px;
			color: black;
		}

	.card {
		background-color: #fff;
		border-radius: 10px;
		border: none;
		position: relative;
		/* margin-bottom: 30px; */
		box-shadow: 0 0.46875rem 2.1875rem rgba(90,97,105,0.1), 0 0.9375rem 1.40625rem rgba(90,97,105,0.1), 0 0.25rem 0.53125rem rgba(90,97,105,0.12), 0 0.125rem 0.1875rem rgba(90,97,105,0.1);
		height:120px;
	}

	.l-bg-cherry {
		background: linear-gradient(to right, #493240, #f09) !important;
		color: #fff;
	}

	.l-bg-blue-dark {
		background: linear-gradient(to right, #373b44, #4286f4) !important;
		color: #fff;
	}

	.l-bg-green-dark {
		background: linear-gradient(to right, #0a504a, #38ef7d) !important;
		color: #fff;
	}

	.l-bg-orange-dark {
		background: linear-gradient(to right, #a86008, #ffba56) !important;
		color: #fff;
	}

	.card .card-statistic-3 .card-icon-large .fas, .card .card-statistic-3 .card-icon-large .far, .card .card-statistic-3 .card-icon-large .fab, .card .card-statistic-3 .card-icon-large .fal {
		font-size: 110px;
	}

	.card .card-statistic-3 .card-icon {
		text-align: center;
		line-height: 50px;
		margin-left: 15px;
		color: #000;
		position: absolute;
		right: 3px;
		top: -5px;
		/* top: 20px; */
		opacity: 0.1;
	}

	.l-bg-cyan {
		background: linear-gradient(135deg, #289cf5, #84c0ec) !important;
		color: #fff;
	}

	.l-bg-green {
		background: linear-gradient(135deg, #23bdb8 0%, #43e794 100%) !important;
		color: #fff;
	}

	.l-bg-orange {
		background: linear-gradient(to right, #f9900e, #ffba56) !important;
		color: #fff;
	}

	.l-bg-cyan {
		background: linear-gradient(135deg, #289cf5, #84c0ec) !important;
		color: #fff;
	}

	.footer-images-container {
		display: flex;
		justify-content: center;
		margin-top: 20px;
	}

	.footer-image {
		max-width: 100px;
		height: auto;
		margin: 0 10px;
	}
</style>