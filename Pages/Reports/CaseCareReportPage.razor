@page "/CaseCareReportPage"
@using System.Collections.ObjectModel
@using MUCOBADI.Models;
@using MUCOBADI.Data;
@using System.IO;
@using Microsoft.EntityFrameworkCore;
@using System.Collections;
@inject UserManagement userManagement;
@inject NavigationManager Navigation;
@using Syncfusion.XlsIO;
@using Syncfusion.XlsIO.Implementation;
@using Syncfusion.XlsIORenderer;
@inject Microsoft.JSInterop.IJSRuntime JS
@inject MUCOBADIContext db;
@inject SPToCoreContext spdb;
<style>
    h4 {
        background-color: black;
        color: whitesmoke;
        padding: 10px;
    }
</style>
<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;"> <strong>Case Care Planning Report</strong></li>
</ol>
<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>
<div class="form-row">
    <div class="form-group col-md-12">
        <EditForm Model="@InputModel" OnValidSubmit="@SearchRecords">
            <div class="form-row">
                <div class="form-group col-md-3">
                    <p>District</p>
                    <SfMultiSelect @bind-Value="@InputModel.DistrictId" Enabled="@isEnabled" TValue="int?[]" TItem="ADistrict" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_DistrictData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search District" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                        <MultiSelectFieldSettings Value="@nameof(ADistrict.DistrictId)" Text="@nameof(ADistrict.DistrictDescription)"></MultiSelectFieldSettings>
                        <MultiSelectEvents TValue="int?[]" TItem="ADistrict" ValueChange="OnDistrictChange"></MultiSelectEvents>
                    </SfMultiSelect>
                </div>
                <div class="form-group col-md-3">
                    <p>Sub-County</p>
                    <SfMultiSelect @bind-Value="@InputModel.SubcountyId" TValue="int?[]" TItem="ASubcounty" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_SubcountyData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Sub-county" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                        <MultiSelectFieldSettings Value="@nameof(ASubcounty.SubcountyId)" Text="@nameof(ASubcounty.SubcountyDescription)"></MultiSelectFieldSettings>
                        <MultiSelectEvents TValue="int?[]" TItem="ASubcounty" ValueChange="OnSubcountyChange"></MultiSelectEvents>
                    </SfMultiSelect>
                </div>
                <div class="form-group col-md-3">
                    <p>Parish</p>
                    <SfMultiSelect @bind-Value="@InputModel.ParishId" TValue="int?[]" TItem="AParish" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_ParishData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Parish" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                        <MultiSelectFieldSettings Value="@nameof(AParish.ParishId)" Text="@nameof(AParish.ParishDescription)"></MultiSelectFieldSettings>
                        <MultiSelectEvents TValue="int?[]" TItem="AParish" ValueChange="OnParishChange"></MultiSelectEvents>
                    </SfMultiSelect>
                </div>
                <div class="form-group col-md-3">
                    <p>Village</p>
                    <SfMultiSelect @bind-Value="@InputModel.VillageId" TValue="int?[]" TItem="AVillage" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_VillageData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Village" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                        <MultiSelectFieldSettings Value="@nameof(AVillage.VillageId)" Text="@nameof(AVillage.VillageDescription)"></MultiSelectFieldSettings>
                    </SfMultiSelect>
                </div>
                <div class="form-group col-md-3">
                    <p>Reporting Period Start date</p>
                    <SfDatePicker @bind-Value="@InputModel.Startdate" TValue="DateTime?" Format="dd/MM/yyyy" Placeholder="Please select date" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                </div>
                 <div class="form-group col-md-3">
                    <p>Reporting Period End date</p>
                    <SfDatePicker @bind-Value="@InputModel.Enddate" TValue="DateTime?" Format="dd/MM/yyyy" Placeholder="Please select date" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                </div>
                @*<div class="form-group col-md-3">
                    <p>Reporting Period</p>
                    <SfDropDownList @bind-Value="@(InputModel.QuarterId)" Enabled="true" TItem="AQuarter" TValue="int?" DataSource="@QuarterData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                        <DropDownListFieldSettings Value="@nameof(AQuarter.QuarterId)" Text="@nameof(AQuarter.QuarterName)"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
                <div class="form-group col-md-3">
                    <p>Financial Year</p>
                    <SfDropDownList @bind-Value="@(InputModel.YearId)" Enabled="true" TItem="FianacialYear" TValue="int?" DataSource="@FianacialYearData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                        <DropDownListFieldSettings Value="@nameof(FianacialYear.FinancialYear)" Text="@nameof(FianacialYear.FinancialYearDesc)"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>*@
                <div class="form-group col-md-3">
                    <BSButton Color="Color.Primary" ButtonType="BlazorStrap.ButtonType.Submit">Download Report</BSButton>
                    <BSButton Color="Color.Secondary" ButtonType="BlazorStrap.ButtonType.Button" @onclick="ClearSearchBtnClick">Clear Search</BSButton>
                </div>
                <div class="form-group col-md-12">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                </div>
                @if (!string.IsNullOrEmpty(outComeResult))
                {
                    <div class="form-group col-md-12">
                        @if (outComeResult.Contains("No Record"))
                        {
                            <p class="alert alert-danger" style="padding:10px;">@outComeResult</p>
                        }
                        else if (outComeResult.Contains("Warning"))
                        {
                            <p class="alert alert-warning" style="padding:10px;">@outComeResult</p>
                        }
                        else
                        {
                            <p class="alert alert-success" style="padding:10px;">@outComeResult</p>
                        }
                    </div>
                }
                <div class="form-group col-md-12">
                    <SfSpinner @ref="ReportSpinner" Label="downloading the report please wait..." Size="70" Visible="false"></SfSpinner>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
{
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    #endregion Toasters
    private SearchPanel InputModel = new();
    SfSpinner ReportSpinner;

    List<AVillage> _VillageData { get; set; }
    List<AParish> _ParishData { get; set; }
    List<ASubcounty> _SubcountyData { get; set; }
    List<ADistrict> _DistrictData { get; set; }
    List<AQuarter> QuarterData { get; set; }
    List<FianacialYear> FianacialYearData { get; set; }
    bool isEnabled { get; set; } = false;
    string outComeResult { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            if (!userManagement.IsSignedIn())
            {
                Navigation.NavigateTo("/", true);
            }
            else
            {
                FianacialYearData = new List<FianacialYear>();
                _DistrictData = db.ADistrict.AsNoTracking().ToList();
                //QuarterData = db.AQuarter.AsNoTracking().ToList();
                //int current_year = DateTime.Now.Year;
                //var firstHomeVisitdata = db.BeneficiaryIdentificationRegister.Where(o=> o.DateofIdentification.HasValue==true).OrderBy(o => o.DateofIdentification).AsNoTracking().ToList().FirstOrDefault();
                //if (firstHomeVisitdata != null)
                //{
                //    int firstyear = firstHomeVisitdata.DateofIdentification.Value.Year;
                //    for (int i = 0; i <= (current_year - firstyear); i++)
                //    {

                //        if ((current_year - (firstyear + i)) > 0)
                //        {
                //            FianacialYearData.Add(new FianacialYear { FinancialYear = (firstyear + i), FinancialYearDesc = (firstyear + i).ToString() });
                //        }
                //    }
                //}
                //FianacialYearData.Add(new FianacialYear { FinancialYear = current_year, FinancialYearDesc = current_year.ToString() });
                InputModel = new();
                var user = db.ViewUserManagement.FirstOrDefault(o => o.UserName == userManagement.GetUserName());
                if (!user.RoleName.Contains("Super Administrator") && !user.RoleName.Contains("Administrator") && !user.RoleName.Contains("mel director") && !user.RoleName.Contains("mel manager") && !user.RoleName.Contains("cluster manager"))
                {
                    var districtlist = userManagement.GetUserDistrict();
                    if (districtlist != null && districtlist.Count > 0)
                    {
                        List<int?> m = new List<int?>();
                        foreach (var n in districtlist)
                        {
                            m.Add(n);
                        }

                        InputModel.DistrictId = m.ToArray();
                        _SubcountyData = db.ASubcounty.AsNoTracking().ToList().Where(o => districtlist.Any(a => a == o.DistrictId)).ToList();
                    }
                    var subcountyList = userManagement.GetUserSubcounty();
                    if (subcountyList != null && subcountyList.Count > 0)
                    {
                        List<int?> m = new List<int?>();
                        foreach (var n in subcountyList)
                        {
                            m.Add(n);
                        }
                        InputModel.SubcountyId = m.ToArray();
                        _ParishData = db.AParish.AsNoTracking().ToList().Where(o => subcountyList.Any(a => a == o.SubcountyId)).ToList();
                    }
                }
                else
                {
                    isEnabled = true;
                }
            }

        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    private void ClearSearchBtnClick()
    {
        InputModel = new();
        var user = db.ViewUserManagement.FirstOrDefault(o => o.UserName == userManagement.GetUserName());
        if (!user.RoleName.Contains("Super Administrator") && !user.RoleName.Contains("Administrator") && !user.RoleName.Contains("mel director") && !user.RoleName.Contains("mel manager") && !user.RoleName.Contains("cluster manager"))
        {
            var districtlist = userManagement.GetUserDistrict();
            if (districtlist != null && districtlist.Count > 0)
            {
                List<int?> m = new List<int?>();
                foreach (var n in districtlist)
                {
                    m.Add(n);
                }

                InputModel.DistrictId = m.ToArray();
                _SubcountyData = db.ASubcounty.AsNoTracking().ToList().Where(o => districtlist.Any(a => a == o.DistrictId)).ToList();
            }
            var subcountyList = userManagement.GetUserSubcounty();
            if (subcountyList != null && subcountyList.Count > 0)
            {
                List<int?> m = new List<int?>();
                foreach (var n in subcountyList)
                {
                    m.Add(n);
                }
                InputModel.SubcountyId = m.ToArray();
                _ParishData = db.AParish.AsNoTracking().ToList().Where(o => subcountyList.Any(a => a == o.SubcountyId)).ToList();
            }
        }
        else
        {
            isEnabled = true;
        }
    }


    public void OnDistrictChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            _SubcountyData = db.ASubcounty.Where(o => args.Value.Any(a => a == o.DistrictId) == true).AsNoTracking().ToList();
        }
    }
    public void OnSubcountyChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            _ParishData = db.AParish.Where(o => args.Value.Any(a => a == o.SubcountyId) == true).AsNoTracking().ToList();
        }
    }
    public void OnParishChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            _VillageData = db.AVillage.Where(o => args.Value.Any(a => a == o.ParishId) == true).AsNoTracking().ToList();
        }
    }
    public class FianacialYear
    {
        public int FinancialYear { get; set; }
        public string FinancialYearDesc { get; set; }
    }

    private async Task SearchRecords()
    {
        try
        {
            await ReportSpinner.ShowAsync();
            outComeResult = null;
            string district = null;
            string Subcounty = null;
            string parish = null;
            string village = null;
            if (InputModel.DistrictId != null)
            {
                district = string.Join(",", InputModel.DistrictId);
            }
            if (InputModel.SubcountyId != null)
            {
                Subcounty = string.Join(",", InputModel.SubcountyId);
            }
            if (InputModel.ParishId != null)
            {
                parish = string.Join(",", InputModel.ParishId);
            }
            if (InputModel.VillageId != null)
            {
                village = string.Join(",", InputModel.VillageId);
            }
            //if (InputModel.QuarterId == null || InputModel.YearId == null)
            //{
            //    outComeResult = "Please select the reporting period and the financial year";
            //}
            if (InputModel.Startdate == null || InputModel.Enddate == null)
            {
                outComeResult = "Please select the reporting period (both start date & End date)";
            }
            else
            {
                DateTime? startdate = null;
                DateTime? enddate = null;
                //var quarter = QuarterData.FirstOrDefault(o => o.QuarterId == InputModel.QuarterId);
                //if (quarter != null)
                //{
                //    startdate = new DateTime(InputModel.YearId.Value, quarter.StartMonthId.Value, 1);
                //    if (quarter.EndMonthId < quarter.StartMonthId)
                //    {
                //        enddate = new DateTime((InputModel.YearId.Value + 1), quarter.EndMonthId.Value, DateTime.DaysInMonth((InputModel.YearId.Value + 1), quarter.EndMonthId.Value));
                //    }
                //    else
                //    {
                //        enddate = new DateTime(InputModel.YearId.Value, quarter.EndMonthId.Value, DateTime.DaysInMonth(InputModel.YearId.Value, quarter.EndMonthId.Value));
                //    }
                //}
                var data = await spdb.spCase_CareReportGetAllAsync(district, Subcounty, parish, village, null, InputModel.Startdate, InputModel.Enddate);
                var summaryData = await spdb.spCase_Care_SummaryReportGetAllAsync(district, Subcounty, parish, village, null, InputModel.Startdate, InputModel.Enddate);
                if (data.Count > 0)
                {
                    using (ExcelEngine excelEngine = new ExcelEngine())
                    {
                        IApplication application = excelEngine.Excel;
                        application.DefaultVersion = ExcelVersion.Excel2013;
                        IWorkbook workbook = application.Workbooks.Create(1);
                        IWorksheet worksheet = workbook.Worksheets[0];
                        worksheet.Name = "Case Care Planning";

                        #region Styles
                        var headerStyle = workbook.Styles.Add("headerStyle");

                        headerStyle.BeginUpdate();
                        headerStyle.Color = Syncfusion.Drawing.Color.Black; //Syncfusion.Drawing.Color.FromArgb(255, 0, 0);
                        headerStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        headerStyle.Font.Bold = true;
                        headerStyle.Font.FontName = "Arial";
                        headerStyle.Font.Size = 8f;
                        headerStyle.Font.Color = ExcelKnownColors.White;

                        headerStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        headerStyle.Borders.Color = ExcelKnownColors.White;
                        headerStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        headerStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        headerStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                        //headerStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thick;

                        headerStyle.WrapText = true;

                        headerStyle.EndUpdate();

                        var Style = workbook.Styles.Add("bodyStyle");

                        Style.BeginUpdate();
                        Style.HorizontalAlignment = ExcelHAlign.HAlignLeft;
                        Style.VerticalAlignment = ExcelVAlign.VAlignTop;
                        Style.Font.Bold = false;
                        Style.Font.FontName = "Arial";
                        Style.Font.Size = 8f;
                        Style.Font.Color = ExcelKnownColors.Black;
                        Style.WrapText = true;
                        Style.Borders.Color = ExcelKnownColors.Black;
                        Style.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        Style.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        Style.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                        Style.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                        Style.EndUpdate();


                        var CategoryStyle = workbook.Styles.Add("CategoryStyle");

                        CategoryStyle.BeginUpdate();
                        CategoryStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        CategoryStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 195, 0);
                        /*CategoryStyle.Color = Syncfusion.Drawing.Color.FromArgb(105, 59, 88);*/ //AUBERGINE
                        CategoryStyle.Font.Bold = true;
                        CategoryStyle.Font.FontName = "Arial";
                        CategoryStyle.Font.Size = 10f;
                        CategoryStyle.Font.Color = ExcelKnownColors.White;
                        CategoryStyle.WrapText = true;
                        CategoryStyle.Borders.Color = ExcelKnownColors.White;
                        CategoryStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        CategoryStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        CategoryStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                        CategoryStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                        CategoryStyle.EndUpdate();

                        var CategoryTotalStyle = workbook.Styles.Add("CategoryTotalStyle");

                        CategoryTotalStyle.BeginUpdate();
                        CategoryTotalStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        CategoryTotalStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        CategoryTotalStyle.Color = Syncfusion.Drawing.Color.Black;
                        CategoryTotalStyle.Font.Bold = true;
                        CategoryTotalStyle.Font.FontName = "Arial";
                        CategoryTotalStyle.Font.Size = 8f;
                        CategoryTotalStyle.Font.Color = ExcelKnownColors.White;
                        CategoryTotalStyle.WrapText = true;
                        CategoryTotalStyle.Borders.Color = ExcelKnownColors.White;
                        CategoryTotalStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        CategoryTotalStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        CategoryTotalStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                        CategoryTotalStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                        CategoryTotalStyle.EndUpdate();

                        var DivisionStyle = workbook.Styles.Add("DivisionStyle");

                        DivisionStyle.BeginUpdate();
                        DivisionStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        DivisionStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 0, 0); //RED
                        DivisionStyle.Font.Bold = true;
                        DivisionStyle.Font.FontName = "Arial";
                        DivisionStyle.Font.Size = 8f;
                        DivisionStyle.Font.Color = ExcelKnownColors.White;
                        DivisionStyle.WrapText = true;
                        DivisionStyle.Borders.Color = ExcelKnownColors.White;
                        DivisionStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        DivisionStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        DivisionStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                        DivisionStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                        DivisionStyle.EndUpdate();

                        var DivisionTotalStyle = workbook.Styles.Add("DivisionTotalStyle");

                        DivisionTotalStyle.BeginUpdate();
                        DivisionTotalStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        DivisionTotalStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        DivisionTotalStyle.Color = Syncfusion.Drawing.Color.Black;
                        DivisionTotalStyle.Font.Bold = true;
                        DivisionTotalStyle.Font.FontName = "Arial";
                        DivisionTotalStyle.Font.Size = 8f;
                        DivisionTotalStyle.Font.Color = ExcelKnownColors.White;
                        DivisionTotalStyle.WrapText = true;
                        DivisionTotalStyle.Borders.Color = ExcelKnownColors.White;
                        DivisionTotalStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        DivisionTotalStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        DivisionTotalStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                        DivisionTotalStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                        DivisionTotalStyle.EndUpdate();


                        var TopicStyle = workbook.Styles.Add("TopicStyle");

                        TopicStyle.BeginUpdate();
                        TopicStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        TopicStyle.Color = Syncfusion.Drawing.Color.FromArgb(105, 59, 88); //AUBERGINE
                        TopicStyle.Font.Bold = true;
                        TopicStyle.Font.FontName = "Arial";
                        TopicStyle.Font.Size = 8f;
                        TopicStyle.Font.Color = ExcelKnownColors.White;
                        TopicStyle.WrapText = true;
                        TopicStyle.Borders.Color = ExcelKnownColors.White;
                        TopicStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        TopicStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        TopicStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                        TopicStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                        TopicStyle.EndUpdate();

                        var TopicTotalStyle = workbook.Styles.Add("TopicTotalStyle");

                        TopicTotalStyle.BeginUpdate();
                        TopicTotalStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        TopicTotalStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        TopicTotalStyle.Color = Syncfusion.Drawing.Color.Black;
                        TopicTotalStyle.Font.Bold = true;
                        TopicTotalStyle.Font.FontName = "Arial";
                        TopicTotalStyle.Font.Size = 8f;
                        TopicTotalStyle.Font.Color = ExcelKnownColors.White;
                        TopicTotalStyle.WrapText = true;
                        TopicTotalStyle.Borders.Color = ExcelKnownColors.White;
                        TopicTotalStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        TopicTotalStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        TopicTotalStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                        TopicTotalStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                        TopicTotalStyle.EndUpdate();
                        #endregion

                        int row = 1;
                        worksheet.Range["A" + row].Text = "Case Care Planning Report";
                        worksheet.Range["A" + row + ":AI" + row].CellStyle = CategoryStyle;
                        worksheet.Range["A" + row + ":AI" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        worksheet.Range["A" + row + ":AI" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        worksheet.Range["A" + row].RowHeight = 30;
                        worksheet.Range["A" + row + ":AI" + row].Merge();
                        row++;
                        row++;

                        worksheet.Range["H" + row].Text = "Number of people aged 18 years and above currently living in household";
                        worksheet.Range["H" + row + ":I" + row].Merge();
                        worksheet.Range["H" + row + ":I" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        worksheet.Range["H" + row + ":I" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        worksheet.Range["H" + row + ":I" + row].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(155, 194, 230);
                        worksheet.Range["H" + row + ":I" + row].CellStyle.Font.Size = 12f;
                        worksheet.Range["H" + row + ":I" + row].CellStyle.Font.Bold = true;
                        worksheet.Range["H" + row + ":I" + row].CellStyle.Font.Color = ExcelKnownColors.Black;
                        worksheet.Range["H" + row + ":I" + row].CellStyle.WrapText = true;
                        worksheet.Range["A" + row].RowHeight = 30;


                        worksheet.Range["J" + row].Text = "Total number of children below 18 years of age currently living in household";
                        worksheet.Range["J" + row + ":K" + row].CellStyle = DivisionStyle;
                        worksheet.Range["J" + row + ":K" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        worksheet.Range["J" + row + ":K" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        worksheet.Range["J" + row + ":K" + row].Merge();
                        worksheet.Range["J" + row + ":K" + row].CellStyle.WrapText = true;
                        worksheet.Range["A" + row].RowHeight = 30;
                        row++;
                        #region Header row
                        worksheet.Range["A" + row].Text = "HH UiD";
                        worksheet.Range["A" + row].ColumnWidth = 20;

                        worksheet.Range["B" + row].Text = "District";
                        worksheet.Range["B" + row].ColumnWidth = 20;

                        worksheet.Range["C" + row].Text = "Sub county";
                        worksheet.Range["C" + row].ColumnWidth = 20;

                        worksheet.Range["D" + row].Text = "Parish";
                        worksheet.Range["D" + row].ColumnWidth = 20;

                        worksheet.Range["E" + row].Text = "Village";
                        worksheet.Range["E" + row].ColumnWidth = 20;

                        worksheet.Range["F" + row].Text = "implementing partner";
                        worksheet.Range["F" + row].ColumnWidth = 20;

                        worksheet.Range["G" + row].Text = " OVC service provider";
                        worksheet.Range["G" + row].ColumnWidth = 20;

                        worksheet.Range["H" + row].Text = "Male";
                        worksheet.Range["H" + row].ColumnWidth = 20;

                        worksheet.Range["I" + row].Text = "Female";
                        worksheet.Range["I" + row].ColumnWidth = 20;

                        worksheet.Range["J" + row].Text = "Male";
                        worksheet.Range["J" + row].ColumnWidth = 20;

                        worksheet.Range["K" + row].Text = "Female";
                        worksheet.Range["K" + row].ColumnWidth = 20;

                        worksheet.Range["L" + row].Text = "Unique Identifier of HH head or primary caregiver";
                        worksheet.Range["L" + row].ColumnWidth = 20;

                        worksheet.Range["M" + row].Text = "Name of HH head or primary caregiver";
                        worksheet.Range["M" + row].ColumnWidth = 20;

                        worksheet.Range["N" + row].Text = "phone number of HH head or primary caregiver";
                        worksheet.Range["N" + row].ColumnWidth = 20;

                        worksheet.Range["O" + row].Text = "Name of person administering";
                        worksheet.Range["O" + row].ColumnWidth = 20;

                        worksheet.Range["P" + row].Text = "Title of person administering";
                        worksheet.Range["P" + row].ColumnWidth = 20;

                        worksheet.Range["Q" + row].Text = "Date of administration";
                        worksheet.Range["Q" + row].ColumnWidth = 20;

                        worksheet.Range["R" + row].Text = "Phone Number of person administering";
                        worksheet.Range["R" + row].ColumnWidth = 20;

                        worksheet.Range["S" + row].Text = "Case Plan for";
                        worksheet.Range["S" + row].ColumnWidth = 20;

                        worksheet.Range["T" + row].Text = "NIN / Unique identifier";
                        worksheet.Range["T" + row].ColumnWidth = 20;

                        worksheet.Range["U" + row].Text = "Household Memeber Name";
                        worksheet.Range["U" + row].ColumnWidth = 20;

                        worksheet.Range["V" + row].Text = "Date of Birth";
                        worksheet.Range["V" + row].ColumnWidth = 20;

                        worksheet.Range["W" + row].Text = "Age";
                        worksheet.Range["W" + row].ColumnWidth = 20;

                        worksheet.Range["X" + row].Text = "Gender";
                        worksheet.Range["X" + row].ColumnWidth = 20;

                        worksheet.Range["Y" + row].Text = "Priority Area";
                        worksheet.Range["Y" + row].ColumnWidth = 20;

                        worksheet.Range["Z" + row].Text = "Goal";
                        worksheet.Range["Z" + row].ColumnWidth = 20;

                        worksheet.Range["AA" + row].Text = "Priority Action Code";
                        worksheet.Range["AA" + row].ColumnWidth = 20;

                        worksheet.Range["AB" + row].Text = "For referral";
                        worksheet.Range["AB" + row].ColumnWidth = 20;

                        worksheet.Range["AC" + row].Text = "Planned date for completion of Action";
                        worksheet.Range["AC" + row].ColumnWidth = 20;

                        worksheet.Range["AD" + row].Text = "Actual completion date";
                        worksheet.Range["AD" + row].ColumnWidth = 20;

                        worksheet.Range["AE" + row].Text = "Responsible person";
                        worksheet.Range["AE" + row].ColumnWidth = 20;

                        worksheet.Range["AF" + row].Text = "Completion Status";
                        worksheet.Range["AF" + row].ColumnWidth = 20;

                        worksheet.Range["AG" + row].Text = "REFERRALS: List all services to be provided by the institution";
                        worksheet.Range["AG" + row].ColumnWidth = 20;

                        worksheet.Range["AH" + row].Text = "CONSENTED/ASSENTED BY";
                        worksheet.Range["AH" + row].ColumnWidth = 20;

                        worksheet.Range["AI" + row].Text = "CONSENTED DATE";
                        worksheet.Range["AI" + row].ColumnWidth = 20;

                        worksheet.Range["A" + row + ":AI" + row].CellStyle = headerStyle;
                        row++;
                        #endregion Header row

                        foreach (var n in data)
                        {
                            worksheet.Range["A" + row].Text = n.HouseHoldCode;

                            worksheet.Range["B" + row].Text = n.DistrictDescription;

                            worksheet.Range["C" + row].Text = n.SubcountyDescription;

                            worksheet.Range["D" + row].Text = n.ParishDescription;

                            worksheet.Range["E" + row].Text = n.VillageDescription;

                            worksheet.Range["F" + row].Text = n.ImplementingPartnerName;

                            worksheet.Range["G" + row].Text = n.Service_Provider_Desc;

                            if (n.No_Male18Above.HasValue)
                            {
                                worksheet.Range["H" + row].Number = n.No_Male18Above.Value;
                            }

                            if (n.No_Female18Above.HasValue)
                            {
                                worksheet.Range["I" + row].Number = n.No_Female18Above.Value;
                            }

                            if (n.No_Male18Below.HasValue)
                            {
                                worksheet.Range["J" + row].Number = n.No_Male18Below.Value;
                            }

                            if (n.No_Female18Below.HasValue)
                            {
                                worksheet.Range["K" + row].Number = n.No_Female18Below.Value;
                            }

                            worksheet.Range["L" + row].Text = n.HHHouseHoldMemberCode;

                            worksheet.Range["M" + row].Text = n.HHFullName;

                            worksheet.Range["N" + row].Text = n.HouseHoldPhoneNumber;

                            worksheet.Range["O" + row].Text = n.AdministeringPersonName;

                            worksheet.Range["P" + row].Text = n.AdministeringPersonTitle;

                            if (n.AdministeringDate.HasValue)
                            {
                                worksheet.Range["Q" + row].Text = n.AdministeringDate.Value.ToString("dd/MM/yyyy");
                            }

                            worksheet.Range["R" + row].Text = n.AdministeringPersonPhoneNumber;

                            worksheet.Range["S" + row].Text = n.CasePlanDesc;

                            worksheet.Range["T" + row].Text = n.HouseHoldMemberCode;

                            worksheet.Range["U" + row].Text = n.FullName;

                            if (n.DoB.HasValue)
                            {
                                worksheet.Range["V" + row].Text = n.DoB.Value.ToString("dd/MM/yyyy");
                            }

                            if (n.Age.HasValue)
                            {
                                worksheet.Range["W" + row].Number = n.Age.Value;
                            }

                            worksheet.Range["X" + row].Text = n.GenderDescription;

                            worksheet.Range["Y" + row].Text = n.PriorityAreaDesc;

                            worksheet.Range["Z" + row].Text = n.CasePlanGoal;

                            worksheet.Range["AA" + row].Text = n.PriorityAreaCodeDesc;

                            worksheet.Range["AB" + row].Text = n.RefferalPriorityAreaCodeDesc;

                            if (n.ActionCompletionPlannedDate.HasValue)
                            {
                                worksheet.Range["AC" + row].Text = n.ActionCompletionPlannedDate.Value.ToString("dd/MM/yyyy");
                            }

                            if (n.ActionCompletionActualDate.HasValue)
                            {
                                worksheet.Range["AD" + row].Text = n.ActionCompletionActualDate.Value.ToString("dd/MM/yyyy");
                            }

                            worksheet.Range["AE" + row].Text = n.ResponsiblePerson;

                            worksheet.Range["AF" + row].Text = n.CasePLanStausDesc;

                            worksheet.Range["AG" + row].Text = n.InstitutionPriorityAreaCodeDesc;

                            worksheet.Range["AH" + row].Text = n.AssessedBy;

                            if (n.AssessedDate.HasValue)
                            {
                                worksheet.Range["AI" + row].Text = n.AssessedDate.Value.ToString("dd/MM/yyyy");
                            }
                            worksheet.Range["A" + row + ":AI" + row].CellStyle = Style;
                            row++;
                        }

                        row++;

                        worksheet.Range["A" + row].Text = "Case Care Planning Summary Report";
                        worksheet.Range["A" + row + ":AI" + row].CellStyle = CategoryTotalStyle;
                        worksheet.Range["A" + row + ":AI" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        worksheet.Range["A" + row + ":AI" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        worksheet.Range["A" + row].RowHeight = 30;
                        worksheet.Range["A" + row + ":AI" + row].Merge();
                        row++;
                        row++;
                        worksheet.Range["H" + row].Text = "Number of people aged 18 years and above currently living in household";
                        worksheet.Range["H" + row + ":I" + row].Merge();
                        worksheet.Range["H" + row + ":I" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        worksheet.Range["H" + row + ":I" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        worksheet.Range["H" + row + ":I" + row].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(155, 194, 230);
                        worksheet.Range["H" + row + ":I" + row].CellStyle.Font.Size = 12f;
                        worksheet.Range["H" + row + ":I" + row].CellStyle.Font.Bold = true;
                        worksheet.Range["H" + row + ":I" + row].CellStyle.Font.Color = ExcelKnownColors.Black;
                        worksheet.Range["H" + row + ":I" + row].CellStyle.WrapText = true;
                        worksheet.Range["A" + row].RowHeight = 30;


                        worksheet.Range["J" + row].Text = "Total number of children below 18 years of age currently living in household";
                        worksheet.Range["J" + row + ":K" + row].CellStyle = DivisionStyle;
                        worksheet.Range["J" + row + ":K" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        worksheet.Range["J" + row + ":K" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        worksheet.Range["J" + row + ":K" + row].Merge();
                        worksheet.Range["J" + row + ":K" + row].CellStyle.WrapText = true;
                        worksheet.Range["A" + row].RowHeight = 30;
                        row++;
                        #region Header row
                        worksheet.Range["A" + row].Text = "HH UiD";
                        worksheet.Range["A" + row].ColumnWidth = 20;

                        worksheet.Range["B" + row].Text = "District";
                        worksheet.Range["B" + row].ColumnWidth = 20;

                        worksheet.Range["C" + row].Text = "Sub county";
                        worksheet.Range["C" + row].ColumnWidth = 20;

                        worksheet.Range["D" + row].Text = "Parish";
                        worksheet.Range["D" + row].ColumnWidth = 20;

                        worksheet.Range["E" + row].Text = "Village";
                        worksheet.Range["E" + row].ColumnWidth = 20;

                        worksheet.Range["F" + row].Text = "implementing partner";
                        worksheet.Range["F" + row].ColumnWidth = 20;

                        worksheet.Range["G" + row].Text = " OVC service provider";
                        worksheet.Range["G" + row].ColumnWidth = 20;

                        worksheet.Range["H" + row].Text = "Male";
                        worksheet.Range["H" + row].ColumnWidth = 20;

                        worksheet.Range["I" + row].Text = "Female";
                        worksheet.Range["I" + row].ColumnWidth = 20;

                        worksheet.Range["J" + row].Text = "Male";
                        worksheet.Range["J" + row].ColumnWidth = 20;

                        worksheet.Range["K" + row].Text = "Female";
                        worksheet.Range["K" + row].ColumnWidth = 20;

                        worksheet.Range["L" + row].Text = "Unique Identifier of HH head or primary caregiver";
                        worksheet.Range["L" + row].ColumnWidth = 20;

                        worksheet.Range["M" + row].Text = "Name of HH head or primary caregiver";
                        worksheet.Range["M" + row].ColumnWidth = 20;

                        worksheet.Range["N" + row].Text = "phone number of HH head or primary caregiver";
                        worksheet.Range["N" + row].ColumnWidth = 20;

                        worksheet.Range["O" + row].Text = "Name of person administering";
                        worksheet.Range["O" + row].ColumnWidth = 20;

                        worksheet.Range["P" + row].Text = "Title of person administering";
                        worksheet.Range["P" + row].ColumnWidth = 20;

                        worksheet.Range["Q" + row].Text = "Date of administration";
                        worksheet.Range["Q" + row].ColumnWidth = 20;

                        worksheet.Range["R" + row].Text = "Phone Number of person administering";
                        worksheet.Range["R" + row].ColumnWidth = 20;

                        worksheet.Range["S" + row].Text = "NIN / Unique identifier";
                        worksheet.Range["S" + row].ColumnWidth = 20;

                        worksheet.Range["T" + row].Text = "Household Memeber Name";
                        worksheet.Range["T" + row].ColumnWidth = 20;

                        worksheet.Range["U" + row].Text = "Date of Birth";
                        worksheet.Range["U" + row].ColumnWidth = 20;

                        worksheet.Range["V" + row].Text = "Age";
                        worksheet.Range["V" + row].ColumnWidth = 20;

                        worksheet.Range["W" + row].Text = "Gender";
                        worksheet.Range["W" + row].ColumnWidth = 20;

                        worksheet.Range["X" + row].Text = "Service required";
                        worksheet.Range["X" + row].ColumnWidth = 20;

                        worksheet.Range["Y" + row].Text = "Organization / Institution to be contacted";
                        worksheet.Range["Y" + row].ColumnWidth = 20;

                        worksheet.Range["Z" + row].Text = "Agency contact details";
                        worksheet.Range["Z" + row].ColumnWidth = 20;

                        worksheet.Range["A" + row + ":Z" + row].CellStyle = headerStyle;
                        row++;
                        #endregion Header row

                        foreach (var n in summaryData)
                        {
                            worksheet.Range["A" + row].Text = n.HouseHoldCode;

                            worksheet.Range["B" + row].Text = n.DistrictDescription;

                            worksheet.Range["C" + row].Text = n.SubcountyDescription;

                            worksheet.Range["D" + row].Text = n.ParishDescription;

                            worksheet.Range["E" + row].Text = n.VillageDescription;

                            worksheet.Range["F" + row].Text = n.ImplementingPartnerName;

                            worksheet.Range["G" + row].Text = n.Service_Provider_Desc;

                            if (n.No_Male18Above.HasValue)
                            {
                                worksheet.Range["H" + row].Number = n.No_Male18Above.Value;
                            }

                            if (n.No_Female18Above.HasValue)
                            {
                                worksheet.Range["I" + row].Number = n.No_Female18Above.Value;
                            }

                            if (n.No_Male18Below.HasValue)
                            {
                                worksheet.Range["J" + row].Number = n.No_Male18Below.Value;
                            }

                            if (n.No_Female18Below.HasValue)
                            {
                                worksheet.Range["K" + row].Number = n.No_Female18Below.Value;
                            }

                            worksheet.Range["L" + row].Text = n.HHHouseHoldMemberCode;

                            worksheet.Range["M" + row].Text = n.HHFullName;

                            worksheet.Range["N" + row].Text = n.HouseHoldPhoneNumber;

                            worksheet.Range["O" + row].Text = n.AdministeringPersonName;

                            worksheet.Range["P" + row].Text = n.AdministeringPersonTitle;

                            if (n.AdministeringDate.HasValue)
                            {
                                worksheet.Range["Q" + row].Text = n.AdministeringDate.Value.ToString("dd/MM/yyyy");
                            }

                            worksheet.Range["R" + row].Text = n.AdministeringPersonPhoneNumber;

                            worksheet.Range["S" + row].Text = n.HouseHoldMemberCode;

                            worksheet.Range["T" + row].Text = n.FullName;

                            if (n.DoB.HasValue)
                            {
                                worksheet.Range["U" + row].Text = n.DoB.Value.ToString("dd/MM/yyyy");
                            }

                            if (n.Age.HasValue)
                            {
                                worksheet.Range["V" + row].Number = n.Age.Value;
                            }

                            worksheet.Range["W" + row].Text = n.GenderDescription;

                            worksheet.Range["X" + row].Text = n.RefferalPriorityAreaCodeDesc;

                            worksheet.Range["Y" + row].Text = n.OrganisationName;

                            worksheet.Range["Z" + row].Text = n.AgencyContact;

                            worksheet.Range["A" + row + ":Z" + row].CellStyle = Style;
                            row++;
                        }

                        MemoryStream ms = new MemoryStream();
                        // Save and close the document.
                        workbook.SaveAs(ms);
                        //Reset the memory stream position.
                        ms.Position = 0;
                        await JS.SaveAs("Case Care Planning Report.xlsx", ms.ToArray());
                        ms.Dispose();
                        workbook.Close();
                        //excelEngine.Dispose();
                        outComeResult = "Success:- The report was successfully downloaded.";
                    }
                }
                else
                {
                    outComeResult = "No Record:- There were no records found for this search";
                }
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            await ReportSpinner.HideAsync();
        }
    }
}
