@page "/AvatReportPage"
@using MUCOBADI.Models;
@using MUCOBADI.Data;
@using System.Collections.ObjectModel;
@using System.IO;
@using Microsoft.EntityFrameworkCore;
@using System.Collections;
@inject UserManagement userManagement;
@inject NavigationManager Navigation;
@using Microsoft.AspNetCore.Hosting;
@inject IWebHostEnvironment hostingEnv;
@using Syncfusion.XlsIO;
@using Syncfusion.XlsIO.Implementation;
@using Syncfusion.XlsIORenderer;
@inject Microsoft.JSInterop.IJSRuntime JS
@inject MUCOBADIContext db;
@inject SPToCoreContext spdb;
<style>
    h4 {
        background-color: black;
        color: whitesmoke;
        padding: 10px;
    }
</style>
<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;"> <strong>USAID/ICARE Adolescent Vulnerability Assessment Tool (AVAT) Report </strong></li>
</ol>
<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>
<div class="form-row">
    <div class="form-group col-md-12">
        <EditForm Model="@InputModel" OnValidSubmit="@SearchRecords">
            <div class="form-row">
                <div class="form-group col-md-3">
                    <p>District</p>
                    <SfMultiSelect @bind-Value="@InputModel.DistrictId" Enabled="@isEnabled" TValue="int?[]" TItem="ADistrict" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_DistrictData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search District" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                        <MultiSelectFieldSettings Value="@nameof(ADistrict.DistrictId)" Text="@nameof(ADistrict.DistrictDescription)"></MultiSelectFieldSettings>
                        <MultiSelectEvents TValue="int?[]" TItem="ADistrict" ValueChange="OnDistrictChange"></MultiSelectEvents>
                    </SfMultiSelect>
                </div>
                <div class="form-group col-md-3">
                    <p>Sub-County</p>
                    <SfMultiSelect @bind-Value="@InputModel.SubcountyId" TValue="int?[]" TItem="ASubcounty" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_SubcountyData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Sub-county" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                        <MultiSelectFieldSettings Value="@nameof(ASubcounty.SubcountyId)" Text="@nameof(ASubcounty.SubcountyDescription)"></MultiSelectFieldSettings>
                        <MultiSelectEvents TValue="int?[]" TItem="ASubcounty" ValueChange="OnSubcountyChange"></MultiSelectEvents>
                    </SfMultiSelect>
                </div>
                <div class="form-group col-md-3">
                    <p>Parish</p>
                    <SfMultiSelect @bind-Value="@InputModel.ParishId" TValue="int?[]" TItem="AParish" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_ParishData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Parish" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                        <MultiSelectFieldSettings Value="@nameof(AParish.ParishId)" Text="@nameof(AParish.ParishDescription)"></MultiSelectFieldSettings>
                        <MultiSelectEvents TValue="int?[]" TItem="AParish" ValueChange="OnParishChange"></MultiSelectEvents>
                    </SfMultiSelect>
                </div>
                <div class="form-group col-md-3">
                    <p>Village</p>
                    <SfMultiSelect @bind-Value="@InputModel.VillageId" TValue="int?[]" TItem="AVillage" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_VillageData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Village" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                        <MultiSelectFieldSettings Value="@nameof(AVillage.VillageId)" Text="@nameof(AVillage.VillageDescription)"></MultiSelectFieldSettings>
                    </SfMultiSelect>
                </div>
                <div class="form-group col-md-3">
                    <p>Reporting Period Start date</p>
                    <SfDatePicker @bind-Value="@InputModel.Startdate" TValue="DateTime?" Format="dd/MM/yyyy" Placeholder="Please select date" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                </div>
                 <div class="form-group col-md-3">
                    <p>Reporting Period End date</p>
                    <SfDatePicker @bind-Value="@InputModel.Enddate" TValue="DateTime?" Format="dd/MM/yyyy" Placeholder="Please select date" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                </div>
                @*<div class="form-group col-md-3">
                    <p>Reporting Period</p>
                    <SfDropDownList @bind-Value="@(InputModel.QuarterId)" Enabled="true" TItem="AQuarter" TValue="int?" DataSource="@QuarterData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                        <DropDownListFieldSettings Value="@nameof(AQuarter.QuarterId)" Text="@nameof(AQuarter.QuarterName)"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
                <div class="form-group col-md-3">
                    <p>Financial Year</p>
                    <SfDropDownList @bind-Value="@(InputModel.YearId)" Enabled="true" TItem="FianacialYear" TValue="int?" DataSource="@FianacialYearData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                        <DropDownListFieldSettings Value="@nameof(FianacialYear.FinancialYear)" Text="@nameof(FianacialYear.FinancialYearDesc)"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>*@
                <div class="form-group col-md-3">
                    <BSButton Color="Color.Primary" ButtonType="BlazorStrap.ButtonType.Submit">Download Report</BSButton>
                    <BSButton Color="Color.Secondary" ButtonType="BlazorStrap.ButtonType.Button" @onclick="ClearSearchBtnClick">Clear Search</BSButton>
                </div>
                <div class="form-group col-md-12">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                </div>
                @if (!string.IsNullOrEmpty(outComeResult))
                {
                    <div class="form-group col-md-12">
                        @if (outComeResult.Contains("No Record"))
                        {
                            <p class="alert alert-danger" style="padding:10px;">@outComeResult</p>
                        }
                        else if (outComeResult.Contains("Warning"))
                        {
                            <p class="alert alert-warning" style="padding:10px;">@outComeResult</p>
                        }
                        else
                        {
                            <p class="alert alert-success" style="padding:10px;">@outComeResult</p>
                        }
                    </div>
                }
                <div class="form-group col-md-12">
                    <SfSpinner @ref="ReportSpinner" Label="downloading the report please wait..." Size="70" Visible="false"></SfSpinner>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
{
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    #endregion Toasters
    private SearchPanel InputModel = new();
    SfSpinner ReportSpinner;

    List<AVillage> _VillageData { get; set; }
    List<AParish> _ParishData { get; set; }
    List<ASubcounty> _SubcountyData { get; set; }
    List<ADistrict> _DistrictData { get; set; }
    List<AQuarter> QuarterData { get; set; }
    List<FianacialYear> FianacialYearData { get; set; }
    bool isEnabled { get; set; } = false;
    string outComeResult { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            if (!userManagement.IsSignedIn())
            {
                Navigation.NavigateTo("/", true);
            }
            else
            {
                FianacialYearData = new List<FianacialYear>();
                _DistrictData = db.ADistrict.AsNoTracking().ToList();
                //QuarterData = db.AQuarter.AsNoTracking().ToList();
                //int current_year = DateTime.Now.Year;
                //var firstHomeVisitdata = db.BeneficiaryIdentificationRegister.Where(o=> o.DateofIdentification.HasValue==true).OrderBy(o => o.DateofIdentification).AsNoTracking().ToList().FirstOrDefault();
                //if (firstHomeVisitdata != null)
                //{
                //    int firstyear = firstHomeVisitdata.DateofIdentification.Value.Year;
                //    for (int i = 0; i <= (current_year - firstyear); i++)
                //    {

                //        if ((current_year - (firstyear + i)) > 0)
                //        {
                //            FianacialYearData.Add(new FianacialYear { FinancialYear = (firstyear + i), FinancialYearDesc = (firstyear + i).ToString() });
                //        }
                //    }
                //}
                //FianacialYearData.Add(new FianacialYear { FinancialYear = current_year, FinancialYearDesc = current_year.ToString() });
                InputModel = new();
                var user = db.ViewUserManagement.FirstOrDefault(o => o.UserName == userManagement.GetUserName());
                if (!user.RoleName.Contains("Super Administrator") && !user.RoleName.Contains("Administrator") && !user.RoleName.Contains("mel director") && !user.RoleName.Contains("mel manager") && !user.RoleName.Contains("cluster manager"))
                {
                    var districtlist = userManagement.GetUserDistrict();
                    if (districtlist != null && districtlist.Count > 0)
                    {
                        List<int?> m = new List<int?>();
                        foreach (var n in districtlist)
                        {
                            m.Add(n);
                        }

                        InputModel.DistrictId = m.ToArray();
                        _SubcountyData = db.ASubcounty.AsNoTracking().ToList().Where(o => districtlist.Any(a => a == o.DistrictId)).ToList();
                    }
                    var subcountyList = userManagement.GetUserSubcounty();
                    if (subcountyList != null && subcountyList.Count > 0)
                    {
                        List<int?> m = new List<int?>();
                        foreach (var n in subcountyList)
                        {
                            m.Add(n);
                        }
                        InputModel.SubcountyId = m.ToArray();
                        _ParishData = db.AParish.AsNoTracking().ToList().Where(o => subcountyList.Any(a => a == o.SubcountyId)).ToList();
                    }
                }
                else
                {
                    isEnabled = true;
                }
            }

        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }

    private void ClearSearchBtnClick()
    {
        InputModel = new();
        var user = db.ViewUserManagement.FirstOrDefault(o => o.UserName == userManagement.GetUserName());
        if (!user.RoleName.Contains("Super Administrator") && !user.RoleName.Contains("Administrator") && !user.RoleName.Contains("mel director") && !user.RoleName.Contains("mel manager") && !user.RoleName.Contains("cluster manager"))
        {
            var districtlist = userManagement.GetUserDistrict();
            if (districtlist != null && districtlist.Count > 0)
            {
                List<int?> m = new List<int?>();
                foreach (var n in districtlist)
                {
                    m.Add(n);
                }

                InputModel.DistrictId = m.ToArray();
                _SubcountyData = db.ASubcounty.AsNoTracking().ToList().Where(o => districtlist.Any(a => a == o.DistrictId)).ToList();
            }
            var subcountyList = userManagement.GetUserSubcounty();
            if (subcountyList != null && subcountyList.Count > 0)
            {
                List<int?> m = new List<int?>();
                foreach (var n in subcountyList)
                {
                    m.Add(n);
                }
                InputModel.SubcountyId = m.ToArray();
                _ParishData = db.AParish.AsNoTracking().ToList().Where(o => subcountyList.Any(a => a == o.SubcountyId)).ToList();
            }
        }
        else
        {
            isEnabled = true;
        }
    }
    private async Task SearchRecords()
    {
        try
        {
            await ReportSpinner.ShowAsync();
            outComeResult = null;
            string district = null;
            string Subcounty = null;
            string parish = null;
            string village = null;
            if (InputModel.DistrictId != null)
            {
                district = string.Join(",", InputModel.DistrictId);
            }
            if (InputModel.SubcountyId != null)
            {
                Subcounty = string.Join(",", InputModel.SubcountyId);
            }
            if (InputModel.ParishId != null)
            {
                parish = string.Join(",", InputModel.ParishId);
            }
            if (InputModel.VillageId != null)
            {
                village = string.Join(",", InputModel.VillageId);
            }
            //if (InputModel.QuarterId == null || InputModel.YearId == null)
            //{
            //    outComeResult = "Please select the reporting period and the financial year";
            //}
            if (InputModel.Startdate == null || InputModel.Enddate == null)
            {
                outComeResult = "Please select the reporting period (both start date & End date)";
            }
            else
            {
                DateTime? startdate = null;
                DateTime? enddate = null;
                //var quarter = QuarterData.FirstOrDefault(o => o.QuarterId == InputModel.QuarterId);
                //if (quarter != null)
                //{
                //    startdate = new DateTime(InputModel.YearId.Value, quarter.StartMonthId.Value, 1);
                //    if (quarter.EndMonthId < quarter.StartMonthId)
                //    {
                //        enddate = new DateTime((InputModel.YearId.Value + 1), quarter.EndMonthId.Value, DateTime.DaysInMonth((InputModel.YearId.Value + 1), quarter.EndMonthId.Value));
                //    }
                //    else
                //    {
                //        enddate = new DateTime(InputModel.YearId.Value, quarter.EndMonthId.Value, DateTime.DaysInMonth(InputModel.YearId.Value, quarter.EndMonthId.Value));
                //    }
                //}
                var data = await spdb.spAvatReportGetAllAsync(district, Subcounty, parish, village, null, InputModel.Startdate, InputModel.Enddate);
                if (data.Count > 0)
                {
                    using (ExcelEngine excelEngine = new ExcelEngine())
                    {
                        IApplication application = excelEngine.Excel;
                        application.DefaultVersion = ExcelVersion.Excel2013;
                        IWorkbook workbook = application.Workbooks.Create(1);
                        IWorksheet worksheet = workbook.Worksheets[0];
                        worksheet.Name = "Adolescent Vulnerability Assessment Tool (AVAT) Report";

                        #region Styles
                        var headerStyle = workbook.Styles.Add("headerStyle");

                        headerStyle.BeginUpdate();
                        headerStyle.Color = Syncfusion.Drawing.Color.Black; //Syncfusion.Drawing.Color.FromArgb(255, 0, 0);
                        headerStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        headerStyle.Font.Bold = true;
                        headerStyle.Font.FontName = "Arial";
                        headerStyle.Font.Size = 8f;
                        headerStyle.Font.Color = ExcelKnownColors.White;

                        headerStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        headerStyle.Borders.Color = ExcelKnownColors.White;
                        headerStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        headerStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        headerStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                        //headerStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thick;

                        headerStyle.WrapText = true;

                        headerStyle.EndUpdate();

                        var Style = workbook.Styles.Add("bodyStyle");

                        Style.BeginUpdate();
                        Style.HorizontalAlignment = ExcelHAlign.HAlignLeft;
                        Style.VerticalAlignment = ExcelVAlign.VAlignTop;
                        Style.Font.Bold = false;
                        Style.Font.FontName = "Arial";
                        Style.Font.Size = 8f;
                        Style.Font.Color = ExcelKnownColors.Black;
                        Style.WrapText = true;
                        Style.Borders.Color = ExcelKnownColors.Black;
                        Style.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        Style.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        Style.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                        Style.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                        Style.EndUpdate();


                        var CategoryStyle = workbook.Styles.Add("CategoryStyle");

                        CategoryStyle.BeginUpdate();
                        CategoryStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        CategoryStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 195, 0);
                        /*CategoryStyle.Color = Syncfusion.Drawing.Color.FromArgb(105, 59, 88);*/ //AUBERGINE
                        CategoryStyle.Font.Bold = true;
                        CategoryStyle.Font.FontName = "Arial";
                        CategoryStyle.Font.Size = 10f;
                        CategoryStyle.Font.Color = ExcelKnownColors.White;
                        CategoryStyle.WrapText = true;
                        CategoryStyle.Borders.Color = ExcelKnownColors.White;
                        CategoryStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        CategoryStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        CategoryStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                        CategoryStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                        CategoryStyle.EndUpdate();

                        var CategoryTotalStyle = workbook.Styles.Add("CategoryTotalStyle");

                        CategoryTotalStyle.BeginUpdate();
                        CategoryTotalStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        CategoryTotalStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        CategoryTotalStyle.Color = Syncfusion.Drawing.Color.Black;
                        CategoryTotalStyle.Font.Bold = true;
                        CategoryTotalStyle.Font.FontName = "Arial";
                        CategoryTotalStyle.Font.Size = 8f;
                        CategoryTotalStyle.Font.Color = ExcelKnownColors.White;
                        CategoryTotalStyle.WrapText = true;
                        CategoryTotalStyle.Borders.Color = ExcelKnownColors.White;
                        CategoryTotalStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        CategoryTotalStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        CategoryTotalStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                        CategoryTotalStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                        CategoryTotalStyle.EndUpdate();

                        var DivisionStyle = workbook.Styles.Add("DivisionStyle");

                        DivisionStyle.BeginUpdate();
                        DivisionStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        DivisionStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 0, 0); //RED
                        DivisionStyle.Font.Bold = true;
                        DivisionStyle.Font.FontName = "Arial";
                        DivisionStyle.Font.Size = 8f;
                        DivisionStyle.Font.Color = ExcelKnownColors.White;
                        DivisionStyle.WrapText = true;
                        DivisionStyle.Borders.Color = ExcelKnownColors.White;
                        DivisionStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        DivisionStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        DivisionStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                        DivisionStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                        DivisionStyle.EndUpdate();

                        var DivisionTotalStyle = workbook.Styles.Add("DivisionTotalStyle");

                        DivisionTotalStyle.BeginUpdate();
                        DivisionTotalStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        DivisionTotalStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        DivisionTotalStyle.Color = Syncfusion.Drawing.Color.Black;
                        DivisionTotalStyle.Font.Bold = true;
                        DivisionTotalStyle.Font.FontName = "Arial";
                        DivisionTotalStyle.Font.Size = 8f;
                        DivisionTotalStyle.Font.Color = ExcelKnownColors.White;
                        DivisionTotalStyle.WrapText = true;
                        DivisionTotalStyle.Borders.Color = ExcelKnownColors.White;
                        DivisionTotalStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        DivisionTotalStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        DivisionTotalStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                        DivisionTotalStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                        DivisionTotalStyle.EndUpdate();


                        var TopicStyle = workbook.Styles.Add("TopicStyle");

                        TopicStyle.BeginUpdate();
                        TopicStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        TopicStyle.Color = Syncfusion.Drawing.Color.FromArgb(105, 59, 88); //AUBERGINE
                        TopicStyle.Font.Bold = true;
                        TopicStyle.Font.FontName = "Arial";
                        TopicStyle.Font.Size = 8f;
                        TopicStyle.Font.Color = ExcelKnownColors.White;
                        TopicStyle.WrapText = true;
                        TopicStyle.Borders.Color = ExcelKnownColors.White;
                        TopicStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        TopicStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        TopicStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                        TopicStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                        TopicStyle.EndUpdate();

                        var TopicTotalStyle = workbook.Styles.Add("TopicTotalStyle");

                        TopicTotalStyle.BeginUpdate();
                        TopicTotalStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        TopicTotalStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        TopicTotalStyle.Color = Syncfusion.Drawing.Color.Black;
                        TopicTotalStyle.Font.Bold = true;
                        TopicTotalStyle.Font.FontName = "Arial";
                        TopicTotalStyle.Font.Size = 8f;
                        TopicTotalStyle.Font.Color = ExcelKnownColors.White;
                        TopicTotalStyle.WrapText = true;
                        TopicTotalStyle.Borders.Color = ExcelKnownColors.White;
                        TopicTotalStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                        TopicTotalStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                        TopicTotalStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                        TopicTotalStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                        TopicTotalStyle.EndUpdate();
                        #endregion

                        int row = 1;
                        worksheet.Range["A" + row].Text = "Adolescent Vulnerability Assessment Tool (AVAT) Report";
                        worksheet.Range["A" + row + ":M" + row].CellStyle = CategoryStyle;
                        worksheet.Range["A" + row + ":M" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        worksheet.Range["A" + row + ":M" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        worksheet.Range["A" + row].RowHeight = 30;
                        worksheet.Range["A" + row + ":M" + row].Merge();
                        row++;
                        row++;
                        worksheet.Range["P" + row].Text = "PRIORITY AREA 1: ECONOMIC STABILITY AND SECURITY";
                        worksheet.Range["P" + row + ":Z" + row].Merge();
                        worksheet.Range["P" + row + ":Z" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        worksheet.Range["P" + row + ":Z" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        worksheet.Range["P" + row + ":Z" + row].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(155, 194, 230);
                        worksheet.Range["P" + row + ":Z" + row].CellStyle.Font.Size = 12f;
                        worksheet.Range["P" + row + ":Z" + row].CellStyle.Font.Bold = true;
                        worksheet.Range["P" + row + ":Z" + row].CellStyle.Font.Color = ExcelKnownColors.Black;

                        worksheet.Range["AA" + row].Text = "PRIORITY AREA 2: SURVIVAL AND HEALTH";
                        worksheet.Range["AA" + row + ":AU" + row].Merge();
                        worksheet.Range["AA" + row + ":AU" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        worksheet.Range["AA" + row + ":AU" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        worksheet.Range["AA" + row + ":AU" + row].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 230, 153);
                        worksheet.Range["AA" + row + ":AU" + row].CellStyle.Font.Size = 12f;
                        worksheet.Range["AA" + row + ":AU" + row].CellStyle.Font.Bold = true;
                        worksheet.Range["AA" + row + ":AU" + row].CellStyle.Font.Color = ExcelKnownColors.Black;

                        worksheet.Range["AV" + row].Text = "PRIORITY AREA 3: EDUCATION AND DEVELOPMENT";
                        worksheet.Range["AV" + row + ":BE" + row].Merge();
                        worksheet.Range["AV" + row + ":BE" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        worksheet.Range["AV" + row + ":BE" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        worksheet.Range["AV" + row + ":BE" + row].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(122, 48, 160);
                        worksheet.Range["AV" + row + ":BE" + row].CellStyle.Font.Size = 12f;
                        worksheet.Range["AV" + row + ":BE" + row].CellStyle.Font.Bold = true;
                        worksheet.Range["AV" + row + ":BE" + row].CellStyle.Font.Color = ExcelKnownColors.White;

                        worksheet.Range["BF" + row].Text = "PRIORITY AREA 4: CARE AND PROTECTION";
                        worksheet.Range["BF" + row + ":BR" + row].Merge();
                        worksheet.Range["BF" + row + ":BR" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                        worksheet.Range["BF" + row + ":BR" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                        worksheet.Range["BF" + row + ":BR" + row].CellStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 255, 0);
                        worksheet.Range["BF" + row + ":BR" + row].CellStyle.Font.Size = 12f;
                        worksheet.Range["BF" + row + ":BR" + row].CellStyle.Font.Bold = true;
                        worksheet.Range["BF" + row + ":BR" + row].CellStyle.Font.Color = ExcelKnownColors.Black;

                        row++;

                        worksheet.Range["AZ" + row].Text = "3.3 Has the Adolescent successfully progressed from one level to another at school, vocational training or apprenticeship compared to last academic year?";
                        worksheet.Range["AZ" + row + ":BB" + row].Merge();
                        worksheet.Range["A" + row + ":CA" + row].CellStyle = headerStyle;
                        worksheet.Range["A" + row + ":CA" + row].WrapText = true;
                        row++;

                        #region Header row
                        worksheet.Range["A" + row].Text = "HH UiD";
                        worksheet.Range["A" + row].ColumnWidth = 20;

                        worksheet.Range["B" + row].Text = "District";
                        worksheet.Range["B" + row].ColumnWidth = 20;

                        worksheet.Range["C" + row].Text = "Sub county";
                        worksheet.Range["C" + row].ColumnWidth = 20;

                        worksheet.Range["D" + row].Text = "Parish";
                        worksheet.Range["D" + row].ColumnWidth = 20;

                        worksheet.Range["E" + row].Text = "Village";
                        worksheet.Range["E" + row].ColumnWidth = 20;

                        worksheet.Range["F" + row].Text = "Individual UiD";
                        worksheet.Range["F" + row].ColumnWidth = 20;

                        worksheet.Range["G" + row].Text = "Name of HH member";
                        worksheet.Range["G" + row].ColumnWidth = 20;

                        worksheet.Range["H" + row].Text = "Sex";
                        worksheet.Range["H" + row].ColumnWidth = 20;

                        worksheet.Range["I" + row].Text = "Date of birth";
                        worksheet.Range["I" + row].ColumnWidth = 20;

                        worksheet.Range["J" + row].Text = "Age";
                        worksheet.Range["J" + row].ColumnWidth = 20;

                        worksheet.Range["K" + row].Text = "Date of Interview";
                        worksheet.Range["K" + row].ColumnWidth = 20;

                        worksheet.Range["L" + row].Text = "Name of Sub-County Community Development Offi cer (CDO)";
                        worksheet.Range["L" + row].ColumnWidth = 20;

                        worksheet.Range["M" + row].Text = "Tel Contact of Sub-County Community Development Offi cer (CDO)";
                        worksheet.Range["M" + row].ColumnWidth = 20;

                        worksheet.Range["N" + row].Text = "Phase of Administration";
                        worksheet.Range["N" + row].ColumnWidth = 20;

                        worksheet.Range["O" + row].Text = "Marital Status of HH Head";
                        worksheet.Range["O" + row].ColumnWidth = 20;

                        worksheet.Range["P" + row].Text = "1.1 Are you engaged in any economic activity that contributes to your well-being and that of the HH?";
                        worksheet.Range["P" + row].ColumnWidth = 20;

                        worksheet.Range["Q" + row].Text = "Score";
                        worksheet.Range["Q" + row].ColumnWidth = 20;

                        worksheet.Range["R" + row].Text = "1.2 Are you employed in any job that may be harmful to your:";
                        worksheet.Range["R" + row].ColumnWidth = 20;

                        worksheet.Range["S" + row].Text = "Score";
                        worksheet.Range["S" + row].ColumnWidth = 20;

                        worksheet.Range["T" + row].Text = "1.3 Are you a member of a savings group or association?";
                        worksheet.Range["T" + row].ColumnWidth = 20;

                        worksheet.Range["U" + row].Text = "Score";
                        worksheet.Range["U" + row].ColumnWidth = 20;

                        worksheet.Range["V" + row].Text = "1.4 Do you in any way benefit from the following programs?";
                        worksheet.Range["V" + row].ColumnWidth = 20;

                        worksheet.Range["W" + row].Text = "Score";
                        worksheet.Range["W" + row].ColumnWidth = 20;

                        worksheet.Range["X" + row].Text = "ECONOMIC STABILITY AND SECURITY TOTAL";
                        worksheet.Range["X" + row].ColumnWidth = 20;

                        worksheet.Range["Y" + row].Text = "Maximum Possible Score";
                        worksheet.Range["Y" + row].ColumnWidth = 20;

                        worksheet.Range["Z" + row].Text = "ECONOMIC STABILITY AND SECURITY PERCENTAGE";
                        worksheet.Range["Z" + row].ColumnWidth = 20;

                        worksheet.Range["AA" + row].Text = "2.1 How many meals do you have in a day?";
                        worksheet.Range["AA" + row].ColumnWidth = 20;

                        worksheet.Range["AB" + row].Text = "Score";
                        worksheet.Range["AB" + row].ColumnWidth = 20;

                        worksheet.Range["AC" + row].Text = "2.2 In the past week, have you gone a whole day and night without eating anything at all due to lack of food?";
                        worksheet.Range["AC" + row].ColumnWidth = 20;

                        worksheet.Range["AD" + row].Text = "Score";
                        worksheet.Range["AD" + row].ColumnWidth = 20;

                        worksheet.Range["AE" + row].Text = "2.3 Have you been referred for health services for any chronic illnesses and/or disability that you might have and are you receiving treatment?";
                        worksheet.Range["AE" + row].ColumnWidth = 20;

                        worksheet.Range["AF" + row].Text = "Score";
                        worksheet.Range["AF" + row].ColumnWidth = 20;

                        worksheet.Range["AG" + row].Text = "2.4 Do you know your HIV status? Note: For adolescents with unknown HIV status, Refer for HTS";
                        worksheet.Range["AG" + row].ColumnWidth = 20;

                        worksheet.Range["AH" + row].Text = "Score";
                        worksheet.Range["AH" + row].ColumnWidth = 20;

                        worksheet.Range["AI" + row].Text = "2.5 Are you on antiretroviral therapy (ART) or tuberculosis treatment?";
                        worksheet.Range["AI" + row].ColumnWidth = 20;

                        worksheet.Range["AJ" + row].Text = "Score";
                        worksheet.Range["AJ" + row].ColumnWidth = 20;

                        worksheet.Range["AK" + row].Text = "2.6 Have you had a blood test called viral load in the last 12 months?";
                        worksheet.Range["AK" + row].ColumnWidth = 20;

                        worksheet.Range["AL" + row].Text = "Score";
                        worksheet.Range["AL" + row].ColumnWidth = 20;

                        worksheet.Range["AM" + row].Text = "2.7 Is your viral load suppressed? Request to see viral load card. Yes/NA";
                        worksheet.Range["AM" + row].ColumnWidth = 20;

                        worksheet.Range["AN" + row].Text = "Score";
                        worksheet.Range["AN" + row].ColumnWidth = 20;

                        worksheet.Range["AO" + row].Text = "2.8 Can you tell me about how a young person of your age living in your community might become infected with HIV?";
                        worksheet.Range["AO" + row].ColumnWidth = 20;

                        worksheet.Range["AP" + row].Text = "Score";
                        worksheet.Range["AP" + row].ColumnWidth = 20;

                        worksheet.Range["AQ" + row].Text = "2.9 Can you tell me how a young person your age living in your community might help protect himself or herself from becoming infected with HIV?";
                        worksheet.Range["AQ" + row].ColumnWidth = 20;

                        worksheet.Range["AR" + row].Text = "Score";
                        worksheet.Range["AR" + row].ColumnWidth = 20;

                        worksheet.Range["AS" + row].Text = "SURVIVAL AND HEALTH TOTAL";
                        worksheet.Range["AS" + row].ColumnWidth = 20;

                        worksheet.Range["AT" + row].Text = "Maximum Possible Score";
                        worksheet.Range["AT" + row].ColumnWidth = 20;

                        worksheet.Range["AU" + row].Text = "SURVIVAL AND HEALTH PERCENTAGE";
                        worksheet.Range["AU" + row].ColumnWidth = 20;

                        worksheet.Range["AV" + row].Text = "3.1 Are you currently enrolled and attending school, vocational training, or an apprenticeship?";
                        worksheet.Range["AV" + row].ColumnWidth = 20;

                        worksheet.Range["AW" + row].Text = "Score";
                        worksheet.Range["AW" + row].ColumnWidth = 20;

                        worksheet.Range["AX" + row].Text = "3.2 Have you attended school, vocational training, or an apprenticeship regularly(At least 4 days a week on average) in the past 12 months?";
                        worksheet.Range["AX" + row].ColumnWidth = 20;

                        worksheet.Range["AY" + row].Text = "Score.";
                        worksheet.Range["AY" + row].ColumnWidth = 20;

                        worksheet.Range["AZ" + row].Text = "Not applicable (No Adolescent was in school in the previous year)";
                        worksheet.Range["AZ" + row].ColumnWidth = 20;

                        worksheet.Range["BA" + row].Text = "Reason(s) for not progressing";
                        worksheet.Range["BA" + row].ColumnWidth = 20;

                        worksheet.Range["BB" + row].Text = "Score";
                        worksheet.Range["BB" + row].ColumnWidth = 20;

                        worksheet.Range["BC" + row].Text = "EDUCATION AND DEVELOPMENT TOTAL";
                        worksheet.Range["BC" + row].ColumnWidth = 20;

                        worksheet.Range["BD" + row].Text = "Maximum Possible Score";
                        worksheet.Range["BD" + row].ColumnWidth = 20;

                        worksheet.Range["BE" + row].Text = "EDUCATION AND DEVELOPMENT PERCENTAGE";
                        worksheet.Range["BE" + row].ColumnWidth = 20;

                        worksheet.Range["BF" + row].Text = "4.1 In the past 12 months, have all the children in this HH been under the care of and lived with the same adult primary Caregiver?";
                        worksheet.Range["BF" + row].ColumnWidth = 20;

                        worksheet.Range["BG" + row].Text = "Score";
                        worksheet.Range["BG" + row].ColumnWidth = 20;

                        worksheet.Range["BH" + row].Text = "4.2 In the past 6 months have you been feeling withdrawn or consistently sad, unhappy, or depressed, and not able to participate in daily activities, including playing with friends and family?";
                        worksheet.Range["BH" + row].ColumnWidth = 20;

                        worksheet.Range["BI" + row].Text = "Score";
                        worksheet.Range["BI" + row].ColumnWidth = 20;

                        worksheet.Range["BJ" + row].Text = "4.3 What would you do if you experienced or became a victim of abuse or violence?";
                        worksheet.Range["BJ" + row].ColumnWidth = 20;

                        worksheet.Range["BK" + row].Text = "Score";
                        worksheet.Range["BK" + row].ColumnWidth = 20;

                        worksheet.Range["BL" + row].Text = "4.4 In the past 6 months, have any following happened to you in or outside the HH? Indicate Yes/No. Note: If you see an obvious issue of abuse or you already know about it, then indicate yes.";
                        worksheet.Range["BL" + row].ColumnWidth = 20;

                        worksheet.Range["BM" + row].Text = "Score";
                        worksheet.Range["BM" + row].ColumnWidth = 20;

                        worksheet.Range["BN" + row].Text = "4.5 Have you experienced any of these forms of sexual and gender-based violence?";
                        worksheet.Range["BN" + row].ColumnWidth = 20;

                        worksheet.Range["BO" + row].Text = "Score";
                        worksheet.Range["BO" + row].ColumnWidth = 20;

                        worksheet.Range["BP" + row].Text = "CARE AND PROTECTION TOTAL";
                        worksheet.Range["BP" + row].ColumnWidth = 20;

                        worksheet.Range["BQ" + row].Text = "Maximum Possible Score";
                        worksheet.Range["BQ" + row].ColumnWidth = 20;

                        worksheet.Range["BR" + row].Text = "CARE AND PROTECTION PERCENTAGE";
                        worksheet.Range["BR" + row].ColumnWidth = 20;

                        worksheet.Range["BS" + row].Text = "HH TOTAL SCORE";
                        worksheet.Range["BS" + row].ColumnWidth = 20;

                        worksheet.Range["BT" + row].Text = "Maximum Possible Score";
                        worksheet.Range["BT" + row].ColumnWidth = 20;

                        worksheet.Range["BU" + row].Text = "HH PERCENTAGE";
                        worksheet.Range["BU" + row].ColumnWidth = 20;

                        worksheet.Range["BV" + row].Text = "Assessment Status";
                        worksheet.Range["BV" + row].ColumnWidth = 20;

                        worksheet.Range["BW" + row].Text = "Assessment Date";
                        worksheet.Range["BW" + row].ColumnWidth = 20;

                        worksheet.Range["BX" + row].Text = "Assessor’s Name";
                        worksheet.Range["BX" + row].ColumnWidth = 20;

                        worksheet.Range["BY" + row].Text = "Title";
                        worksheet.Range["BY" + row].ColumnWidth = 20;

                        worksheet.Range["BZ" + row].Text = "Tel";
                        worksheet.Range["BZ" + row].ColumnWidth = 20;

                        worksheet.Range["CA" + row].Text = "Assessor’s Observations (a requirement for all assessments)";
                        worksheet.Range["CA" + row].ColumnWidth = 20;
                        worksheet.Range["A" + row + ":CA" + row].CellStyle = headerStyle;
                        #endregion Header row

                        row++;
                        foreach (var n in data)
                        {
                            worksheet.Range["A" + row].Text = n.HouseHoldCode;

                            worksheet.Range["B" + row].Text = n.DistrictDescription;

                            worksheet.Range["C" + row].Text = n.SubcountyDescription;

                            worksheet.Range["D" + row].Text = n.ParishDescription;

                            worksheet.Range["E" + row].Text = n.VillageDescription;

                            worksheet.Range["F" + row].Text = n.HouseHoldMemberCode;

                            worksheet.Range["G" + row].Text = n.FullName;

                            worksheet.Range["H" + row].Text = n.GenderDescription;

                            if (n.DoB.HasValue)
                            {
                                worksheet.Range["I" + row].Text = n.DoB.Value.ToString("dd/MM/yyyy");
                            }

                            if (n.Age.HasValue)
                            {
                                worksheet.Range["J" + row].Number = n.Age.Value;
                            }

                            if (n.InterviewDate.HasValue)
                            {
                                worksheet.Range["K" + row].Text = n.InterviewDate.Value.ToString("dd/MM/yyyy");
                            }

                            worksheet.Range["L" + row].Text = n.CDOName;

                            worksheet.Range["M" + row].Text = n.CDOContact;

                            worksheet.Range["N" + row].Text = n.AdministrationPhaseDescription;

                            worksheet.Range["O" + row].Text = n.MaritalStatusDescription;

                            worksheet.Range["P" + row].Text = n.EconomicActivityDescription;

                            if (n.EconomicActivityScore.HasValue)
                            {
                                worksheet.Range["Q" + row].Number = n.EconomicActivityScore.Value;
                            }

                            worksheet.Range["R" + row].Text = n.HarmfulDescription;

                            if (n.HarmfulScore.HasValue)
                            {
                                worksheet.Range["S" + row].Number = n.HarmfulScore.Value;
                            }

                            worksheet.Range["T" + row].Text = n.IsSavingsGroupMemberDesc;

                            if (n.IsSavingsGroupMemberScore.HasValue)
                            {
                                worksheet.Range["U" + row].Number = n.IsSavingsGroupMemberScore.Value;
                            }

                            worksheet.Range["V" + row].Text = n.MemberBenefitsDescription;

                            if (n.MemberBenefitsScore.HasValue)
                            {
                                worksheet.Range["W" + row].Number = n.MemberBenefitsScore.Value;
                            }

                            if (n.EconomicStabilityTotal.HasValue)
                            {
                                worksheet.Range["X" + row].Number = n.EconomicStabilityTotal.Value;
                            }

                            worksheet.Range["Y" + row].Text = "13";

                            if (n.EconomicStabilityTotal.HasValue && n.EconomicStabilityTotal > 0)
                            {
                                double a = Math.Round(((n.EconomicStabilityTotal.Value / 13) * 100), 1);
                                worksheet.Range["Z" + row].Text = a + "%";
                            }

                            worksheet.Range["AA" + row].Text = n.MealDescription;

                            if (n.MealScore.HasValue)
                            {
                                worksheet.Range["AB" + row].Number = n.MealScore.Value;
                            }

                            worksheet.Range["AC" + row].Text = n.LackofFoodDesc;

                            if (n.LackofFoodScore.HasValue)
                            {
                                worksheet.Range["AD" + row].Number = n.LackofFoodScore.Value;
                            }

                            worksheet.Range["AE" + row].Text = n.ReferredDescription;

                            if (n.ReferredScore.HasValue)
                            {
                                worksheet.Range["AF" + row].Number = n.ReferredScore.Value;
                            }

                            worksheet.Range["AG" + row].Text = n.AdolescentWithKnownHIVStatusDesc;

                            if (n.AdolescentWithKnownHIVStatusScore.HasValue)
                            {
                                worksheet.Range["AH" + row].Number = n.AdolescentWithKnownHIVStatusScore.Value;
                            }

                            worksheet.Range["AI" + row].Text = n.AntiretroviralTherapyDesc;

                            if (n.AntiretroviralTherapyScore.HasValue)
                            {
                                worksheet.Range["AJ" + row].Number = n.AntiretroviralTherapyScore.Value;
                            }

                            worksheet.Range["AK" + row].Text = n.HadViralLoadBloodTestDesc;

                            if (n.HadViralLoadBloodTestScore.HasValue)
                            {
                                worksheet.Range["AL" + row].Number = n.HadViralLoadBloodTestScore.Value;
                            }

                            worksheet.Range["AM" + row].Text = n.IsViralloadSuppressedDesc;

                            if (n.IsViralloadSuppressedScore.HasValue)
                            {
                                worksheet.Range["AN" + row].Number = n.IsViralloadSuppressedScore.Value;
                            }

                            worksheet.Range["AO" + row].Text = n.InfectionWayDesc;

                            if (n.InfectionWayScore.HasValue)
                            {
                                worksheet.Range["AP" + row].Number = n.InfectionWayScore.Value;
                            }

                            worksheet.Range["AQ" + row].Text = n.SelfProtectionDesc;

                            if (n.SelfProtectionScore.HasValue)
                            {
                                worksheet.Range["AR" + row].Number = n.SelfProtectionScore.Value;
                            }

                            if (n.SurvivalandHealthTotal.HasValue)
                            {
                                worksheet.Range["AS" + row].Number = n.SurvivalandHealthTotal.Value;
                            }

                            worksheet.Range["AT" + row].Text = "15";

                            if (n.SurvivalandHealthTotal.HasValue && n.SurvivalandHealthTotal > 0)
                            {
                                double a = Math.Round(((n.SurvivalandHealthTotal.Value / 15) * 100));
                                worksheet.Range["AU" + row].Text = a + "%";
                            }

                            worksheet.Range["AV" + row].Text = n.Enrolled_Desc;

                            if (n.EnrolledScore.HasValue)
                            {
                                worksheet.Range["AW" + row].Number = n.EnrolledScore.Value;
                            }

                            worksheet.Range["AX" + row].Text = n.HasAttendedSchoolDesc;

                            if (n.HasAttendedSchoolScore.HasValue)
                            {
                                worksheet.Range["AY" + row].Number = n.HasAttendedSchoolScore.Value;
                            }

                            worksheet.Range["AZ" + row].Text = n.AdolescentProgressingDesc;

                            worksheet.Range["BA" + row].Text = n.ProgressingReasonDescription;

                            if (n.ProgressingReasonScore.HasValue)
                            {
                                worksheet.Range["BB" + row].Number = n.ProgressingReasonScore.Value;
                            }

                            if (n.EducationandDevelopmentTotal.HasValue)
                            {
                                worksheet.Range["BC" + row].Number = n.EducationandDevelopmentTotal.Value;
                            }

                            worksheet.Range["BD" + row].Text = "09";

                            if (n.EducationandDevelopmentTotal.HasValue && n.EducationandDevelopmentTotal > 0)
                            {
                                double a = Math.Round(((n.EducationandDevelopmentTotal.Value / 9) * 100));
                                worksheet.Range["BE" + row].Text = a + "%";
                            }

                            worksheet.Range["BF" + row].Text = n.SameAdultPrimaryCareGiverDesc;

                            if (n.SameAdultPrimaryCareGiverScore.HasValue)
                            {
                                worksheet.Range["BG" + row].Number = n.SameAdultPrimaryCareGiverScore.Value;
                            }

                            worksheet.Range["BH" + row].Text = n.FeelingWithdrawnDesc;

                            if (n.FeelingWithdrawnScore.HasValue)
                            {
                                worksheet.Range["BI" + row].Number = n.FeelingWithdrawnScore.Value;
                            }

                            worksheet.Range["BJ" + row].Text = n.ChildAbuseDescription;

                            if (n.ChildAbuseScore.HasValue)
                            {
                                worksheet.Range["BK" + row].Number = n.ChildAbuseScore.Value;
                            }

                            worksheet.Range["BL" + row].Text = n.IssueOfAbuseIdDesc;

                            if (n.IssueOfAbuseScore.HasValue)
                            {
                                worksheet.Range["BM" + row].Number = n.IssueOfAbuseScore.Value;
                            }

                            worksheet.Range["BN" + row].Text = n.ViolenceDescription;

                            if (n.ViolenceScore.HasValue)
                            {
                                worksheet.Range["BO" + row].Number = n.ViolenceScore.Value;
                            }

                            if (n.CareandProtectionTotal.HasValue)
                            {
                                worksheet.Range["BP" + row].Number = n.CareandProtectionTotal.Value;
                            }

                            worksheet.Range["BQ" + row].Text = "14";

                            if (n.CareandProtectionTotal.HasValue && n.CareandProtectionTotal > 0)
                            {
                                double a = Math.Round(((n.CareandProtectionTotal.Value / 14) * 100));
                                worksheet.Range["BR" + row].Text = a + "%";
                            }

                            if (n.HHTotalScore.HasValue)
                            {
                                worksheet.Range["BS" + row].Number = n.HHTotalScore.Value;
                            }

                            worksheet.Range["BT" + row].Text = "51";

                            if (n.HHTotalScore.HasValue && n.HHTotalScore > 0)
                            {
                                double a = Math.Round(((n.HHTotalScore.Value / 51) * 100));
                                worksheet.Range["BU" + row].Text = a + "%";
                            }

                            worksheet.Range["BV" + row].Text = n.AssessmentStatusDescription;

                            if (n.AssessmentDate.HasValue)
                            {
                                worksheet.Range["BW" + row].Text = n.AssessmentDate.Value.ToString("dd/MM/yyyy");
                            }

                            worksheet.Range["BX" + row].Text = n.AssessorName;

                            worksheet.Range["BY" + row].Text = n.AssessorTitle;

                            worksheet.Range["BZ" + row].Text = n.AssessorContact;

                            worksheet.Range["CA" + row].Text = n.AssessorObservation;

                            worksheet.Range["A" + row + ":CA" + row].CellStyle = Style;
                            row++;
                        }
                        MemoryStream ms = new MemoryStream();
                        // Save and close the document.
                        workbook.SaveAs(ms);
                        //Reset the memory stream position.
                        ms.Position = 0;
                        await JS.SaveAs("Adolescent Vulnerability Assessment Tool (AVAT) Report.xlsx", ms.ToArray());
                        ms.Dispose();
                        workbook.Close();
                        //excelEngine.Dispose();
                        outComeResult = "Success:- The report was successfully downloaded.";
                    }
                }
                else
                {
                    outComeResult = "No Record:- There were no records found for this search";
                }
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            await ReportSpinner.HideAsync();
        }
    }


    public void OnDistrictChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            _SubcountyData = db.ASubcounty.Where(o => args.Value.Any(a => a == o.DistrictId) == true).AsNoTracking().ToList();
        }
    }
    public void OnSubcountyChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            _ParishData = db.AParish.Where(o => args.Value.Any(a => a == o.SubcountyId) == true).AsNoTracking().ToList();
        }
    }
    public void OnParishChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            _VillageData = db.AVillage.Where(o => args.Value.Any(a => a == o.ParishId) == true).AsNoTracking().ToList();
        }
    }
    public class FianacialYear
    {
        public int FinancialYear { get; set; }
        public string FinancialYearDesc { get; set; }
    }
}
