@page "/HVATPage"
@using MUCOBADI.Models;
@using MUCOBADI.Data;
@using System.Collections.ObjectModel;
@using System.IO;
@using Microsoft.EntityFrameworkCore;
@using System.Collections;
@inject UserManagement userManagement;
@inject NavigationManager Navigation;
@using Microsoft.AspNetCore.Hosting;
@inject IWebHostEnvironment hostingEnv;
<style>
    h4 {
        background-color: black;
        color: whitesmoke;
        padding: 10px;
    }
    td{
        padding:10px;
     }
    h3{
        color:red;
    }
</style>
<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;"> <strong>Household Vulnerability Assessment Tool (HVAT) for Caregivers [OVCMIS FORM 007A]</strong></li>
</ol>

<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>

<div class="form-row">
    <div class="form-group col-md-12">
        <SfAccordion ExpandMode="@ExpandMode.Single">
            <AccordionItems>
                <AccordionItem Expanded="false">
                    <HeaderTemplate>Search Panel</HeaderTemplate>
                    <ContentTemplate>
                        <div style="padding:10px;">
                            <EditForm Model="@InputModel" OnValidSubmit="@SearchRecords">
                                <div class="form-row">
                                    <div class="form-group col-md-3">
                                        <p>District</p>
                                        <SfMultiSelect @bind-Value="@InputModel.DistrictId" Enabled="@isEnabled" TValue="int?[]" TItem="ADistrict" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_DistrictData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search District" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                            <MultiSelectFieldSettings Value="@nameof(ADistrict.DistrictId)" Text="@nameof(ADistrict.DistrictDescription)"></MultiSelectFieldSettings>
                                            <MultiSelectEvents TValue="int?[]" TItem="ADistrict" ValueChange="OnDistrictChange"></MultiSelectEvents>
                                        </SfMultiSelect>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <p>Sub-County</p>
                                        <SfMultiSelect @bind-Value="@InputModel.SubcountyId" TValue="int?[]" TItem="ASubcounty" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_SubcountyData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Sub-county" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                            <MultiSelectFieldSettings Value="@nameof(ASubcounty.SubcountyId)" Text="@nameof(ASubcounty.SubcountyDescription)"></MultiSelectFieldSettings>
                                            <MultiSelectEvents TValue="int?[]" TItem="ASubcounty" ValueChange="OnSubcountyChange"></MultiSelectEvents>
                                        </SfMultiSelect>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <p>Parish</p>
                                        <SfMultiSelect @bind-Value="@InputModel.ParishId" TValue="int?[]" TItem="AParish" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_ParishData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Parish" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                            <MultiSelectFieldSettings Value="@nameof(AParish.ParishId)" Text="@nameof(AParish.ParishDescription)"></MultiSelectFieldSettings>
                                            <MultiSelectEvents TValue="int?[]" TItem="AParish" ValueChange="OnParishChange"></MultiSelectEvents>
                                        </SfMultiSelect>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <p>Village</p>
                                        <SfMultiSelect @bind-Value="@InputModel.VillageId" TValue="int?[]" TItem="AVillage" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_VillageData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Village" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                            <MultiSelectFieldSettings Value="@nameof(AVillage.VillageId)" Text="@nameof(AVillage.VillageDescription)"></MultiSelectFieldSettings>
                                        </SfMultiSelect>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <BSButton Color="Color.Primary" ButtonType="BlazorStrap.ButtonType.Submit">Search</BSButton>
                                        <BSButton Color="Color.Secondary" ButtonType="BlazorStrap.ButtonType.Button" @onclick="ClearSearchBtnClick">Clear Search</BSButton>
                                    </div>
                                    <div class="form-group col-md-12">
                                        <DataAnnotationsValidator />
                                        <ValidationSummary />
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </ContentTemplate>
                </AccordionItem>
            </AccordionItems>
        </SfAccordion>
    </div>
    <div class="form-group col-md-12">
        <SfGrid @ref="BeneficiaryRegisterGrid" TValue="spBeneficiaryIdentificationRegisterGetAllResult" Query="@MainQuery"
                AllowGrouping="false" ShowColumnChooser="true" AllowTextWrap="true"
                AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true">
            @*<GridGroupSettings Columns="@GroupedColumns"></GridGroupSettings>*@
            <SfDataManager AdaptorInstance="@typeof(HVATBeneficiaryRegisterAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
            <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
            <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
            <GridEvents OnActionComplete="BeneficiaryRegisterActionComplete" TValue="spBeneficiaryIdentificationRegisterGetAllResult"></GridEvents>
            <GridEditSettings AllowAdding="false" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="DialogParams">
                <Template Context="RegisterContext">
                    @{
                        BeneficiaryRegisterData = (RegisterContext as spBeneficiaryIdentificationRegisterGetAllResult);
                        <div style="padding:3px;">
                            <div class="form-row">
                                <div class="form-group col-md-3">
                                    <p>District</p>
                                    <p><b>@BeneficiaryRegisterData.DistrictDescription</b></p>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>Sub-County</p>
                                    <p><b>@BeneficiaryRegisterData.SubcountyDescription</b></p>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>Parish</p>
                                    <p><b>@BeneficiaryRegisterData.ParishDescription</b></p>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>Village</p>
                                    <p><b>@BeneficiaryRegisterData.VillageDescription</b></p>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>Household Code</p>
                                    <p><b>@BeneficiaryRegisterData.HouseHoldCode</b></p>
                                </div>
                                <div class="form-group col-md-12">
                                    <SfGrid @ref="HVatGrid" TValue="spHVATGetAllResult" Query="@(new Query().AddParams("HouseHoldId",BeneficiaryRegisterData.HouseHoldId))"
                                            AllowGrouping="false" ShowColumnChooser="true" AllowTextWrap="true"
                                            AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true"
                                            Toolbar="@(new string[] {"Add","Edit","Delete","Update","Cancel","ColumnChooser"})">
                                        @*<GridGroupSettings Columns="@GroupedColumns"></GridGroupSettings>*@
                                        <SfDataManager AdaptorInstance="@typeof(HvatAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
                                        <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                        <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
                                        <GridEvents OnActionBegin="OnHvatActionBegin" OnActionComplete="OnHvatActionComplete" TValue="spHVATGetAllResult"></GridEvents>
                                        <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="DialogParams">
                                            <Template Context="ReviewHeaderContext">
                                                @{
                                                    HVatReviewData = (ReviewHeaderContext as spHVATGetAllResult);
                                                    <div style="margin-top: 10px; padding: 10px; border-color: black; border-width: 2px; border-style: solid; ">
                                                                                                        <div class="form-row">
                                                                                                            <div class="form-group col-md-12" hidden>
                                                                                                                <SfNumericTextBox @bind-Value="@HVatReviewData.HVATId" Enabled="false"></SfNumericTextBox>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-12">
                                                                                                                <SfAccordion ExpandMode="@ExpandMode.Single">
                                                                                                                    <AccordionItems>
                                                                                                                        <AccordionItem Expanded="true">
                                                                                                                            <HeaderTemplate>Introduction</HeaderTemplate>
                                                                                                                            <ContentTemplate>
                                                                                                                                <div style="padding:10px;">
                                                                                                                                    <div class="form-row">
                                                                                                                                        <div class="form-group col-md-12">
                                                                                                                                            <h3>Household Vulnerability Assessment Tool (HVAT) for Caregivers [OVCMIS FORM 007A]</h3>
                                                                                                                                            <p>
                                                                                                                                                The Household Vulnerability Assessment Tool (HVAT) is for assessment of households (HHs) selected through
                                                                                                                                                the vulnerability prioritization process. The tool that was revised in 2018 helps to target and obtain additional indepth
                                                                                                                                                information about a HH’s level of vulnerability and is used to monitor the progression of vulnerability. The
                                                                                                                                                tool should be only used with HHs identifi ed and prioritized using the Household Vulnerability Prioritization Tool
                                                                                                                                                (HVPT), and it should only be administered to HHs who will be supported. The tool should be applied at assessment,
                                                                                                                                                at the end of 12 months, at the end of a support programme, and/or as it may be required. It is recommended that
                                                                                                                                                the interviewer fi nds additional information and/or validates critical information from other sources like schools,
                                                                                                                                                health facilities, OVC service providers, community leaders, village health team members, and para-social workers,
                                                                                                                                                among others.
                                                                                                                                            </p>
                                                                                                                                        </div>
                                                                                                                                        <div class="form-group col-md-12">
                                                                                                                                            <h3>SECTION I: BACKGROUND INFORMATION</h3>
                                                                                                                                            <p>
                                                                                                                                                <b>INSTRUCTION:</b>Please provide background information for the HH. Fill in all required information on the
                                                                                                                                                members of the HH, the required contact details, and the HH number as indicated on the Household Vulnerability
                                                                                                                                                Prioritization Tool (HVPT). For each of the vulnerability categories, enter Yes (Y), No (N), or Not Applicable (NA).
                                                                                                                                                For sex, indicate Male (M) or Female (F). For immunization and birth registration, check for immunization card and
                                                                                                                                                birth registration certifi cate. For date of birth, indicate the day, month, and year. For HIV status, indicate unique codes
                                                                                                                                                if the use of positive (+), negative (-), or do not know (DK) could compromise confi dentiality.
                                                                                                                                            </p>
                                                                                                                                        </div>
                                                                                                                                        <div class="form-group col-md-12">
                                                                                                                                            <h3>SECTION II: HOUSEHOLD ASSESSMENT</h3>
                                                                                                                                            <p>
                                                                                                                                                <b>INSTRUCTION:</b> Please administer this section to the head of the HH (spouse or child in the case of childheaded
                                                                                                                                                HHs). Ask each question and circle the appropriate response option. After circling the response, please
                                                                                                                                                write in the corresponding score in the far right-hand column (labelled “SCORE”). At the end of each programme
                                                                                                                                                area (PA), add the scores for all questions and write them down under the “PA TOTAL” row. Finally, add up all PA
                                                                                                                                                scores and enter them under “HH TOTAL SCORE”
                                                                                                                                            </p>
                                                                                                                                        </div>
                                                                                                                                    </div>
                                                                                                                                </div>
                                                                                                                            </ContentTemplate>
                                                                                                                        </AccordionItem>
                                                                                                                    </AccordionItems>
                                                                                                                </SfAccordion>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-12">
                                                                                                                <h3>SECTION I: BACKGROUND INFORMATION</h3>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-3">
                                                                                                                <p>District</p>
                                                                                                                @*<p><b>@BeneficiaryRegisterData.DistrictDescription</b></p>*@
                                                                                                                <SfDropDownList @bind-Value="@(BeneficiaryRegisterData.DistrictId)" Enabled="true" TItem="ADistrict" TValue="int?" DataSource="@DistrictData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(ADistrict.DistrictId)" Text="@nameof(ADistrict.DistrictDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="ADistrict" TValue="int?" ValueChange="OnDetailDistrictChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-3">
                                                                                                                <p>Sub-County</p>
                                                                                                                @*<p><b>@BeneficiaryRegisterData.SubcountyDescription</b></p>*@
                                                                                                                <SfDropDownList @bind-Value="@(BeneficiaryRegisterData.SubcountyId)" Query="@DistricttQuery" Enabled="true" TItem="ASubcounty" TValue="int?" DataSource="@SubcountyData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(ASubcounty.SubcountyId)" Text="@nameof(ASubcounty.SubcountyDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="ASubcounty" TValue="int?" ValueChange="OnDetailSubcountyChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-3">
                                                                                                                <p>Parish</p>
                                                                                                                @*<p><b>@BeneficiaryRegisterData.ParishDescription</b></p>*@
                                                                                                                <SfDropDownList @bind-Value="@(BeneficiaryRegisterData.ParishId)" Query="@SubcounttyQuery" Enabled="true" TItem="AParish" TValue="int?" DataSource="@ParishData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AParish.ParishId)" Text="@nameof(AParish.ParishDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AParish" TValue="int?" ValueChange="OnDetailParishChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-3">
                                                                                                                <p>Village</p>
                                                                                                                @*<p><b>@BeneficiaryRegisterData.VillageDescription</b></p>*@
                                                                                                                <SfDropDownList @bind-Value="@(BeneficiaryRegisterData.VillageId)" Query="@ParishQuery" Enabled="true" TItem="AVillage" TValue="int?" DataSource="@VillageData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AVillage.VillageId)" Text="@nameof(AVillage.VillageDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AVillage" TValue="int?" ValueChange="OnDetailVillageChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-3">
                                                                                                                <p>Household Code</p>
                                                                                                                <p><b>@BeneficiaryRegisterData.HouseHoldCode</b></p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-3">
                                                                                                                <p>Name of Household Head:</p>
                                                                                                                <p><b>@BeneficiaryRegisterData.Surname @BeneficiaryRegisterData.GivenName</b></p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-3">
                                                                                                                <p>Gender of HouseHold Head</p>
                                                                                                                @{
                                                                                                                    string gender = "N/A";
                                                                                                                    var _gender = GenderData.FirstOrDefault(o => o.GenderId == BeneficiaryRegisterData.GenderId);
                                                                                                                    if (_gender != null)
                                                                                                                    {
                                                                                                                        gender = _gender.GenderDescription;
                                                                                                                    }
                                                                                                                }
                                                                                                                <p><b>@gender</b></p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-3">
                                                                                                                <p>Contact of HouseHold Head</p>
                                                                                                                <p><b>@BeneficiaryRegisterData.TelephoneContact</b></p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-3">
                                                                                                                <p>Age of Household Head</p>
                                                                                                                <p><b>@BeneficiaryRegisterData.Age</b></p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                                                                            <div class="form-group col-md-4">
                                                                                                                <p>Assessment Date</p>
                                                                                                                <SfDatePicker @bind-Value="@(HVatReviewData.AssessmentDate)" Format="dd/MM/yyyy" Placeholder="Enter Date" FloatLabelType="FloatLabelType.Never" />
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-4">
                                                                                                                <p>
                                                                                                                    Name of Service
                                                                                                                    Provider:
                                                                                                                </p>
                                                                                                                <SfTextBox Multiline="false" @bind-Value="@(HVatReviewData.ServiceProviderName)" Enabled="true" Placeholder="Enter the Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-4">
                                                                                                                <p>
                                                                                                                    Tel Contact of Service
                                                                                                                    Provider:
                                                                                                                </p>
                                                                                                                <SfTextBox Multiline="false" @bind-Value="@(HVatReviewData.ServiceProviderContact)" Enabled="true" Placeholder="Enter the phone number" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-4">
                                                                                                                <p>
                                                                                                                    Name of Sub-County Community
                                                                                                                    Development Offi cer (CDO)
                                                                                                                </p>
                                                                                                                <SfTextBox Multiline="false" @bind-Value="@(HVatReviewData.CDOName)" Enabled="true" Placeholder="Enter the Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-4">
                                                                                                                <p>
                                                                                                                    Tel Contact of Sub-County Community
                                                                                                                    Development Offi cer (CDO)
                                                                                                                </p>
                                                                                                                <SfTextBox Multiline="false" @bind-Value="@(HVatReviewData.CDOContact)" Enabled="true" Placeholder="Enter the phone number" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-4">
                                                                                                                <p>Phase of Administration</p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.AdministrationPhaseId)" Enabled="true" TItem="AAdministrationPhase" TValue="int?" DataSource="@AdministrationPhaseData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AAdministrationPhase.AdministrationPhaseId)" Text="@nameof(AAdministrationPhase.AdministrationPhaseDescription)"></DropDownListFieldSettings>
                                                                                                                </SfDropDownList>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-4">
                                                                                                                <p>Marital Status of HH Head</p>
                                                                                                                <SfDropDownList ID="HivstatusId" @bind-Value="@(HVatReviewData.MaritalStatusId)" Enabled="true" TItem="AMaritalStatus" TValue="int?" DataSource="@MaritalStatusData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AMaritalStatus.MaritalStatusId)" Text="@nameof(AMaritalStatus.MaritalStatusDescription)"></DropDownListFieldSettings>
                                                                                                                </SfDropDownList>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-4">
                                                                                                                <p>Education Level of HH Head</p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.HHEducationLevelId)" Enabled="true" TItem="AHheducationLevel" TValue="int?" DataSource="@EducationLevelData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AHheducationLevel.HheducationLevelId)" Text="@nameof(AHheducationLevel.HheducationLevelDescription)"></DropDownListFieldSettings>
                                                                                                                </SfDropDownList>
                                                                                                            </div>
                                                                                                            @if (HVatReviewData.AssessmentDate != null && !string.IsNullOrEmpty(HVatReviewData.ServiceProviderName) && !string.IsNullOrEmpty(HVatReviewData.CDOName) && HVatReviewData.AdministrationPhaseId != null && HVatReviewData.MaritalStatusId != null
                                                                                                               && HVatReviewData.HHEducationLevelId != null)
                                                                                                            {
                                                                                                                <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                                                                                <div class="form-group col-md-12">
                                                                                                                    <h3>HOUSEHOLD SUMMARY INSTRUCTION</h3>
                                                                                                                </div>
                                                                                                                <div class="form-group col-md-12">
                                                                                                                    <SfGrid @ref="HVATAddendumGrid" TValue="HouseHoldMembers" Query="@(new Query().AddParams("HouseHoldId",BeneficiaryRegisterData.HouseHoldId))"
                                                                                                                            Toolbar="@(new string[] {"Add","Edit","Delete","Update","Cancel","ColumnChooser"})" AllowGrouping="false" ShowColumnChooser="true" AllowTextWrap="true"
                                                                                                                            AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true">
                                                                                                                        <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                                                                                                        <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
                                                                                                                        <SfDataManager AdaptorInstance="@typeof(HVATAddendumAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
                                                                                                                        <GridEvents OnActionBegin="OnHVATAddendumActionBegin" OnActionComplete="@OnHVATAddendumActionComplete" TValue="HouseHoldMembers"></GridEvents>
                                                                                                                        <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="DialogParams">
                                                                                                                            <Template Context="HVATAddendumReviewContext">
                                                                                                                                @{
                                                                                                                                    HVATAddendumReviewData = (HVATAddendumReviewContext as HouseHoldMembers);
                                                                                                                                    <div style="padding:15px;">
                                                                                                                                        <div class="form-row">
                                                                                                                                            <div class="form-group col-md-12" hidden>
                                                                                                                                                <SfNumericTextBox ID="HouseHoldMemberId" @bind-Value="@(HVATAddendumReviewData.HouseHoldMemberId)" Enabled="false" Placeholder="OutPut Id" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                                                                                                                            </div>
                                                                                                                                            <div class="form-group col-md-4">
                                                                                                                                                <p>Unique Identifier</p>
                                                                                                                                                <SfMaskedTextBox @bind-Value="@(HVATAddendumReviewData.HouseHoldMemberCode)" Readonly="false" Mask=">LL-00-0000-00"></SfMaskedTextBox>
                                                                                                                                            </div>
                                                                                                                                            <div class="form-group col-md-4">
                                                                                                                                                <p>SURNAME</p>
                                                                                                                                                <SfTextBox Multiline="false" ID="Sur_name" @bind-Value="@(HVATAddendumReviewData.Surname)" Enabled="true" Placeholder="Enter Surname" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                                                            </div>
                                                                                                                                            <div class="form-group col-md-4">
                                                                                                                                                <p>GIVEN NAME</p>
                                                                                                                                                <SfTextBox Multiline="false" ID="Givenname" @bind-Value="@(HVATAddendumReviewData.Givenname)" Enabled="true" Placeholder="Enter Given Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                                                            </div>
                                                                                                                                            <div class="form-group col-md-4">
                                                                                                                                                <p>Date of Birth </p>
                                                                                                                                                <SfDatePicker @bind-Value="@(HVATAddendumReviewData.DoB)" Format="dd/MM/yyyy" Placeholder="Date of Birth" FloatLabelType="FloatLabelType.Never">
                                                                                                                                                    <DatePickerEvents TValue="DateTime?" ValueChange="OnMemberDateChange"></DatePickerEvents>
                                                                                                                                                </SfDatePicker>
                                                                                                                                            </div>
                                                                                                                                            <div class="form-group col-md-4">
                                                                                                                                                <p>Age</p>
                                                                                                                                                <SfNumericTextBox @bind-Value="@HVATAddendumReviewData.Age" Enabled="true" Placeholder="Enter the age" OnChange="OnMemberAgeChange" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                                                                                                                                            </div>
                                                                                                                                            <div class="form-group col-md-4">
                                                                                                                                                <p>Gender</p>
                                                                                                                                                <SfDropDownList @bind-Value="@(HVATAddendumReviewData.GenderId)" Enabled="true" TItem="AGender" TValue="string" DataSource="@GenderData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                                    <DropDownListFieldSettings Value="@nameof(AGender.GenderId)" Text="@nameof(AGender.GenderDescription)"></DropDownListFieldSettings>
                                                                                                                                                </SfDropDownList>
                                                                                                                                            </div>
                                                                                                                                            <div class="form-group col-md-4">
                                                                                                                                                <p>Program Participation Status</p>
                                                                                                                                                <SfDropDownList @bind-Value="@(HVATAddendumReviewData.ProgramParticipationId)" Enabled="true" TItem="AProgramParticipationStatus" TValue="int?" DataSource="@ProgramParticipationData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                                    <DropDownListFieldSettings Value="@nameof(AProgramParticipationStatus.ProgramParticipationId)" Text="@nameof(AProgramParticipationStatus.ProgramParticipationDescription)"></DropDownListFieldSettings>
                                                                                                                                                </SfDropDownList>
                                                                                                                                            </div>
                                                                                                                                            <div class="form-group col-md-4">
                                                                                                                                                <p>Beneficiary Known Risk Factor</p>
                                                                                                                                                <SfDropDownList @bind-Value="@(HVATAddendumReviewData.KnownRiskFactorId)" Enabled="true" TItem="AKnownRiskFactors" TValue="int?" DataSource="@KnownRiskFactorsData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                                    <DropDownListFieldSettings Value="@nameof(AKnownRiskFactors.KnownRiskFactorId)" Text="@nameof(AKnownRiskFactors.KnownRiskFactorDescription)"></DropDownListFieldSettings>
                                                                                                                                                </SfDropDownList>
                                                                                                                                            </div>
                                                                                                                                            <div class="form-group col-md-4">
                                                                                                                                                <p>Beneficiary is caregiver?</p>
                                                                                                                                                <SfDropDownList @bind-Value="@(HVATAddendumReviewData.IsCareGiver)" Enabled="true" TItem="ACareGiver" TValue="int?" DataSource="@CareGiverData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                                    <DropDownListFieldSettings Value="@nameof(ACareGiver.CareGiverId)" Text="@nameof(ACareGiver.CareGiverDesc)"></DropDownListFieldSettings>
                                                                                                                                                </SfDropDownList>
                                                                                                                                            </div>
                                                                                                                                            <div class="form-group col-md-4">
                                                                                                                                                <p>OVC is Enrolled in School?</p>
                                                                                                                                                <SfDropDownList @bind-Value="@(HVATAddendumReviewData.IsEnrolledInSchool)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                                    <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                                                </SfDropDownList>
                                                                                                                                            </div>
                                                                                                                                            @if (HVATAddendumReviewData.IsEnrolledInSchool == 1)
                                                                                                                                            {
                                                                                                                                                <div class="form-group col-md-4">
                                                                                                                                                    <p>Is OVC Attending School regularly?</p>
                                                                                                                                                    <SfDropDownList @bind-Value="@(HVATAddendumReviewData.IsAttendingSchoolRegularly)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                                        <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                                                    </SfDropDownList>
                                                                                                                                                </div>
                                                                                                                                                <div class="form-group col-md-4">
                                                                                                                                                    <p>Education Level</p>
                                                                                                                                                    <SfDropDownList @bind-Value="@(HVATAddendumReviewData.EducationLevelId)" Enabled="true" TItem="AEducationLevel" TValue="int?" DataSource="@_EducationLevelData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                                        <DropDownListFieldSettings Value="@nameof(AEducationLevel.EducationLevelId)" Text="@nameof(AEducationLevel.EducationLevelDescription)"></DropDownListFieldSettings>
                                                                                                                                                    </SfDropDownList>
                                                                                                                                                </div>
                                                                                                                                                <div class="form-group col-md-4">
                                                                                                                                                    <p>Name of School </p>
                                                                                                                                                    <SfTextBox Multiline="false" @bind-Value="@(HVATAddendumReviewData.NameofSchool)" Enabled="true" Placeholder="Enter Other name of School" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                                                                </div>
                                                                                                                                            }

                                                                                                                                            <div class="form-group col-md-4">
                                                                                                                                                <p>OVC is Orphaned</p>
                                                                                                                                                <SfDropDownList @bind-Value="@(HVATAddendumReviewData.IsOrphaned)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                                    <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                                                </SfDropDownList>
                                                                                                                                            </div>
                                                                                                                                            <div class="form-group col-md-4">
                                                                                                                                                <p>Is child Below 5 Malnourished</p>
                                                                                                                                                <SfDropDownList @bind-Value="@(HVATAddendumReviewData.IsChildUnder5Malnourished)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                                    <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                                                </SfDropDownList>
                                                                                                                                            </div>
                                                                                                                                            <div class="form-group col-md-4">
                                                                                                                                                <p>Child has a birth Certificate?</p>
                                                                                                                                                <SfDropDownList @bind-Value="@(HVATAddendumReviewData.DoesChildHaveBirthCertificate)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                                    <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                                                </SfDropDownList>
                                                                                                                                            </div>
                                                                                                                                            <div class="form-group col-md-4">
                                                                                                                                                <p>Is Disabled?</p>
                                                                                                                                                <SfDropDownList @bind-Value="@(HVATAddendumReviewData.IsDisabled)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                                    <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                                                </SfDropDownList>
                                                                                                                                            </div>
                                                                                                                                            @if (HVATAddendumReviewData.IsDisabled == 1)
                                                                                                                                            {
                                                                                                                                                <div class="form-group col-md-4">
                                                                                                                                                    <p>Mention the disability</p>
                                                                                                                                                    <SfTextBox Multiline="false" @bind-Value="@(HVATAddendumReviewData.DisabilityDescription)" Enabled="true" Placeholder="Enter disability" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                                                                </div>
                                                                                                                                            }

                                                                                                                                            <div class="form-group col-md-4">
                                                                                                                                                <p>Is Child Immunized?</p>
                                                                                                                                                <SfDropDownList @bind-Value="@(HVATAddendumReviewData.Ischildimmunised)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                                    <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                                                </SfDropDownList>
                                                                                                                                            </div>
                                                                                                                                            <div class="form-group col-md-4">
                                                                                                                                                <p>HIV Status</p>
                                                                                                                                                <SfDropDownList @bind-Value="@(HVATAddendumReviewData.HivstatusId)" Enabled="true" TItem="AHivstatus" TValue="int?" DataSource="@HivstatusData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                                    <DropDownListFieldSettings Value="@nameof(AHivstatus.HivstatusId)" Text="@nameof(AHivstatus.HivstatusDescription)"></DropDownListFieldSettings>
                                                                                                                                                </SfDropDownList>
                                                                                                                                            </div>
                                                                                                                                            @if (HVATAddendumReviewData.HivstatusId == 1)
                                                                                                                                            {
                                                                                                                                                <div class="form-group col-md-4">
                                                                                                                                                    <p>If HIV+, Currently on ART</p>
                                                                                                                                                    <SfDropDownList @bind-Value="@(HVATAddendumReviewData.CurrentlyonArt)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                                        <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                                                    </SfDropDownList>
                                                                                                                                                </div>
                                                                                                                                                @if (HVATAddendumReviewData.CurrentlyonArt == 1)
                                                                                                                                                {
                                                                                                                                                    <div class="form-group col-md-4">
                                                                                                                                                        <p>ART Number </p>
                                                                                                                                                        <SfTextBox Multiline="false" @bind-Value="@(HVATAddendumReviewData.Artnumber)" Enabled="true" Placeholder="Enter ART Number" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                                                                    </div>
                                                                                                                                                    <div class="form-group col-md-4">
                                                                                                                                                        <p>Cohort </p>
                                                                                                                                                        <SfDatePicker @bind-Value="@(HVATAddendumReviewData.Cohort)" Format="dd/MM/yyyy" Placeholder="select the Cohort" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
                                                                                                                                                    </div>
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            <div class="form-group col-md-4">
                                                                                                                                                <p>Has an IGA</p>
                                                                                                                                                <SfDropDownList @bind-Value="@(HVATAddendumReviewData.HasanIga)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                                    <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                                                </SfDropDownList>
                                                                                                                                            </div>
                                                                                                                                            <div class="form-group col-md-4">
                                                                                                                                                <p>Is Beneficiary in Saving group</p>
                                                                                                                                                <SfDropDownList @bind-Value="@(HVATAddendumReviewData.IsinSavingsGroup)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                                    <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                                                </SfDropDownList>
                                                                                                                                            </div>
                                                                                                                                            <div class="form-group col-md-4">
                                                                                                                                                <p>Is Beneficiary (aged 18-20 yrs) in-school completing apprenticeship</p>
                                                                                                                                                <SfDropDownList @bind-Value="@(HVATAddendumReviewData.Isinschoolcompletingapprenticeship)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                                    <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                                                </SfDropDownList>
                                                                                                                                            </div>
                                                                                                                                            @if (HVATAddendumReviewData.Age >= 9 && HVATAddendumReviewData.Age <= 17 && HVATAddendumReviewData.HouseHoldMemberId > 0)
                                                                                                                                            {
                                                                                                                                                <div class="form-group col-md-12">
                                                                                                                                                    <BSButton Color="Color.Primary" @onclick="@OpenAvatbtnClick">Adolescent Vulnerability Assessment Tool (AVAT)</BSButton>
                                                                                                                                                </div>
                                                                                                                                            }

                                                                                                                                            <div class="form-group col-md-12">
                                                                                                                                                <SfDialog @ref="@NewAvatDialogue" Height="90vh" Width="95%" AllowDragging="true" Target=".mainbody" ShowCloseIcon="true" IsModal="true" Visible="false">
                                                                                                                                                    <DialogTemplates>
                                                                                                                                                        <Header>
                                                                                                                                                            <div id="template" title="New Household Member" class="e-icon-settings">New Household Member</div>
                                                                                                                                                        </Header>
                                                                                                                                                        <Content>
                                                                                                                                                            <div style="padding:10px">
                                                                                                                                                                <AVATPartialPage HouseHoldId="@HVATAddendumReviewData.HouseHoldId.Value" HouseHoldMemberId="@HVATAddendumReviewData.HouseHoldMemberId"></AVATPartialPage>
                                                                                                                                                            </div>
                                                                                                                                                        </Content>
                                                                                                                                                        <FooterTemplate>
                                                                                                                                                            @*<DialogButton Content="Defer Application" IsPrimary="true" OnClick="@ComfirmationYes" />*@
                                                                                                                                                            <BSButton Class="btn-danger" @onclick="@CloseAvatbtnClick">Close Dialog</BSButton>
                                                                                                                                                        </FooterTemplate>
                                                                                                                                                    </DialogTemplates>
                                                                                                                                                </SfDialog>
                                                                                                                                            </div>
                                                                                                                                        </div>
                                                                                                                                    </div>
                                                                                                                                }
                                                                                                                            </Template>
                                                                                                                        </GridEditSettings>
                                                                                                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                                                                                                        <GridPageSettings PageSize="20"></GridPageSettings>
                                                                                                                        <GridColumns>
                                                                                                                            @*<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>*@
                                                                                                                            <GridColumn Field=@nameof(HouseHoldMembers.HouseHoldMemberId) HeaderText="HouseHold Member Id" TextAlign="TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
                                                                                                                            <GridColumn Field=@nameof(HouseHoldMembers.HouseHoldMemberCode) HeaderText="HouseHold Member Code" Visible="true"></GridColumn>
                                                                                                                            <GridColumn Field=@nameof(HouseHoldMembers.Surname) HeaderText="Surname"></GridColumn>
                                                                                                                            <GridColumn Field=@nameof(HouseHoldMembers.Givenname) HeaderText="Given name"></GridColumn>
                                                                                                                            <GridColumn Field=@nameof(HouseHoldMembers.DoB) HeaderText="Date of birth" Format="dd/MM/yyyy" EditType="EditType.DatePickerEdit"></GridColumn>
                                                                                                                            <GridColumn Field=@nameof(HouseHoldMembers.Age) HeaderText="Age"></GridColumn>
                                                                                                                            <GridForeignColumn Field=@nameof(HouseHoldMembers.GenderId) HeaderText="Gender" ForeignKeyField="@nameof(AGender.GenderId)" ForeignKeyValue="@nameof(AGender.GenderDescription)" ForeignDataSource="@GenderData" Width="150"></GridForeignColumn>
                                                                                                                            <GridForeignColumn Field=@nameof(HouseHoldMembers.ProgramParticipationId) HeaderText="Program Participation" ForeignKeyField="@nameof(AProgramParticipationStatus.ProgramParticipationId)" ForeignKeyValue="@nameof(AProgramParticipationStatus.ProgramParticipationDescription)" ForeignDataSource="@ProgramParticipationData" Width="150"></GridForeignColumn>
                                                                                                                            <GridForeignColumn Field=@nameof(HouseHoldMembers.KnownRiskFactorId) HeaderText="Known Risk Factor" ForeignKeyField="@nameof(AKnownRiskFactors.KnownRiskFactorId)" ForeignKeyValue="@nameof(AKnownRiskFactors.KnownRiskFactorDescription)" ForeignDataSource="@KnownRiskFactorsData" Width="150"></GridForeignColumn>
                                                                                                                            <GridForeignColumn Field=@nameof(HouseHoldMembers.IsCareGiver) HeaderText="Is Care Giver" ForeignKeyField="@nameof(ACareGiver.CareGiverId)" ForeignKeyValue="@nameof(ACareGiver.CareGiverDesc)" ForeignDataSource="@CareGiverData" Width="150"></GridForeignColumn>

                                                                                                                            <GridColumn HeaderText="Manage Records" Width="140">
                                                                                                                                <GridCommandColumns>
                                                                                                                                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="Edit" })" Title="Edit"></GridCommandColumn>
                                                                                                                                </GridCommandColumns>
                                                                                                                            </GridColumn>
                                                                                                                        </GridColumns>
                                                                                                                    </SfGrid>
                                                                                                                </div>
                                                                                                            }


                                                                                                            <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                                                                            <div class="form-group col-md-12">
                                                                                                                <h3>SECTION II: HOUSEHOLD ASSESSMENT</h3>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-12">
                                                                                                                <h4>PRIORITY AREA 1: ECONOMIC STABILITY AND SECURITY</h4>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>1.1 Who pays for most of the HH expenses?</p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.ExpensePaymentId)" Enabled="true" TItem="AExpensePayment" TValue="int?" DataSource="@ExpensePaymentData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AExpensePayment.ExpensePaymentId)" Text="@nameof(AExpensePayment.ExpensePaymentDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AExpensePayment" TValue="int?" ValueChange="OnExpensePaymentChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.ExpensePaymentScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>1.2 What is the main source of HH income?r</p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.IncomeSourceId)" Enabled="true" TItem="AHhincomeSource" TValue="int?" DataSource="@IncomeSourceData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AHhincomeSource.IncomeSourceId)" Text="@nameof(AHhincomeSource.IncomeSourceDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AHhincomeSource" TValue="int?" ValueChange="OnincomeSourceChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.IncomeSourceScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>1.3 Are you a member of a savings group or association?</p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.IsSavingsGroupMember)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AYesNo" TValue="int?" ValueChange="OnSavingsGroupMemberChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.IsSavingsGroupMemberScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>1.4 How much have you saved in the last three months? (expressed in Uganda Shillings)</p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.SavingSchemeId)" Enabled="true" TItem="ASavingScheme" TValue="int?" DataSource="@SavingSchemeData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(ASavingScheme.SavingSchemeId)" Text="@nameof(ASavingScheme.SavingSchemeDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="ASavingScheme" TValue="int?" ValueChange="OnSavingSchemeChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.SavingSchemeScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>1.5 Do you or any HH member benefit from any of the following programs?</p>
                                                                                                                <SfMultiSelect @ref="MemberBenefitObj" TValue="int[]" TItem="AMemberBenefits" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@MemberBenefitsData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                                                                                                    <MultiSelectFieldSettings Value="@nameof(AMemberBenefits.MemberBenefitsId)" Text="@nameof(AMemberBenefits.MemberBenefitsDescription)"></MultiSelectFieldSettings>
                                                                                                                    <MultiSelectEvents TValue="int[]" TItem="AMemberBenefits" ValueChange="OnMemberBenefitChange" DataBound="OnMemberBenefitBound"></MultiSelectEvents>
                                                                                                                </SfMultiSelect>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.MemberBenefitsScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>1.6 What is the current monthly HH income? (expressed in Uganda Shillings)</p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.HouseHoldIncomeId)" Enabled="true" TItem="AHhincome" TValue="int?" DataSource="@IncomeData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AHhincome.HouseHoldIncomeId)" Text="@nameof(AHhincome.HouseHoldIncomeDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AHhincome" TValue="int?" ValueChange="OnIncomeChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.HouseHoldIncomeScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>1.7 What kinds of material goods or assets do you have?</p>
                                                                                                                <SfMultiSelect @ref="HouseholdAssetObj" TValue="int[]" TItem="AHhassets" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@HouseholdAssetData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                                                                                                    <MultiSelectFieldSettings Value="@nameof(AHhassets.HhassetsId)" Text="@nameof(AHhassets.HhassetsDescription)"></MultiSelectFieldSettings>
                                                                                                                    <MultiSelectEvents TValue="int[]" TItem="AHhassets" ValueChange="OnHouseholdAssetChange" DataBound="OnHouseholdAssetBound"></MultiSelectEvents>
                                                                                                                </SfMultiSelect>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.HHAssetsScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    1.8 If the HH incurred any of the following expenses in the past 12 months, was it able to pay without using
                                                                                                                    cash transfer, grant, scholarship, borrowing or without selling HH permanent assets like land or bicycle?
                                                                                                                    <b style="color:red; font-style:italic;">(Select those that are marked yes on the form and if none available select N/A)</b>
                                                                                                                </p>
                                                                                                                <SfMultiSelect @ref="HouseholdExpenseObj" TValue="int[]" TItem="AHhincurredExpenses" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@HouseholdExpenseData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                                                                                                    <MultiSelectFieldSettings Value="@nameof(AHhincurredExpenses.IncurredExpensesId)" Text="@nameof(AHhincurredExpenses.IncurredExpensesDescription)"></MultiSelectFieldSettings>
                                                                                                                    <MultiSelectEvents TValue="int[]" TItem="AHhincurredExpenses" ValueChange="OnHouseholdExpenseChange" DataBound="OnHouseholdExpenseBound"></MultiSelectEvents>
                                                                                                                </SfMultiSelect>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.IncurredExpensesScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-12">
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">ECONOMIC STABILITY AND SECURITY TOTAL: @HVatReviewData.EconomicStabilityTotal</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                                                                            <div class="form-group col-md-12">
                                                                                                                <h4>PRIORITY AREA 2: SURVIVAL AND HEALTH</h4>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    2.1 Over the past month [state the month], what has been the main source of food consumed by the members of your HH?
                                                                                                                </p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.FoodConsumedId)" Enabled="true" TItem="AFoodConsumedSource" TValue="int?" DataSource="@FoodConsumedSourceData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AFoodConsumedSource.FoodConsumedId)" Text="@nameof(AFoodConsumedSource.FoodConsumedDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AFoodConsumedSource" TValue="int?" ValueChange="OnFoodConsumedSourceChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.FoodConsumedScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>2.2 What does the family usually eat (at least 3 times a week)?</p>
                                                                                                                <SfMultiSelect @ref="FoodGroupObj" TValue="int[]" TItem="AFoodGroups" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@FoodGroupsData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                                                                                                    <MultiSelectFieldSettings Value="@nameof(AFoodGroups.FoodGroupId)" Text="@nameof(AFoodGroups.FoodGroupDescription)"></MultiSelectFieldSettings>
                                                                                                                    <MultiSelectEvents TValue="int[]" TItem="AFoodGroups" ValueChange="OnFoodGroupsChange" DataBound="OnFoodGroupsBound"></MultiSelectEvents>
                                                                                                                </SfMultiSelect>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.FoodGroupScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    2.3 How many meals does the HH have in a day?
                                                                                                                </p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.MealId)" Enabled="true" TItem="ADailyMeals" TValue="int?" DataSource="@DailyMealsData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(ADailyMeals.MealId)" Text="@nameof(ADailyMeals.MealDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="ADailyMeals" TValue="int?" ValueChange="OnDailyMealChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.MealScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    2.4 In the past month [state the month], has any member of the HH gone a whole day and night without
                                                                                                                    eating anything at all due to lack of food?
                                                                                                                </p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.LackofFood)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AYesNo" TValue="int?" ValueChange="OnLackofFoodChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.LackofFoodScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    2.5 Do children in the HH have any of the following signs of malnutrition?
                                                                                                                </p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.MalnutritionSignId)" Enabled="true" TItem="AMalnutritionSigns" TValue="int?" DataSource="@MalnutritionSignData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AMalnutritionSigns.MalnutritionSignId)" Text="@nameof(AMalnutritionSigns.MalnutritionSignDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AMalnutritionSigns" TValue="int?" ValueChange="OnMalnutritionSignChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.MalnutritionSignScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>2.6 Do the following apply to this HH? [Observe for yourself where applicable]</p>
                                                                                                                <SfMultiSelect @ref="ApplicableOptionObj" TValue="int[]" TItem="AHhapplicableOptions" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@ApplicableOptionsData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                                                                                                    <MultiSelectFieldSettings Value="@nameof(AHhapplicableOptions.ApplicableOptionId)" Text="@nameof(AHhapplicableOptions.ApplicableOptionDescription)"></MultiSelectFieldSettings>
                                                                                                                    <MultiSelectEvents TValue="int[]" TItem="AHhapplicableOptions" ValueChange="OnApplicableOptionChange" DataBound="OnApplicableOptionBound"></MultiSelectEvents>
                                                                                                                </SfMultiSelect>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.ApplicableOptionScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    2.7 Does the HH have a person with a disability?
                                                                                                                </p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.HavePersonWithDisability)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AYesNo" TValue="int?" ValueChange="OnDisabilityChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.HavePersonWithDisabilityScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    2.8 Does any person in the HH have a long - term illness?
                                                                                                                </p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.HaveLongTermIllness)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AYesNo" TValue="int?" ValueChange="OnLongTermIllnessChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.HaveLongTermIllnessScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    2.9 Have all children in need of health services for chronic illnesses and/or disability been
                                                                                                                    referred for and are receiving the necessary treatment?
                                                                                                                </p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.ReferredDisabilityId)" Enabled="true" TItem="AReferredDisability" TValue="int?" DataSource="@ReferredDisabilityData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AReferredDisability.ReferredDisabilityId)" Text="@nameof(AReferredDisability.ReferredDisabilityDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AReferredDisability" TValue="int?" ValueChange="OnReferredDisabilityChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.ReferredDisabilityScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    2.10 Does the caregiver know the HIV status of all members in the HH in the last six months? Note: For
                                                                                                                    all members including the caregiver with unknown HIV status, refer for HTS.
                                                                                                                </p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.KnownHIVStatusId)" Enabled="true" TItem="AHhknownHivstatus" TValue="int?" DataSource="@knownHivstatusData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AHhknownHivstatus.KnownHivstatusId)" Text="@nameof(AHhknownHivstatus.KnownHivstatusDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AHhknownHivstatus" TValue="int?" ValueChange="OnknownHivstatusChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.KnownHIVStatusScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    2.11 Are all eligible HH members who are HIV+ and/or have tuberculosis on care or treatment? Yes/No/NA
                                                                                                                    (If Yes, request ART/Health card)
                                                                                                                </p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.TreatmentId)" Enabled="true" TItem="ATuberclosisTreatment" TValue="int?" DataSource="@TuberclosisTreatmentData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(ATuberclosisTreatment.TreatmentId)" Text="@nameof(ATuberclosisTreatment.TreatmentDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="ATuberclosisTreatment" TValue="int?" ValueChange="OnTuberclosisTreatmentChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.TreatmentScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    2.12 Are all the HH members who are HIV+ adhering to treatment as prescribed?
                                                                                                                </p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.TreatmentAdheranceId)" Enabled="true" TItem="AHhtreatmentAdherance" TValue="int?" DataSource="@TreatmentAdheranceData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AHhtreatmentAdherance.TreatmentAdheranceId)" Text="@nameof(AHhtreatmentAdherance.TreatmentAdheranceDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AHhtreatmentAdherance" TValue="int?" ValueChange="OntreatmentAdheranceChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.TreatmentAdheranceScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    2.13 Have all the eligible HH members had a blood test called viral load (VL) in the last twelve (12) months?
                                                                                                                </p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.BloodTestId)" Enabled="true" TItem="AHhviralLoadBloodTest" TValue="int?" DataSource="@ViralLoadBloodTestData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AHhviralLoadBloodTest.BloodTestId)" Text="@nameof(AHhviralLoadBloodTest.BloodTestDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AHhviralLoadBloodTest" TValue="int?" ValueChange="OnviralLoadBloodTestChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.BloodTestScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    2.14 Is the viral load for all the HH members who are HIV+ suppressed?
                                                                                                                </p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.HHViralLoadSuppresedId)" Enabled="true" TItem="AHhviralLoadSuppressed" TValue="int?" DataSource="@HHViralLoadSuppressedData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AHhviralLoadSuppressed.HhviralLoadSuppresedId)" Text="@nameof(AHhviralLoadSuppressed.HhviralLoadSuppresedDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AHhviralLoadSuppressed" TValue="int?" ValueChange="OnviralLoadSuppressedChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.HHViralLoadSuppresedScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    2.15 Does the HH have a stable shelter that is adequate, safe, and dry? [Observe for yourself]
                                                                                                                </p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.ShelterId)" Enabled="true" TItem="AStableShelter" TValue="int?" DataSource="@StableShelterData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AStableShelter.ShelterId)" Text="@nameof(AStableShelter.ShelterDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AStableShelter" TValue="int?" ValueChange="OnStableShelterChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.ShelterScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-12">
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">SURVIVAL AND HEALTH TOTAL: @HVatReviewData.SurvivalandHealthTotal</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                                                                            <div class="form-group col-md-12">
                                                                                                                <h4>PRIORITY AREA 3: EDUCATION AND DEVELOPMENT</h4>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    3.1 Are all the children aged 6–17 years in this HH enrolled in school, vocational training or apprenticeship
                                                                                                                    [Score 0 if Not Applicable, i.e., the children are 1–5 years old]
                                                                                                                </p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.Childrenaged6_17EnrolledInSchool)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AYesNo" TValue="int?" ValueChange="OnEnrolledInSchoolChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.Childrenaged6_17EnrolledInSchoolScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    3.2 Have all the children aged 6–17 years in this HH attended school, vocational training or apprenticeship
                                                                                                                    regularly (At least 4 days a week on average) in the past 12 months
                                                                                                                </p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.Childrenaged6_17AttendedInSchool)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AYesNo" TValue="int?" ValueChange="OnAttendedSchoolChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.Childrenaged6_17AttendedInSchoolScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    3.3 How many children aged 3-5 years in this HH are not enrolled in Pre-School or have missed Pre-School 3
                                                                                                                    or more times a week? [Score 0 if not applicable, i.e., the children are 0–2 years old]
                                                                                                                </p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.PreSchoolNotEnrolledId)" Enabled="true" TItem="AHhpreSchoolNotEnrolled" TValue="int?" DataSource="@PreSchoolNotEnrolledData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AHhpreSchoolNotEnrolled.PreSchoolNotEnrolledId)" Text="@nameof(AHhpreSchoolNotEnrolled.PreSchoolNotEnrolledDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AHhpreSchoolNotEnrolled" TValue="int?" ValueChange="OnpreSchoolNotEnrolledChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.PreSchoolNotEnrolledScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-12">
                                                                                                                <p>
                                                                                                                    3.4 Have the children/child successfully progressed from one level to another at school, vocational training or
                                                                                                                    apprenticeship compared to last academic year?
                                                                                                                </p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    Not applicable (No child/children were in school in the previous year)
                                                                                                                </p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.Children_ChildProgressing)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                </SfDropDownList>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>Reason(s) for not progressing</p>
                                                                                                                <SfMultiSelect @ref="NotProgressingReasonObj" TValue="int[]" TItem="ASchoolNotProgressingReason" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@NotProgressingReasonData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                                                                                                    <MultiSelectFieldSettings Value="@nameof(ASchoolNotProgressingReason.ProgressingReasonId)" Text="@nameof(ASchoolNotProgressingReason.ProgressingReasonDescription)"></MultiSelectFieldSettings>
                                                                                                                    <MultiSelectEvents TValue="int[]" TItem="ASchoolNotProgressingReason" ValueChange="OnNotProgressingReasonChange" DataBound="OnNotProgressingReasonBound"></MultiSelectEvents>
                                                                                                                </SfMultiSelect>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.ProgressingReasonScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-12">
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">EDUCATION AND DEVELOPMENT TOTAL: @HVatReviewData.EducationandDevelopmentTotal</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                                                                            <div class="form-group col-md-12">
                                                                                                                <h4>PRIORITY AREA 4: CARE AND PROTECTION</h4>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    4.1 In the past 12 months, have all the children in this HH been under the care of and lived with the same
                                                                                                                    adult primary Caregiver?
                                                                                                                </p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.SameAdultPrimaryCareGiver)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AYesNo" TValue="int?" ValueChange="OnAdultPrimaryCareGiverChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.SameAdultPrimaryCareGiverScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    4.2 In the past 6 months, are there any children in this HH who are withdrawn or consistently sad, unhappy, or
                                                                                                                    depressed, and not able to participate in daily activities, including playing with friends and family?
                                                                                                                </p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.ComplicationsId)" Enabled="true" TItem="AHhchildrenComplications" TValue="int?" DataSource="@ChildrenComplicationsData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AHhchildrenComplications.ComplicationsId)" Text="@nameof(AHhchildrenComplications.ComplicationsDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AHhchildrenComplications" TValue="int?" ValueChange="OnchildrenComplicationsChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.ComplicationsScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    4.3 What would you do if any of your children experienced or became a victim of child abuse or violence?
                                                                                                                </p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.ChildAbuseId)" Enabled="true" TItem="AHhchildAbuse" TValue="int?" DataSource="@ChildAbuseData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AHhchildAbuse.ChildAbuseId)" Text="@nameof(AHhchildAbuse.ChildAbuseDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AHhchildAbuse" TValue="int?" ValueChange="OnChildAbuseChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.ChildAbuseScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    4.4 In the past 6 months, has any child in the HH had the following happen to them, in or outside
                                                                                                                    the HH? [Note: If you see an obvious issue of abuse or you already know about it, then indicate yes]. Indicate
                                                                                                                    Yes / No
                                                                                                                </p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.OccuranceId)" Enabled="true" TItem="AChildAbuseOccurances" TValue="int?" DataSource="@ChildAbuseOccurancesData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AChildAbuseOccurances.OccuranceId)" Text="@nameof(AChildAbuseOccurances.OccuranceDescription)"></DropDownListFieldSettings>
                                                                                                                    <DropDownListEvents TItem="AChildAbuseOccurances" TValue="int?" ValueChange="OnChildAbuseOccurancyChange"></DropDownListEvents>
                                                                                                                </SfDropDownList>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.OccuranceScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    4.5. Has the care giver personally experienced any of these forms of sexual and gender-based
                                                                                                                    violence in the past 6 months?
                                                                                                                </p>
                                                                                                                <SfMultiSelect @ref="GenderBasedViolenceObj" TValue="int[]" TItem="AGenderBasedViolence" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@GenderBasedViolenceData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                                                                                                    <MultiSelectFieldSettings Value="@nameof(AGenderBasedViolence.ViolenceId)" Text="@nameof(AGenderBasedViolence.ViolenceDescription)"></MultiSelectFieldSettings>
                                                                                                                    <MultiSelectEvents TValue="int[]" TItem="AGenderBasedViolence" ValueChange="OnGenderBasedViolenceChange" DataBound="OnGenderBasedViolenceBound"></MultiSelectEvents>
                                                                                                                </SfMultiSelect>
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">Score: @HVatReviewData.ViolenceScore</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-12">
                                                                                                                <p style="color:forestgreen; font-size:16px; font-style:italic; font-weight:bolder;">CARE AND PROTECTION TOTAL: @HVatReviewData.CareandProtectionTotal</p>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                                                                            <div class="form-group col-md-12">
                                                                                                                <h4>SUMMARY SCORE PER PRIORITY AREAS</h4>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-12">
                                                                                                                <table class="table-bordered" style="min-width:99%;">
                                                                                                                    <thead>
                                                                                                                        <tr>
                                                                                                                            <td><p>PRIORITY AREAS</p></td>
                                                                                                                            <td>
                                                                                                                                <p>
                                                                                                                                    Maximum
                                                                                                                                    Possible
                                                                                                                                    Score
                                                                                                                                    (A)
                                                                                                                                </p>
                                                                                                                            </td>
                                                                                                                            <td>
                                                                                                                                <p>
                                                                                                                                    PA
                                                                                                                                    score
                                                                                                                                    (B)
                                                                                                                                </p>
                                                                                                                            </td>
                                                                                                                            <td>
                                                                                                                                <p>
                                                                                                                                    Percent PA
                                                                                                                                    score
                                                                                                                                    (C) = B/A X
                                                                                                                                    100
                                                                                                                                </p>
                                                                                                                            </td>
                                                                                                                            <td>
                                                                                                                                <p>
                                                                                                                                    PA
                                                                                                                                    Rank
                                                                                                                                </p>
                                                                                                                            </td>
                                                                                                                            <td>
                                                                                                                                <p>
                                                                                                                                    Priority areas (list
                                                                                                                                    all indicators that
                                                                                                                                    scored a 4 or 3,
                                                                                                                                    e.g., 1.2, 1.3, etc.)
                                                                                                                                </p>
                                                                                                                            </td>
                                                                                                                        </tr>
                                                                                                                    </thead>
                                                                                                                    <tbody>
                                                                                                                        <tr>
                                                                                                                            <td><p>1. Economic Stability and Security</p></td>
                                                                                                                            <td>29</td>
                                                                                                                            <td>@HVatReviewData.EconomicStabilityTotal</td>
                                                                                                                            <td>
                                                                                                                                @{
                                                                                                                                    double EconomicStabilitypercentage = 0;
                                                                                                                                    if (HVatReviewData.EconomicStabilityTotal != null && HVatReviewData.EconomicStabilityTotal > 0)
                                                                                                                                    {
                                                                                                                                        EconomicStabilitypercentage = ((HVatReviewData.EconomicStabilityTotal.Value / 29) * 100);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                <p>@Math.Round(EconomicStabilitypercentage, 0)%</p>
                                                                                                                            </td>
                                                                                                                            <td><p>@EconomicStabilityPARanking()</p></td>
                                                                                                                            <td></td>
                                                                                                                        </tr>
                                                                                                                        <tr>
                                                                                                                            <td><p>2. Survival and Health</p></td>
                                                                                                                            <td>51</td>
                                                                                                                            <td>@HVatReviewData.SurvivalandHealthTotal</td>
                                                                                                                            <td>
                                                                                                                                @{
                                                                                                                                    double SurvivalandHealthpercentage = 0;
                                                                                                                                    if (HVatReviewData.SurvivalandHealthTotal != null && HVatReviewData.SurvivalandHealthTotal > 0)
                                                                                                                                    {
                                                                                                                                        SurvivalandHealthpercentage = ((HVatReviewData.SurvivalandHealthTotal.Value / 51) * 100);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                <p>@Math.Round(SurvivalandHealthpercentage, 0)%</p>
                                                                                                                            </td>
                                                                                                                            <td><p>@SurvivalHealthPARanking()</p></td>
                                                                                                                            <td></td>
                                                                                                                        </tr>
                                                                                                                        <tr>
                                                                                                                            <td><p>3. Education and Development</p></td>
                                                                                                                            <td>10</td>
                                                                                                                            <td>@HVatReviewData.EducationandDevelopmentTotal</td>
                                                                                                                            <td>
                                                                                                                                @{
                                                                                                                                    double EducationandDevelopmentpercentage = 0;
                                                                                                                                    if (HVatReviewData.EducationandDevelopmentTotal != null && HVatReviewData.EducationandDevelopmentTotal > 0)
                                                                                                                                    {
                                                                                                                                        EducationandDevelopmentpercentage = ((HVatReviewData.EducationandDevelopmentTotal.Value / 10) * 100);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                <p>@Math.Round(EducationandDevelopmentpercentage, 0)%</p>
                                                                                                                            </td>
                                                                                                                            <td><p>@EducationandDevelopmentPARanking()</p></td>
                                                                                                                            <td></td>
                                                                                                                        </tr>
                                                                                                                        <tr>
                                                                                                                            <td><p>4. Care and Protection</p></td>
                                                                                                                            <td>20</td>
                                                                                                                            <td>@HVatReviewData.CareandProtectionTotal</td>
                                                                                                                            <td>
                                                                                                                                @{
                                                                                                                                    double CareandProtectionpercentage = 0;
                                                                                                                                    if (HVatReviewData.CareandProtectionTotal != null && HVatReviewData.CareandProtectionTotal > 0)
                                                                                                                                    {
                                                                                                                                        CareandProtectionpercentage = ((HVatReviewData.CareandProtectionTotal.Value / 20) * 100);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                <p>@Math.Round(CareandProtectionpercentage, 0)%</p>
                                                                                                                            </td>
                                                                                                                            <td><p>@CareandProtectionPARanking()</p></td>
                                                                                                                            <td></td>
                                                                                                                        </tr>
                                                                                                                        <tr>
                                                                                                                            <td><p>HH TOTAL SCORE</p></td>
                                                                                                                            <td>110</td>
                                                                                                                            <td>
                                                                                                                                @{HVatReviewData.HHTotalScore = HVatReviewData.EconomicStabilityTotal + HVatReviewData.SurvivalandHealthTotal + HVatReviewData.EducationandDevelopmentTotal + HVatReviewData.CareandProtectionTotal; }
                                                                                                                                <p>@HVatReviewData.HHTotalScore</p>
                                                                                                                            </td>
                                                                                                                            <td>
                                                                                                                                @{
                                                                                                                                    double totalPercentage = 0;
                                                                                                                                    double total = EconomicStabilitypercentage + SurvivalandHealthpercentage + EducationandDevelopmentpercentage + CareandProtectionpercentage;
                                                                                                                                    if (total > 0)
                                                                                                                                    {
                                                                                                                                        totalPercentage = (total / 4);
                                                                                                                                        HVatReviewData.AveragePercentage = totalPercentage;
                                                                                                                                    }
                                                                                                                                    if (totalPercentage <= 24.4)
                                                                                                                                    {
                                                                                                                                        HVatReviewData.AssessmentStatusId = 1;
                                                                                                                                    }
                                                                                                                                    else if (totalPercentage > 24.4 && totalPercentage <= 49.4)
                                                                                                                                    {
                                                                                                                                        HVatReviewData.AssessmentStatusId = 2;
                                                                                                                                    }
                                                                                                                                    else if (totalPercentage > 49.4 && totalPercentage <= 74.4)
                                                                                                                                    {
                                                                                                                                        HVatReviewData.AssessmentStatusId = 3;
                                                                                                                                    }
                                                                                                                                    else if (totalPercentage > 74.4 && totalPercentage <= 100)
                                                                                                                                    {
                                                                                                                                        HVatReviewData.AssessmentStatusId = 4;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                <p>@Math.Round(totalPercentage, 0) %</p>
                                                                                                                            </td>
                                                                                                                            <td></td>
                                                                                                                            <td></td>
                                                                                                                        </tr>
                                                                                                                        <tr>
                                                                                                                            <td>
                                                                                                                                <p>
                                                                                                                                    Average Percentage = Percent PA
                                                                                                                                    score (Total for C) divided by 4 PAs
                                                                                                                                </p>
                                                                                                                            </td>
                                                                                                                            <td></td>
                                                                                                                            <td></td>
                                                                                                                            <td><p>@Math.Round(totalPercentage, 0)%</p></td>
                                                                                                                            <td></td>
                                                                                                                            <td></td>
                                                                                                                        </tr>
                                                                                                                    </tbody>
                                                                                                                </table>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-6">
                                                                                                                <p>
                                                                                                                    Assessment Status
                                                                                                                </p>
                                                                                                                <SfDropDownList @bind-Value="@(HVatReviewData.AssessmentStatusId)" Enabled="true" TItem="AHhassessmentStatus" TValue="int?" DataSource="@HhassessmentStatusData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                    <DropDownListFieldSettings Value="@nameof(AHhassessmentStatus.AssessmentStatusId)" Text="@nameof(AHhassessmentStatus.AssessmentStatusDescription)"></DropDownListFieldSettings>
                                                                                                                </SfDropDownList>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                                                                            <div class="form-group col-md-4">
                                                                                                                <p>Assessor’s Name:</p>
                                                                                                                <SfTextBox Multiline="false" @bind-Value="@(HVatReviewData.AssessorName)" Enabled="true" Placeholder="Enter the person who Assessed the information" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-4">
                                                                                                                <p>Title:</p>
                                                                                                                <SfTextBox Multiline="false" @bind-Value="@(HVatReviewData.AssessorTitle)" Enabled="true" Placeholder="Enter title" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-4">
                                                                                                                <p>Tel: </p>
                                                                                                                <SfTextBox Multiline="false" @bind-Value="@(HVatReviewData.AssessorContact)" Enabled="true" Placeholder="Enter Phone number" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                            </div>
                                                                                                            <div class="form-group col-md-12">
                                                                                                                <p>Assessor’s Observations (a requirement for all assessments):</p>
                                                                                                                <SfTextBox Multiline="true" @bind-Value="@(HVatReviewData.AssessorObservation)" Enabled="true" Placeholder="Enter the observations" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                            </div>

                                                                                                        </div>
                                                    </div>
                                                }
                                            </Template>
                                            <FooterTemplate>
                                                <SfButton CssClass="e-btn e-success" OnClick="SaveFormBtnClick"> Save Form</SfButton>
                                                <SfButton CssClass="e-btn e-danger" OnClick="CancelFormBtnClick"> Cancel</SfButton>
                                            </FooterTemplate>
                                        </GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                        <GridPageSettings PageSize="20"></GridPageSettings>
                                        <GridColumns>
                                            <GridColumn HeaderText="Manage Records" Width="120" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left">
                                                <GridCommandColumns>
                                                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="Edit" })" Title="Edit"></GridCommandColumn>
                                                </GridCommandColumns>
                                            </GridColumn>
                                            @*<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>*@
                                            <GridColumn Field=@nameof(spHVATGetAllResult.HVATId) HeaderText="Enrolment Register Id" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
                                            <GridColumn Field=@nameof(spHVATGetAllResult.AssessmentDate) HeaderText="Assessment Date" Format="dd/MM/yyyy" Width="160"></GridColumn>
                                            <GridColumn Field=@nameof(spHVATGetAllResult.FullName) Visible="false" HeaderText="Name of Household Name" Width="180"></GridColumn>
                                            <GridColumn Field=@nameof(spHVATGetAllResult.ServiceProviderName) HeaderText="Service Provider Name" Width="180"></GridColumn>
                                            <GridColumn Field=@nameof(spHVATGetAllResult.ServiceProviderContact) Visible="true" HeaderText="Service Provider Contact" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="180"></GridColumn>
                                            <GridColumn Field=@nameof(spHVATGetAllResult.CDOName) HeaderText="Name Contact of Sub-County Community Development Officer (CDO)" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="240"></GridColumn>
                                            <GridColumn Field=@nameof(spHVATGetAllResult.CDOContact) Visible="true" HeaderText="Tel Contact of Sub-County Community Development Officer (CDO)" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="240" AllowFiltering="false"></GridColumn>
                                            <GridForeignColumn Field=@nameof(spHVATGetAllResult.AdministrationPhaseId) AllowFiltering="false" Visible="true" HeaderText="Phase of Administration" ForeignKeyField="@nameof(AAdministrationPhase.AdministrationPhaseId)" ForeignKeyValue="@nameof(AAdministrationPhase.AdministrationPhaseDescription)" ForeignDataSource="@AdministrationPhaseData" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="180"></GridForeignColumn>
                                            <GridForeignColumn Field=@nameof(spHVATGetAllResult.HHEducationLevelId) AllowFiltering="false" Visible="true" HeaderText="Education Level of HH Head" ForeignKeyField="@nameof(AHheducationLevel.HheducationLevelId)" ForeignKeyValue="@nameof(AHheducationLevel.HheducationLevelDescription)" ForeignDataSource="@EducationLevelData" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="180"></GridForeignColumn>
                                            <GridForeignColumn Field=@nameof(spHVATGetAllResult.MaritalStatusId) AllowFiltering="false" Visible="true" HeaderText="Marital Status of HH Head" ForeignKeyField="@nameof(AMaritalStatus.MaritalStatusId)" ForeignKeyValue="@nameof(AMaritalStatus.MaritalStatusDescription)" ForeignDataSource="@MaritalStatusData" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="180"></GridForeignColumn>
                                            <GridForeignColumn Field=@nameof(spHVATGetAllResult.AssessmentStatusId) AllowFiltering="false" Visible="true" HeaderText="Assessment Status" ForeignKeyField="@nameof(AHhassessmentStatus.AssessmentStatusId)" ForeignKeyValue="@nameof(AHhassessmentStatus.AssessmentStatusDescription)" ForeignDataSource="@HhassessmentStatusData" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="180"></GridForeignColumn>
                                            @*<GridColumn Field=@nameof(spHVATGetAllResult.CollectedDate) HeaderText="Collected Date" Format="dd/MM/yyyy" EditType="EditType.DatePickerEdit" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="100"></GridColumn>
                                                <GridColumn Field=@nameof(spHVATGetAllResult.ReviewedBy) HeaderText="Reviewed By" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="100"></GridColumn>
                                                <GridColumn Field=@nameof(spHVATGetAllResult.ReviewedByTele) HeaderText="Telephone" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="100"></GridColumn>
                                                <GridColumn Field=@nameof(spHVATGetAllResult.ReviewDate) HeaderText="Review Date" Format="dd/MM/yyyy" EditType="EditType.DatePickerEdit" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="100"></GridColumn>*@
                                        </GridColumns>
                                    </SfGrid>
                                </div>
                            </div>
                        </div>
                    }
                </Template>
                <FooterTemplate>
                    <SfButton CssClass="e-btn e-success" OnClick="SaveRegisterBtnClick"> Save Form</SfButton>
                    <SfButton CssClass="e-btn e-danger" OnClick="CancelRegisterBtnClick"> Cancel</SfButton>
                </FooterTemplate>
            </GridEditSettings>
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
            <GridPageSettings PageSize="20"></GridPageSettings>
            <GridColumns>
                @*<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>*@
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.HouseHoldId) HeaderText="HIV TB Tracking Form Id" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.HouseHoldCode) HeaderText="HouseHold Code" Width="100"></GridColumn>
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.DistrictDescription) HeaderText="District" Width="100"></GridColumn>
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.SubcountyDescription) Visible="true" HeaderText="Sub county" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="100"></GridColumn>
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.ParishDescription) HeaderText="Parish" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="100"></GridColumn>
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.VillageDescription) HeaderText="Village" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="100"></GridColumn>
                @*<GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.VillageDescription) HeaderText="Given Name" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="100"></GridColumn>*@
                <GridColumn HeaderText="Manage Records" Width="120" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left">
                    <GridCommandColumns>
                        <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="view" })" Title="view"></GridCommandColumn>
                    </GridCommandColumns>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>

@code {
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
{
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    #endregion Toasters

    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "90vh", Width = "98%" };
    Syncfusion.Blazor.Grids.Action PreviousMemberAction { get; set; }
    SfGrid<spBeneficiaryIdentificationRegisterGetAllResult> BeneficiaryRegisterGrid;
    SfGrid<spHVATGetAllResult> HVatGrid;
    SfGrid<HouseHoldMembers> HVATAddendumGrid;
    private SfDialog NewAvatDialogue;
    private spBeneficiaryIdentificationRegisterGetAllResult BeneficiaryRegisterData { get; set; }
    HouseHoldMembers HVATAddendumReviewData { get; set; }
    spHVATGetAllResult HVatReviewData { get; set; }

    SfMultiSelect<int[], AMemberBenefits> MemberBenefitObj;
    SfMultiSelect<int[], AHhassets> HouseholdAssetObj;
    SfMultiSelect<int[], AHhincurredExpenses> HouseholdExpenseObj;
    SfMultiSelect<int[], AFoodGroups> FoodGroupObj;
    SfMultiSelect<int[], AHhapplicableOptions> ApplicableOptionObj;
    SfMultiSelect<int[], ASchoolNotProgressingReason> NotProgressingReasonObj;
    SfMultiSelect<int[], AGenderBasedViolence> GenderBasedViolenceObj;

    public Query MainQuery = new Query();
    public Query ChildQuery = new Query();
    public Query DistricttQuery = new Query();
    public Query SubcounttyQuery = new Query();
    public Query ParishQuery = new Query();

    List<AGender> GenderData { get; set; }
    List<HouseHoldMembers> HVATAddendumData { get; set; } = new List<HouseHoldMembers>();
    List<AAdministrationPhase> AdministrationPhaseData { get; set; }
    List<AMaritalStatus> MaritalStatusData { get; set; }
    List<AHheducationLevel> EducationLevelData { get; set; }
    List<AExpensePayment> ExpensePaymentData { get; set; }
    List<AHhincomeSource> IncomeSourceData { get; set; }
    List<AYesNo> YesNoData { get; set; }
    List<ASavingScheme> SavingSchemeData { get; set; }
    List<AHhincome> IncomeData { get; set; }
    List<AMemberBenefits> MemberBenefitsData { get; set; }
    List<AHhassets> HouseholdAssetData { get; set; }
    List<AHhincurredExpenses> HouseholdExpenseData { get; set; }
    List<AFoodConsumedSource> FoodConsumedSourceData { get; set; }
    List<ADailyMeals> DailyMealsData { get; set; }
    List<AFoodGroups> FoodGroupsData { get; set; }
    List<AMalnutritionSigns> MalnutritionSignData { get; set; }
    List<AHhapplicableOptions> ApplicableOptionsData { get; set; }
    List<AReferredDisability> ReferredDisabilityData { get; set; }
    List<AHhknownHivstatus> knownHivstatusData { get; set; }
    List<ATuberclosisTreatment> TuberclosisTreatmentData { get; set; }
    List<AHhtreatmentAdherance> TreatmentAdheranceData { get; set; }
    List<AHhviralLoadBloodTest> ViralLoadBloodTestData { get; set; }
    List<AHhviralLoadSuppressed> HHViralLoadSuppressedData { get; set; }
    List<AStableShelter> StableShelterData { get; set; }
    List<AHhpreSchoolNotEnrolled> PreSchoolNotEnrolledData { get; set; }
    List<ASchoolNotProgressingReason> NotProgressingReasonData { get; set; }
    List<AHhchildrenComplications> ChildrenComplicationsData { get; set; }
    List<AHhchildAbuse> ChildAbuseData { get; set; }
    List<AChildAbuseOccurances> ChildAbuseOccurancesData { get; set; }
    List<AGenderBasedViolence> GenderBasedViolenceData { get; set; }
    List<AHhassessmentStatus> HhassessmentStatusData { get; set; }
    List<AHivstatus> HivstatusData { get; set; }
    List<AHasDisability> HasDisabilityData { get; set; }
    List<ASchoolEnrolment> SchoolEnrolmentData { get; set; }
    List<ACareGiver> CareGiverData { get; set; }
    List<AKnownRiskFactors> KnownRiskFactorsData { get; set; }
    List<AProgramParticipationStatus> ProgramParticipationData { get; set; }
    List<AEducationLevel> _EducationLevelData { get; set; }
    List<AVillage> VillageData { get; set; }
    List<AParish> ParishData { get; set; }
    List<ADistrict> DistrictData { get; set; }
    List<ASubcounty> SubcountyData { get; set; }

    private SearchPanel InputModel = new();



    List<AVillage> _VillageData { get; set; }
    List<AParish> _ParishData { get; set; }
    List<ASubcounty> _SubcountyData { get; set; }
    List<ADistrict> _DistrictData { get; set; }
    bool isEnabled { get; set; } = false;

    private async Task  OpenAvatbtnClick()
    {
        await NewAvatDialogue.ShowAsync();
    }
    private async Task CloseAvatbtnClick()
    {
        await NewAvatDialogue.HideAsync();
    }
    private void SaveRegisterBtnClick()
    {
        BeneficiaryRegisterGrid.EndEdit();
    }
    private void CancelRegisterBtnClick()
    {
        BeneficiaryRegisterGrid.CloseEdit();
    }
    private void SaveFormBtnClick()
    {
        HVatGrid.EndEdit();
    }
    private void CancelFormBtnClick()
    {
        HVatGrid.CloseEdit();
    }
    private async Task SaveHVATAddendumBtnClick()
    {
        try
        {
            await HVATAddendumGrid.EndEditAsync();
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    private async Task CancelHVATAddendumBtnClick()
    {
        try
        {
            await HVATAddendumGrid.CloseEditAsync();
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            using (var db = new MUCOBADIContext())
            {
                DistrictData=db.ADistrict.AsNoTracking().ToList();
                SubcountyData=db.ASubcounty.AsNoTracking().ToList();
                YesNoData = db.AYesNo.AsNoTracking().ToList();
                GenderData = db.AGender.AsNoTracking().ToList();
                AdministrationPhaseData = db.AAdministrationPhase.AsNoTracking().ToList();
                MaritalStatusData = db.AMaritalStatus.AsNoTracking().ToList();
                ExpensePaymentData = db.AExpensePayment.AsNoTracking().ToList();
                IncomeSourceData = db.AHhincomeSource.AsNoTracking().ToList();
                SavingSchemeData = db.ASavingScheme.AsNoTracking().ToList();
                IncomeData = db.AHhincome.AsNoTracking().ToList();
                MemberBenefitsData = db.AMemberBenefits.AsNoTracking().ToList();
                HouseholdAssetData = db.AHhassets.AsNoTracking().ToList();
                HouseholdExpenseData = db.AHhincurredExpenses.AsNoTracking().ToList();
                FoodConsumedSourceData = db.AFoodConsumedSource.AsNoTracking().ToList();
                DailyMealsData = db.ADailyMeals.AsNoTracking().ToList();
                FoodGroupsData = db.AFoodGroups.AsNoTracking().ToList();
                MalnutritionSignData = db.AMalnutritionSigns.AsNoTracking().ToList();
                ApplicableOptionsData = db.AHhapplicableOptions.AsNoTracking().ToList();
                ReferredDisabilityData = db.AReferredDisability.AsNoTracking().ToList();
                knownHivstatusData = db.AHhknownHivstatus.AsNoTracking().ToList();
                TuberclosisTreatmentData = db.ATuberclosisTreatment.AsNoTracking().ToList();
                TreatmentAdheranceData = db.AHhtreatmentAdherance.AsNoTracking().ToList();
                ViralLoadBloodTestData = db.AHhviralLoadBloodTest.AsNoTracking().ToList();
                HHViralLoadSuppressedData = db.AHhviralLoadSuppressed.AsNoTracking().ToList();
                StableShelterData = db.AStableShelter.AsNoTracking().ToList();
                PreSchoolNotEnrolledData = db.AHhpreSchoolNotEnrolled.AsNoTracking().ToList();
                NotProgressingReasonData = db.ASchoolNotProgressingReason.AsNoTracking().ToList();
                ChildrenComplicationsData = db.AHhchildrenComplications.AsNoTracking().ToList();
                ChildAbuseData = db.AHhchildAbuse.AsNoTracking().ToList();
                ChildAbuseOccurancesData = db.AChildAbuseOccurances.AsNoTracking().ToList();
                GenderBasedViolenceData = db.AGenderBasedViolence.AsNoTracking().ToList();
                HhassessmentStatusData = db.AHhassessmentStatus.AsNoTracking().ToList();
                HivstatusData = db.AHivstatus.AsNoTracking().ToList();
                HasDisabilityData = db.AHasDisability.AsNoTracking().ToList();
                SchoolEnrolmentData = db.ASchoolEnrolment.AsNoTracking().ToList();
                CareGiverData = db.ACareGiver.AsNoTracking().ToList();
                KnownRiskFactorsData = db.AKnownRiskFactors.AsNoTracking().ToList();
                ProgramParticipationData = db.AProgramParticipationStatus.AsNoTracking().ToList();
                EducationLevelData = db.AHheducationLevel.AsNoTracking().ToList();
                _EducationLevelData = db.AEducationLevel.AsNoTracking().ToList();
                ParishData = db.AParish.AsNoTracking().ToList();
                VillageData = db.AVillage.AsNoTracking().ToList();

                InputModel = new();
                _DistrictData = db.ADistrict.AsNoTracking().ToList();
                var user = db.ViewUserManagement.FirstOrDefault(o => o.UserName == userManagement.GetUserName());
                if (!user.RoleName.Contains("Super Administrator") && !user.RoleName.Contains("Administrator") && !user.RoleName.Contains("mel director") && !user.RoleName.Contains("mel manager") && !user.RoleName.Contains("cluster manager"))
                {
                    var districtlist = userManagement.GetUserDistrict();
                    if (districtlist != null && districtlist.Count > 0)
                    {
                        List<int?> m = new List<int?>();
                        foreach (var n in districtlist)
                        {
                            m.Add(n);
                        }

                        InputModel.DistrictId = m.ToArray();
                        _SubcountyData = db.ASubcounty.AsNoTracking().ToList().Where(o => districtlist.Any(a => a == o.DistrictId)).ToList();
                        MainQuery = new Query();
                        MainQuery.AddParams("DistrictId", string.Join(",", districtlist.ToArray()));
                    }
                    var subcountyList = userManagement.GetUserSubcounty();
                    if (subcountyList != null && subcountyList.Count > 0)
                    {
                        List<int?> m = new List<int?>();
                        foreach (var n in subcountyList)
                        {
                            m.Add(n);
                        }
                        InputModel.SubcountyId = m.ToArray();
                        _ParishData = db.AParish.AsNoTracking().ToList().Where(o => subcountyList.Any(a => a == o.SubcountyId)).ToList();
                        MainQuery = new Query();
                        MainQuery.AddParams("SubcountyId", string.Join(",", subcountyList.ToArray()));
                    }
                }
                else
                {
                    isEnabled = true;
                }
            }

        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    private void SearchRecords()
    {
        try
        {
            MainQuery = new Query();
            if (InputModel.DistrictId != null)
            {
                MainQuery.AddParams("DistrictId", string.Join(",", InputModel.DistrictId));
            }
            if (InputModel.SubcountyId != null)
            {
                MainQuery.AddParams("SubcountyId", string.Join(",", InputModel.SubcountyId));
            }
            if (InputModel.ParishId != null)
            {
                MainQuery.AddParams("ParishId", string.Join(",", InputModel.ParishId));
            }
            if (InputModel.VillageId != null)
            {
                MainQuery.AddParams("VillageId", string.Join(",", InputModel.VillageId));
            }
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    private void ClearSearchBtnClick()
    {
        InputModel = new();
        MainQuery = new Query();
        using (var db = new MUCOBADIContext())
        {
            var user = db.ViewUserManagement.FirstOrDefault(o => o.UserName == userManagement.GetUserName());
            if (!user.RoleName.Contains("Super Administrator") && !user.RoleName.Contains("Administrator") && !user.RoleName.Contains("mel director") && !user.RoleName.Contains("mel manager") && !user.RoleName.Contains("cluster manager"))
            {
                var districtlist = userManagement.GetUserDistrict();
                if (districtlist != null && districtlist.Count > 0)
                {
                    List<int?> m = new List<int?>();
                    foreach (var n in districtlist)
                    {
                        m.Add(n);
                    }

                    InputModel.DistrictId = m.ToArray();
                    _SubcountyData = db.ASubcounty.AsNoTracking().ToList().Where(o => districtlist.Any(a => a == o.DistrictId)).ToList();
                    MainQuery = new Query();
                    MainQuery.AddParams("DistrictId", string.Join(",", districtlist.ToArray()));
                }
                var subcountyList = userManagement.GetUserSubcounty();
                if (subcountyList != null && subcountyList.Count > 0)
                {
                    List<int?> m = new List<int?>();
                    foreach (var n in subcountyList)
                    {
                        m.Add(n);
                    }
                    InputModel.SubcountyId = m.ToArray();
                    _ParishData = db.AParish.AsNoTracking().ToList().Where(o => subcountyList.Any(a => a == o.SubcountyId)).ToList();
                    MainQuery = new Query();
                    MainQuery.AddParams("SubcountyId", string.Join(",", subcountyList.ToArray()));
                }
            }
            else
            {
                isEnabled = true;
            }
        }
    }


    public void OnDistrictChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            using (var db = new MUCOBADIContext())
            {
                _SubcountyData = db.ASubcounty.Where(o => args.Value.Any(a => a == o.DistrictId) == true).AsNoTracking().ToList();
            }
        }
    }
    public void OnSubcountyChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            using (var db = new MUCOBADIContext())
            {
                _ParishData = db.AParish.Where(o => args.Value.Any(a => a == o.SubcountyId) == true).AsNoTracking().ToList();
            }
        }
    }
    public void OnParishChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            using (var db = new MUCOBADIContext())
            {
                _VillageData = db.AVillage.Where(o => args.Value.Any(a => a == o.ParishId) == true).AsNoTracking().ToList();
            }
        }
    }
    private void OnMemberDateChange(ChangedEventArgs<DateTime?> args)
    {
        if (HVATAddendumReviewData.DoB.HasValue)
        {
            HVATAddendumReviewData.Age = (DateTime.Now.Year - HVATAddendumReviewData.DoB.Value.Year);
        }
    }

    private void OnMemberAgeChange()
    {
        if (HVATAddendumReviewData.Age.HasValue)
        {
            HVATAddendumReviewData.DoB = new DateTime((DateTime.Now.Year - HVATAddendumReviewData.Age.Value), 1, 1);
        }
    }
    private void OnDetailDistrictChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ADistrict> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                this.DistricttQuery = new Query().Where(new WhereFilter() { Field = "DistrictId", Operator = "equal", value = args.Value, IgnoreCase = false, IgnoreAccent = false });
                BeneficiaryRegisterData.DistrictDescription = args.ItemData.DistrictDescription;
            }
            SumCareProtection();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnDetailSubcountyChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ASubcounty> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                this.SubcounttyQuery = new Query().Where(new WhereFilter() { Field = "SubcountyId", Operator = "equal", value = args.Value, IgnoreCase = false, IgnoreAccent = false });
                BeneficiaryRegisterData.SubcountyDescription = args.ItemData.SubcountyDescription;
            }
            SumCareProtection();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnDetailVillageChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AVillage> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                BeneficiaryRegisterData.VillageDescription= args.ItemData.VillageDescription;
            }
            SumCareProtection();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnDetailParishChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AParish> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                this.ParishQuery = new Query().Where(new WhereFilter() { Field = "ParishId", Operator = "equal", value = args.Value, IgnoreCase = false, IgnoreAccent = false });
                BeneficiaryRegisterData.ParishDescription = args.ItemData.ParishDescription;
            }
            SumCareProtection();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnMemberBenefitChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        HVatReviewData.MemberBenefitsId = string.Join(",", args.Value);
        if(args.Value.Any(o=> o == 9))
        {
            HVatReviewData.MemberBenefitsScore = 4;
        }
        else if(args.Value.Length==1)
        {
            HVatReviewData.MemberBenefitsScore = 3;
        }
        else if (args.Value.Length == 2)
        {
            HVatReviewData.MemberBenefitsScore = 2;
        }
        else if (args.Value.Length == 3)
        {
            HVatReviewData.MemberBenefitsScore = 1;
        }
        else if (args.Value.Length >3)
        {
            HVatReviewData.MemberBenefitsScore = 0;
        }
        SumEconomicStability();
        StateHasChanged();
    }
    private void OnMemberBenefitBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(HVatReviewData.MemberBenefitsId))
        {
            var a = HVatReviewData.MemberBenefitsId.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            MemberBenefitObj.Value = c.ToArray();
        }
    }
    private void OnHouseholdAssetChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        HVatReviewData.HHAssetsId = string.Join(",", args.Value);
        if(args.Value.Length <= 2 || args.Value.Any(o=> o == 9))
        {
            HVatReviewData.HHAssetsScore = 4;
        }
        else if(args.Value.Length == 3)
        {
            HVatReviewData.HHAssetsScore = 3;
        }
        else if (args.Value.Length == 4)
        {
            HVatReviewData.HHAssetsScore = 2;
        }
        else if (args.Value.Length == 5)
        {
            HVatReviewData.HHAssetsScore = 1;
        }
        else if (args.Value.Length > 4)
        {
            HVatReviewData.HHAssetsScore = 0;
        }
        SumEconomicStability();
        StateHasChanged();
    }
    private void OnHouseholdAssetBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(HVatReviewData.HHAssetsId))
        {
            var a = HVatReviewData.HHAssetsId.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            HouseholdAssetObj.Value = c.ToArray();
        }
    }
    private void OnHouseholdExpenseChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        HVatReviewData.IncurredExpensesId = string.Join(",", args.Value);
        if(args.Value.Any(o=> o == 4))
        {
            // this is if all are no
            HVatReviewData.IncurredExpensesScore = 4;
        }
        else if(args.Value.Length==1)
        {
            // this is if two are no
            HVatReviewData.IncurredExpensesScore = 3;
        }
        else if (args.Value.Length == 2)
        {
            // this is if one is a no
            HVatReviewData.IncurredExpensesScore = 2;
        }
        else if (args.Value.Length == 3)
        {
            // this is if all are yes
            HVatReviewData.IncurredExpensesScore = 0;
        }
        SumEconomicStability();
        StateHasChanged();
    }
    private void OnHouseholdExpenseBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(HVatReviewData.IncurredExpensesId))
        {
            var a = HVatReviewData.IncurredExpensesId.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            HouseholdExpenseObj.Value = c.ToArray();
        }
    }
    private void OnFoodGroupsChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        HVatReviewData.FoodGroupId = string.Join(",", args.Value);
        if(args.Value.Any(o=> o == 4))
        {
            HVatReviewData.FoodGroupScore = 4;
        }
        else if(args.Value.Length == 1)
        {
            HVatReviewData.FoodGroupScore = 3;
        }
        else if (args.Value.Length == 2)
        {
            HVatReviewData.FoodGroupScore = 1;
        }
        else if (args.Value.Length > 2)
        {
            HVatReviewData.FoodGroupScore = 0;
        }
        SumSurvivalHealth();
        StateHasChanged();
    }
    private void OnFoodGroupsBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(HVatReviewData.FoodGroupId))
        {
            var a = HVatReviewData.FoodGroupId.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            FoodGroupObj.Value = c.ToArray();
        }
    }
    private void OnApplicableOptionChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        HVatReviewData.ApplicableOptionId = string.Join(",", args.Value);
        if(args.Value.Length <=2 || args.Value.Any(o=> o == 7))
        {
            HVatReviewData.ApplicableOptionScore = 4;
        }
        else if (args.Value.Length ==3)
        {
            HVatReviewData.ApplicableOptionScore = 3;
        }
        else if (args.Value.Length == 4)
        {
            HVatReviewData.ApplicableOptionScore = 2;
        }
        else if (args.Value.Length == 5)
        {
            HVatReviewData.ApplicableOptionScore = 1;
        }
        else if (args.Value.Length ==6 && args.Value.Any(o => o == 7)== false)
        {
            HVatReviewData.ApplicableOptionScore = 0;
        }

        SumSurvivalHealth();
        StateHasChanged();
    }
    private void OnApplicableOptionBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(HVatReviewData.ApplicableOptionId))
        {
            var a = HVatReviewData.ApplicableOptionId.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            ApplicableOptionObj.Value = c.ToArray();
        }
    }
    private void OnNotProgressingReasonChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        HVatReviewData.ProgressingReasonId = string.Join(",", args.Value);
        if (args.Value.Any(o=> o == 8))
        {
            HVatReviewData.ProgressingReasonScore = 0;
        }
        else if (args.Value.Length >= 4 && args.Value.Any(o => o == 8) == false)
        {
            HVatReviewData.ProgressingReasonScore = 4;
        }
        else if (args.Value.Length ==3 && args.Value.Any(o => o == 8) == false)
        {
            HVatReviewData.ProgressingReasonScore = 3;
        }
        else if (args.Value.Length ==2 && args.Value.Any(o => o == 8) == false)
        {
            HVatReviewData.ProgressingReasonScore = 2;
        }
        else if (args.Value.Length == 1 && args.Value.Any(o => o == 8)== false)
        {
            HVatReviewData.ProgressingReasonScore = 1;
        }
        SumEducationalDevelopment();
    }
    private void OnNotProgressingReasonBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(HVatReviewData.ProgressingReasonId))
        {
            var a = HVatReviewData.ProgressingReasonId.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            NotProgressingReasonObj.Value = c.ToArray();
        }
    }
    private void OnGenderBasedViolenceChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        HVatReviewData.ViolenceId = string.Join(",", args.Value);
        if(args.Value.Any(o=> o == 6))
        {
            HVatReviewData.ViolenceScore = 0;
        }
        else if (args.Value.Length == 3 && args.Value.Any(o => o == 6)== false)
        {
            HVatReviewData.ViolenceScore = 4;
        }
        else if (args.Value.Length == 2 && args.Value.Any(o => o == 6) == false)
        {
            HVatReviewData.ViolenceScore = 3;
        }
        else if (args.Value.Length == 1 && args.Value.Any(o => o == 6) == false)
        {
            HVatReviewData.ViolenceScore = 1;
        }
        else
        {
            HVatReviewData.ViolenceScore = 0;
        }
        SumCareProtection();
    }
    private void OnGenderBasedViolenceBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(HVatReviewData.ViolenceId))
        {
            var a = HVatReviewData.ViolenceId.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            GenderBasedViolenceObj.Value = c.ToArray();
        }
    }
    private void OnExpensePaymentChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AExpensePayment> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                HVatReviewData.ExpensePaymentScore = args.ItemData.ExpensePaymentScore;
            }
            SumEconomicStability();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnincomeSourceChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AHhincomeSource> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                HVatReviewData.IncomeSourceScore = args.ItemData.IncomeSourceScore;
            }
            SumEconomicStability();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnSavingsGroupMemberChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AYesNo> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                if (args.ItemData.YesNoId == 2)
                {
                    HVatReviewData.IsSavingsGroupMemberScore = 1;
                    HVatReviewData.SavingSchemeId=1;
                    HVatReviewData.SavingSchemeScore = 4;
                }
                else
                {
                    HVatReviewData.IsSavingsGroupMemberScore = 0;
                }

            }
            SumEconomicStability();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnSavingSchemeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ASavingScheme> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                HVatReviewData.SavingSchemeScore = args.ItemData.SavingSchemeScore;
            }
            SumEconomicStability();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnIncomeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AHhincome> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                HVatReviewData.HouseHoldIncomeScore = args.ItemData.HouseHoldIncomeScore;
            }
            SumEconomicStability();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    //OnFoodConsumedSourceChange
    private void OnFoodConsumedSourceChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AFoodConsumedSource> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                HVatReviewData.FoodConsumedScore = Convert.ToInt32(args.ItemData.FoodConsumedScore);
            }
            SumSurvivalHealth();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnDailyMealChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ADailyMeals> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                HVatReviewData.MealScore =args.ItemData.MealScore;
            }
            SumSurvivalHealth();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnMalnutritionSignChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AMalnutritionSigns> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                if(args.Value==1 || args.Value == 2)
                {
                    HVatReviewData.MalnutritionSignScore = 4;
                }
                else if (args.Value == 3)
                {
                    HVatReviewData.MalnutritionSignScore = 3;
                }
                else if (args.Value == 4 || args.Value == 5)
                {
                    HVatReviewData.MalnutritionSignScore = 2;
                }
                else if (args.Value == 6)
                {
                    HVatReviewData.MalnutritionSignScore = 1;
                }
                else if (args.Value == 7)
                {
                    HVatReviewData.MalnutritionSignScore = 0;
                }
            }
            SumSurvivalHealth();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnLackofFoodChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AYesNo> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                if(args.Value == 1){
                    HVatReviewData.LackofFoodScore = 1;
                }
                else
                {
                    HVatReviewData.LackofFoodScore = 0;
                }
            }
            SumSurvivalHealth();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnDisabilityChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AYesNo> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                if (args.Value == 1)
                {
                    HVatReviewData.HavePersonWithDisabilityScore = 1;
                }
                else
                {
                    HVatReviewData.HavePersonWithDisabilityScore = 0;
                }
            }
            SumSurvivalHealth();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnLongTermIllnessChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AYesNo> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                if (args.Value == 1)
                {
                    HVatReviewData.HaveLongTermIllnessScore = 1;
                }
                else
                {
                    HVatReviewData.HaveLongTermIllnessScore = 0;
                }
            }
            SumSurvivalHealth();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnReferredDisabilityChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AReferredDisability> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                HVatReviewData.ReferredDisabilityScore = args.ItemData.ReferredDisabilityScore;
            }
            SumSurvivalHealth();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnknownHivstatusChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AHhknownHivstatus> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                HVatReviewData.KnownHIVStatusScore = args.ItemData.KnownHivstatusScores;
            }
            SumSurvivalHealth();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnTuberclosisTreatmentChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ATuberclosisTreatment> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                HVatReviewData.TreatmentScore = args.ItemData.TreatmentScore;
            }
            SumSurvivalHealth();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OntreatmentAdheranceChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AHhtreatmentAdherance> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                HVatReviewData.TreatmentAdheranceScore = args.ItemData.TreatmentAdheranceScore;
            }
            SumSurvivalHealth();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnviralLoadBloodTestChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AHhviralLoadBloodTest> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                HVatReviewData.BloodTestScore = args.ItemData.BloodTestScore;
            }
            SumSurvivalHealth();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnviralLoadSuppressedChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AHhviralLoadSuppressed> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                HVatReviewData.HHViralLoadSuppresedScore = args.ItemData.HhviralLoadSuppresedScores;
            }
            SumSurvivalHealth();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnStableShelterChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AStableShelter> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                HVatReviewData.ShelterScore = args.ItemData.ShelterScores;
            }
            SumSurvivalHealth();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnEnrolledInSchoolChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AYesNo> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                if (args.Value == 2)
                {
                    HVatReviewData.Childrenaged6_17EnrolledInSchoolScore = 1;
                }
                else
                {
                    HVatReviewData.Childrenaged6_17EnrolledInSchoolScore = 0;
                }
            }
            SumEducationalDevelopment();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnAttendedSchoolChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AYesNo> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                if (args.Value == 2)
                {
                    HVatReviewData.Childrenaged6_17AttendedInSchoolScore = 1;
                }
                else
                {
                    HVatReviewData.Childrenaged6_17AttendedInSchoolScore = 0;
                }
            }
            SumEducationalDevelopment();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnpreSchoolNotEnrolledChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AHhpreSchoolNotEnrolled> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                HVatReviewData.PreSchoolNotEnrolledScore = args.ItemData.PreSchoolNotEnrolledScore;
            }
            SumEducationalDevelopment();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnAdultPrimaryCareGiverChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AYesNo> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                if (args.Value == 2)
                {
                    HVatReviewData.SameAdultPrimaryCareGiverScore = 1;
                }
                else
                {
                    HVatReviewData.SameAdultPrimaryCareGiverScore = 0;
                }
            }
            SumCareProtection();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnChildAbuseChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AHhchildAbuse> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                HVatReviewData.ChildAbuseScore = args.ItemData.ChildAbuseScores;
            }
            SumCareProtection();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnChildAbuseOccurancyChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AChildAbuseOccurances> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                if(args.Value==1 || args.Value==4|| args.Value == 5)
                {
                    HVatReviewData.OccuranceScore = 4;
                }
                else if (args.Value == 2 || args.Value == 3 || args.Value == 6)
                {
                    HVatReviewData.OccuranceScore = 3;
                }
                else if (args.Value == 7)
                {
                    HVatReviewData.OccuranceScore = 2;
                }
                else if (args.Value == 8)
                {
                    HVatReviewData.OccuranceScore = 1;
                }
                else
                {
                    HVatReviewData.OccuranceScore = 0;
                }
            }
            SumCareProtection();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnchildrenComplicationsChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, AHhchildrenComplications> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                HVatReviewData.ComplicationsScore = args.ItemData.ComplicationsScores;
            }
            SumCareProtection();
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void SumEconomicStability()
    {
        HVatReviewData.EconomicStabilityTotal = HVatReviewData.MemberBenefitsScore + HVatReviewData.HHAssetsScore + HVatReviewData.IncurredExpensesScore + HVatReviewData.ExpensePaymentScore + HVatReviewData.IncomeSourceScore + HVatReviewData.IsSavingsGroupMemberScore + HVatReviewData.SavingSchemeScore + HVatReviewData.HouseHoldIncomeScore;
    }
    private void SumSurvivalHealth()
    {
        HVatReviewData.SurvivalandHealthTotal = HVatReviewData.FoodConsumedScore + HVatReviewData.FoodGroupScore + HVatReviewData.MealScore + HVatReviewData.LackofFoodScore + HVatReviewData.MalnutritionSignScore + HVatReviewData.ApplicableOptionScore + HVatReviewData.HavePersonWithDisabilityScore + HVatReviewData.HaveLongTermIllnessScore+ HVatReviewData.ReferredDisabilityScore+ HVatReviewData.KnownHIVStatusScore+ HVatReviewData.TreatmentScore + HVatReviewData.TreatmentAdheranceScore+ HVatReviewData.BloodTestScore+ HVatReviewData.HHViralLoadSuppresedScore+ HVatReviewData.ShelterScore;
    }
    private void SumEducationalDevelopment()
    {
        HVatReviewData.EducationandDevelopmentTotal = HVatReviewData.Childrenaged6_17EnrolledInSchoolScore + HVatReviewData.Childrenaged6_17AttendedInSchoolScore + HVatReviewData.PreSchoolNotEnrolledScore + HVatReviewData.ProgressingReasonScore;
    }
    private void SumCareProtection()
    {
        HVatReviewData.CareandProtectionTotal = HVatReviewData.SameAdultPrimaryCareGiverScore + HVatReviewData.ChildAbuseScore + HVatReviewData.OccuranceScore + HVatReviewData.ViolenceScore+ HVatReviewData.ComplicationsScore;
    }
    private int EconomicStabilityPARanking()
    {
        int result = 1;
        double EconomicStabilitypercentage = 0;
        if (HVatReviewData.EconomicStabilityTotal != null && HVatReviewData.EconomicStabilityTotal > 0)
        {
            EconomicStabilitypercentage = ((HVatReviewData.EconomicStabilityTotal.Value / 29) * 100);
        }
        double SurvivalandHealthpercentage = 0;
        if (HVatReviewData.SurvivalandHealthTotal != null && HVatReviewData.SurvivalandHealthTotal > 0)
        {
            SurvivalandHealthpercentage = ((HVatReviewData.SurvivalandHealthTotal.Value / 51) * 100);
        }
        double EducationandDevelopmentpercentage = 0;
        if (HVatReviewData.EducationandDevelopmentTotal != null && HVatReviewData.EducationandDevelopmentTotal > 0)
        {
            EducationandDevelopmentpercentage = ((HVatReviewData.EducationandDevelopmentTotal.Value / 10) * 100);
        }
        double CareandProtectionpercentage = 0;
        if (HVatReviewData.CareandProtectionTotal != null && HVatReviewData.CareandProtectionTotal > 0)
        {
            CareandProtectionpercentage = ((HVatReviewData.CareandProtectionTotal.Value / 20) * 100);
        }

        if (SurvivalandHealthpercentage > EconomicStabilitypercentage)
        {
            result++;
        }
        if (EducationandDevelopmentpercentage > EconomicStabilitypercentage)
        {
            result++;
        }
        if (CareandProtectionpercentage > EconomicStabilitypercentage)
        {
            result++;
        }
        return result;
    }
    private int SurvivalHealthPARanking()
    {
        int result = 1;
        double EconomicStabilitypercentage = 0;
        if (HVatReviewData.EconomicStabilityTotal != null && HVatReviewData.EconomicStabilityTotal > 0)
        {
            EconomicStabilitypercentage = ((HVatReviewData.EconomicStabilityTotal.Value / 29) * 100);
        }
        double SurvivalandHealthpercentage = 0;
        if (HVatReviewData.SurvivalandHealthTotal != null && HVatReviewData.SurvivalandHealthTotal > 0)
        {
            SurvivalandHealthpercentage = ((HVatReviewData.SurvivalandHealthTotal.Value / 51) * 100);
        }
        double EducationandDevelopmentpercentage = 0;
        if (HVatReviewData.EducationandDevelopmentTotal != null && HVatReviewData.EducationandDevelopmentTotal > 0)
        {
            EducationandDevelopmentpercentage = ((HVatReviewData.EducationandDevelopmentTotal.Value / 10) * 100);
        }
        double CareandProtectionpercentage = 0;
        if (HVatReviewData.CareandProtectionTotal != null && HVatReviewData.CareandProtectionTotal > 0)
        {
            CareandProtectionpercentage = ((HVatReviewData.CareandProtectionTotal.Value / 20) * 100);
        }

        if (EconomicStabilitypercentage > SurvivalandHealthpercentage)
        {
            result++;
        }
        if (EducationandDevelopmentpercentage > SurvivalandHealthpercentage)
        {
            result++;
        }
        if (CareandProtectionpercentage > SurvivalandHealthpercentage)
        {
            result++;
        }
        return result;
    }
    private int EducationandDevelopmentPARanking()
    {
        int result = 1;
        double EconomicStabilitypercentage = 0;
        if (HVatReviewData.EconomicStabilityTotal != null && HVatReviewData.EconomicStabilityTotal > 0)
        {
            EconomicStabilitypercentage = ((HVatReviewData.EconomicStabilityTotal.Value / 29) * 100);
        }
        double SurvivalandHealthpercentage = 0;
        if (HVatReviewData.SurvivalandHealthTotal != null && HVatReviewData.SurvivalandHealthTotal > 0)
        {
            SurvivalandHealthpercentage = ((HVatReviewData.SurvivalandHealthTotal.Value / 51) * 100);
        }
        double EducationandDevelopmentpercentage = 0;
        if (HVatReviewData.EducationandDevelopmentTotal != null && HVatReviewData.EducationandDevelopmentTotal > 0)
        {
            EducationandDevelopmentpercentage = ((HVatReviewData.EducationandDevelopmentTotal.Value / 10) * 100);
        }
        double CareandProtectionpercentage = 0;
        if (HVatReviewData.CareandProtectionTotal != null && HVatReviewData.CareandProtectionTotal > 0)
        {
            CareandProtectionpercentage = ((HVatReviewData.CareandProtectionTotal.Value / 20) * 100);
        }

        if (EconomicStabilitypercentage > EducationandDevelopmentpercentage)
        {
            result++;
        }
        if (SurvivalandHealthpercentage > EducationandDevelopmentpercentage)
        {
            result++;
        }
        if (CareandProtectionpercentage > EducationandDevelopmentpercentage)
        {
            result++;
        }
        return result;
    }
    private int CareandProtectionPARanking()
    {
        int result = 1;
        double EconomicStabilitypercentage = 0;
        if (HVatReviewData.EconomicStabilityTotal != null && HVatReviewData.EconomicStabilityTotal > 0)
        {
            EconomicStabilitypercentage = ((HVatReviewData.EconomicStabilityTotal.Value / 29) * 100);
        }
        double SurvivalandHealthpercentage = 0;
        if (HVatReviewData.SurvivalandHealthTotal != null && HVatReviewData.SurvivalandHealthTotal > 0)
        {
            SurvivalandHealthpercentage = ((HVatReviewData.SurvivalandHealthTotal.Value / 51) * 100);
        }
        double EducationandDevelopmentpercentage = 0;
        if (HVatReviewData.EducationandDevelopmentTotal != null && HVatReviewData.EducationandDevelopmentTotal > 0)
        {
            EducationandDevelopmentpercentage = ((HVatReviewData.EducationandDevelopmentTotal.Value / 10) * 100);
        }
        double CareandProtectionpercentage = 0;
        if (HVatReviewData.CareandProtectionTotal != null && HVatReviewData.CareandProtectionTotal > 0)
        {
            CareandProtectionpercentage = ((HVatReviewData.CareandProtectionTotal.Value / 20) * 100);
        }

        if (EconomicStabilitypercentage > CareandProtectionpercentage)
        {
            result++;
        }
        if (SurvivalandHealthpercentage > CareandProtectionpercentage)
        {
            result++;
        }
        if (EducationandDevelopmentpercentage > CareandProtectionpercentage)
        {
            result++;
        }
        return result;
    }

    #region Beneficiary Register
    public class HVATBeneficiaryRegisterAdapter : DataAdaptor
    {
        public IToastService toastService;
        //private UserManagement _userManagement;
        public HVATBeneficiaryRegisterAdapter(IToastService ts/*, UserManagement userManagement*/)
        {
            //_userManagement = userManagement;
            toastService = ts;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<spBeneficiaryIdentificationRegisterGetAllResult>();
            try
            {
                string DistrictId = null;
                string SubcountyId = null;
                string ParishId = null;
                string VillageId = null;
                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;
                    if (val.FirstOrDefault(o => o.Key == "DistrictId").Value != null)
                    {
                        DistrictId = val.FirstOrDefault(o => o.Key == "DistrictId").Value.ToString();
                    }
                    if (val.FirstOrDefault(o => o.Key == "SubcountyId").Value != null)
                    {
                        SubcountyId = val.FirstOrDefault(o => o.Key == "SubcountyId").Value.ToString();
                    }
                    if (val.FirstOrDefault(o => o.Key == "ParishId").Value != null)
                    {
                        ParishId = val.FirstOrDefault(o => o.Key == "ParishId").Value.ToString();
                    }
                    if (val.FirstOrDefault(o => o.Key == "VillageId").Value != null)
                    {
                        VillageId = val.FirstOrDefault(o => o.Key == "VillageId").Value.ToString();
                    }
                }
                using (var dbContext = new SPToCoreContext())
                {
                    data = await dbContext.spBeneficiaryIdentificationRegisterGetAllAsync(DistrictId, SubcountyId, ParishId, VillageId, null, null, null);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<spBeneficiaryIdentificationRegisterGetAllResult>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override Object Insert(DataManager dataManager, object value, string key)
        {
            return value;
        }
        public override object Remove(DataManager dataManager, object value, string keyField, string key)
        {
            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            return value;
        }
    }
    public void BeneficiaryRegisterActionComplete(ActionEventArgs<spBeneficiaryIdentificationRegisterGetAllResult> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            BeneficiaryRegisterGrid.PreventRender(false);
            //using (var db = new MUCOBADIContext())
            //{
            //    HouseHoldMembersData = db.HouseHoldMembers.Where(o => o.HouseHoldId == args.Data.HouseHoldId).AsNoTracking().ToList();
            //}
        }
    }
    #endregion Beneficiary Register
    #region Enrolment Register Header
    public class HvatAdapter : DataAdaptor
    {
        public IToastService toastService;
        //private UserManagement _userManagement;
        public HvatAdapter(IToastService ts/*, UserManagement userManagement*/)
        {
            //_userManagement = userManagement;
            toastService = ts;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<spHVATGetAllResult>();
            try
            {
                string HouseHoldId = null;
                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;
                    if (val.FirstOrDefault(o => o.Key == "HouseHoldId").Value != null)
                    {
                        HouseHoldId = val.FirstOrDefault(o => o.Key == "HouseHoldId").Value.ToString();
                    }
                }
                using (var dbContext = new SPToCoreContext())
                {
                    data = await dbContext.spHVATGetAllAsync(HouseHoldId);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<spHVATGetAllResult>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override Object Insert(DataManager dataManager, object value, string key)
        {
            try
            {
                using (var dbContext = new MUCOBADIContext())
                {
                    var val = (value as spHVATGetAllResult);
                    var exists = dbContext.Hvat.FirstOrDefault(o => o.Hvatid == val.HVATId);
                    if (exists == null)
                    {
                        Hvat m = new Hvat();

                        int id = 1;
                        var last = dbContext.Hvat.OrderBy(o => o.Hvatid).LastOrDefault();
                        if (last != null)
                        {
                            id = (last.Hvatid + 1);
                        }
                        m.Hvatid = id;
                        m.HouseHoldId = val.HouseHoldId;
                        m.ServiceProviderName = val.ServiceProviderName;
                        m.ServiceProviderContact = val.ServiceProviderContact;
                        m.Cdoname = val.CDOName;
                        m.Cdocontact = val.CDOContact;
                        m.Hhnin = val.HHNIN;
                        m.AdministrationPhaseId = val.AdministrationPhaseId;
                        m.MaritalStatusId = val.MaritalStatusId;
                        m.HheducationLevelId = val.HHEducationLevelId;
                        m.ExpensePaymentId = val.ExpensePaymentId;
                        m.ExpensePaymentScore = val.ExpensePaymentScore;
                        m.IncomeSourceId = val.IncomeSourceId;
                        m.IncomeSourceScore = val.IncomeSourceScore;
                        m.IsSavingsGroupMember = val.IsSavingsGroupMember;
                        m.IsSavingsGroupMemberScore = val.IsSavingsGroupMemberScore;
                        m.SavingSchemeId = val.SavingSchemeId;
                        m.SavingSchemeScore = val.SavingSchemeScore;
                        m.MemberBenefitsId = val.MemberBenefitsId;
                        m.MemberBenefitsScore = val.MemberBenefitsScore;
                        m.HouseHoldIncomeId = val.HouseHoldIncomeId;
                        m.HouseHoldIncomeScore = val.HouseHoldIncomeScore;
                        m.HhassetsId = val.HHAssetsId;
                        m.HhassetsScore = val.HHAssetsScore;
                        m.IncurredExpensesId = val.IncurredExpensesId;
                        m.IncurredExpensesScore = val.IncurredExpensesScore;
                        m.EconomicStabilityTotal = val.EconomicStabilityTotal;
                        m.FoodConsumedId = val.FoodConsumedId;
                        m.FoodConsumedScore = val.FoodConsumedScore;
                        m.FoodGroupId = val.FoodGroupId;
                        m.FoodGroupScore = val.FoodGroupScore;
                        m.MealId = val.MealId;
                        m.MealScore = val.MealScore;
                        m.LackofFood = val.LackofFood;
                        m.LackofFoodScore = val.LackofFoodScore;
                        m.MalnutritionSignId = val.MalnutritionSignId;
                        m.MalnutritionSignScore = val.MalnutritionSignScore;
                        m.ApplicableOptionId = val.ApplicableOptionId;
                        m.ApplicableOptionScore = val.ApplicableOptionScore;
                        m.HavePersonWithDisability = val.HavePersonWithDisability;
                        m.HavePersonWithDisabilityScore = val.HavePersonWithDisabilityScore;
                        m.HaveLongTermIllness = val.HaveLongTermIllness;
                        m.HaveLongTermIllnessScore = val.HaveLongTermIllnessScore;
                        m.ReferredDisabilityId = val.ReferredDisabilityId;
                        m.ReferredDisabilityScore = val.ReferredDisabilityScore;
                        m.KnownHivstatusId = val.KnownHIVStatusId;
                        m.KnownHivstatusScore = val.KnownHIVStatusScore;
                        m.TreatmentId = val.TreatmentId;
                        m.TreatmentScore = val.TreatmentScore;
                        m.TreatmentAdheranceId = val.TreatmentAdheranceId;
                        m.TreatmentAdheranceScore = val.TreatmentAdheranceScore;
                        m.BloodTestId = val.BloodTestId;
                        m.BloodTestScore = val.BloodTestScore;
                        m.HhviralLoadSuppresedId = val.HHViralLoadSuppresedId;
                        m.HhviralLoadSuppresedScore = val.HHViralLoadSuppresedScore;
                        m.ShelterId = val.ShelterId;
                        m.ShelterScore = val.ShelterScore;
                        m.SurvivalandHealthTotal = val.SurvivalandHealthTotal;
                        m.Childrenaged617enrolledInSchool = val.Childrenaged6_17EnrolledInSchool;
                        m.Childrenaged617attendedInSchool = val.Childrenaged6_17AttendedInSchool;
                        m.PreSchoolNotEnrolledId = val.PreSchoolNotEnrolledId;
                        m.PreSchoolNotEnrolledScore = val.PreSchoolNotEnrolledScore;
                        m.ChildrenChildProgressing = val.Children_ChildProgressing;
                        m.ProgressingReasonId = val.ProgressingReasonId;
                        m.ProgressingReasonScore = val.ProgressingReasonScore;
                        m.EducationandDevelopmentTotal = val.EducationandDevelopmentTotal;
                        m.SameAdultPrimaryCareGiver = val.SameAdultPrimaryCareGiver;
                        m.ComplicationsId = val.ComplicationsId;
                        m.ComplicationsScore = val.ComplicationsScore;
                        m.ChildAbuseId = val.ChildAbuseId;
                        m.ChildAbuseScore = val.ChildAbuseScore;
                        m.OccuranceId = val.OccuranceId;
                        m.OccuranceScore = val.OccuranceScore;
                        m.ViolenceId = val.ViolenceId;
                        m.ViolenceScore = val.ViolenceScore;
                        m.CareandProtectionTotal = val.CareandProtectionTotal;
                        m.HhtotalScore = val.HHTotalScore;
                        m.AveragePercentage = val.AveragePercentage;
                        m.AssessmentStatusId = val.AssessmentStatusId;
                        m.AssessmentDate = val.AssessmentDate;
                        m.AssessorObservation = val.AssessorObservation;
                        m.AssessorName = val.AssessorName;
                        m.AssessorTitle = val.AssessorTitle;
                        m.AssessorContact = val.AssessorContact;

                        m.Childrenaged617attendedInSchoolScore = val.Childrenaged6_17AttendedInSchoolScore;
                        m.Childrenaged617enrolledInSchoolScore = val.Childrenaged6_17EnrolledInSchoolScore;
                        m.SameAdultPrimaryCareGiverScore = val.SameAdultPrimaryCareGiverScore;

                        dbContext.Hvat.Add(m);
                        dbContext.SaveChanges();
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }
        public override object Remove(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                int data = (int)value;
                using (var dbContext = new MUCOBADIContext())
                {
                    //var exists = dbContext.spHVATGetAllResult.FirstOrDefault(o => o.spHVATGetAllResultId == data);
                    //if (exists != null)
                    //{
                    //    dbContext.spHVATGetAllResult.Remove(exists);
                    //}
                    //await dbContext.SaveChangesAsync();
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }


            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                using (var db = new MUCOBADIContext())
                {
                    var val = (value as spHVATGetAllResult);
                    var exist = db.Hvat.FirstOrDefault(o => o.Hvatid == val.HVATId);
                    if (exist != null)
                    {
                        exist.ServiceProviderName = val.ServiceProviderName;
                        exist.ServiceProviderContact = val.ServiceProviderContact;
                        exist.Cdoname = val.CDOName;
                        exist.Cdocontact = val.CDOContact;
                        exist.Hhnin = val.HHNIN;
                        exist.AdministrationPhaseId = val.AdministrationPhaseId;
                        exist.MaritalStatusId = val.MaritalStatusId;
                        exist.HheducationLevelId = val.HHEducationLevelId;
                        exist.ExpensePaymentId = val.ExpensePaymentId;
                        exist.ExpensePaymentScore = val.ExpensePaymentScore;
                        exist.IncomeSourceId = val.IncomeSourceId;
                        exist.IncomeSourceScore = val.IncomeSourceScore;
                        exist.IsSavingsGroupMember = val.IsSavingsGroupMember;
                        exist.IsSavingsGroupMemberScore = val.IsSavingsGroupMemberScore;
                        exist.SavingSchemeId = val.SavingSchemeId;
                        exist.SavingSchemeScore = val.SavingSchemeScore;
                        exist.MemberBenefitsId = val.MemberBenefitsId;
                        exist.MemberBenefitsScore = val.MemberBenefitsScore;
                        exist.HouseHoldIncomeId = val.HouseHoldIncomeId;
                        exist.HouseHoldIncomeScore = val.HouseHoldIncomeScore;
                        exist.HhassetsId = val.HHAssetsId;
                        exist.HhassetsScore = val.HHAssetsScore;
                        exist.IncurredExpensesId = val.IncurredExpensesId;
                        exist.IncurredExpensesScore = val.IncurredExpensesScore;
                        exist.EconomicStabilityTotal = val.EconomicStabilityTotal;
                        exist.FoodConsumedId = val.FoodConsumedId;
                        exist.FoodConsumedScore = val.FoodConsumedScore;
                        exist.FoodGroupId = val.FoodGroupId;
                        exist.FoodGroupScore = val.FoodGroupScore;
                        exist.MealId = val.MealId;
                        exist.MealScore = val.MealScore;
                        exist.LackofFood = val.LackofFood;
                        exist.LackofFoodScore = val.LackofFoodScore;
                        exist.MalnutritionSignId = val.MalnutritionSignId;
                        exist.MalnutritionSignScore = val.MalnutritionSignScore;
                        exist.ApplicableOptionId = val.ApplicableOptionId;
                        exist.ApplicableOptionScore = val.ApplicableOptionScore;
                        exist.HavePersonWithDisability = val.HavePersonWithDisability;
                        exist.HavePersonWithDisabilityScore = val.HavePersonWithDisabilityScore;
                        exist.HaveLongTermIllness = val.HaveLongTermIllness;
                        exist.HaveLongTermIllnessScore = val.HaveLongTermIllnessScore;
                        exist.ReferredDisabilityId = val.ReferredDisabilityId;
                        exist.ReferredDisabilityScore = val.ReferredDisabilityScore;
                        exist.KnownHivstatusId = val.KnownHIVStatusId;
                        exist.KnownHivstatusScore = val.KnownHIVStatusScore;
                        exist.TreatmentId = val.TreatmentId;
                        exist.TreatmentScore = val.TreatmentScore;
                        exist.TreatmentAdheranceId = val.TreatmentAdheranceId;
                        exist.TreatmentAdheranceScore = val.TreatmentAdheranceScore;
                        exist.BloodTestId = val.BloodTestId;
                        exist.BloodTestScore = val.BloodTestScore;
                        exist.HhviralLoadSuppresedId = val.HHViralLoadSuppresedId;
                        exist.HhviralLoadSuppresedScore = val.HHViralLoadSuppresedScore;
                        exist.ShelterId = val.ShelterId;
                        exist.ShelterScore = val.ShelterScore;
                        exist.SurvivalandHealthTotal = val.SurvivalandHealthTotal;
                        exist.Childrenaged617enrolledInSchool = val.Childrenaged6_17EnrolledInSchool;
                        exist.Childrenaged617attendedInSchool = val.Childrenaged6_17AttendedInSchool;
                        exist.PreSchoolNotEnrolledId = val.PreSchoolNotEnrolledId;
                        exist.PreSchoolNotEnrolledScore = val.PreSchoolNotEnrolledScore;
                        exist.ChildrenChildProgressing = val.Children_ChildProgressing;
                        exist.ProgressingReasonId = val.ProgressingReasonId;
                        exist.ProgressingReasonScore = val.ProgressingReasonScore;
                        exist.EducationandDevelopmentTotal = val.EducationandDevelopmentTotal;
                        exist.SameAdultPrimaryCareGiver = val.SameAdultPrimaryCareGiver;
                        exist.ComplicationsId = val.ComplicationsId;
                        exist.ComplicationsScore = val.ComplicationsScore;
                        exist.ChildAbuseId = val.ChildAbuseId;
                        exist.ChildAbuseScore = val.ChildAbuseScore;
                        exist.OccuranceId = val.OccuranceId;
                        exist.OccuranceScore = val.OccuranceScore;
                        exist.ViolenceId = val.ViolenceId;
                        exist.ViolenceScore = val.ViolenceScore;
                        exist.CareandProtectionTotal = val.CareandProtectionTotal;
                        exist.HhtotalScore = val.HHTotalScore;
                        exist.AveragePercentage = val.AveragePercentage;
                        exist.AssessmentStatusId = val.AssessmentStatusId;
                        exist.AssessmentDate = val.AssessmentDate;
                        exist.AssessorObservation = val.AssessorObservation;
                        exist.AssessorName = val.AssessorName;
                        exist.AssessorTitle = val.AssessorTitle;
                        exist.AssessorContact = val.AssessorContact;

                        exist.Childrenaged617attendedInSchoolScore = val.Childrenaged6_17AttendedInSchoolScore;
                        exist.Childrenaged617enrolledInSchoolScore = val.Childrenaged6_17EnrolledInSchoolScore;
                        exist.SameAdultPrimaryCareGiverScore = val.SameAdultPrimaryCareGiverScore;
                        db.Entry(exist).State = EntityState.Modified;
                        await db.SaveChangesAsync();
                    }

                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
        //public void saveLog(int HouseHoldId, string Editedcolumn, string previousvalue, string newvalue, string actiontaken)
        //{
        //    try
        //    {
        //        using (var db = new MUCOBADIContext())
        //        {
        //            double id = 1;
        //            var exist = db.spHVATGetAllResultLog.OrderBy(o => o.HouseHoldLogId).LastOrDefault();
        //            if (exist != null)
        //            {
        //                id = (exist.HouseHoldLogId + 1);
        //            }
        //            spHVATGetAllResultLog m = new spHVATGetAllResultLog()
        //            {
        //                HouseHoldLogId = id,
        //                ColumnEdited = Editedcolumn,
        //                HouseHoldId = HouseHoldId,
        //                PreviousValue = previousvalue,
        //                NewValue = newvalue,
        //                // ActionMadeBy = _userManagement.GetStaffName(),
        //                ActionDate = DateTime.Now,
        //                ActionTaken = actiontaken
        //            };
        //            db.spHVATGetAllResultLog.Add(m);
        //            db.SaveChanges();
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        toastService.ShowError(ex.Message.ToString());
        //    }
        //}
    }
    public async Task OnHvatActionBegin(ActionEventArgs<spHVATGetAllResult> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {
                this.SubcounttyQuery = new Query().Where(new WhereFilter() { Field = "SubcountyId", Operator = "equal", value = BeneficiaryRegisterData.SubcountyId, IgnoreCase = false, IgnoreAccent = false });


                this.DistricttQuery = new Query().Where(new WhereFilter() { Field = "DistrictId", Operator = "equal", value = BeneficiaryRegisterData.DistrictId, IgnoreCase = false, IgnoreAccent = false });
                this.ParishQuery = new Query().Where(new WhereFilter() { Field = "ParishId", Operator = "equal", value = BeneficiaryRegisterData.ParishId, IgnoreCase = false, IgnoreAccent = false });
                HVATAddendumData = new List<HouseHoldMembers>();
                using (var db = new SPToCoreContext())
                {
                    HVATAddendumData = await db.HouseHoldMembers.Where(o=> o.HouseHoldId ==BeneficiaryRegisterData.HouseHoldId).ToListAsync();
                }
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {
                this.SubcounttyQuery = new Query().Where(new WhereFilter() { Field = "SubcountyId", Operator = "equal", value = BeneficiaryRegisterData.SubcountyId, IgnoreCase = false, IgnoreAccent = false });


                this.DistricttQuery = new Query().Where(new WhereFilter() { Field = "DistrictId", Operator = "equal", value = BeneficiaryRegisterData.DistrictId, IgnoreCase = false, IgnoreAccent = false });
                this.ParishQuery = new Query().Where(new WhereFilter() { Field = "ParishId", Operator = "equal", value = BeneficiaryRegisterData.ParishId, IgnoreCase = false, IgnoreAccent = false });
                args.RowData.HouseHoldId = BeneficiaryRegisterData.HouseHoldId;
                HVATAddendumData = new List<HouseHoldMembers>();
                using(var db = new SPToCoreContext())
                {
                    HVATAddendumData = await db.HouseHoldMembers.Where(o => o.HouseHoldId == BeneficiaryRegisterData.HouseHoldId).ToListAsync();
                }

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (args.Data.HHTotalScore == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please answer all questions", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (string.IsNullOrEmpty(args.Data.ServiceProviderName))
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the name of the service provider", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                //else if (string.IsNullOrEmpty(args.Data.ServiceProviderContact))
                //{
                //    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Contact of the service provider", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                //    args.Cancel = true;
                //}
                else if (string.IsNullOrEmpty(args.Data.CDOName))
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the name of the Sub-County Community Development Officer(CDO)", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (string.IsNullOrEmpty(args.Data.CDOContact))
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Contact of the Sub-County Community Development Officer(CDO)", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (args.Data.AdministrationPhaseId == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Phase of Administration", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (args.Data.AssessmentDate == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Assessment Date", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (args.Data.MaritalStatusId == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Marital status of the household head", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (args.Data.HHEducationLevelId == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Level of Education of the household head", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (string.IsNullOrEmpty(args.Data.AssessorName))
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Name of the Assessor", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (string.IsNullOrEmpty(args.Data.AssessorContact))
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Contact of the Assessor", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (string.IsNullOrEmpty(args.Data.AssessorTitle))
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Title of the Assessor", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else
                {
                    using (var dbContext = new MUCOBADIContext())
                    {
                        var mexists = dbContext.Hvat.FirstOrDefault(o => o.HouseHoldId == args.Data.HouseHoldId && o.AssessmentDate == args.Data.AssessmentDate);
                        if (mexists != null && mexists.Hvatid != args.Data.HVATId)
                        {
                            await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "This house hold already has an assessment record on this day in the system.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                            args.Cancel = true;
                        }
                        else
                        {
                            var exists = dbContext.Hvat.FirstOrDefault(o => o.Hvatid == args.Data.HVATId);
                            if (exists == null)
                            {
                                Hvat m = new Hvat();

                                int id = 1;
                                var last = dbContext.Hvat.OrderBy(o => o.Hvatid).LastOrDefault();
                                if (last != null)
                                {
                                    id = (last.Hvatid + 1);
                                }
                                m.Hvatid = id;
                                args.Data.HVATId = id;
                                m.HouseHoldId = args.Data.HouseHoldId;
                                m.ServiceProviderName = args.Data.ServiceProviderName;
                                m.ServiceProviderContact = args.Data.ServiceProviderContact;
                                m.Cdoname = args.Data.CDOName;
                                m.Cdocontact = args.Data.CDOContact;
                                m.Hhnin = args.Data.HHNIN;
                                m.AdministrationPhaseId = args.Data.AdministrationPhaseId;
                                m.MaritalStatusId = args.Data.MaritalStatusId;
                                m.HheducationLevelId = args.Data.HHEducationLevelId;
                                m.ExpensePaymentId = args.Data.ExpensePaymentId;
                                m.ExpensePaymentScore = args.Data.ExpensePaymentScore;
                                m.IncomeSourceId = args.Data.IncomeSourceId;
                                m.IncomeSourceScore = args.Data.IncomeSourceScore;
                                m.IsSavingsGroupMember = args.Data.IsSavingsGroupMember;
                                m.IsSavingsGroupMemberScore = args.Data.IsSavingsGroupMemberScore;
                                m.SavingSchemeId = args.Data.SavingSchemeId;
                                m.SavingSchemeScore = args.Data.SavingSchemeScore;
                                m.MemberBenefitsId = args.Data.MemberBenefitsId;
                                m.MemberBenefitsScore = args.Data.MemberBenefitsScore;
                                m.HouseHoldIncomeId = args.Data.HouseHoldIncomeId;
                                m.HouseHoldIncomeScore = args.Data.HouseHoldIncomeScore;
                                m.HhassetsId = args.Data.HHAssetsId;
                                m.HhassetsScore = args.Data.HHAssetsScore;
                                m.IncurredExpensesId = args.Data.IncurredExpensesId;
                                m.IncurredExpensesScore = args.Data.IncurredExpensesScore;
                                m.EconomicStabilityTotal = args.Data.EconomicStabilityTotal;
                                m.FoodConsumedId = args.Data.FoodConsumedId;
                                m.FoodConsumedScore = args.Data.FoodConsumedScore;
                                m.FoodGroupId = args.Data.FoodGroupId;
                                m.FoodGroupScore = args.Data.FoodGroupScore;
                                m.MealId = args.Data.MealId;
                                m.MealScore = args.Data.MealScore;
                                m.LackofFood = args.Data.LackofFood;
                                m.LackofFoodScore = args.Data.LackofFoodScore;
                                m.MalnutritionSignId = args.Data.MalnutritionSignId;
                                m.MalnutritionSignScore = args.Data.MalnutritionSignScore;
                                m.ApplicableOptionId = args.Data.ApplicableOptionId;
                                m.ApplicableOptionScore = args.Data.ApplicableOptionScore;
                                m.HavePersonWithDisability = args.Data.HavePersonWithDisability;
                                m.HavePersonWithDisabilityScore = args.Data.HavePersonWithDisabilityScore;
                                m.HaveLongTermIllness = args.Data.HaveLongTermIllness;
                                m.HaveLongTermIllnessScore = args.Data.HaveLongTermIllnessScore;
                                m.ReferredDisabilityId = args.Data.ReferredDisabilityId;
                                m.ReferredDisabilityScore = args.Data.ReferredDisabilityScore;
                                m.KnownHivstatusId = args.Data.KnownHIVStatusId;
                                m.KnownHivstatusScore = args.Data.KnownHIVStatusScore;
                                m.TreatmentId = args.Data.TreatmentId;
                                m.TreatmentScore = args.Data.TreatmentScore;
                                m.TreatmentAdheranceId = args.Data.TreatmentAdheranceId;
                                m.TreatmentAdheranceScore = args.Data.TreatmentAdheranceScore;
                                m.BloodTestId = args.Data.BloodTestId;
                                m.BloodTestScore = args.Data.BloodTestScore;
                                m.HhviralLoadSuppresedId = args.Data.HHViralLoadSuppresedId;
                                m.HhviralLoadSuppresedScore = args.Data.HHViralLoadSuppresedScore;
                                m.ShelterId = args.Data.ShelterId;
                                m.ShelterScore = args.Data.ShelterScore;
                                m.SurvivalandHealthTotal = args.Data.SurvivalandHealthTotal;
                                m.Childrenaged617enrolledInSchool = args.Data.Childrenaged6_17EnrolledInSchool;
                                m.Childrenaged617attendedInSchool = args.Data.Childrenaged6_17AttendedInSchool;
                                m.PreSchoolNotEnrolledId = args.Data.PreSchoolNotEnrolledId;
                                m.PreSchoolNotEnrolledScore = args.Data.PreSchoolNotEnrolledScore;
                                m.ChildrenChildProgressing = args.Data.Children_ChildProgressing;
                                m.ProgressingReasonId = args.Data.ProgressingReasonId;
                                m.ProgressingReasonScore = args.Data.ProgressingReasonScore;
                                m.EducationandDevelopmentTotal = args.Data.EducationandDevelopmentTotal;
                                m.SameAdultPrimaryCareGiver = args.Data.SameAdultPrimaryCareGiver;
                                m.ComplicationsId = args.Data.ComplicationsId;
                                m.ComplicationsScore = args.Data.ComplicationsScore;
                                m.ChildAbuseId = args.Data.ChildAbuseId;
                                m.ChildAbuseScore = args.Data.ChildAbuseScore;
                                m.OccuranceId = args.Data.OccuranceId;
                                m.OccuranceScore = args.Data.OccuranceScore;
                                m.ViolenceId = args.Data.ViolenceId;
                                m.ViolenceScore = args.Data.ViolenceScore;
                                m.CareandProtectionTotal = args.Data.CareandProtectionTotal;
                                m.HhtotalScore = args.Data.HHTotalScore;
                                m.AveragePercentage = args.Data.AveragePercentage;
                                m.AssessmentStatusId = args.Data.AssessmentStatusId;
                                m.AssessmentDate = args.Data.AssessmentDate;
                                m.AssessorObservation = args.Data.AssessorObservation;
                                m.AssessorName = args.Data.AssessorName;
                                m.AssessorTitle = args.Data.AssessorTitle;
                                m.AssessorContact = args.Data.AssessorContact;

                                m.Childrenaged617attendedInSchoolScore = args.Data.Childrenaged6_17AttendedInSchoolScore;
                                m.Childrenaged617enrolledInSchoolScore = args.Data.Childrenaged6_17EnrolledInSchoolScore;
                                m.SameAdultPrimaryCareGiverScore = args.Data.SameAdultPrimaryCareGiverScore;

                                dbContext.Hvat.Add(m);
                                dbContext.SaveChanges();
                            }
                            if (HVATAddendumData.Count > 0)
                            {
                                foreach (var n in HVATAddendumData)
                                {
                                    string householdMemberCode = BeneficiaryRegisterData.HouseHoldCode + "-" + n.HouseHoldMemberCode.Substring((n.HouseHoldMemberCode.Length - 2), 2);
                                    n.HouseHoldMemberCode = householdMemberCode;
                                    var _exists = dbContext.HouseHoldMembers.FirstOrDefault(o => o.HouseHoldMemberId == n.HouseHoldMemberId);
                                    if (_exists == null)
                                    {
                                        int id = 1;
                                        var last = dbContext.HouseHoldMembers.OrderBy(o => o.HouseHoldMemberId).LastOrDefault();
                                        if (last != null)
                                        {
                                            id = (last.HouseHoldMemberId + 1);
                                        }
                                        n.HouseHoldMemberId = id;
                                        dbContext.HouseHoldMembers.Add(n);
                                        dbContext.SaveChanges();
                                    }
                                    else
                                    {
                                        dbContext.Entry(_exists).CurrentValues.SetValues(n);
                                        dbContext.Entry(_exists).State = EntityState.Modified;
                                        dbContext.SaveChanges();
                                    }
                                }
                            }
                        }

                        var household = dbContext.BeneficiaryIdentificationRegister.FirstOrDefault(o=> o.HouseHoldId== BeneficiaryRegisterData.HouseHoldId);
                        if(household != null)
                        {
                            household.ParishId= BeneficiaryRegisterData.ParishId;
                            household.VillageId= BeneficiaryRegisterData.VillageId;
                            household.DistrictId = BeneficiaryRegisterData.DistrictId;
                            household.SubcountyId = BeneficiaryRegisterData.SubcountyId;
                            dbContext.Entry(household).State = EntityState.Modified;
                            dbContext.SaveChanges();
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    public void OnHvatActionComplete(ActionEventArgs<spHVATGetAllResult> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            HVatGrid.PreventRender(false);
        }
    }
    #endregion Enrolment Register Header
    public class HVATAddendumAdapter : DataAdaptor
    {
        public IToastService toastService;
        //private UserManagement _userManagement;
        public HVATAddendumAdapter(IToastService ts/*, UserManagement userManagement*/)
        {
            //_userManagement = userManagement;
            toastService = ts;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<HouseHoldMembers>();
            try
            {
                int? HouseHoldId = null;
                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;
                    if (val.FirstOrDefault(o => o.Key == "HouseHoldId").Value != null)
                    {
                        HouseHoldId = Convert.ToInt32(val.FirstOrDefault(o => o.Key == "HouseHoldId").Value.ToString());
                    }
                }
                using (var dbContext = new MUCOBADIContext())
                {
                    data = await dbContext.HouseHoldMembers.Where(o => o.HouseHoldId == HouseHoldId).ToListAsync();
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<HouseHoldMembers>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override Object Insert(DataManager dataManager, object value, string key)
        {
            try
            {
                using (var dbContext = new MUCOBADIContext())
                {
                    var val = (value as HouseHoldMembers);
                    var exists = dbContext.HouseHoldMembers.FirstOrDefault(o => o.HouseHoldMemberId == val.HouseHoldMemberId);
                    if (exists == null)
                    {
                        int id = 1;
                        var last = dbContext.HouseHoldMembers.OrderBy(o => o.HouseHoldMemberId).LastOrDefault();
                        if (last != null)
                        {
                            id = (last.HouseHoldMemberId + 1);
                        }
                        val.HouseHoldMemberId = id;
                        if (!val.HouseHoldMemberCode.Contains("-"))
                        {
                            string householdCode = val.HouseHoldMemberCode.Substring(0, 2) + "-" + val.HouseHoldMemberCode.Substring(2, 2) + "-" + val.HouseHoldMemberCode.Substring(4, 4);
                            string householdMemberCode = householdCode + "-" + val.HouseHoldMemberCode.Substring((val.HouseHoldMemberCode.Length - 2), 2);
                            val.HouseHoldMemberCode = householdMemberCode;
                        }
                        //val.AddedBy = _userManagement.GetStaffName();
                        //val.AddedDate = DateTime.Now;
                        dbContext.HouseHoldMembers.Add(val);
                        dbContext.SaveChanges();
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }
        public override object Remove(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                int data = (int)value;
                using (var dbContext = new MUCOBADIContext())
                {
                    //var exists = dbContext.BeneficiaryIdentificationRegister.FirstOrDefault(o => o.BeneficiaryIdentificationRegisterId == data);
                    //if (exists != null)
                    //{
                    //    dbContext.BeneficiaryIdentificationRegister.Remove(exists);
                    //}
                    //await dbContext.SaveChangesAsync();
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }


            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                using (var db = new MUCOBADIContext())
                {
                    var val = (value as HouseHoldMembers);
                    var exist = db.HouseHoldMembers.FirstOrDefault(o => o.HouseHoldMemberId == val.HouseHoldMemberId);
                    if (exist != null)
                    {
                        if (!val.HouseHoldMemberCode.Contains("-"))
                        {
                            string householdCode = val.HouseHoldMemberCode.Substring(0, 2) + "-" + val.HouseHoldMemberCode.Substring(2, 2) + "-" + val.HouseHoldMemberCode.Substring(4, 4);
                            string householdMemberCode = householdCode + "-" + val.HouseHoldMemberCode.Substring((val.HouseHoldMemberCode.Length - 2), 2);
                            val.HouseHoldMemberCode = householdMemberCode;
                        }
                        db.Entry(exist).CurrentValues.SetValues(val);
                        db.Entry(exist).State = EntityState.Modified;
                        await db.SaveChangesAsync();
                    }

                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
    }
    public async Task OnHVATAddendumActionBegin(Syncfusion.Blazor.Grids.ActionEventArgs<HouseHoldMembers> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            PreviousMemberAction = args.RequestType;
            if (args.RowData.EnrollmentDate == null)
            {
                args.RowData.EnrollmentDate = HVatReviewData.AssessmentDate;
            }
        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            PreviousMemberAction = args.RequestType;
            args.RowData.HouseHoldId= BeneficiaryRegisterData.HouseHoldId;
            args.RowData.EnrollmentDate = HVatReviewData.AssessmentDate;

            using (var db = new SPToCoreContext())
            {
                var records = await db.spLastMemberNumberGetAllAsync(BeneficiaryRegisterData.HouseHoldId);
                int _count = 1;
                if (records.Count > 0)
                {
                    _count =(records[0].LastMemberNumber.Value+1);
                }
                args.RowData.HouseHoldMemberCode = BeneficiaryRegisterData.HouseHoldCode + "-" + _count.ToString("D2");
            }
        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
        {
            PreviousMemberAction = args.RequestType;
        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (string.IsNullOrEmpty(args.Data.Surname))
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Surname", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (string.IsNullOrEmpty(args.Data.Givenname))
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Given name", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.GenderId == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Gender", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.ProgramParticipationId == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Gender", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.KnownRiskFactorId == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Known Risk Factor", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.IsCareGiver == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Is Care Giver", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.IsEnrolledInSchool == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the OVC is Enrolled in School", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.IsEnrolledInSchool == 1 && args.Data.IsAttendingSchoolRegularly == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Is OVC Attending School regularly", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.IsEnrolledInSchool == 1 && args.Data.EducationLevelId == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Education Level", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.IsEnrolledInSchool == 1 && String.IsNullOrEmpty(args.Data.NameofSchool))
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the name of school", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.IsOrphaned == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Is Orphaned", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.IsChildUnder5Malnourished == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Is child Below 5 Malnourished", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.DoesChildHaveBirthCertificate == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Child has a birth Certificate", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.IsDisabled == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Is Disabled", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            //else if (args.Data.IsDisabled == 1 && String.IsNullOrEmpty(args.Data.DisabilityDescription))
            //{
            //    ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please Mention the disability", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
            //    args.Cancel = true;
            //}
            else if (args.Data.Ischildimmunised == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Is Child Immunized", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.HivstatusId == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the HIV Status", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.HivstatusId == 1 && args.Data.CurrentlyonArt == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select Currently on ART", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.HasanIga == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select if Has an IGA", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.IsinSavingsGroup == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select if  Beneficiary is in Saving group", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.Isinschoolcompletingapprenticeship == null)
            {
                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select if Beneficiary (aged 18-20 yrs) is in-school completing apprenticeship", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else
            {
                string householdMemberCode = BeneficiaryRegisterData.HouseHoldCode + "-" + args.Data.HouseHoldMemberCode.Substring((args.Data.HouseHoldMemberCode.Length - 2), 2);
                args.Data.HouseHoldMemberCode = householdMemberCode;

                if (PreviousMemberAction == Syncfusion.Blazor.Grids.Action.Add)
                {
                    using (var db = new MUCOBADIContext())
                    {
                        var exists = db.HouseHoldMembers.FirstOrDefault(o => o.HouseHoldMemberCode == args.Data.HouseHoldMemberCode);
                        if (exists != null)
                        {
                            var records = db.HouseHoldMembers.Where(o => o.HouseHoldId == BeneficiaryRegisterData.HouseHoldId).OrderBy(o => o.HouseHoldMemberId).AsNoTracking().ToList();
                            int _count = 1;
                            if (records.Count > 0)
                            {
                                var last = records.LastOrDefault();
                                if (last.HouseHoldMemberCode.Substring((last.HouseHoldMemberCode.Length - 2), 1).Contains("0"))
                                {
                                    _count = ((Convert.ToInt32(last.HouseHoldMemberCode.Substring((last.HouseHoldMemberCode.Length - 1), 1))) + 1);
                                }
                                else
                                {
                                    _count = ((Convert.ToInt32(last.HouseHoldMemberCode.Substring((last.HouseHoldMemberCode.Length - 2), 2))) + 1);
                                }
                            }
                            var _HouseHoldMemberCode = BeneficiaryRegisterData.HouseHoldCode + "-" + _count.ToString("D2");
                            ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "There is already a household member with the household code (" + args.Data.HouseHoldMemberCode + "). We recommend moving the household code to (" + _HouseHoldMemberCode + ")", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                            args.Data.HouseHoldMemberCode = _HouseHoldMemberCode;
                            args.Cancel = true;
                        }
                    }
                }
            }
        }
    }
    public void OnHVATAddendumActionComplete(Syncfusion.Blazor.Grids.ActionEventArgs<HouseHoldMembers> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            HVATAddendumGrid.PreventRender(false);
        }
    }
}
