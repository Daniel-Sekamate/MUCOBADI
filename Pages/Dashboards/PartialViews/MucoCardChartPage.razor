@page "/tileview"
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
<div class="row">
    <div class="control-section col-lg-12 card-control-section tile_layout">
        <div class="e-card-layout" style="display: flex; flex-wrap: nowrap; overflow-x: auto; -webkit-overflow-scrolling: touch;">

            @if (this.CardDatas.Count == 0)
            {
                <div class="e-error">
                    <div class="e-error-content">No results found. Please try a different search.</div>
                </div>
            }
            else
            {
                @foreach (CardDataModel card in CardDatas)
                {
                    <div style="padding: 15px;">
                        <div id="card_sample_1" class="card_sample">
                            <SfCard>
                                <CardImage Image="@card.ImageUrl" />
                              @*  <CardHeader Title="@card.Title" SubTitle="@card.SubTitle" />*@
                                <CardContent Content="@card.Content" />
                                @*<CardFooter>
                                    <CardFooterContent>
                                        <SfButton CssClass="e-btn e-outline e-primary" @onclick="@(e => NavigateToUrlAsync(@card.NavUrl))">Read More</SfButton>
                                    </CardFooterContent>
                                </CardFooter>*@
                            </SfCard>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>




<style>
    .e-card {
        background-color: whitesmoke;
        height: 60vh;
        width:400px;
        /*padding-left: 20px;*/
        /*	margin-bottom: 20px;*/
    }
    .property-panel-section .property-panel-content td {
        padding: 0 0 15px 0;
    }

    .tile_layout.card-control-section .e-error {
        height: 100px;
        width: 100%;
    }

        .tile_layout.card-control-section .e-error .e-error-content {
            color: red;
            line-height: 100px;
            text-align: center;
        }

    .tile_layout.card-control-section .e-card .e-card-image {
        height: 180px;
        width: inherit;
    }

    .tile_layout.card-control-section .e-card .e-card-header .e-card-header-caption .e-card-header-title {
        font-size: 20px;
        font-family: Helvetica, 'Segoe UI';
        font-weight: bold;
    }

    .tile_layout.card-control-section .e-card .e-card-header .e-card-header-caption .e-card-sub-title {
        padding-top: 5px;
    }

    .tile_layout.card-control-section .e-card .e-card-content {
        padding-top: 0px;
        height: 110px;
    }

    #source_link {
        float: right;
        margin-right: 10px;
    }
</style>
@code {
    [Inject] public NavigationManager NavigationManager { get; set; }
    [Inject] public IJSRuntime JsRuntime { get; set; }
    public string SearchValue { get; set; }
    public string SortingValue { get; set; }
    public string[] FilteringValue { get; set; }
    protected override void OnInitialized()
    {
        _cardDatas = this.GetCardDatas();
        base.OnInitialized();
    }
    public class CardDataModel
    {
        public string ImageUrl { get; set; }
        public string Title { get; set; }
        public string SubTitle { get; set; }
        public string Content { get; set; }
        public string NavUrl { get; set; }
        public string Tag { get; set; }
    }
    public List<CardDataModel> GetCardDatas()
    {
        var assetpath = "images/cards/";
        List<CardDataModel> CardData = new List<CardDataModel>();
        CardData.Add(new CardDataModel { ImageUrl = "https://mucobadi.org/icare-project-success-story-empowering-adolescents-living-with-hiv-for-improved-treatment-outcomes/", Title = "ASP.NET MVC", SubTitle = "Nick Harrison", Content = "ASP.NET Model View Controller design pattern to keep the data, views, and logic clearly separated in apps.", NavUrl = "https://www.syncfusion.com/ebooks/ASPNET_MVC_Succinctly", Tag = "Server-side" });
        CardData.Add(new CardDataModel { ImageUrl = "https://i0.wp.com/mucobadi.org/wp-content/uploads/2023/07/nutrition-scaled.jpg?resize=1536%2C1024&ssl=1", Title = "Node.js", SubTitle = "Emanuele DelBono", Content = "Node.js is a wildly popular platform for writing web applications that has revolutionized web development in many ways.", NavUrl = "https://www.syncfusion.com/ebooks/nodejs", Tag = "Client-side" });
        CardData.Add(new CardDataModel { ImageUrl = "https://i0.wp.com/mucobadi.org/wp-content/uploads/2023/07/DSC_2158-scaled.jpg?resize=1536%2C1024&ssl=1", Title = "React.js", SubTitle = "Dmitri Nesteruk", Content = "React is a JavaScript library that has revolutionized how developers design and think about views in web applications.", NavUrl = "https://www.syncfusion.com/ebooks/reactjs_succinctly", Tag = "Client-side" });
        CardData.Add(new CardDataModel { ImageUrl = "https://i0.wp.com/mucobadi.org/wp-content/uploads/2023/07/1500x500.jpeg?w=1500&ssl=1", Title = "TypeScript", SubTitle = "Steve Fenton", Content = "Microsoft TypeScript extends many familiar features of .NET programming to JavaScript.", NavUrl = "https://www.syncfusion.com/ebooks/typescript", Tag = "Client-side" });

        return CardData;
    }
    private List<CardDataModel> _cardDatas;
    public List<CardDataModel> CardDatas
    {
        get { return _cardDatas; }
        set { _cardDatas = value; }
    }
    public List<string> SortingType = new List<string>() { "Ascending", "Descending" };
    public List<string> FilteringType = new List<string>() { "Client-side", "Server-side", "Front-end" };
    public async Task NavigateToUrlAsync(string url)
    {
        await JsRuntime.InvokeAsync<object>("open", url, "_blank");
    }
    public List<CardDataModel> GetCardDatas(string[] values)
    {
        var cardDatas = GetCardDatas();
        if (values == null)
        {
            return this.GetSortedCardDatas(cardDatas);
        }
        var filterCards = new List<CardDataModel>();
        foreach (string value in values)
        {
            var cards = cardDatas.Where(e => e.Tag == value);
            foreach (var card in cards)
            {
                filterCards.Add(card);
            }
        }
        return this.GetSortedCardDatas(filterCards);
    }
    public List<CardDataModel> GetSortedCardDatas(List<CardDataModel> sortingCards)
    {
        if (this.SortingValue != null)
        {
            sortingCards.Sort((x, y) => x.Title.CompareTo(y.Title));
            if (this.SortingValue == "Descending")
            {
                sortingCards.Reverse();
            }
        }
        return sortingCards;
    }
    public void OnSearch(ChangedEventArgs args)
    {
        if (args.Value != null)
        {
            this.CardDatas = this.CardDatas.FindAll(e => (e.Title.Contains(args.Value) || e.SubTitle.Contains(args.Value) || e.Content.Contains(args.Value) || e.Title.ToLower().Contains(args.Value) || e.SubTitle.ToLower().Contains(args.Value) || e.Content.ToLower().Contains(args.Value)));
        }
        else
        {
            this.CardDatas = this.GetCardDatas(this.FilteringValue);
        }
    }
    public void OnSorting(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, string> args)
    {
        this.CardDatas = this.GetSortedCardDatas(this.CardDatas);
    }
    public void OnFiltering(MultiSelectChangeEventArgs<string[]> args)
    {
        this.CardDatas = this.GetCardDatas(args.Value);
    }
    public void OnReset()
    {
        this.SearchValue = null;
        this.SortingValue = null;
        this.FilteringValue = null;
        this.CardDatas = this.GetCardDatas();
    }
}