@page "/HIV_TB_TrackingAndMonitoringToolPage"
@using MUCOBADI.Models;
@using MUCOBADI.Data;
@using System.Collections.ObjectModel;
@using System.IO;
@using Microsoft.EntityFrameworkCore;
@using System.Collections;
@inject UserManagement userManagement;
@inject NavigationManager Navigation;
@using Microsoft.AspNetCore.Hosting;
@inject IWebHostEnvironment hostingEnv;
<style>
    h4 {
        background-color: black;
        color: whitesmoke;
        padding: 10px;
    }
</style>
<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;"> <strong>USAID ICARE |</strong> TRACKING FORM FOR MONITORING HIV, TB CARE AND EID</li>
</ol>

<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>

<div class="form-row">
    <div class="form-group col-md-12">
        <SfAccordion ExpandMode="@ExpandMode.Single">
            <AccordionItems>
                <AccordionItem Expanded="false">
                    <HeaderTemplate>Search Panel</HeaderTemplate>
                    <ContentTemplate>
                        <div style="padding:10px;">
                            <EditForm Model="@InputModel" OnValidSubmit="@SearchRecords">
                                <div class="form-row">
                                    <div class="form-group col-md-3">
                                        <p>District</p>
                                        <SfMultiSelect @bind-Value="@InputModel.DistrictId" Enabled="@isEnabled" TValue="int?[]" TItem="ADistrict" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_DistrictData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search District" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                            <MultiSelectFieldSettings Value="@nameof(ADistrict.DistrictId)" Text="@nameof(ADistrict.DistrictDescription)"></MultiSelectFieldSettings>
                                            <MultiSelectEvents TValue="int?[]" TItem="ADistrict" ValueChange="OnDistrictChange"></MultiSelectEvents>
                                        </SfMultiSelect>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <p>Sub-County</p>
                                        <SfMultiSelect @bind-Value="@InputModel.SubcountyId" TValue="int?[]" TItem="ASubcounty" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@mSubcountyData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Sub-county" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                            <MultiSelectFieldSettings Value="@nameof(ASubcounty.SubcountyId)" Text="@nameof(ASubcounty.SubcountyDescription)"></MultiSelectFieldSettings>
                                            <MultiSelectEvents TValue="int?[]" TItem="ASubcounty" ValueChange="OnSubcountyChange"></MultiSelectEvents>
                                        </SfMultiSelect>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <p>Parish</p>
                                        <SfMultiSelect @bind-Value="@InputModel.ParishId" TValue="int?[]" TItem="AParish" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@mParishData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Parish" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                            <MultiSelectFieldSettings Value="@nameof(AParish.ParishId)" Text="@nameof(AParish.ParishDescription)"></MultiSelectFieldSettings>
                                            <MultiSelectEvents TValue="int?[]" TItem="AParish" ValueChange="OnParishChange"></MultiSelectEvents>
                                        </SfMultiSelect>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <p>Village</p>
                                        <SfMultiSelect @bind-Value="@InputModel.VillageId" TValue="int?[]" TItem="AVillage" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@mVillageData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Village" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                            <MultiSelectFieldSettings Value="@nameof(AVillage.VillageId)" Text="@nameof(AVillage.VillageDescription)"></MultiSelectFieldSettings>
                                        </SfMultiSelect>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <BSButton Color="BlazorStrap.Color.Primary" ButtonType="BlazorStrap.ButtonType.Submit">Search</BSButton>
                                        <BSButton Color="BlazorStrap.Color.Secondary" ButtonType="BlazorStrap.ButtonType.Button" @onclick="ClearSearchBtnClick">Clear Search</BSButton>
                                    </div>
                                    <div class="form-group col-md-12">
                                        <DataAnnotationsValidator />
                                        <ValidationSummary />
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </ContentTemplate>
                </AccordionItem>
            </AccordionItems>
        </SfAccordion>
    </div>
    <div class="form-group col-md-12">
        <SfGrid @ref="BeneficiaryRegisterGrid" TValue="spBeneficiaryIdentificationRegisterGetAllResult" Query="@MainQuery"
                AllowGrouping="false" ShowColumnChooser="true" AllowTextWrap="true"
                AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true">
            @*<GridGroupSettings Columns="@GroupedColumns"></GridGroupSettings>*@
            <SfDataManager AdaptorInstance="@typeof(TrackingBeneficiaryRegisterAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
            <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
            <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
            <GridEvents OnActionComplete="BeneficiaryRegisterActionComplete" TValue="spBeneficiaryIdentificationRegisterGetAllResult"></GridEvents>
            <GridEditSettings AllowAdding="false" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="DialogParams">
                <Template Context="RegisterContext">
                    @{
                        BeneficiaryRegisterData = (RegisterContext as spBeneficiaryIdentificationRegisterGetAllResult);
                        <div style="padding:3px;">
                            <div class="form-row">
                                <div class="form-group col-md-3">
                                    <p>District</p>
                                    <p><b>@BeneficiaryRegisterData.DistrictDescription</b></p>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>Sub-County</p>
                                    <p><b>@BeneficiaryRegisterData.SubcountyDescription</b></p>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>Parish</p>
                                    <p><b>@BeneficiaryRegisterData.ParishDescription</b></p>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>Village</p>
                                    <p><b>@BeneficiaryRegisterData.VillageDescription</b></p>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>Household Code</p>
                                    <p><b>@BeneficiaryRegisterData.HouseHoldCode</b></p>
                                </div>
                                <div class="form-group col-md-12">
                                    <SfGrid @ref="TrackingFormHeaderGrid" TValue="spHIV_TB_TrackingFormGetAllResult" Query="@(new Query().AddParams("HouseHoldId",BeneficiaryRegisterData.HouseHoldId))"
                                            AllowGrouping="false" ShowColumnChooser="true" AllowTextWrap="true"
                                            AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true"
                                            Toolbar="@(new string[] {"Add","Edit","Delete","Update","Cancel","ColumnChooser"})">
                                        @*<GridGroupSettings Columns="@GroupedColumns"></GridGroupSettings>*@
                                        <SfDataManager AdaptorInstance="@typeof(spHIV_TB_TrackingFormGetAllResultHeaderAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
                                        <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                        <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
                                        <GridEvents OnActionBegin="OnReviewHeaderActionBegin" OnActionComplete="ActionComplete" TValue="spHIV_TB_TrackingFormGetAllResult"></GridEvents>
                                        <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="DialogParams">
                                            <Template Context="ReviewHeaderContext">
                                                @{
                                                    TrackingFormHeaderData = (ReviewHeaderContext as spHIV_TB_TrackingFormGetAllResult);
                                                    <div style="margin-top: 10px; padding: 10px; border-color: black; border-width: 2px; border-style: solid; ">
                                                        <div class="form-row">
                                                            <div class="form-group col-md-12" hidden>
                                                                <SfNumericTextBox @bind-Value="@TrackingFormHeaderData.HIV_TB_TrackingFormId" Enabled="false"></SfNumericTextBox>
                                                            </div>
                                                            <div class="form-group col-md-12">
                                                                <h4>TRACKING FORM FOR MONITORING HIV, TB CARE AND EID</h4>
                                                            </div>
                                                            <div class="form-group col-md-3">
                                                                <p>District</p>
                                                                <p><b>@BeneficiaryRegisterData.DistrictDescription</b></p>
                                                            </div>
                                                            <div class="form-group col-md-3">
                                                                <p>Sub-County</p>
                                                                <p><b>@BeneficiaryRegisterData.SubcountyDescription</b></p>
                                                            </div>
                                                            <div class="form-group col-md-3">
                                                                <p>Parish</p>
                                                                <p><b>@BeneficiaryRegisterData.ParishDescription</b></p>
                                                            </div>
                                                            <div class="form-group col-md-3">
                                                                <p>Village</p>
                                                                <p><b>@BeneficiaryRegisterData.VillageDescription</b></p>
                                                            </div>
                                                            <div class="form-group col-md-3">
                                                                <p>Household Code</p>
                                                                <p><b>@BeneficiaryRegisterData.HouseHoldCode</b></p>
                                                            </div>
                                                            <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                            <div class="form-group col-md-6">
                                                                <p>Individual Code</p>
                                                                <SfDropDownList @bind-Value="@(TrackingFormHeaderData.HouseHoldMemberId)" Enabled="true" TItem="ViewHouseHoldMembers" TValue="int?" DataSource="@HouseHoldMemberData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                    <DropDownListTemplates TItem="ViewHouseHoldMembers">
                                                                        <ItemTemplate>
                                                                            <div style="margin-left:10px;">
                                                                                <table>
                                                                                    <tr>
                                                                                        <td><p>@((context as ViewHouseHoldMembers).HouseHoldMemberCode)</p></td>
                                                                                        <td><p style="margin-left:10px;">@((context as ViewHouseHoldMembers).FullName)</p></td>
                                                                                    </tr>
                                                                                </table>
                                                                            </div>
                                                                        </ItemTemplate>
                                                                        <ValueTemplate>
                                                                            @((context as ViewHouseHoldMembers).HouseHoldMemberCode) @((context as ViewHouseHoldMembers).FullName)
                                                                            @*<div class="dropdown-width" style="width: 100%; height: 100%; margin-left: 10px;">
                                                                                <table>
                                                                                    <tr>
                                                                                        <td><p>@((context as ViewHouseHoldMembers).HouseHoldMemberCode)</p></td>
                                                                                        <td><p style="margin-left:10px;">@((context as ViewHouseHoldMembers).FullName)</p></td>
                                                                                    </tr>
                                                                                </table>
                                                                            </div>*@
                                                                        </ValueTemplate>
                                                                    </DropDownListTemplates>
                                                                    <DropDownListFieldSettings Value="@nameof(ViewHouseHoldMembers.HouseHoldMemberId)" Text="@nameof(ViewHouseHoldMembers.HouseHoldMemberCode)"></DropDownListFieldSettings>
                                                                    <DropDownListEvents TItem="ViewHouseHoldMembers" TValue="int?" ValueChange="OnHouseHoldMemberChange"></DropDownListEvents>
                                                                </SfDropDownList>
                                                            </div>
                                                            <div class="form-group col-md-6">
                                                                <p>Date of follow-up</p>
                                                                <SfDatePicker @bind-Value="@(TrackingFormHeaderData.FollowUpDate)" Format="dd/MM/yyyy" Placeholder="Enter Date of Identification" FloatLabelType="FloatLabelType.Never" />
                                                            </div>
                                                            <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                            <div class="form-group col-md-6">
                                                                <p>Name of beneficiary</p>
                                                                <p><b>@TrackingFormHeaderData.Surname  @TrackingFormHeaderData.Givenname</b></p>
                                                            </div>
                                                            <div class="form-group col-md-3">
                                                                <p>Age</p>
                                                                <p><b>@TrackingFormHeaderData.Age</b></p>
                                                            </div>
                                                            <div class="form-group col-md-3">
                                                                <p>Gender</p>
                                                                @{
                                                                    string _gender = string.Empty;
                                                                    var mgender = GenderData.FirstOrDefault(o => o.GenderId == TrackingFormHeaderData.GenderId);
                                                                    if (mgender != null)
                                                                    {
                                                                        _gender = mgender.GenderDescription;
                                                                    }
                                                                }
                                                                <p><b>@_gender</b></p>
                                                            </div>
                                                            <div class="form-group col-md-3" hidden>
                                                                <p>Tel</p>
                                                                <p><b>@BeneficiaryRegisterData.TelephoneContact</b></p>
                                                            </div>
                                                            <div class="form-group col-md-3">
                                                                <p>Phone Number</p>
                                                                <SfTextBox Multiline="false" @bind-Value="@(TrackingFormHeaderData.PhoneNumber)" Enabled="true" Placeholder="Enter the phone Number" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                             </div>
                                                            <div class="form-group col-md-12">
                                                                <p><b style="color:red;">Instructions:</b> This form should be completed by a social worker on a quarterly basis for each beneficiary during a follow up or a home visit for Viral Load tracking. This tool should be used to track viral load & TB data for PLHIV and PMTCT mothers of HEI.</p>
                                                            </div>
                                                            <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                            <div class="form-group col-md-4">
                                                                <p>1.1) HIV status after follow up</p>
                                                                <SfDropDownList ID="HivstatusId" @bind-Value="@(TrackingFormHeaderData.HIVStatusId)" Enabled="true" TItem="AHivstatus" TValue="int?" DataSource="@HivstatusData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                    <DropDownListFieldSettings Value="@nameof(AHivstatus.HivstatusId)" Text="@nameof(AHivstatus.HivstatusDescription)"></DropDownListFieldSettings>
                                                                </SfDropDownList>
                                                            </div>
                                                            @if (TrackingFormHeaderData.HIVStatusId == 1)
                                                            {
                                                                <div class="form-group col-md-4">
                                                                    <p>On ART</p>
                                                                    <SfDropDownList ID="CurrentlyonArt" @bind-Value="@(TrackingFormHeaderData.OnART)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                        <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                    </SfDropDownList>
                                                                </div>
                                                                @if (TrackingFormHeaderData.OnART == 1)
                                                                {
                                                                    <div class="form-group col-md-4">
                                                                        <p>ART Number.</p>
                                                                        <SfTextBox Multiline="false" ID="Artnumber" @bind-Value="@(TrackingFormHeaderData.ARTNumber)" Enabled="true" Placeholder="Enter ART Number" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                    </div>
                                                                    <div class="form-group col-md-4">
                                                                        <p>COHORT</p>
                                                                        <SfDatePicker @bind-Value="@(TrackingFormHeaderData.CohortNo)" Format="dd/MM/yyyy" Placeholder="Enter Cohort" FloatLabelType="FloatLabelType.Never">
                                                                            <DatePickerEvents TValue="DateTime?" ValueChange="CohortDateChange"></DatePickerEvents>
                                                                        </SfDatePicker>
                                                                    </div>
                                                                }

                                                            }

                                                            <div class="form-group col-md-4">
                                                                <p>Client member status </p>
                                                                <SfDropDownList ID="ClientMemberStatusId" @bind-Value="@(TrackingFormHeaderData.ClientMemberStatusId)" Enabled="true" TItem="AClientMemberStatus" TValue="int?" DataSource="@ClientMemberStatusData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                    <DropDownListFieldSettings Value="@nameof(AClientMemberStatus.ClientMemberStatusId)" Text="@nameof(AClientMemberStatus.ClientMemberStatusDes)"></DropDownListFieldSettings>
                                                                </SfDropDownList>
                                                            </div>
                                                            @if (TrackingFormHeaderData.ClientMemberStatusId == 7)
                                                            {
                                                                <div class="form-group col-md-4">
                                                                    <p>Transferred out (Specify)</p>
                                                                    <SfTextBox Multiline="false" ID="ClientMemberStatusOther" @bind-Value="@(TrackingFormHeaderData.ClientMemberStatusOther)" Enabled="true" Placeholder="Enter Other Identification Source" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                </div>
                                                            }
                                                            
                                                            <div class="form-group col-md-4">
                                                                <p>Clients Classification</p>
                                                                <SfDropDownList ID="CientClassificationId" @bind-Value="@(TrackingFormHeaderData.CientClassificationId)" Enabled="true" TItem="ACientClassification" TValue="int?" DataSource="@CientClassificationData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                    <DropDownListFieldSettings Value="@nameof(ACientClassification.CientClassificationId)" Text="@nameof(ACientClassification.CientClassificationDesc)"></DropDownListFieldSettings>
                                                                </SfDropDownList>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>Weight in KGs</p>
                                                                <SfNumericTextBox @bind-Value="@TrackingFormHeaderData.Weight" Enabled="true" Placeholder="Enter the number of copies" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                                                            </div>
                                                             <div class="form-group col-md-4">
                                                                <p>What are the reasons for treatment interruption</p>
                                                                <SfMultiSelect @ref="ReasonForTreatmentInterruptionObj" TValue="int[]" TItem="AReasonForTreatmentInterruption" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@ReasonForTreatmentInterruptionData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                                                    <MultiSelectFieldSettings Value="@nameof(AReasonForTreatmentInterruption.ReasonForTreatmentInterruptionId)" Text="@nameof(AReasonForTreatmentInterruption.ReasonForTreatmentInterruption)"></MultiSelectFieldSettings>
                                                                    <MultiSelectEvents TValue="int[]" TItem="AReasonForTreatmentInterruption" ValueChange="OnReasonForTreatmentInterruptionChange" DataBound="OnReasonForTreatmentInterruptionBound"></MultiSelectEvents>
                                                                </SfMultiSelect>
                                                            </div>
                                                             <div class="form-group col-md-4">
                                                                <p>What are the Strategies for improving treatment continuity</p>
                                                                <SfMultiSelect @ref="StrategiesForImprovingTreatmentContinuityObj" TValue="int[]" TItem="AStrategiesForImprovingTreatmentContinuity" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@StrategiesForImprovingTreatmentContinuityData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                                                    <MultiSelectFieldSettings Value="@nameof(AStrategiesForImprovingTreatmentContinuity.StrategiesForImprovingTreatmentContinuityId)" Text="@nameof(AStrategiesForImprovingTreatmentContinuity.StrategiesForImprovingTreatmentContinuity)"></MultiSelectFieldSettings>
                                                                    <MultiSelectEvents TValue="int[]" TItem="AStrategiesForImprovingTreatmentContinuity" ValueChange="OnReasonForTreatmentInterruptionChange" DataBound="OnReasonForTreatmentInterruptionBound"></MultiSelectEvents>
                                                                </SfMultiSelect>
                                                            </div>
                                                            <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                            @if (TrackingFormHeaderData.HIVStatusId == 1)
                                                            {
                                                                <div class="form-group col-md-3">
                                                                    <p>2.1 Health facility where client receives care</p>
                                                                    <SfDropDownList ID="FacilityId" @bind-Value="@(TrackingFormHeaderData.FacilityId)" Enabled="true" TItem="AFacility" TValue="int?" DataSource="@FacilityData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                        <DropDownListFieldSettings Value="@nameof(AFacility.FacilityId)" Text="@nameof(AFacility.FacilityName)"></DropDownListFieldSettings>
                                                                    </SfDropDownList>
                                                                </div>
                                                                <div class="form-group col-md-3">
                                                                    <p>Duration on treatment (in months)</p>
                                                                    <SfNumericTextBox @bind-Value="@TrackingFormHeaderData.TreatmentDuration" Enabled="true" Placeholder="Enter the Duration on treatment" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                                                                </div>
                                                                <div class="form-group col-md-3">
                                                                    <p>Client Line of Treatment</p>
                                                                    <SfDropDownList ID="RegimenCategoryId" @bind-Value="@(TrackingFormHeaderData.RegimenCategoryId)" Enabled="true" TItem="ARegimenCategory" TValue="int?" DataSource="@RegimenCategoryData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                        <DropDownListFieldSettings Value="@nameof(ARegimenCategory.RegimenCategoryId)" Text="@nameof(ARegimenCategory.RegimenCategoryDescription)"></DropDownListFieldSettings>
                                                                    </SfDropDownList>
                                                                </div>
                                                                <div class="form-group col-md-3">
                                                                    <p>Current Treatment Regimen</p>
                                                                    <SfDropDownList ID="RegimenId" @bind-Value="@(TrackingFormHeaderData.RegimenId)" Enabled="true" TItem="ARegimen" TValue="int?" DataSource="@RegimenData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                        <DropDownListFieldSettings Value="@nameof(ARegimen.RegimenId)" Text="@nameof(ARegimen.RegimenDescription)"></DropDownListFieldSettings>
                                                                    </SfDropDownList>
                                                                </div>
                                                                <div class="form-group col-md-2">
                                                                    <p>2.2 Optimized</p>
                                                                   <SfDropDownList ID="OptimizedYesNoId" @bind-Value="@(TrackingFormHeaderData.OptimizedYesNo)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                        <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                    </SfDropDownList>
                                                                </div>
                                                                <div class="form-group col-md-10">
                                                                    <p>If no, what are the reasons for non-optimization</p>
                                                                    <SfMultiSelect @ref="ReasonsForNonOptimizationObj" TValue="int[]" TItem="AReasonsForNonOptimization" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@ReasonsForNonOptimizationData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                                                        <MultiSelectFieldSettings Value="@nameof(AReasonsForNonOptimization.ReasonsForNonOptimizationId)" Text="@nameof(AReasonsForNonOptimization.ReasonsForNonOptimization)"></MultiSelectFieldSettings>
                                                                        <MultiSelectEvents TValue="int[]" TItem="AReasonsForNonOptimization" ValueChange="OnReasonForNonOptimizationChange" DataBound="OnReasonForNonOptimizationBound"></MultiSelectEvents>
                                                                    </SfMultiSelect>
                                                                </div>
                                                                <div class="form-group col-md-4">
                                                                    <p>2.3 Modality of Client care and treatment</p>
                                                                    <SfDropDownList @bind-Value="@(TrackingFormHeaderData.ClientCareModalityId)" Enabled="true" TItem="AClientCareModality" TValue="int?" DataSource="@ClientCareModalityData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                        <DropDownListFieldSettings Value="@nameof(AClientCareModality.ClientCareModalityId)" Text="@nameof(AClientCareModality.ClientCareModalityDesc)"></DropDownListFieldSettings>
                                                                    </SfDropDownList>
                                                                </div>
                                                                @if (TrackingFormHeaderData.ClientCareModalityId == 6)
                                                                {
                                                                    <div class="form-group col-md-4">
                                                                        <p>Other Modality of Client care and treatment</p>
                                                                        <SfTextBox Multiline="false" ID="ClientCareModalityIdOther" @bind-Value="@(TrackingFormHeaderData.ClientCareModalityIdOther)" Enabled="true" Placeholder="Enter Other Identification Source" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                    </div>
                                                                }
                                                                <div class="form-group col-md-4">
                                                                    <p>Modality of Drug Dispensing</p>
                                                                    <SfDropDownList @bind-Value="@(TrackingFormHeaderData.DrugDispensingModalityId)" Enabled="true" TItem="ADrugDispensingModality" TValue="int?" DataSource="@DrugDispensingModalityData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                        <DropDownListFieldSettings Value="@nameof(ADrugDispensingModality.DrugDispensingModalityId)" Text="@nameof(ADrugDispensingModality.DrugDispensingModalityDesc)"></DropDownListFieldSettings>
                                                                    </SfDropDownList>
                                                                </div>
                                                                <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                                
                                                                <div class="form-group col-md-6">
                                                                    <p>District</p>
                                                                    <SfDropDownList @bind-Value="@(TrackingFormHeaderData.CurrentCarePointDistrictId)" Enabled="true" TItem="ADistrict" TValue="int?" DataSource="@DistrictData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                        <DropDownListFieldSettings Value="@nameof(ADistrict.DistrictId)" Text="@nameof(ADistrict.DistrictDescription)"></DropDownListFieldSettings>
                                                                        <DropDownListEvents TItem="ADistrict" TValue="int?" ValueChange="OnFacilityDistrictChange"></DropDownListEvents>
                                                                    </SfDropDownList>
                                                                </div>
                                                                <div class="form-group col-md-6">
                                                                    <p>Sub County of current care point</p>
                                                                    <SfDropDownList @bind-Value="@(TrackingFormHeaderData.CurrentCarePointSubCountyId)" Enabled="true" TItem="ASubcounty" TValue="int?" DataSource="@facilitySubcountyData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                        <DropDownListFieldSettings Value="@nameof(ASubcounty.SubcountyId)" Text="@nameof(ASubcounty.SubcountyDescription)"></DropDownListFieldSettings>
                                                                    </SfDropDownList>
                                                                </div>
                                                                <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                                <div class="form-group col-md-6">
                                                                    <p>Last ART Appointment Date</p>
                                                                    <SfDatePicker @bind-Value="@(TrackingFormHeaderData.LastAppointmentDate)" Format="dd/MM/yyyy" Placeholder="Enter date of Virallaod test" FloatLabelType="FloatLabelType.Never" />
                                                                </div>
                                                                <div class="form-group col-md-6">
                                                                    <p>Next ART Appointment Date </p>
                                                                    <SfDatePicker @bind-Value="@(TrackingFormHeaderData.NextAppointmentDate)" Format="dd/MM/yyyy" Placeholder="Enter date of Virallaod test" FloatLabelType="FloatLabelType.Never" />
                                                                </div>
                                                                <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                                <div class="form-group col-md-6">
                                                                    <p>Is Client Eligible for Viral Load (Consistently initiated on ART for 6 or more Months) </p>
                                                                    <SfDropDownList @bind-Value="@(TrackingFormHeaderData.IsClientEligibleForViralload)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                        <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                    </SfDropDownList>
                                                                </div>
                                                                @if (TrackingFormHeaderData.IsClientEligibleForViralload == 1)
                                                                {
                                                                    <div class="form-group col-md-6">
                                                                        <p>ViralLoad test done (Y/N) </p>
                                                                        <SfDropDownList @bind-Value="@(TrackingFormHeaderData.ViralloadTestDone)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                            <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                        </SfDropDownList>
                                                                    </div>
                                                                    @if (TrackingFormHeaderData.ViralloadTestDone == 1)
                                                                    {
                                                                        <div class="form-group col-md-4">
                                                                            <p>ViralLoad test results received (Y/N) </p>
                                                                            <SfDropDownList @bind-Value="@(TrackingFormHeaderData.ViralloadResultsReceived)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                            </SfDropDownList>
                                                                        </div>
                                                                        @if (TrackingFormHeaderData.ViralloadResultsReceived == 1)
                                                                        {
                                                                            <div class="form-group col-md-4">
                                                                                <p>ViralLoad test results (Indicate Copies)</p>
                                                                                <SfTextBox @bind-Value="@TrackingFormHeaderData.ViralloadTestResults" Enabled="true" Placeholder="Enter the number of copies" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                            </div>
                                                                        }
                                                                            <div class="form-group col-md-4">
                                                                                <p>Viralload results</p>
                                                                                <SfDropDownList @bind-Value="@(TrackingFormHeaderData.ViralLoadSuppressedId)" Enabled="true" TItem="AViralLoadSuppressed" TValue="int?" DataSource="@ViralLoadSuppressedData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                    <DropDownListFieldSettings Value="@nameof(AViralLoadSuppressed.ViralLoadSuppressedId)" Text="@nameof(AViralLoadSuppressed.ViralLoadSuppressedDescription)"></DropDownListFieldSettings>
                                                                                </SfDropDownList>
                                                                            </div>
                                                                        <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                                        <div class="form-group col-md-4">
                                                                            <p>Date when Last VL test was done</p>
                                                                            <SfDatePicker @bind-Value="@(TrackingFormHeaderData.LastViralloadTestDate)" Format="dd/MM/yyyy" Placeholder="Enter date of Virallaod test" FloatLabelType="FloatLabelType.Never" />
                                                                        </div>
                                                                        <div class="form-group col-md-4">
                                                                            <p>Date when NEXT VL test will be done</p>
                                                                            <SfDatePicker @bind-Value="@(TrackingFormHeaderData.NextViralloadTestDate)" Format="dd/MM/yyyy" Placeholder="Enter date of Virallaod test" FloatLabelType="FloatLabelType.Never" />
                                                                        </div>
                                                                         <div class="form-group col-md-4">
                                                                            <p>Supported to Disclose HIV status to Family</p>
                                                                            <SfDropDownList @bind-Value="@(TrackingFormHeaderData.Supported_To_Disclose_HIV_Status_To_FamilyYesNoId)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                    <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                              </SfDropDownList>
                                                                        </div>
                                                                    }
                                                                }
                                                            }
                                                            @if (TrackingFormHeaderData.HIVStatusId == 1)
                                                            {
                                                                <div class="form-group col-md-12" style="border-top-color: black; border-top-width: 2px; border-top-style: solid; ">
                                                                    <h6>Applicable to all PLHIV</h6>
                                                                </div>
                                                                <div class="form-group col-md-12">
                                                                    <b>7A. TB Screening and Testing </b>
                                                                </div>
                                                                <div class="form-group col-md-6">
                                                                    <p>A1. Does the client have a presumptive or active TB Disease? </p>
                                                                    <SfDropDownList @bind-Value="@(TrackingFormHeaderData.ClientHasPresumptiveOrActiveTB)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                        <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                    </SfDropDownList>
                                                                </div>
                                                                @if (TrackingFormHeaderData.ClientHasPresumptiveOrActiveTB == 2)
                                                                {
                                                                    <div class="form-group col-md-6">
                                                                        <p>A2. Has the Client received a TB Screening Session?  </p>
                                                                        <SfDropDownList @bind-Value="@(TrackingFormHeaderData.ClientReceivedTBScreeningSession)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                            <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                        </SfDropDownList>
                                                                    </div>
                                                                    <div class="form-group col-md-4">
                                                                        <p>A3. Client is at risk of TB infection. </p>
                                                                        <SfDropDownList @bind-Value="@(TrackingFormHeaderData.ClientAtTBInfectionRisk)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                            <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                        </SfDropDownList>
                                                                    </div>
                                                                    <div class="form-group col-md-4">
                                                                        <p>A4. Client Referred and Tested for TB</p>
                                                                        <SfDropDownList @bind-Value="@(TrackingFormHeaderData.ClientReffered_TestedForTB)" Enabled="true" TItem="ATbclientRefered" TValue="int?" DataSource="@TbclientReferedData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                            <DropDownListFieldSettings Value="@nameof(ATbclientRefered.TbreferedId)" Text="@nameof(ATbclientRefered.TbreferedDesc)"></DropDownListFieldSettings>
                                                                        </SfDropDownList>
                                                                    </div>
                                                                    <div class="form-group col-md-4">
                                                                        <p>A5. Client TB test Results</p>
                                                                        <SfDropDownList @bind-Value="@(TrackingFormHeaderData.TBTestResultId)" Enabled="true" TItem="ATbtestResult" TValue="int?" DataSource="@TbtestResultData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                            <DropDownListFieldSettings Value="@nameof(ATbtestResult.TbtestResultId)" Text="@nameof(ATbtestResult.TbtestResultDesc)"></DropDownListFieldSettings>
                                                                        </SfDropDownList>
                                                                    </div>
                                                                }
                                                                <div class="form-group col-md-12">
                                                                    <b> 7B. TB Treatment</b>
                                                                </div>
                                                                @if (TrackingFormHeaderData.TBTestResultId == 1)
                                                                {
                                                                    <div class="form-group col-md-6">
                                                                        <p>If Client returned a Positive Result, on TB Treatment?</p>
                                                                        <SfDropDownList @bind-Value="@(TrackingFormHeaderData.IsOnTBTreatment)" Enabled="true" TItem="ATbtreatment" TValue="int?" DataSource="@TbtreatmentData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                            <DropDownListFieldSettings Value="@nameof(ATbtreatment.TbtreatmentId)" Text="@nameof(ATbtreatment.TbtreatmentDesc)"></DropDownListFieldSettings>
                                                                        </SfDropDownList>
                                                                    </div>
                                                                    @if (TrackingFormHeaderData.IsOnTBTreatment == 1)
                                                                    {
                                                                        <div class="form-group col-md-6">
                                                                            <p>Duration on TB Treatment</p>
                                                                            <SfDropDownList @bind-Value="@(TrackingFormHeaderData.TBTreatmentDuration)" Enabled="true" TItem="ATbtreatmentDuration" TValue="int?" DataSource="@TbtreatmentDurationData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                <DropDownListFieldSettings Value="@nameof(ATbtreatmentDuration.TbtreatmentDurationId)" Text="@nameof(ATbtreatmentDuration.TbtreatmentDurationDesc)"></DropDownListFieldSettings>
                                                                            </SfDropDownList>
                                                                        </div>
                                                                    }
                                                                }
                                                                else if (TrackingFormHeaderData.TBTestResultId == 2)
                                                                {
                                                                    <div class="form-group col-md-6">
                                                                        <p>B3. If Client returned a Negative Result, on TB Preventive Treatment (TPT)? </p>
                                                                        <SfDropDownList @bind-Value="@(TrackingFormHeaderData.IsOnTBPreventiveTreatment)" Enabled="true" TItem="ATbtreatment" TValue="int?" DataSource="@TbtreatmentData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                            <DropDownListFieldSettings Value="@nameof(ATbtreatment.TbtreatmentId)" Text="@nameof(ATbtreatment.TbtreatmentDesc)"></DropDownListFieldSettings>
                                                                        </SfDropDownList>
                                                                    </div>
                                                                    @if (TrackingFormHeaderData.IsOnTBPreventiveTreatment == 1)
                                                                    {
                                                                        <div class="form-group col-md-6">
                                                                            <p>Duration on TPT Treatment</p>
                                                                            <SfDropDownList @bind-Value="@(TrackingFormHeaderData.TPT_Treatment_Duration)" Enabled="true" TItem="ATbtreatmentDuration" TValue="int?" DataSource="@TbtreatmentDurationData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                <DropDownListFieldSettings Value="@nameof(ATbtreatmentDuration.TbtreatmentDurationId)" Text="@nameof(ATbtreatmentDuration.TbtreatmentDurationDesc)"></DropDownListFieldSettings>
                                                                            </SfDropDownList>
                                                                        </div>
                                                                    }
                                                                }

                                                                <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                                <div class="form-group col-md-6">
                                                                    <p>Means of follow up</p>
                                                                    <SfDropDownList @bind-Value="@(TrackingFormHeaderData.FollowupMeansId)" Enabled="true" TItem="AFollowupMeans" TValue="int?" DataSource="@FollowupMeanData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                        <DropDownListFieldSettings Value="@nameof(AFollowupMeans.FollowupMeansId)" Text="@nameof(AFollowupMeans.FollowupMeansDescription)"></DropDownListFieldSettings>
                                                                    </SfDropDownList>
                                                                </div>
                                                                <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                                <div class="form-group col-md-6">
                                                                    <p>(a) Was the client successfully contacted / seen? </p>
                                                                    <SfDropDownList @bind-Value="@(TrackingFormHeaderData.ClientSuccessfullyContactedOrSeen)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                        <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                    </SfDropDownList>
                                                                </div>
                                                                
                                                                if (TrackingFormHeaderData.ClientSuccessfullyContactedOrSeen == 2)
                                                                {
                                                                    <div class="form-group col-md-6">
                                                                        <p>(b) If not contacted, was anyone else contacted on behalf of the client? </p>
                                                                        <SfDropDownList @bind-Value="@(TrackingFormHeaderData.AnotherPersonContactedOnBehalfOfClient)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                            <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                        </SfDropDownList>
                                                                    </div>
                                                                    @if (TrackingFormHeaderData.AnotherPersonContactedOnBehalfOfClient == 1)
                                                                    {
                                                                        <div class="form-group col-md-6">
                                                                        <p>(c) If Yes, Who was contacted? </p>
                                                                        <SfDropDownList @bind-Value="@(TrackingFormHeaderData.PersonContactedId)" Enabled="true" TItem="APersonContacted" TValue="int?" DataSource="@PersonContactedData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                            <DropDownListFieldSettings Value="@nameof(APersonContacted.PersonContactedId)" Text="@nameof(APersonContacted.PersonContactedDesc)"></DropDownListFieldSettings>
                                                                        </SfDropDownList>
                                                                    </div>
                                                                        @if (TrackingFormHeaderData.PersonContactedId == 4)
                                                                        {
                                                                            <div class="form-group col-md-6">
                                                                                <p>Others -specify </p>
                                                                                <SfTextBox Multiline="false" @bind-Value="@(TrackingFormHeaderData.OtherPersonContacted)" Enabled="true" Placeholder="Enter Other Person Contacted" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                            </div>
                                                                        }
                                                                        
                                                                    }
                                                                }

                                                            }
                                                            @if (TrackingFormHeaderData.ViralLoadSuppressedId == 2)
                                                            {
                                                                <div class="form-group col-md-12" style="border-top-color: black; border-top-width: 2px; border-top-style: solid; background-color: #DAEEF3; ">
                                                                    <p style="padding-top:5px;"><b> 11. For individuals with unsuppressed Viral Load please Indicate service provided (this section should be completed in accordance with the Viral Load Minimum package);</b></p>
                                                                </div>
                                                                <div class="form-group col-md-6">
                                                                    <p>Services Provided </p>
                                                                    <SfMultiSelect @ref="ServiceProvidedObj" TValue="int[]" TItem="AServiceProvided" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@ServiceProvidedData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                                                        <MultiSelectFieldSettings Value="@nameof(AServiceProvided.ServiceProvidedId)" Text="@nameof(AServiceProvided.ServiceProvidedDesc)"></MultiSelectFieldSettings>
                                                                        <MultiSelectEvents TValue="int[]" TItem="AServiceProvided" ValueChange="OnServiceProvidedChange" DataBound="OnServiceProvidedCategoryBound"></MultiSelectEvents>
                                                                    </SfMultiSelect>
                                                                </div>
                                                                @if(ServiceProvidedObj != null && ServiceProvidedObj.Value != null && ServiceProvidedObj.Value.Any(o=> o==10) == true)
                                                                {
                                                                    <div class="form-group col-md-6">
                                                                        <p>Others -specify </p>
                                                                        <SfTextBox Multiline="false" @bind-Value="@(TrackingFormHeaderData.OtherServiceProvided)" Enabled="true" Placeholder="Enter Phone number" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                    </div>
                                                                }
                                                                
                                                                <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                                <div class="form-group col-md-6">
                                                                    <p> 12. What are the main reasons why the beneficiary/client is not suppressing?</p>
                                                                    <SfMultiSelect @ref="NotSuppressingReasonObj" TValue="int[]" TItem="ANotSuppressingReason" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@NotSuppressingReasonData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                                                        <MultiSelectFieldSettings Value="@nameof(ANotSuppressingReason.NotSuppressingReasonId)" Text="@nameof(ANotSuppressingReason.NotSuppressingReasonDesc)"></MultiSelectFieldSettings>
                                                                        <MultiSelectEvents TValue="int[]" TItem="ANotSuppressingReason" ValueChange="OnNotSuppressingReasonChange" DataBound="OnNotSuppressingReasonBound"></MultiSelectEvents>
                                                                    </SfMultiSelect>
                                                                </div>
                                                                @if(NotSuppressingReasonObj != null && NotSuppressingReasonObj.Value != null && NotSuppressingReasonObj.Value.Any(o=> o == 2))
                                                                {
                                                                    <div class="form-group col-md-6">
                                                                        <p>Non-adherence reason </p>
                                                                        @*<SfDropDownList @bind-Value="@(TrackingFormHeaderData.Non_Adherence_Id)" Enabled="true" TItem="ANonAdherence" TValue="int?" DataSource="@NonAdherenceData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                            <DropDownListFieldSettings Value="@nameof(ANonAdherence.NonAdherenceId)" Text="@nameof(ANonAdherence.NonAdherenceDesc)"></DropDownListFieldSettings>
                                                                        </SfDropDownList>*@

                                                                        <SfMultiSelect @ref="NonAdherenceIdObj" TValue="int[]" TItem="ANonAdherence" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@NonAdherenceData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                                                            <MultiSelectFieldSettings Value="@nameof(ANonAdherence.NonAdherenceId)" Text="@nameof(ANonAdherence.NonAdherenceDesc)"></MultiSelectFieldSettings>
                                                                            <MultiSelectEvents TValue="int[]" TItem="ANonAdherence" ValueChange="OnANonAdherenceChange" DataBound="OnANonAdherenceBound"></MultiSelectEvents>
                                                                        </SfMultiSelect>
                                                                    </div>
                                                                }
                                                                if (!string.IsNullOrEmpty(TrackingFormHeaderData.Non_Adherence_Id) && TrackingFormHeaderData.Non_Adherence_Id.Split(",").Any(o=> o == "13")) { 
                                                                    <div class="form-group col-md-6">
                                                                        <p>Others Reason for Non-adherence  </p>
                                                                        <SfTextBox Multiline="false" @bind-Value="@(TrackingFormHeaderData.Non_Adherence_Other)" Enabled="true" Placeholder="Enter Other Non-adherence Reason" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                    </div>
                                                                }                               
                                                                

                                                                <div class="form-group col-md-12" style="border-top-color: black; border-top-width: 2px; border-top-style: solid; ">
                                                                    <p>. Next Action to be taken by social worker (based on care plan)</p>
                                                                    <SfTextBox Multiline="true" @bind-Value="@(TrackingFormHeaderData.SocialWorkerNextActionTaken)" Enabled="true" Placeholder="Enter action" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                </div>
                                                            }
                                                            @if (TrackingFormHeaderData.CientClassificationId == 3)
                                                            {
                                                                <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                                <div class="form-group col-md-12">
                                                                    <h4>TRACKING FORM ADDENDUM FOR MONITORING EID CASCADE FOR HIV EXPOSED INFANTS</h4>
                                                                </div>
                                                                <div class="form-group col-md-12">
                                                                    <SfGrid @ref="ExposedInfantsGrid" DataSource="@HIVExposedInfantsData" TValue="HivTbTrackingFormExposedInfants"
                                                                            Toolbar="@(new string[] {"Add","Edit","Delete","Update","Cancel","ColumnChooser"})" AllowGrouping="false" ShowColumnChooser="true" AllowTextWrap="true"
                                                                            AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true">
                                                                        <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                                                        <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
                                                                        <GridEvents OnActionBegin="OnExposedInfantsActionBegin" OnActionComplete="@OnExposedInfantsActionComplete" TValue="HivTbTrackingFormExposedInfants"></GridEvents>
                                                                        <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="DialogParams">
                                                                            <Template Context="ExpectedOutputContext">
                                                                                @{
                                                                                    ExposedInfantsDetailsData = (ExpectedOutputContext as HivTbTrackingFormExposedInfants);
                                                                                    <div style="padding:15px;">
                                                                                        <div class="form-row">
                                                                                            <div class="form-group col-md-12" hidden>
                                                                                                <SfNumericTextBox @bind-Value="@(ExposedInfantsDetailsData.HivTbTrackingFormExposedInfantsId)" Enabled="false" Placeholder="OutPut Id" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                                                                            </div>
                                                                                            <div class="form-group col-md-4">
                                                                                                <p>Individual ID</p>
                                                                                                <SfDropDownList @bind-Value="@(ExposedInfantsDetailsData.HouseHoldMemberId)" Enabled="true" TItem="ViewHouseHoldMembers" TValue="int?" DataSource="@_HouseHoldMemberData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                    <DropDownListTemplates TItem="ViewHouseHoldMembers">
                                                                                                        <ItemTemplate>
                                                                                                            <div style="margin-left:10px;">
                                                                                                                <table>
                                                                                                                    <tr>
                                                                                                                        <td><p>@((context as ViewHouseHoldMembers).HouseHoldMemberCode)</p></td>
                                                                                                                        <td><p style="margin-left:10px;">@((context as ViewHouseHoldMembers).FullName)</p></td>
                                                                                                                    </tr>
                                                                                                                </table>
                                                                                                            </div>
                                                                                                        </ItemTemplate>
                                                                                                        <ValueTemplate>
                                                                                                            @((context as ViewHouseHoldMembers).HouseHoldMemberCode) @((context as ViewHouseHoldMembers).FullName)
                                                                                                            @*<div class="dropdown-width" style="width: 100%; height: 100%; margin-left: 10px;">
                                                                                                                <table>
                                                                                                                    <tr>
                                                                                                                        <td><p>@((context as ViewHouseHoldMembers).HouseHoldMemberCode)</p></td>
                                                                                                                        <td><p style="margin-left:10px;">@((context as ViewHouseHoldMembers).FullName)</p></td>
                                                                                                                    </tr>
                                                                                                                </table>
                                                                                                            </div>*@
                                                                                                        </ValueTemplate>
                                                                                                    </DropDownListTemplates>
                                                                                                    <DropDownListFieldSettings Value="@nameof(ViewHouseHoldMembers.HouseHoldMemberId)" Text="@nameof(ViewHouseHoldMembers.HouseHoldMemberCode)"></DropDownListFieldSettings>
                                                                                                </SfDropDownList>
                                                                                                <BSButton Class="btn-primary" IsBlock="true" @onclick="AddNewHouseHoldMemberbtnClick">Add Household Member</BSButton>
                                                                                            </div>
                                                                                            @*<div class="form-group col-md-4">

                                                                                                </div>*@
                                                                                            <div class="form-group col-md-4">
                                                                                                <p>Date of Registration</p>
                                                                                                <SfDatePicker @bind-Value="@(ExposedInfantsDetailsData.RegistrationDate)" Format="dd/MM/yyyy" Placeholder="Date of Birth" FloatLabelType="FloatLabelType.Never">

                                                                                                </SfDatePicker>
                                                                                            </div>
                                                                                            <div class="form-group col-md-4">
                                                                                                <p>Registration Status</p>
                                                                                                <SfDropDownList @bind-Value="@(ExposedInfantsDetailsData.RegistrationStatusId)" Enabled="true" TItem="ARegistrationStatus" TValue="int?" DataSource="@RegistrationStatusData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                    <DropDownListFieldSettings Value="@nameof(ARegistrationStatus.RegistrationStatusId)" Text="@nameof(ARegistrationStatus.RegistrationStatusDesc)"></DropDownListFieldSettings>
                                                                                                </SfDropDownList>
                                                                                            </div>
                                                                                            <div class="form-group col-md-4">
                                                                                                <p>Has Client been supported to enroll and adhere to PMTCT?</p>
                                                                                                <SfDropDownList @bind-Value="@(ExposedInfantsDetailsData.SupportedToEnrollAndAdhereToPmtct)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                    <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                </SfDropDownList>
                                                                                            </div>
                                                                                            <div class="form-group col-md-4">
                                                                                                <p>Has HEI been referred for PCR Test?</p>
                                                                                                <SfMultiSelect @ref="PcrTestObj" TValue="int[]" TItem="APcrTest" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@PcrTestData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                                                                                    <MultiSelectFieldSettings Value="@nameof(APcrTest.PcrTestId)" Text="@nameof(APcrTest.PcrTestDesc)"></MultiSelectFieldSettings>
                                                                                                    <MultiSelectEvents TValue="int[]" TItem="APcrTest" ValueChange="OnPcrTestChange" DataBound="OnPcrTestBound"></MultiSelectEvents>
                                                                                                </SfMultiSelect>
                                                                                            </div>
                                                                                            <div class="form-group col-md-4">
                                                                                                <p>Has PMTCT mother been provided with treatment literacy?</p>
                                                                                                <SfDropDownList @bind-Value="@(ExposedInfantsDetailsData.PmtctmotherProvidedWithTreatmentLiteracy)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                    <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                </SfDropDownList>
                                                                                            </div>
                                                                                            <div class="form-group col-md-4">
                                                                                                <p>Has HEI completed EID cascade and graduated off PMTCT?</p>
                                                                                                <SfDropDownList @bind-Value="@(ExposedInfantsDetailsData.EidCascadeId)" Enabled="true" TItem="AEidCascade" TValue="int?" DataSource="@EidCascadeData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                    <DropDownListFieldSettings Value="@nameof(AEidCascade.EidCascadeId)" Text="@nameof(AEidCascade.EidCascadeDesc)"></DropDownListFieldSettings>
                                                                                                </SfDropDownList>
                                                                                            </div>
                                                                                            @if (ExposedInfantsDetailsData.EidCascadeId == 6)
                                                                                            {
                                                                                                <div class="form-group col-md-4">
                                                                                                    <p>Transferred To</p>
                                                                                                    <SfTextBox Multiline="false" @bind-Value="@(ExposedInfantsDetailsData.EidCascadeTransferred)" Enabled="true" Placeholder="Enter Place they are transfered to" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                </div>
                                                                                            }
                                                                                            @if (ExposedInfantsDetailsData.EidCascadeId == 2) {
                                                                                                <div class="form-group col-md-4">
                                                                                                    <p>If Discharged Pos., Has HEI Been enrolled on ART?</p>
                                                                                                    <SfDropDownList @bind-Value="@(ExposedInfantsDetailsData.IsEnrolledOnArt)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                        <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                    </SfDropDownList>
                                                                                                </div>
                                                                                            }
                                                                                            
                                                                                            @if (ExposedInfantsDetailsData.IsEnrolledOnArt == 1)
                                                                                            {
                                                                                                <div class="form-group col-md-4">
                                                                                                    <p>ART No. </p>
                                                                                                    <SfTextBox Multiline="false" @bind-Value="@(ExposedInfantsDetailsData.ArtNumber)" Enabled="true" Placeholder="Enter Art Number" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                </div>
                                                                                             }
                                                                                            
                                                                                            <div class="form-group col-md-4">
                                                                                                <p>Has HEI been tracked and returned to care?</p>
                                                                                                <SfDropDownList @bind-Value="@(ExposedInfantsDetailsData.IsTrackedAndReturnedToCare)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                    <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                </SfDropDownList>
                                                                                            </div>
                                                                                            <div class="form-group col-md-4">
                                                                                                <p>HEI Feeding Status</p>
                                                                                                <SfDropDownList @bind-Value="@(ExposedInfantsDetailsData.FeedingStatusId)" Enabled="true" TItem="AFeedingStatus" TValue="int?" DataSource="@FeedingStatusData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                    <DropDownListFieldSettings Value="@nameof(AFeedingStatus.FeedingStatusId)" Text="@nameof(AFeedingStatus.FeedingStatusDesc)"></DropDownListFieldSettings>
                                                                                                </SfDropDownList>
                                                                                            </div>
                                                                                            <div class="form-group col-md-12">
                                                                                                <SfDialog @ref="@NewHouseholdMemberDialogue" Height="auto" Width="80%" AllowDragging="true" Target=".mainbody" ShowCloseIcon="true" IsModal="true" Visible="false">
                                                                                                    <DialogTemplates>
                                                                                                        <Header>
                                                                                                            <div id="template" title="New Household Member" class="e-icon-settings">New Household Member</div>
                                                                                                        </Header>
                                                                                                        <Content>
                                                                                                            <div style="padding:10px">
                                                                                                                <EditForm Model="@NewHouseHoldMemberData">
                                                                                                                    <div class="form-row">
                                                                                                                        <div class="form-group col-md-12" hidden>
                                                                                                                            <SfNumericTextBox ID="HouseHoldMemberId" @bind-Value="@(NewHouseHoldMemberData.HouseHoldMemberId)" Enabled="false" Placeholder="OutPut Id" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>Unique Identifier</p>
                                                                                                                            <SfMaskedTextBox @ref="NewHouseHoldMemberCodeObj" @bind-Value="@(NewHouseHoldMemberData.HouseHoldMemberCode)" Readonly="false" Mask=">LL-00-0000-00"></SfMaskedTextBox>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>SURNAME</p>
                                                                                                                            <SfTextBox Multiline="false" @bind-Value="@(NewHouseHoldMemberData.Surname)" Enabled="true" Placeholder="Enter Surname" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>GIVEN NAME</p>
                                                                                                                            <SfTextBox Multiline="false" @bind-Value="@(NewHouseHoldMemberData.Givenname)" Enabled="true" Placeholder="Enter Given Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>Date of Birth </p>
                                                                                                                            <SfDatePicker @bind-Value="@(NewHouseHoldMemberData.DoB)" Format="dd/MM/yyyy" Placeholder="Date of Birth" FloatLabelType="FloatLabelType.Never">
                                                                                                                                <DatePickerEvents TValue="DateTime?" ValueChange="OnMemberDateChange"></DatePickerEvents>
                                                                                                                            </SfDatePicker>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>Age</p>
                                                                                                                            <SfNumericTextBox @bind-Value="@NewHouseHoldMemberData.Age" Enabled="true" Placeholder="Enter the age" OnChange="OnMemberAgeChange" FloatLabelType="FloatLabelType.Never"></SfNumericTextBox>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>Gender</p>
                                                                                                                            <SfDropDownList @bind-Value="@(NewHouseHoldMemberData.GenderId)" Enabled="true" TItem="AGender" TValue="string" DataSource="@GenderData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                <DropDownListFieldSettings Value="@nameof(AGender.GenderId)" Text="@nameof(AGender.GenderDescription)"></DropDownListFieldSettings>
                                                                                                                            </SfDropDownList>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>Program Participation Status</p>
                                                                                                                            <SfDropDownList @bind-Value="@(NewHouseHoldMemberData.ProgramParticipationId)" Enabled="true" TItem="AProgramParticipationStatus" TValue="int?" DataSource="@ProgramParticipationData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                <DropDownListFieldSettings Value="@nameof(AProgramParticipationStatus.ProgramParticipationId)" Text="@nameof(AProgramParticipationStatus.ProgramParticipationDescription)"></DropDownListFieldSettings>
                                                                                                                            </SfDropDownList>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>Beneficiary Known Risk Factor</p>
                                                                                                                            <SfDropDownList @bind-Value="@(NewHouseHoldMemberData.KnownRiskFactorId)" Enabled="true" TItem="AKnownRiskFactors" TValue="int?" DataSource="@KnownRiskFactorsData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                <DropDownListFieldSettings Value="@nameof(AKnownRiskFactors.KnownRiskFactorId)" Text="@nameof(AKnownRiskFactors.KnownRiskFactorDescription)"></DropDownListFieldSettings>
                                                                                                                            </SfDropDownList>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>Beneficiary is caregiver?</p>
                                                                                                                            <SfDropDownList @bind-Value="@(NewHouseHoldMemberData.IsCareGiver)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                            </SfDropDownList>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>OVC is Enrolled in School?</p>
                                                                                                                            <SfDropDownList @bind-Value="@(NewHouseHoldMemberData.IsEnrolledInSchool)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                            </SfDropDownList>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>Is OVC Attending School regularly?</p>
                                                                                                                            <SfDropDownList @bind-Value="@(NewHouseHoldMemberData.IsAttendingSchoolRegularly)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                            </SfDropDownList>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>Education Level</p>
                                                                                                                            <SfDropDownList @bind-Value="@(NewHouseHoldMemberData.EducationLevelId)" Enabled="true" TItem="AEducationLevel" TValue="int?" DataSource="@EducationLevelData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                <DropDownListFieldSettings Value="@nameof(AEducationLevel.EducationLevelId)" Text="@nameof(AEducationLevel.EducationLevelDescription)"></DropDownListFieldSettings>
                                                                                                                            </SfDropDownList>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>Name of School </p>
                                                                                                                            <SfTextBox Multiline="false" @bind-Value="@(NewHouseHoldMemberData.NameofSchool)" Enabled="true" Placeholder="Enter Other name of School" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>OVC is Orphaned</p>
                                                                                                                            <SfDropDownList @bind-Value="@(NewHouseHoldMemberData.IsOrphaned)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                            </SfDropDownList>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>Is child Below 5 Malnourished</p>
                                                                                                                            <SfDropDownList @bind-Value="@(NewHouseHoldMemberData.IsChildUnder5Malnourished)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                            </SfDropDownList>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>Child has a birth Certificate?</p>
                                                                                                                            <SfDropDownList @bind-Value="@(NewHouseHoldMemberData.DoesChildHaveBirthCertificate)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                            </SfDropDownList>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>Is Disabled?</p>
                                                                                                                            <SfDropDownList @bind-Value="@(NewHouseHoldMemberData.IsDisabled)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                            </SfDropDownList>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>Mention the disability</p>
                                                                                                                            <SfTextBox Multiline="false" @bind-Value="@(NewHouseHoldMemberData.DisabilityDescription)" Enabled="true" Placeholder="Enter the disability" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>Is Child Immunized?</p>
                                                                                                                            <SfDropDownList @bind-Value="@(NewHouseHoldMemberData.Ischildimmunised)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                            </SfDropDownList>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>HIV Status</p>
                                                                                                                            <SfDropDownList @bind-Value="@(NewHouseHoldMemberData.HivstatusId)" Enabled="true" TItem="AHivstatus" TValue="int?" DataSource="@HivstatusData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                <DropDownListFieldSettings Value="@nameof(AHivstatus.HivstatusId)" Text="@nameof(AHivstatus.HivstatusDescription)"></DropDownListFieldSettings>
                                                                                                                            </SfDropDownList>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>If HIV+, Currently on ART</p>
                                                                                                                            <SfDropDownList @bind-Value="@(NewHouseHoldMemberData.CurrentlyonArt)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                            </SfDropDownList>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>Has an IGA</p>
                                                                                                                            <SfDropDownList @bind-Value="@(NewHouseHoldMemberData.HasanIga)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                            </SfDropDownList>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>Is Beneficiary in Saving group</p>
                                                                                                                            <SfDropDownList @bind-Value="@(NewHouseHoldMemberData.IsinSavingsGroup)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                            </SfDropDownList>
                                                                                                                        </div>
                                                                                                                        <div class="form-group col-md-4">
                                                                                                                            <p>Is Beneficiary (aged 18-20 yrs) in-school completing apprenticeship</p>
                                                                                                                            <SfDropDownList @bind-Value="@(NewHouseHoldMemberData.Isinschoolcompletingapprenticeship)" Enabled="true" TItem="AYesNo" TValue="int?" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                                                <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                                                            </SfDropDownList>
                                                                                                                        </div>
                                                                                                                    </div>
                                                                                                                </EditForm>
                                                                                                            </div>
                                                                                                        </Content>
                                                                                                        <FooterTemplate>
                                                                                                            @*<DialogButton Content="Defer Application" IsPrimary="true" OnClick="@ComfirmationYes" />*@
                                                                                                            <BSButton Class="btn-secondary" @onclick="@SaveNewHouseHoldMemberbtnClick">Add HouseHold Member</BSButton>
                                                                                                        </FooterTemplate>
                                                                                                    </DialogTemplates>
                                                                                                </SfDialog>
                                                                                            </div>
                                                                                        </div>
                                                                                    </div>
                                                                                }
                                                                            </Template>
                                                                        </GridEditSettings>
                                                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                                                        <GridPageSettings PageSize="20"></GridPageSettings>
                                                                        <GridColumns>
                                                                            @*<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>*@
                                                                            <GridColumn Field=@nameof(HivTbTrackingFormExposedInfants.HivTbTrackingFormExposedInfantsId) HeaderText="HouseHold Member Id" TextAlign="TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
                                                                            <GridForeignColumn Field=@nameof(HivTbTrackingFormExposedInfants.HouseHoldMemberId) HeaderText="HouseHold Member Code"  EditType="EditType.DropDownEdit" ForeignKeyField="@nameof(ViewHouseHoldMembers.HouseHoldMemberId)" ForeignKeyValue="@nameof(ViewHouseHoldMembers.HouseHoldMemberCode)" ForeignDataSource="@_HouseHoldMemberData" Visible="true"></GridForeignColumn>
                                                                            <GridForeignColumn Field=@nameof(HivTbTrackingFormExposedInfants.HouseHoldMemberId) HeaderText="HouseHold Member Name"  EditType="EditType.DropDownEdit" ForeignKeyField="@nameof(ViewHouseHoldMembers.HouseHoldMemberId)" ForeignKeyValue="@nameof(ViewHouseHoldMembers.FullName)" ForeignDataSource="@_HouseHoldMemberData" Visible="true"></GridForeignColumn>
                                                                            <GridColumn Field=@nameof(HivTbTrackingFormExposedInfants.RegistrationDate) HeaderText="Date of Registration" Format="dd/MM/yyyy" EditType="EditType.DatePickerEdit"></GridColumn>
                                                                            <GridForeignColumn Field=@nameof(HivTbTrackingFormExposedInfants.RegistrationStatusId) HeaderText="Registration Status" ForeignKeyField="@nameof(ARegistrationStatus.RegistrationStatusId)" ForeignKeyValue="@nameof(ARegistrationStatus.RegistrationStatusDesc)" ForeignDataSource="@RegistrationStatusData" Width="150"></GridForeignColumn>

                                                                            @*<GridColumn Field=@nameof(HivTbTrackingFormExposedInfants.Surname) HeaderText="Surname"></GridColumn>
        <GridColumn Field=@nameof(HivTbTrackingFormExposedInfants.Givenname) HeaderText="Given name"></GridColumn>
        <GridColumn Field=@nameof(HivTbTrackingFormExposedInfants.Age) HeaderText="Age"></GridColumn>
        <GridColumn Field=@nameof(HivTbTrackingFormExposedInfants.GenderId) HeaderText="Gender" EditType="EditType.DropDownEdit" ForeignKeyField="@nameof(AGender.GenderId)" ForeignKeyValue="@nameof(AGender.GenderDescription)" DataSource="@GenderData"></GridColumn>
        <GridColumn Field=@nameof(HivTbTrackingFormExposedInfants.ProgramParticipationId) HeaderText="Program Participation" EditType="EditType.DropDownEdit" ForeignKeyField="@nameof(AProgramParticipationStatus.ProgramParticipationId)" ForeignKeyValue="@nameof(AProgramParticipationStatus.ProgramParticipationDescription)" DataSource="@ProgramParticipationData"></GridColumn>
        <GridColumn Field=@nameof(HivTbTrackingFormExposedInfants.KnownRiskFactorId) HeaderText="Known Risk Factor" EditType="EditType.DropDownEdit" ForeignKeyField="@nameof(AKnownRiskFactors.KnownRiskFactorId)" ForeignKeyValue="@nameof(AKnownRiskFactors.KnownRiskFactorDescription)" DataSource="@KnownRiskFactorsData"></GridColumn>
        <GridColumn Field=@nameof(HivTbTrackingFormExposedInfants.IsCareGiver) HeaderText="Is Care Giver" EditType="EditType.DropDownEdit" ForeignKeyField="@nameof(AYesNo.YesNoId)" ForeignKeyValue="@nameof(AYesNo.YesNoDescription)" DataSource="@YesNoData"></GridColumn>*@
                                                                            <GridColumn HeaderText="Manage Records" Width="140">
                                                                                <GridCommandColumns>
                                                                                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="Edit" })" Title="Edit"></GridCommandColumn>
                                                                                </GridCommandColumns>
                                                                            </GridColumn>
                                                                        </GridColumns>
                                                                    </SfGrid>
                                                                </div>
                                                            }
                                                            <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                            <div class="form-group col-md-4">
                                                                <p>Name of Social Worker</p>
                                                                <SfTextBox Multiline="false" @bind-Value="@(TrackingFormHeaderData.SocialWorkerName)" Enabled="true" Placeholder="Enter Other Not Suppressing Reason" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>Title </p>
                                                                <SfTextBox Multiline="false" @bind-Value="@(TrackingFormHeaderData.SocialWorkerTitle)" Enabled="true" Placeholder="Enter Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>Contact</p>
                                                                <SfTextBox Multiline="false" @bind-Value="@(TrackingFormHeaderData.SocialWorkerContact)" Enabled="true" Placeholder="Enter Title" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>Date</p>
                                                                <SfDatePicker @bind-Value="@(TrackingFormHeaderData.SocialWorkerEntryDate)" Format="dd/MM/yyyy" Placeholder="Enter Date" FloatLabelType="FloatLabelType.Never" />
                                                            </div>
                                                            <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                            <div class="form-group col-md-4">
                                                                <p>Reviewed By </p>
                                                                <SfTextBox Multiline="false" @bind-Value="@(TrackingFormHeaderData.ReviewedBy)" Enabled="true" Placeholder="Enter Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>Title</p>
                                                                <SfTextBox Multiline="false" @bind-Value="@(TrackingFormHeaderData.ReviewedTitle)" Enabled="true" Placeholder="Enter Title" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>Contact </p>
                                                                <SfTextBox Multiline="false" @bind-Value="@(TrackingFormHeaderData.ReviewedContact)" Enabled="true" Placeholder="Enter Contact" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>Date</p>
                                                                <SfDatePicker @bind-Value="@(TrackingFormHeaderData.ReviewDate)" Format="dd/MM/yyyy" Placeholder="Enter Date" FloatLabelType="FloatLabelType.Never" />
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </Template>
                                            <FooterTemplate>
                                                <SfButton CssClass="e-btn e-success" OnClick="SaveFormBtnClick"> Save Form</SfButton>
                                                <SfButton CssClass="e-btn e-danger" OnClick="CancelFormBtnClick"> Cancel</SfButton>
                                            </FooterTemplate>
                                        </GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                        <GridPageSettings PageSize="20"></GridPageSettings>
                                        <GridColumns>
                                            @*<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>*@
                                            <GridColumn HeaderText="Manage Records" Width="120" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left">
                                                <GridCommandColumns>
                                                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="Edit" })" Title="Edit"></GridCommandColumn>
                                                </GridCommandColumns>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(spHIV_TB_TrackingFormGetAllResult.HIV_TB_TrackingFormId) HeaderText="HIV TB Tracking Form Id" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
                                            <GridColumn Field=@nameof(spHIV_TB_TrackingFormGetAllResult.FollowUpDate) HeaderText="FollowUp Date" Format="dd/MM/yyyy" Width="140"></GridColumn>
                                            <GridColumn Field=@nameof(spHIV_TB_TrackingFormGetAllResult.HouseHoldCode) Visible="false" HeaderText="HouseHold Code" Width="180"></GridColumn>
                                            <GridColumn Field=@nameof(spHIV_TB_TrackingFormGetAllResult.HouseHoldMemberCode) HeaderText="HouseHold Member Code" Width="180"></GridColumn>
                                            <GridColumn Field=@nameof(spHIV_TB_TrackingFormGetAllResult.Surname) Visible="true" HeaderText="Surname" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="180"></GridColumn>
                                            <GridColumn Field=@nameof(spHIV_TB_TrackingFormGetAllResult.Givenname) HeaderText="Given Name" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="180"></GridColumn>
                                            <GridForeignColumn Field=@nameof(spHIV_TB_TrackingFormGetAllResult.GenderId) HeaderText="Gender" ForeignKeyField="@nameof(AGender.GenderId)" ForeignKeyValue="@nameof(AGender.GenderDescription)" ForeignDataSource="@GenderData" Width="150"></GridForeignColumn>
                                            <GridColumn Field=@nameof(spHIV_TB_TrackingFormGetAllResult.DoB) HeaderText="Date of birth" Format="dd/MM/yyyy" EditType="EditType.DatePickerEdit" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="140"></GridColumn>
                                            <GridColumn Field=@nameof(spHIV_TB_TrackingFormGetAllResult.Age) HeaderText="Age" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="140"></GridColumn>
                                            <GridColumn Field=@nameof(spHIV_TB_TrackingFormGetAllResult.PhoneNumber) HeaderText="Phone Number" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="140"></GridColumn>
                                            <GridForeignColumn Field=@nameof(spHIV_TB_TrackingFormGetAllResult.ClientMemberStatusId) HeaderText="Client Member Status" ForeignKeyField="@nameof(AClientMemberStatus.ClientMemberStatusId)" ForeignKeyValue="@nameof(AClientMemberStatus.ClientMemberStatusDes)" ForeignDataSource="@ClientMemberStatusData" Width="150"></GridForeignColumn>
                                            <GridForeignColumn Field=@nameof(spHIV_TB_TrackingFormGetAllResult.HIVStatusId) HeaderText="HIV status" ForeignKeyField="@nameof(AHivstatus.HivstatusId)" ForeignKeyValue="@nameof(AHivstatus.HivstatusDescription)" ForeignDataSource="@HivstatusData" Width="150"></GridForeignColumn>
                                            <GridForeignColumn Field=@nameof(spHIV_TB_TrackingFormGetAllResult.CientClassificationId) HeaderText="Clients Classification" ForeignKeyField="@nameof(ACientClassification.CientClassificationId)" ForeignKeyValue="@nameof(ACientClassification.CientClassificationDesc)" ForeignDataSource="@CientClassificationData" Width="150"></GridForeignColumn>
                                            <GridForeignColumn Field=@nameof(spHIV_TB_TrackingFormGetAllResult.FacilityId) HeaderText="Health facility" ForeignKeyField="@nameof(AFacility.FacilityId)" ForeignKeyValue="@nameof(AFacility.FacilityName)" ForeignDataSource="@FacilityData" Width="180"></GridForeignColumn>
                                        </GridColumns>
                                    </SfGrid>
                                </div>
                            </div>
                        </div>
                    }
                </Template>
                <FooterTemplate>
                    <SfButton CssClass="e-btn e-success" OnClick="SaveRegisterBtnClick"> Save Form</SfButton>
                    <SfButton CssClass="e-btn e-danger" OnClick="CancelRegisterBtnClick"> Cancel</SfButton>
                </FooterTemplate>
            </GridEditSettings>
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
            <GridPageSettings PageSize="20"></GridPageSettings>
            <GridColumns>
                @*<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>*@
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.HouseHoldId) HeaderText="HIV TB Tracking Form Id" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.HouseHoldCode) HeaderText="HouseHold Code" Width="100"></GridColumn>
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.DistrictDescription) HeaderText="District" Width="100"></GridColumn>
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.SubcountyDescription) Visible="true" HeaderText="Sub county" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="100"></GridColumn>
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.ParishDescription) HeaderText="Parish" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="100"></GridColumn>
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.VillageDescription) HeaderText="Village" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="100"></GridColumn>
                @*<GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.VillageDescription) HeaderText="Given Name" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="100"></GridColumn>*@
                <GridColumn HeaderText="Manage Records" Width="120" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left">
                    <GridCommandColumns>
                        <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="view" })" Title="view"></GridCommandColumn>
                    </GridCommandColumns>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>

@code {
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
{
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    #endregion Toasters

    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "90vh", Width = "98%" };
    SfGrid<spHIV_TB_TrackingFormGetAllResult> TrackingFormHeaderGrid;
    SfGrid<HivTbTrackingFormExposedInfants> ExposedInfantsGrid;
    SfGrid<spBeneficiaryIdentificationRegisterGetAllResult> BeneficiaryRegisterGrid;
    SfMaskedTextBox NewHouseHoldMemberCodeObj;
    private spHIV_TB_TrackingFormGetAllResult TrackingFormHeaderData { get; set; }
    private spBeneficiaryIdentificationRegisterGetAllResult BeneficiaryRegisterData { get; set; }
    private HivTbTrackingFormExposedInfants ExposedInfantsDetailsData { get; set; }
    HouseHoldMembers NewHouseHoldMemberData = new HouseHoldMembers();
    private SfDialog NewHouseholdMemberDialogue;
    public Query MainQuery = new Query();

    SfMultiSelect<int[], AServiceProvided> ServiceProvidedObj;
    SfMultiSelect<int[], ANotSuppressingReason> NotSuppressingReasonObj;
    SfMultiSelect<int[], ANonAdherence> NonAdherenceIdObj;
    SfMultiSelect<int[], APcrTest> PcrTestObj;
    SfMultiSelect<int[], AStrategiesForImprovingTreatmentContinuity> StrategiesForImprovingTreatmentContinuityObj;
    SfMultiSelect<int[], AReasonForTreatmentInterruption> ReasonForTreatmentInterruptionObj;
    SfMultiSelect<int[], AReasonsForNonOptimization> ReasonsForNonOptimizationObj;
    List<AVillage> VillageData { get; set; }
    List<AParish> ParishData { get; set; }
    List<ASubcounty> SubcountyData { get; set; }
    List<AVillage> _VillageData { get; set; }
    List<AParish> _ParishData { get; set; }
    List<ASubcounty> _SubcountyData { get; set; }
    List<ADistrict> DistrictData { get; set; }
    List<AGender> GenderData { get; set; }
    List<AYesNo> YesNoData { get; set; }
    List<AHivstatus> HivstatusData { get; set; }
    List<AFeedingStatus> FeedingStatusData { get; set; }
    List<AClientCareModality> ClientCareModalityData { get; set; }
    List<AClientMemberStatus> ClientMemberStatusData { get; set; }
    List<BeneficiaryIdentificationRegister> IdentificationRegisterData { get; set; }
    List<ViewHouseHoldMembers> HouseHoldMemberData { get; set; }
    List<ViewHouseHoldMembers> _HouseHoldMemberData { get; set; }
    List<ACientClassification> CientClassificationData { get; set; }
    List<AFacility> FacilityData { get; set; }
    List<ARegimen> RegimenData { get; set; }
    List<AEidCascade> EidCascadeData { get; set; }
    List<ARegimenCategory> RegimenCategoryData { get; set; }
    List<ADrugDispensingModality> DrugDispensingModalityData { get; set; }
    List<AViralLoadSuppressed> ViralLoadSuppressedData { get; set; }
    List<ATbclientRefered> TbclientReferedData { get; set; }
    List<ATbtestResult> TbtestResultData { get; set; }
    List<ATbtreatment> TbtreatmentData { get; set; }
    List<ATbtreatmentDuration> TbtreatmentDurationData { get; set; }
    List<AFollowupMeans> FollowupMeanData { get; set; }
    List<APersonContacted> PersonContactedData { get; set; }
    List<AServiceProvided> ServiceProvidedData { get; set; }
    List<AReasonForTreatmentInterruption> ReasonForTreatmentInterruptionData { get; set; }
    List<AReasonsForNonOptimization> ReasonsForNonOptimizationData{get;set;}
    List<AStrategiesForImprovingTreatmentContinuity> StrategiesForImprovingTreatmentContinuityData {get;set;}
    List<ANotSuppressingReason> NotSuppressingReasonData { get; set; }
    List<ARegistrationStatus> RegistrationStatusData { get; set; }
    List<AKnownRiskFactors> KnownRiskFactorsData { get; set; }
    List<AProgramParticipationStatus> ProgramParticipationData { get; set; }
    List<AEducationLevel> EducationLevelData { get; set; }
    List<APcrTest> PcrTestData { get; set; }
    List<ANonAdherence> NonAdherenceData { get; set; }
    List<HivTbTrackingFormExposedInfants> HIVExposedInfantsData { get; set; } = new List<HivTbTrackingFormExposedInfants>();

    private SearchPanel InputModel = new();



    List<AVillage> mVillageData { get; set; }
    List<AParish> mParishData { get; set; }
    List<ASubcounty> mSubcountyData { get; set; }
    List<ASubcounty> facilitySubcountyData { get; set; }
    List<ADistrict> _DistrictData { get; set; }
    bool isEnabled { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            if (!userManagement.IsSignedIn())
            {
                Navigation.NavigateTo("/", true);
            }
            else
            {
                using (var db = new MUCOBADIContext())
                {
                    StrategiesForImprovingTreatmentContinuityData = db.AStrategiesForImprovingTreatmentContinuity.AsNoTracking().ToList();
                    ReasonsForNonOptimizationData = db.AReasonsForNonOptimization.AsNoTracking().ToList();
                    ReasonForTreatmentInterruptionData = db.AReasonForTreatmentInterruption.AsNoTracking().ToList();
                    PcrTestData = db.APcrTest.AsNoTracking().AsNoTracking().ToList();
                    EidCascadeData = db.AEidCascade.AsNoTracking().ToList();
                    FeedingStatusData = db.AFeedingStatus.AsNoTracking().ToList();
                    PersonContactedData = db.APersonContacted.AsNoTracking().ToList();
                    TbtreatmentData = db.ATbtreatment.AsNoTracking().ToList();
                    TbtreatmentDurationData = db.ATbtreatmentDuration.AsNoTracking().ToList();
                    ViralLoadSuppressedData = db.AViralLoadSuppressed.AsNoTracking().ToList();
                    RegimenData = db.ARegimen.AsNoTracking().ToList();
                    RegimenCategoryData = db.ARegimenCategory.AsNoTracking().ToList();
                    YesNoData = db.AYesNo.AsNoTracking().ToList();
                    FacilityData = db.AFacility.AsNoTracking().ToList();
                    HivstatusData = db.AHivstatus.AsNoTracking().ToList();
                    ClientCareModalityData = db.AClientCareModality.AsNoTracking().ToList();
                    TbclientReferedData = db.ATbclientRefered.AsNoTracking().ToList();
                    TbtestResultData = db.ATbtestResult.AsNoTracking().ToList();
                    ServiceProvidedData = db.AServiceProvided.AsNoTracking().ToList();
                    NotSuppressingReasonData = db.ANotSuppressingReason.AsNoTracking().ToList();
                    RegistrationStatusData = db.ARegistrationStatus.AsNoTracking().ToList();
                    KnownRiskFactorsData = db.AKnownRiskFactors.AsNoTracking().ToList();
                    GenderData = db.AGender.AsNoTracking().ToList();
                    NonAdherenceData = db.ANonAdherence.AsNoTracking().ToList();
                    //SourceofIdentificationData = db.ASourceofIdentification.AsNoTracking().ToList();
                    _VillageData = db.AVillage.AsNoTracking().ToList();
                    _ParishData = db.AParish.AsNoTracking().ToList();
                    _SubcountyData = db.ASubcounty.AsNoTracking().ToList();
                    VillageData = db.AVillage.AsNoTracking().ToList();
                    ParishData = db.AParish.AsNoTracking().ToList();
                    SubcountyData = db.ASubcounty.AsNoTracking().ToList();
                    DistrictData = db.ADistrict.AsNoTracking().ToList();
                    IdentificationRegisterData = db.BeneficiaryIdentificationRegister.AsNoTracking().ToList();
                    ClientMemberStatusData = db.AClientMemberStatus.AsNoTracking().ToList();
                    CientClassificationData = db.ACientClassification.AsNoTracking().ToList();
                    DrugDispensingModalityData = db.ADrugDispensingModality.AsNoTracking().ToList();
                    FollowupMeanData = db.AFollowupMeans.AsNoTracking().ToList();
                    ProgramParticipationData = db.AProgramParticipationStatus.AsNoTracking().ToList();
                    EducationLevelData = db.AEducationLevel.AsNoTracking().ToList();

                    InputModel = new();
                    _DistrictData = db.ADistrict.AsNoTracking().ToList();
                    var user = db.ViewUserManagement.FirstOrDefault(o => o.UserName == userManagement.GetUserName());
                    if (!user.RoleName.Contains("Super Administrator") && !user.RoleName.Contains("Administrator") && !user.RoleName.Contains("mel director") && !user.RoleName.Contains("mel manager") && !user.RoleName.Contains("cluster manager"))
                    {
                        var districtlist = userManagement.GetUserDistrict();
                        if (districtlist != null && districtlist.Count > 0)
                        {
                            List<int?> m = new List<int?>();
                            foreach (var n in districtlist)
                            {
                                m.Add(n);
                            }

                            InputModel.DistrictId = m.ToArray();
                            _SubcountyData = db.ASubcounty.AsNoTracking().ToList().Where(o => districtlist.Any(a => a == o.DistrictId)).ToList();
                            MainQuery = new Query();
                            MainQuery.AddParams("DistrictId", string.Join(",", districtlist.ToArray()));
                        }
                        var subcountyList = userManagement.GetUserSubcounty();
                        if (subcountyList != null && subcountyList.Count > 0)
                        {
                            List<int?> m = new List<int?>();
                            foreach (var n in subcountyList)
                            {
                                m.Add(n);
                            }
                            InputModel.SubcountyId = m.ToArray();
                            _ParishData = db.AParish.AsNoTracking().ToList().Where(o => subcountyList.Any(a => a == o.SubcountyId)).ToList();
                            MainQuery = new Query();
                            MainQuery.AddParams("SubcountyId", string.Join(",", subcountyList.ToArray()));
                        }
                    }
                    else
                    {
                        isEnabled = true;
                    }

                }
            }

        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }

    private void SearchRecords()
    {
        try
        {
            MainQuery = new Query();
            if (InputModel.DistrictId != null)
            {
                MainQuery.AddParams("DistrictId", string.Join(",", InputModel.DistrictId));
            }
            if (InputModel.SubcountyId != null)
            {
                MainQuery.AddParams("SubcountyId", string.Join(",", InputModel.SubcountyId));
            }
            if (InputModel.ParishId != null)
            {
                MainQuery.AddParams("ParishId", string.Join(",", InputModel.ParishId));
            }
            if (InputModel.VillageId != null)
            {
                MainQuery.AddParams("VillageId", string.Join(",", InputModel.VillageId));
            }
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    private void ClearSearchBtnClick()
    {
        InputModel = new();
        MainQuery = new Query();
        using (var db = new MUCOBADIContext())
        {
            var user = db.ViewUserManagement.FirstOrDefault(o => o.UserName == userManagement.GetUserName());
            if (!user.RoleName.Contains("Super Administrator") && !user.RoleName.Contains("Administrator") && !user.RoleName.Contains("mel director") && !user.RoleName.Contains("mel manager") && !user.RoleName.Contains("cluster manager"))
            {
                var districtlist = userManagement.GetUserDistrict();
                if (districtlist != null && districtlist.Count > 0)
                {
                    List<int?> m = new List<int?>();
                    foreach (var n in districtlist)
                    {
                        m.Add(n);
                    }

                    InputModel.DistrictId = m.ToArray();
                    _SubcountyData = db.ASubcounty.AsNoTracking().ToList().Where(o => districtlist.Any(a => a == o.DistrictId)).ToList();
                    MainQuery = new Query();
                    MainQuery.AddParams("DistrictId", string.Join(",", districtlist.ToArray()));
                }
                var subcountyList = userManagement.GetUserSubcounty();
                if (subcountyList != null && subcountyList.Count > 0)
                {
                    List<int?> m = new List<int?>();
                    foreach (var n in subcountyList)
                    {
                        m.Add(n);
                    }
                    InputModel.SubcountyId = m.ToArray();
                    _ParishData = db.AParish.AsNoTracking().ToList().Where(o => subcountyList.Any(a => a == o.SubcountyId)).ToList();
                    MainQuery = new Query();
                    MainQuery.AddParams("SubcountyId", string.Join(",", subcountyList.ToArray()));
                }
            }
            else
            {
                isEnabled = true;
            }
        }
    }


    public void OnDistrictChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            using (var db = new MUCOBADIContext())
            {
                mSubcountyData = db.ASubcounty.Where(o => args.Value.Any(a => a == o.DistrictId) == true).AsNoTracking().ToList();
            }
        }
    }
    public void OnSubcountyChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            using (var db = new MUCOBADIContext())
            {
                mParishData = db.AParish.Where(o => args.Value.Any(a => a == o.SubcountyId) == true).AsNoTracking().ToList();
            }
        }
    }
    public void OnParishChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            using (var db = new MUCOBADIContext())
            {
                mVillageData = db.AVillage.Where(o => args.Value.Any(a => a == o.ParishId) == true).AsNoTracking().ToList();
            }
        }
    }
    private void CohortDateChange(ChangedEventArgs<DateTime?> args)
    {
        if (TrackingFormHeaderData.CohortNo.HasValue)
        {
            //TrackingFormHeaderData.TreatmentDuration = (DateTime.Now.Year - TrackingFormHeaderData.CohortNo.Value.Year);
            TrackingFormHeaderData.TreatmentDuration = ((DateTime.Now.Year - TrackingFormHeaderData.CohortNo.Value.Year) * 12) + DateTime.Now.Month - TrackingFormHeaderData.CohortNo.Value.Month;
        }
        else
        {
            TrackingFormHeaderData.TreatmentDuration=null;
        }
    }

    private async Task AddNewHouseHoldMemberbtnClick()
    {
        try
        {
            NewHouseHoldMemberData = new HouseHoldMembers();
            NewHouseHoldMemberData.HouseHoldId = BeneficiaryRegisterData.HouseHoldId;
            //NewHouseHoldMemberData.HouseHoldMemberCode = BeneficiaryRegisterData.HouseHoldCode;
            //string householdCode = BeneficiaryRegisterData.HouseHoldCode.Substring(0, 2) + "-" + BeneficiaryRegisterData.HouseHoldCode.Substring(2, 2) + "-" + BeneficiaryRegisterData.HouseHoldCode.Substring(4, 4);
            using(var db = new SPToCoreContext())
            {
                var records = await db.spLastMemberNumberGetAllAsync(BeneficiaryRegisterData.HouseHoldId);
                int _count = 1;
                if (records.Count > 0)
                {
                    _count = (records[0].LastMemberNumber.Value + 1);
                }
                NewHouseHoldMemberData.HouseHoldMemberCode = BeneficiaryRegisterData.HouseHoldCode + "-" + _count.ToString("D2");
                NewHouseHoldMemberCodeObj.Value = NewHouseHoldMemberData.HouseHoldMemberCode;
            }

        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            await NewHouseholdMemberDialogue.Show();
            StateHasChanged();
        }
    }
    private async Task SaveNewHouseHoldMemberbtnClick()
    {
        try
        {
            using (var db = new MUCOBADIContext())
            {
                if (string.IsNullOrEmpty(NewHouseHoldMemberData.Surname))
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Surname", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });

                }
                else if (string.IsNullOrEmpty(NewHouseHoldMemberData.Givenname))
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Given name", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });

                }
                else if (NewHouseHoldMemberData.GenderId == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Gender", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });

                }
                else if (NewHouseHoldMemberData.ProgramParticipationId == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Program Participation Status", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });

                }
                else if (NewHouseHoldMemberData.KnownRiskFactorId == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Known Risk Factor", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });

                }
                else if (NewHouseHoldMemberData.IsCareGiver == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Is Care Giver", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });

                }
                else if (NewHouseHoldMemberData.IsEnrolledInSchool == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the OVC is Enrolled in School", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });

                }
                else if (NewHouseHoldMemberData.IsEnrolledInSchool == 1 && NewHouseHoldMemberData.IsAttendingSchoolRegularly == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Is OVC Attending School regularly", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });

                }
                else if (NewHouseHoldMemberData.IsEnrolledInSchool == 1 && NewHouseHoldMemberData.EducationLevelId == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Education Level", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });

                }
                else if (NewHouseHoldMemberData.IsEnrolledInSchool == 1 && String.IsNullOrEmpty(NewHouseHoldMemberData.NameofSchool))
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the name of school", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });

                }
                else if (NewHouseHoldMemberData.IsOrphaned == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Is Orphaned", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });

                }
                else if (NewHouseHoldMemberData.IsChildUnder5Malnourished == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Is child Below 5 Malnourished", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });

                }
                else if (NewHouseHoldMemberData.DoesChildHaveBirthCertificate == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Child has a birth Certificate", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });

                }
                else if (NewHouseHoldMemberData.IsDisabled == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Is Disabled", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });

                }
                //else if (NewHouseHoldMemberData.IsDisabled == 1 && String.IsNullOrEmpty(NewHouseHoldMemberData.DisabilityDescription))
                //{
                //    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please Mention the disability", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });

                //}
                else if (NewHouseHoldMemberData.Ischildimmunised == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Is Child Immunized", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });

                }
                else if (NewHouseHoldMemberData.HivstatusId == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the HIV Status", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });

                }
                else if (NewHouseHoldMemberData.HivstatusId == 1 && NewHouseHoldMemberData.CurrentlyonArt == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select Currently on ART", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });

                }
                else if (NewHouseHoldMemberData.HasanIga == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select if Has an IGA", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });

                }
                else if (NewHouseHoldMemberData.IsinSavingsGroup == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select if  Beneficiary is in Saving group", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });

                }
                else if (NewHouseHoldMemberData.Isinschoolcompletingapprenticeship == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select if Beneficiary (aged 18-20 yrs) is in-school completing apprenticeship", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });

                }
                else
                {
                    string householdMemberCode = BeneficiaryRegisterData.HouseHoldCode + "-" + NewHouseHoldMemberData.HouseHoldMemberCode.Substring((NewHouseHoldMemberData.HouseHoldMemberCode.Length - 2), 2);
                    NewHouseHoldMemberData.HouseHoldMemberCode = householdMemberCode;

                    var exists = db.HouseHoldMembers.FirstOrDefault(o => o.HouseHoldMemberCode == NewHouseHoldMemberData.HouseHoldMemberCode);
                    if (exists != null)
                    {
                        var records = db.HouseHoldMembers.Where(o => o.HouseHoldId == BeneficiaryRegisterData.HouseHoldId).OrderBy(o => o.HouseHoldMemberId).AsNoTracking().ToList();
                        int _count = 1;
                        if (records.Count > 0)
                        {
                            var last = records.LastOrDefault();
                            if (last.HouseHoldMemberCode.Substring((last.HouseHoldMemberCode.Length - 2), 1).Contains("0"))
                            {
                                _count = ((Convert.ToInt32(last.HouseHoldMemberCode.Substring((last.HouseHoldMemberCode.Length - 1), 1))) + 1);
                            }
                            else
                            {
                                _count = ((Convert.ToInt32(last.HouseHoldMemberCode.Substring((last.HouseHoldMemberCode.Length - 2), 2))) + 1);
                            }
                        }
                        var _HouseHoldMemberCode = BeneficiaryRegisterData.HouseHoldCode + "-" + _count.ToString("D2");
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "There is already a household member with the household code (" + NewHouseHoldMemberData.HouseHoldMemberCode + "). We recommend moving the household code to (" + _HouseHoldMemberCode + ")", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        NewHouseHoldMemberData.HouseHoldMemberCode = _HouseHoldMemberCode;
                    }
                    else
                    {
                        var _exists = db.HouseHoldMembers.Where(o => o.HouseHoldId == NewHouseHoldMemberData.HouseHoldId).ToList().FirstOrDefault(o => ((o.Givenname.Trim() == NewHouseHoldMemberData.Givenname.Trim() && o.Surname.Trim() == NewHouseHoldMemberData.Surname.Trim()) || (o.Givenname.Trim() == NewHouseHoldMemberData.Surname.Trim() && o.Surname.Trim() == NewHouseHoldMemberData.Givenname.Trim())) && o.HouseHoldId == NewHouseHoldMemberData.HouseHoldId);
                        if (_exists == null)
                        {
                            int id = 1;
                            var last = db.HouseHoldMembers.OrderBy(o => o.HouseHoldMemberId).AsNoTracking().ToList().LastOrDefault();
                            if (last != null)
                            {
                                id = (last.HouseHoldMemberId + 1);
                            }
                            NewHouseHoldMemberData.HouseHoldMemberId = id;
                            NewHouseHoldMemberData.HouseHoldId = BeneficiaryRegisterData.HouseHoldId;
                            NewHouseHoldMemberData.HouseHoldMemberCode = householdMemberCode;
                            db.HouseHoldMembers.Add(NewHouseHoldMemberData);
                            db.SaveChanges();
                            _HouseHoldMemberData = db.ViewHouseHoldMembers.Where(o => o.HouseHoldId == BeneficiaryRegisterData.HouseHoldId).AsNoTracking().ToList();
                            ExposedInfantsDetailsData.HouseHoldMemberId = NewHouseHoldMemberData.HouseHoldMemberId;
                            NewHouseHoldMemberData = new HouseHoldMembers();
                        }

                        await NewHouseholdMemberDialogue.Hide();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            StateHasChanged();
        }
    }
    private void SaveRegisterBtnClick()
    {
        BeneficiaryRegisterGrid.EndEdit();
    }
    private void CancelRegisterBtnClick()
    {
        BeneficiaryRegisterGrid.CloseEdit();
    }
    private void SaveFormBtnClick()
    {
        TrackingFormHeaderGrid.EndEdit();
    }
    private void CancelFormBtnClick()
    {
        TrackingFormHeaderGrid.CloseEdit();
    }
    private void OnStrategiesForImprovingTreatmentContinuityChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        if (args.Value != null)
        {
            TrackingFormHeaderData.Strategies_For_Improving_Treatment_ContinuityId = string.Join(",", args.Value);
        }
        else
        {
            TrackingFormHeaderData.Strategies_For_Improving_Treatment_ContinuityId = null;
        }
    }
    private void OnStrategiesForImprovingTreatmentContinuityBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(TrackingFormHeaderData.ServiceProvidedId))
        {
            var a = TrackingFormHeaderData.Strategies_For_Improving_Treatment_ContinuityId.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            StrategiesForImprovingTreatmentContinuityObj.Value = c.ToArray();
        }
    }
    private void OnReasonForNonOptimizationChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        if (args.Value != null)
        {
            TrackingFormHeaderData.Reasons_For_Non_OptimizationId = string.Join(",", args.Value);
        }
        else
        {
            TrackingFormHeaderData.Reasons_For_Non_OptimizationId = null;
        }
    }
    private void OnReasonForNonOptimizationBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(TrackingFormHeaderData.ServiceProvidedId))
        {
            var a = TrackingFormHeaderData.Reasons_For_Non_OptimizationId.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            ReasonsForNonOptimizationObj.Value = c.ToArray();
        }
    }
    private void OnReasonForTreatmentInterruptionChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        if (args.Value != null)
        {
            TrackingFormHeaderData.Reason_For_Treatment_InterruptionId = string.Join(",", args.Value);
        }
        else
        {
            TrackingFormHeaderData.Reason_For_Treatment_InterruptionId = null;
        }
    }
    private void OnReasonForTreatmentInterruptionBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(TrackingFormHeaderData.ServiceProvidedId))
        {
            var a = TrackingFormHeaderData.Reason_For_Treatment_InterruptionId.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            ReasonForTreatmentInterruptionObj.Value = c.ToArray();
        }
    }
    private void OnServiceProvidedChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        if (args.Value != null)
        {
            TrackingFormHeaderData.ServiceProvidedId = string.Join(",", args.Value);
        }
        else
        {
            TrackingFormHeaderData.ServiceProvidedId=null;
            TrackingFormHeaderData.OtherServiceProvided = null;
        }
    }
    private void OnServiceProvidedCategoryBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(TrackingFormHeaderData.ServiceProvidedId))
        {
            var a = TrackingFormHeaderData.ServiceProvidedId.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            ServiceProvidedObj.Value = c.ToArray();
        }
    }
    private void OnNotSuppressingReasonChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        if (args.Value != null)
        {
            TrackingFormHeaderData.NotSuppressingReasonId = string.Join(",", args.Value);
        }
        else
        {
            TrackingFormHeaderData.NotSuppressingReasonId=null;
        }
    }

    private void OnNotSuppressingReasonBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(TrackingFormHeaderData.NotSuppressingReasonId))
        {
            var a = TrackingFormHeaderData.NotSuppressingReasonId.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            NotSuppressingReasonObj.Value = c.ToArray();
        }
    }
    private void OnANonAdherenceChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        if (args.Value != null)
        {
            TrackingFormHeaderData.Non_Adherence_Id = string.Join(",", args.Value);
        }
        else
        {
            TrackingFormHeaderData.NotSuppressingReasonId = null;
        }
    }
    private void OnANonAdherenceBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(TrackingFormHeaderData.Non_Adherence_Id))
        {
            var a = TrackingFormHeaderData.Non_Adherence_Id.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            NonAdherenceIdObj.Value = c.ToArray();
        }
    }
    private void OnPcrTestChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        if (args.Value != null)
        {
            ExposedInfantsDetailsData.PcrTestId = string.Join(",", args.Value);
        }
        else
        {
            ExposedInfantsDetailsData.PcrTestId=null;
        }
    }

    private void OnPcrTestBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(ExposedInfantsDetailsData.PcrTestId))
        {
            var a = ExposedInfantsDetailsData.PcrTestId.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            PcrTestObj.Value = c.ToArray();
        }
    }

    #region Review Header
    public class spHIV_TB_TrackingFormGetAllResultHeaderAdapter : DataAdaptor
    {
        public IToastService toastService;
        //private UserManagement _userManagement;
        public spHIV_TB_TrackingFormGetAllResultHeaderAdapter(IToastService ts/*, UserManagement userManagement*/)
        {
            //_userManagement = userManagement;
            toastService = ts;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<spHIV_TB_TrackingFormGetAllResult>();
            try
            {
                string HouseHoldId = null;
                double? OperatorId = null;
                string ReferenceNumber = null;
                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;
                    if (val.FirstOrDefault(o => o.Key == "HouseHoldId").Value != null)
                    {
                        HouseHoldId = val.FirstOrDefault(o => o.Key == "HouseHoldId").Value.ToString();
                    }
                    if (val.FirstOrDefault(o => o.Key == "OperatorId").Value != null)
                    {
                        OperatorId = Convert.ToDouble(val.FirstOrDefault(o => o.Key == "OperatorId").Value.ToString());
                    }
                    if (val.FirstOrDefault(o => o.Key == "ReferenceNumber").Value != null)
                    {
                        ReferenceNumber = val.FirstOrDefault(o => o.Key == "ReferenceNumber").Value.ToString();
                    }
                }
                //if (string.IsNullOrEmpty(ApplicationStatusid))
                //{
                //    ApplicationStatusid = "2,3";
                //}
                using (var dbContext = new SPToCoreContext())
                {
                    data = await dbContext.spHIV_TB_TrackingFormGetAllAsync(null, null, null, null, HouseHoldId, null, null, null);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<spHIV_TB_TrackingFormGetAllResult>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override Object Insert(DataManager dataManager, object value, string key)
        {
            try
            {
                using (var dbContext = new MUCOBADIContext())
                {
                    var val = (value as spHIV_TB_TrackingFormGetAllResult);
                    var exist = dbContext.HivTbTrackingForm.FirstOrDefault(o => o.HivTbTrackingFormId == val.HIV_TB_TrackingFormId);
                    if (exist == null)
                    {
                        HivTbTrackingForm m = new HivTbTrackingForm();

                        int id = 1;
                        var last = dbContext.HivTbTrackingForm.OrderBy(o => o.HivTbTrackingFormId).LastOrDefault();
                        if (last != null)
                        {
                            id = (last.HivTbTrackingFormId + 1);
                        }
                        m.HivTbTrackingFormId = id;
                        m.HouseHoldMemberId = val.HouseHoldMemberId;
                        m.FollowUpDate = val.FollowUpDate;
                        m.HivstatusId = val.HIVStatusId;
                        m.OnArt = val.OnART;
                        m.Artnumber = val.ARTNumber;
                        m.CohortNo = val.CohortNo;
                        m.ClientMemberStatusId = val.ClientMemberStatusId;
                        m.ClientMemberStatusOther = val.ClientMemberStatusOther;
                        m.CientClassificationId = val.CientClassificationId;
                        m.Weight = val.Weight;
                        m.PhoneNumber = val.PhoneNumber;
                        m.FacilityId = val.FacilityId;
                        m.TreatmentDuration = val.TreatmentDuration;
                        m.RegimenCategoryId = val.RegimenCategoryId;
                        m.RegimenId = val.RegimenId;
                        m.ClientCareModalityId = val.ClientCareModalityId;
                        m.ClientCareModalityIdOther = val.ClientCareModalityIdOther;
                        m.DrugDispensingModalityId = val.DrugDispensingModalityId;
                        m.CurrentCarePointSubCountyId = val.CurrentCarePointSubCountyId;
                        m.CurrentCarePointDistrictId = val.CurrentCarePointDistrictId;
                        m.LastAppointmentDate = val.LastAppointmentDate;
                        m.NextAppointmentDate = val.NextAppointmentDate;
                        m.IsClientEligibleForViralload = val.IsClientEligibleForViralload;
                        m.ViralloadTestDone = val.ViralloadTestDone;
                        m.ViralloadResultsReceived = val.ViralloadResultsReceived;
                        m.ViralloadTestResults = val.ViralloadTestResults;
                        m.ViralLoadSuppressedId = val.ViralLoadSuppressedId;
                        m.LastViralloadTestDate = val.LastViralloadTestDate;
                        m.NextViralloadTestDate = val.NextViralloadTestDate;
                        m.ClientHasPresumptiveOrActiveTb = val.ClientHasPresumptiveOrActiveTB;
                        m.ClientReceivedTbscreeningSession = val.ClientReceivedTBScreeningSession;
                        m.ClientAtTbinfectionRisk = val.ClientAtTBInfectionRisk;
                        m.ClientRefferedTestedForTb = val.ClientReffered_TestedForTB;
                        m.TbtestResultId = val.TBTestResultId;
                        m.IsOnTbtreatment = val.IsOnTBTreatment;
                        m.TbtreatmentDuration = val.TBTreatmentDuration;
                        m.IsOnTbpreventiveTreatment = val.IsOnTBPreventiveTreatment;
                        m.TptTreatmentDuration = val.TPT_Treatment_Duration;
                        m.FollowupMeansId = val.FollowupMeansId;
                        m.ClientSuccessfullyContactedOrSeen = val.ClientSuccessfullyContactedOrSeen;
                        m.AnotherPersonContactedOnBehalfOfClient = val.AnotherPersonContactedOnBehalfOfClient;
                        m.PersonContactedId = val.PersonContactedId;
                        m.OtherPersonContacted = val.OtherPersonContacted;
                        m.ServiceProvidedId = val.ServiceProvidedId;
                        m.OtherServiceProvided = val.OtherServiceProvided;
                        //m.NotSuppressingReasonId = val.NotSuppressingReasonId;
                        m.OtherNotSuppressingReason = val.OtherNotSuppressingReason;
                        m.NonAdherenceId = val.Non_Adherence_Id;
                        m.NonAdherenceOther = val.Non_Adherence_Other;
                        m.SocialWorkerNextActionTaken = val.SocialWorkerNextActionTaken;
                        m.SocialWorkerName = val.SocialWorkerName;
                        m.SocialWorkerTitle = val.SocialWorkerTitle;
                        m.SocialWorkerContact = val.SocialWorkerContact;
                        m.SocialWorkerEntryDate = val.SocialWorkerEntryDate;
                        m.ReviewedBy = val.ReviewedBy;
                        m.ReviewedTitle = val.ReviewedTitle;
                        m.ReviewedContact = val.ReviewedContact;
                        m.ReviewDate = val.ReviewDate;
                        m.OptimizedYesNo = val.OptimizedYesNo;
                        m.ReasonForTreatmentInterruptionId = val.Reason_For_Treatment_InterruptionId;
                        m.StrategiesForImprovingTreatmentContinuityId = val.Strategies_For_Improving_Treatment_ContinuityId;
                        m.ReasonsForNonOptimizationId = val.Reasons_For_Non_OptimizationId;
                        m.SupportedToDiscloseHivStatusToFamilyYesNoId = val.Supported_To_Disclose_HIV_Status_To_FamilyYesNoId;
                        //val.AddedBy = _userManagement.GetStaffName();
                        //val.AddedDate = DateTime.Now;
                        dbContext.HivTbTrackingForm.Add(m);
                        dbContext.SaveChanges();
                    }
                    else
                    {
                        exist.HouseHoldMemberId = val.HouseHoldMemberId;
                        exist.FollowUpDate = val.FollowUpDate;
                        exist.HivstatusId = val.HIVStatusId;
                        exist.OnArt = val.OnART;
                        exist.Artnumber = val.ARTNumber;
                        exist.CohortNo = val.CohortNo;
                        exist.PhoneNumber = val.PhoneNumber;
                        exist.ClientMemberStatusId = val.ClientMemberStatusId;
                        exist.ClientMemberStatusOther = val.ClientMemberStatusOther;
                        exist.CientClassificationId = val.CientClassificationId;
                        exist.Weight = val.Weight;
                        exist.FacilityId = val.FacilityId;
                        exist.TreatmentDuration = val.TreatmentDuration;
                        exist.RegimenCategoryId = val.RegimenCategoryId;
                        exist.RegimenId = val.RegimenId;
                        exist.ClientCareModalityId = val.ClientCareModalityId;
                        exist.ClientCareModalityIdOther = val.ClientCareModalityIdOther;
                        exist.DrugDispensingModalityId = val.DrugDispensingModalityId;
                        exist.CurrentCarePointSubCountyId = val.CurrentCarePointSubCountyId;
                        exist.CurrentCarePointDistrictId = val.CurrentCarePointDistrictId;
                        exist.LastAppointmentDate = val.LastAppointmentDate;
                        exist.NextAppointmentDate = val.NextAppointmentDate;
                        exist.IsClientEligibleForViralload = val.IsClientEligibleForViralload;
                        exist.ViralloadTestDone = val.ViralloadTestDone;
                        exist.ViralloadResultsReceived = val.ViralloadResultsReceived;
                        exist.ViralloadTestResults = val.ViralloadTestResults;
                        exist.ViralLoadSuppressedId = val.ViralLoadSuppressedId;
                        exist.LastViralloadTestDate = val.LastViralloadTestDate;
                        exist.NextViralloadTestDate = val.NextViralloadTestDate;
                        exist.ClientHasPresumptiveOrActiveTb = val.ClientHasPresumptiveOrActiveTB;
                        exist.ClientReceivedTbscreeningSession = val.ClientReceivedTBScreeningSession;
                        exist.ClientAtTbinfectionRisk = val.ClientAtTBInfectionRisk;
                        exist.ClientRefferedTestedForTb = val.ClientReffered_TestedForTB;
                        exist.TbtestResultId = val.TBTestResultId;
                        exist.IsOnTbtreatment = val.IsOnTBTreatment;
                        exist.TbtreatmentDuration = val.TBTreatmentDuration;
                        exist.IsOnTbpreventiveTreatment = val.IsOnTBPreventiveTreatment;
                        exist.TptTreatmentDuration = val.TPT_Treatment_Duration;
                        exist.FollowupMeansId = val.FollowupMeansId;
                        exist.ClientSuccessfullyContactedOrSeen = val.ClientSuccessfullyContactedOrSeen;
                        exist.AnotherPersonContactedOnBehalfOfClient = val.AnotherPersonContactedOnBehalfOfClient;
                        exist.PersonContactedId = val.PersonContactedId;
                        exist.OtherPersonContacted = val.OtherPersonContacted;
                        exist.ServiceProvidedId = val.ServiceProvidedId;
                        exist.OtherServiceProvided = val.OtherServiceProvided;
                        exist.NotSuppressingReasonId = val.NotSuppressingReasonId;
                        exist.OtherNotSuppressingReason = val.OtherNotSuppressingReason;
                        exist.NonAdherenceId = val.Non_Adherence_Id;
                        exist.NonAdherenceOther = val.Non_Adherence_Other;
                        exist.SocialWorkerNextActionTaken = val.SocialWorkerNextActionTaken;
                        exist.SocialWorkerName = val.SocialWorkerName;
                        exist.SocialWorkerTitle = val.SocialWorkerTitle;
                        exist.SocialWorkerContact = val.SocialWorkerContact;
                        exist.SocialWorkerEntryDate = val.SocialWorkerEntryDate;
                        exist.ReviewedBy = val.ReviewedBy;
                        exist.ReviewedTitle = val.ReviewedTitle;
                        exist.ReviewedContact = val.ReviewedContact;
                        exist.ReviewDate = val.ReviewDate;
                        exist.ReasonForTreatmentInterruptionId = val.Reason_For_Treatment_InterruptionId;
                        exist.StrategiesForImprovingTreatmentContinuityId = val.Strategies_For_Improving_Treatment_ContinuityId;
                        exist.ReasonsForNonOptimizationId = val.Reasons_For_Non_OptimizationId;
                        exist.OptimizedYesNo = val.OptimizedYesNo;
                        exist.SupportedToDiscloseHivStatusToFamilyYesNoId = val.Supported_To_Disclose_HIV_Status_To_FamilyYesNoId;
                        dbContext.Entry(exist).State = EntityState.Modified;
                        dbContext.SaveChanges();
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }
        public override object Remove(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                int data = (int)value;
                using (var dbContext = new MUCOBADIContext())
                {
                    //var exists = dbContext.spHIV_TB_TrackingFormGetAllResult.FirstOrDefault(o => o.spHIV_TB_TrackingFormGetAllResultId == data);
                    //if (exists != null)
                    //{
                    //    dbContext.spHIV_TB_TrackingFormGetAllResult.Remove(exists);
                    //}
                    //await dbContext.SaveChangesAsync();
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }


            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                using (var db = new MUCOBADIContext())
                {
                    var val = (value as spHIV_TB_TrackingFormGetAllResult);
                    var exist = db.HivTbTrackingForm.FirstOrDefault(o => o.HivTbTrackingFormId == val.HIV_TB_TrackingFormId);
                    if (exist != null)
                    {
                        exist.HouseHoldMemberId = val.HouseHoldMemberId;
                        exist.FollowUpDate = val.FollowUpDate;
                        exist.HivstatusId = val.HIVStatusId;
                        exist.OnArt = val.OnART;
                        exist.Artnumber = val.ARTNumber;
                        exist.CohortNo = val.CohortNo;
                        exist.PhoneNumber = val.PhoneNumber;
                        exist.ClientMemberStatusId = val.ClientMemberStatusId;
                        exist.ClientMemberStatusOther = val.ClientMemberStatusOther;
                        exist.CientClassificationId = val.CientClassificationId;
                        exist.Weight = val.Weight;
                        exist.FacilityId = val.FacilityId;
                        exist.TreatmentDuration = val.TreatmentDuration;
                        exist.RegimenCategoryId = val.RegimenCategoryId;
                        exist.RegimenId = val.RegimenId;
                        exist.ClientCareModalityId = val.ClientCareModalityId;
                        exist.ClientCareModalityIdOther = val.ClientCareModalityIdOther;
                        exist.DrugDispensingModalityId = val.DrugDispensingModalityId;
                        exist.CurrentCarePointSubCountyId = val.CurrentCarePointSubCountyId;
                        exist.CurrentCarePointDistrictId = val.CurrentCarePointDistrictId;
                        exist.LastAppointmentDate = val.LastAppointmentDate;
                        exist.NextAppointmentDate = val.NextAppointmentDate;
                        exist.IsClientEligibleForViralload = val.IsClientEligibleForViralload;
                        exist.ViralloadTestDone = val.ViralloadTestDone;
                        exist.ViralloadResultsReceived = val.ViralloadResultsReceived;
                        exist.ViralloadTestResults = val.ViralloadTestResults;
                        exist.ViralLoadSuppressedId = val.ViralLoadSuppressedId;
                        exist.LastViralloadTestDate = val.LastViralloadTestDate;
                        exist.NextViralloadTestDate = val.NextViralloadTestDate;
                        exist.ClientHasPresumptiveOrActiveTb = val.ClientHasPresumptiveOrActiveTB;
                        exist.ClientReceivedTbscreeningSession = val.ClientReceivedTBScreeningSession;
                        exist.ClientAtTbinfectionRisk = val.ClientAtTBInfectionRisk;
                        exist.ClientRefferedTestedForTb = val.ClientReffered_TestedForTB;
                        exist.TbtestResultId = val.TBTestResultId;
                        exist.IsOnTbtreatment = val.IsOnTBTreatment;
                        exist.TbtreatmentDuration = val.TBTreatmentDuration;
                        exist.IsOnTbpreventiveTreatment = val.IsOnTBPreventiveTreatment;
                        exist.TptTreatmentDuration = val.TPT_Treatment_Duration;
                        exist.FollowupMeansId = val.FollowupMeansId;
                        exist.ClientSuccessfullyContactedOrSeen = val.ClientSuccessfullyContactedOrSeen;
                        exist.AnotherPersonContactedOnBehalfOfClient = val.AnotherPersonContactedOnBehalfOfClient;
                        exist.PersonContactedId = val.PersonContactedId;
                        exist.OtherPersonContacted = val.OtherPersonContacted;
                        exist.ServiceProvidedId = val.ServiceProvidedId;
                        exist.OtherServiceProvided = val.OtherServiceProvided;
                        exist.NotSuppressingReasonId = val.NotSuppressingReasonId;
                        exist.OtherNotSuppressingReason = val.OtherNotSuppressingReason;
                        exist.NonAdherenceId = val.Non_Adherence_Id;
                        exist.NonAdherenceOther = val.Non_Adherence_Other;
                        exist.SocialWorkerNextActionTaken = val.SocialWorkerNextActionTaken;
                        exist.SocialWorkerName = val.SocialWorkerName;
                        exist.SocialWorkerTitle = val.SocialWorkerTitle;
                        exist.SocialWorkerContact = val.SocialWorkerContact;
                        exist.SocialWorkerEntryDate = val.SocialWorkerEntryDate;
                        exist.ReviewedBy = val.ReviewedBy;
                        exist.ReviewedTitle = val.ReviewedTitle;
                        exist.ReviewedContact = val.ReviewedContact;
                        exist.ReviewDate = val.ReviewDate;
                        exist.OptimizedYesNo = val.OptimizedYesNo;
                        exist.ReasonForTreatmentInterruptionId = val.Reason_For_Treatment_InterruptionId;
                        exist.StrategiesForImprovingTreatmentContinuityId = val.Strategies_For_Improving_Treatment_ContinuityId;
                        exist.ReasonsForNonOptimizationId = val.Reasons_For_Non_OptimizationId;
                        exist.SupportedToDiscloseHivStatusToFamilyYesNoId = val.Supported_To_Disclose_HIV_Status_To_FamilyYesNoId;
                        db.Entry(exist).State = EntityState.Modified;
                        await db.SaveChangesAsync();
                    }

                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
        //public void saveLog(int HouseHoldId, string Editedcolumn, string previousvalue, string newvalue, string actiontaken)
        //{
        //    try
        //    {
        //        using (var db = new MUCOBADIContext())
        //        {
        //            double id = 1;
        //            var exist = db.spHIV_TB_TrackingFormGetAllResultLog.OrderBy(o => o.HouseHoldLogId).LastOrDefault();
        //            if (exist != null)
        //            {
        //                id = (exist.HouseHoldLogId + 1);
        //            }
        //            spHIV_TB_TrackingFormGetAllResultLog m = new spHIV_TB_TrackingFormGetAllResultLog()
        //            {
        //                HouseHoldLogId = id,
        //                ColumnEdited = Editedcolumn,
        //                HouseHoldId = HouseHoldId,
        //                PreviousValue = previousvalue,
        //                NewValue = newvalue,
        //                // ActionMadeBy = _userManagement.GetStaffName(),
        //                ActionDate = DateTime.Now,
        //                ActionTaken = actiontaken
        //            };
        //            db.spHIV_TB_TrackingFormGetAllResultLog.Add(m);
        //            db.SaveChanges();
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        toastService.ShowError(ex.Message.ToString());
        //    }
        //}
    }
    public async Task OnReviewHeaderActionBegin(ActionEventArgs<spHIV_TB_TrackingFormGetAllResult> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {
                using (var db = new MUCOBADIContext())
                {
                    facilitySubcountyData = db.ASubcounty.Where(o => o.DistrictId == args.RowData.CurrentCarePointDistrictId).AsNoTracking().ToList();
                    SubcountyData = db.ASubcounty.Where(o => o.DistrictId == args.RowData.DistrictId).AsNoTracking().ToList();
                    ParishData = db.AParish.Where(o => o.SubcountyId == args.RowData.SubcountyId).AsNoTracking().ToList();
                    VillageData = db.AVillage.Where(o => o.ParishId == args.RowData.ParishId || args.RowData.ParishId == null).AsNoTracking().ToList();
                    HouseHoldMemberData = db.ViewHouseHoldMembers.Where(o => o.HouseHoldId == args.RowData.HouseHoldId && o.HivstatusId==1).AsNoTracking().ToList();
                    _HouseHoldMemberData = db.ViewHouseHoldMembers.Where(o => o.HouseHoldId == args.RowData.HouseHoldId).AsNoTracking().ToList();
                    HIVExposedInfantsData=db.HivTbTrackingFormExposedInfants.Where(o=> o.HivTbTrackingFormId==args.RowData.HIV_TB_TrackingFormId).AsNoTracking().ToList();
                    // HouseHoldMembersData = db.HouseHoldMembers.Where(o => o.HouseHoldId == args.RowData.HouseHoldId).AsNoTracking().ToList();
                }
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {
                args.RowData.HouseHoldId = BeneficiaryRegisterData.HouseHoldId;
                using (var db = new MUCOBADIContext())
                {
                    SubcountyData = db.ASubcounty.Where(o => o.DistrictId == BeneficiaryRegisterData.DistrictId).AsNoTracking().ToList();
                    facilitySubcountyData= SubcountyData;
                    args.RowData.DistrictId = BeneficiaryRegisterData.DistrictId;
                    args.RowData.SubcountyId= BeneficiaryRegisterData.SubcountyId;
                    args.RowData.CurrentCarePointDistrictId = BeneficiaryRegisterData.DistrictId;
                    args.RowData.CurrentCarePointSubCountyId = BeneficiaryRegisterData.SubcountyId;
                    ParishData = db.AParish.Where(o => o.SubcountyId == BeneficiaryRegisterData.SubcountyId).AsNoTracking().ToList();
                    VillageData = db.AVillage.Where(o => o.ParishId == BeneficiaryRegisterData.ParishId || BeneficiaryRegisterData.ParishId == null).AsNoTracking().ToList();
                    HouseHoldMemberData = db.ViewHouseHoldMembers.Where(o => o.HouseHoldId == BeneficiaryRegisterData.HouseHoldId && o.HivstatusId == 1).AsNoTracking().ToList();
                    _HouseHoldMemberData = db.ViewHouseHoldMembers.Where(o => o.HouseHoldId == BeneficiaryRegisterData.HouseHoldId).AsNoTracking().ToList();
                    HIVExposedInfantsData = new List<HivTbTrackingFormExposedInfants>();

                }
                //HouseHoldMembersData = new List<HouseHoldMembers>();
                //ChildQuery = new Query().AddParams("spHIV_TB_TrackingFormGetAllResultId", args.RowData.spHIV_TB_TrackingFormGetAllResultId);
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (args.Data.ClientMemberStatusId==1)
                {
                    if (args.Data.HouseHoldMemberId == 0)
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Household member", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (args.Data.FollowUpDate == null)
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the followup Date", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (args.Data.HIVStatusId == 0)
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the HIV status after follow up", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (args.Data.HIVStatusId == 1 && args.Data.OnART == null)
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select to indicate whether the HH member is on On ART", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (args.Data.OnART == 1 && String.IsNullOrEmpty(args.Data.ARTNumber))
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please Enter the ART Number", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    //else if (args.Data.OnART == 1 && args.Data.CohortNo== null)
                    //{
                    //    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please Enter the Cohort", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    //    args.Cancel = true;
                    //}
                    else if (args.Data.ClientMemberStatusId == null)
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Client member status", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (args.Data.ClientMemberStatusId == 7 && String.IsNullOrEmpty(args.Data.ClientMemberStatusOther))
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the place where the client was Transferred out to", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (args.Data.CientClassificationId == null)
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Clients Classification", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    //else if (args.Data.Weight == null)
                    //{
                    //    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please Enter the Weight in KGs", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    //    args.Cancel = true;
                    //}
                    else if (args.Data.HIVStatusId == 1 && args.Data.FacilityId == null)
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Health facility where client receives care", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    //else if (args.Data.HIVStatusId == 1 && args.Data.TreatmentDuration == null)
                    //{
                    //    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Duration on treatment (in months)", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    //    args.Cancel = true;
                    //}
                    else if (args.Data.HIVStatusId == 1 && args.Data.RegimenCategoryId == null)
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Client Line of Treatment", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    //else if (args.Data.HIVStatusId == 1 && args.Data.RegimenId == null)
                    //{
                    //    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Current Treatment Regimen", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    //    args.Cancel = true;
                    //}
                    else if (args.Data.HIVStatusId == 1 && args.Data.ClientCareModalityId == null)
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Modality of Client care and treatment", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (args.Data.ClientCareModalityId == 6 && String.IsNullOrEmpty(args.Data.ClientCareModalityIdOther))
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Other Modality of Client care and treatment", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (args.Data.HIVStatusId == 1 && args.Data.DrugDispensingModalityId == null)
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Modality of Drug Dispensing", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (args.Data.HIVStatusId == 1 && args.Data.CurrentCarePointSubCountyId == null)
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Sub County of current care point", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (args.Data.HIVStatusId == 1 && args.Data.CurrentCarePointDistrictId == null)
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the District of current care point", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (args.Data.OnART == 1 && args.Data.LastAppointmentDate == null)
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Last ART Appointment Date", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (args.Data.OnART == 1 && args.Data.NextAppointmentDate == null)
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Next ART Appointment Date", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (args.Data.HIVStatusId == 1 && args.Data.IsClientEligibleForViralload == null)
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select to indicate if Client is Eligible for ViralLoad ", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (args.Data.IsClientEligibleForViralload == 1 && args.Data.ViralloadTestDone == null)
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select to indicate if the ViralLoad test was done", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (args.Data.ViralloadTestDone == 1 && args.Data.ViralloadResultsReceived == null)
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select to indicate if the ViralLoad test results were  received", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (args.Data.ViralloadResultsReceived == 1 && args.Data.ViralloadTestResults == null)
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please Enter the ViralLoad test results", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (args.Data.ViralloadResultsReceived == 1 && args.Data.ViralLoadSuppressedId == null)
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Viral load results", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (args.Data.ViralloadTestDone == 1 && args.Data.LastViralloadTestDate == null)
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please Enter the date when Last VL test was done", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    //else if (args.Data.ViralloadTestDone == 1 && args.Data.NextViralloadTestDate == null)
                    //{
                    //    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please Enter the Date when NEXT VL test will be done", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    //    args.Cancel = true;
                    //}

                    //else if (args.Data.HIVStatusId == 1 && args.Data.ClientHasPresumptiveOrActiveTB == null)
                    //{
                    //    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select To indicate whether the client has a presumptive or active TB Disease", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    //    args.Cancel = true;
                    //}
                    //else if (args.Data.ClientHasPresumptiveOrActiveTB == 2 && args.Data.ClientReceivedTBScreeningSession == null)
                    //{
                    //    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select To indicate whether the Client has received a TB Screening Session", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    //    args.Cancel = true;
                    //}
                    //else if (args.Data.ClientHasPresumptiveOrActiveTB == 2 && args.Data.ClientAtTBInfectionRisk == null)
                    //{
                    //    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select To indicate whether the Client is at risk of TB infection", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    //    args.Cancel = true;
                    //}
                    //else if (args.Data.ClientHasPresumptiveOrActiveTB == 2 && args.Data.ClientReffered_TestedForTB == null)
                    //{
                    //    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select To indicate whether the Client is Referred and Tested for TB", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    //    args.Cancel = true;
                    //}
                    //else if (args.Data.ClientHasPresumptiveOrActiveTB == 2 && args.Data.TBTestResultId == null)
                    //{
                    //    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Client TB test Results", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    //    args.Cancel = true;
                    //}
                    //else if (args.Data.TBTestResultId == 1 && args.Data.IsOnTBTreatment == null)
                    //{
                    //    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select to indicate if the Client is on TB Treatment", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    //    args.Cancel = true;
                    //}
                    //else if (args.Data.IsOnTBTreatment == 1 && args.Data.TBTreatmentDuration == null)
                    //{
                    //    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Duration on TB Treatment ", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    //    args.Cancel = true;
                    //}
                    //else if (args.Data.TBTestResultId == 2 && args.Data.IsOnTBPreventiveTreatment == null)
                    //{
                    //    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select to indicate if the Client is on TB Preventive Treatment (TPT)", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    //    args.Cancel = true;
                    //}
                    //else if (args.Data.IsOnTBPreventiveTreatment == 1 && args.Data.TPT_Treatment_Duration == null)
                    //{
                    //    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Duration on TPT Treatment", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    //    args.Cancel = true;
                    //}
                    else if (args.Data.HIVStatusId == 1 && args.Data.FollowupMeansId == null)
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Means of follow up", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    //else if (args.Data.HIVStatusId == 1 && args.Data.ClientSuccessfullyContactedOrSeen == null)
                    //{
                    //    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select to indicate whether client successfully contacted / seen", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    //    args.Cancel = true;
                    //}
                    //else if (args.Data.ClientSuccessfullyContactedOrSeen == 2 && args.Data.PersonContactedId == null)
                    //{
                    //    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select Who was contacted", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    //    args.Cancel = true;
                    //}
                    //else if (args.Data.ClientSuccessfullyContactedOrSeen == 2 && args.Data.AnotherPersonContactedOnBehalfOfClient == null)
                    //{
                    //    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select to indicate if anyone else was contacted on behalf of the client", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    //    args.Cancel = true;
                    //}
                    //else if (args.Data.AnotherPersonContactedOnBehalfOfClient == 1 && String.IsNullOrEmpty(args.Data.OtherPersonContacted))
                    //{
                    //    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please Enter the other person that was contacted", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    //    args.Cancel = true;
                    //}
                    else if (args.Data.ViralLoadSuppressedId == 2 && string.IsNullOrEmpty(args.Data.ServiceProvidedId))
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the Services Provided", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    //else if (args.Data.ServiceProvidedId != null && args.Data.ServiceProvidedId.Split(",").Any(o=> o== "10")== true && string.IsNullOrEmpty(args.Data.OtherServiceProvided))
                    //{
                    //    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please Enter the Other Services Provided", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    //    args.Cancel = true;
                    //}
                    else if (args.Data.ViralLoadSuppressedId == 2 && string.IsNullOrEmpty(args.Data.NotSuppressingReasonId))
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the main reasons why the beneficiary/client is not suppressing", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (!string.IsNullOrEmpty(args.Data.NotSuppressingReasonId) && args.Data.NotSuppressingReasonId.Contains("2") && string.IsNullOrEmpty(args.Data.Non_Adherence_Id))
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please Enter the Reason for Not Suppressing", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (args.Data.ViralLoadSuppressedId == 2 && string.IsNullOrEmpty(args.Data.SocialWorkerNextActionTaken))
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Next Action to be taken by social worker", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (string.IsNullOrEmpty(args.Data.SocialWorkerName))
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Name of the Social worker", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (string.IsNullOrEmpty(args.Data.SocialWorkerTitle))
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Title of the Social worker", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (string.IsNullOrEmpty(args.Data.SocialWorkerContact))
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Contact of the Social worker", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (string.IsNullOrEmpty(args.Data.ReviewedBy))
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Name of the person that reviewed this tool", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (string.IsNullOrEmpty(args.Data.ReviewedTitle))
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Title of the person that reviewed this tool", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (string.IsNullOrEmpty(args.Data.ReviewedContact))
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Contact of the person that reviewed this tool", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else
                    {
                        using (var db = new MUCOBADIContext())
                        {
                            if (TrackingFormHeaderData.HouseHoldCode != null)
                            {
                                string householdCode = TrackingFormHeaderData.HouseHoldCode.Substring(0, 2) + "-" + TrackingFormHeaderData.HouseHoldCode.Substring(2, 2) + "-" + TrackingFormHeaderData.HouseHoldCode.Substring(4, 4);
                                args.Data.HouseHoldCode = householdCode;
                                TrackingFormHeaderData.HouseHoldCode = householdCode;
                            }
                            var exist = db.HivTbTrackingForm.FirstOrDefault(o => o.HivTbTrackingFormId == TrackingFormHeaderData.HIV_TB_TrackingFormId);
                            if (exist == null)
                            {
                                HivTbTrackingForm m = new HivTbTrackingForm();
                                int id = 1;
                                var last = db.HivTbTrackingForm.OrderBy(o => o.HivTbTrackingFormId).AsNoTracking().ToList().LastOrDefault();
                                if (last != null)
                                {
                                    id = (last.HivTbTrackingFormId + 1);
                                }
                                TrackingFormHeaderData.HIV_TB_TrackingFormId = id;
                                m.HivTbTrackingFormId = id;
                                args.Data.HIV_TB_TrackingFormId = id;
                                m.HouseHoldMemberId = TrackingFormHeaderData.HouseHoldMemberId;
                                m.FollowUpDate = TrackingFormHeaderData.FollowUpDate;
                                m.HivstatusId = TrackingFormHeaderData.HIVStatusId;
                                m.OnArt = TrackingFormHeaderData.OnART;
                                m.Artnumber = TrackingFormHeaderData.ARTNumber;
                                m.PhoneNumber = TrackingFormHeaderData.PhoneNumber;
                                m.CohortNo = TrackingFormHeaderData.CohortNo;
                                m.ClientMemberStatusId = TrackingFormHeaderData.ClientMemberStatusId;
                                m.ClientMemberStatusOther = TrackingFormHeaderData.ClientMemberStatusOther;
                                m.CientClassificationId = TrackingFormHeaderData.CientClassificationId;
                                m.Weight = TrackingFormHeaderData.Weight;
                                m.FacilityId = TrackingFormHeaderData.FacilityId;
                                m.TreatmentDuration = TrackingFormHeaderData.TreatmentDuration;
                                m.RegimenCategoryId = TrackingFormHeaderData.RegimenCategoryId;
                                m.RegimenId = TrackingFormHeaderData.RegimenId;
                                m.ClientCareModalityId = TrackingFormHeaderData.ClientCareModalityId;
                                m.ClientCareModalityIdOther = TrackingFormHeaderData.ClientCareModalityIdOther;
                                m.DrugDispensingModalityId = TrackingFormHeaderData.DrugDispensingModalityId;
                                m.CurrentCarePointSubCountyId = TrackingFormHeaderData.CurrentCarePointSubCountyId;
                                m.CurrentCarePointDistrictId = TrackingFormHeaderData.CurrentCarePointDistrictId;
                                m.LastAppointmentDate = TrackingFormHeaderData.LastAppointmentDate;
                                m.NextAppointmentDate = TrackingFormHeaderData.NextAppointmentDate;
                                m.IsClientEligibleForViralload = TrackingFormHeaderData.IsClientEligibleForViralload;
                                m.ViralloadTestDone = TrackingFormHeaderData.ViralloadTestDone;
                                m.ViralloadResultsReceived = TrackingFormHeaderData.ViralloadResultsReceived;
                                m.ViralloadTestResults = TrackingFormHeaderData.ViralloadTestResults;
                                m.ViralLoadSuppressedId = TrackingFormHeaderData.ViralLoadSuppressedId;
                                m.LastViralloadTestDate = TrackingFormHeaderData.LastViralloadTestDate;
                                m.NextViralloadTestDate = TrackingFormHeaderData.NextViralloadTestDate;
                                m.ClientHasPresumptiveOrActiveTb = TrackingFormHeaderData.ClientHasPresumptiveOrActiveTB;
                                m.ClientReceivedTbscreeningSession = TrackingFormHeaderData.ClientReceivedTBScreeningSession;
                                m.ClientAtTbinfectionRisk = TrackingFormHeaderData.ClientAtTBInfectionRisk;
                                m.ClientRefferedTestedForTb = TrackingFormHeaderData.ClientReffered_TestedForTB;
                                m.TbtestResultId = TrackingFormHeaderData.TBTestResultId;
                                m.IsOnTbtreatment = TrackingFormHeaderData.IsOnTBTreatment;
                                m.TbtreatmentDuration = TrackingFormHeaderData.TBTreatmentDuration;
                                m.IsOnTbpreventiveTreatment = TrackingFormHeaderData.IsOnTBPreventiveTreatment;
                                m.TptTreatmentDuration = TrackingFormHeaderData.TPT_Treatment_Duration;
                                m.FollowupMeansId = TrackingFormHeaderData.FollowupMeansId;
                                m.ClientSuccessfullyContactedOrSeen = TrackingFormHeaderData.ClientSuccessfullyContactedOrSeen;
                                m.AnotherPersonContactedOnBehalfOfClient = TrackingFormHeaderData.AnotherPersonContactedOnBehalfOfClient;
                                m.PersonContactedId = TrackingFormHeaderData.PersonContactedId;
                                m.OtherPersonContacted = TrackingFormHeaderData.OtherPersonContacted;
                                m.ServiceProvidedId = TrackingFormHeaderData.ServiceProvidedId;
                                m.OtherServiceProvided = TrackingFormHeaderData.OtherServiceProvided;
                                m.NotSuppressingReasonId = TrackingFormHeaderData.NotSuppressingReasonId;
                                m.OtherNotSuppressingReason = TrackingFormHeaderData.OtherNotSuppressingReason;
                                m.NonAdherenceId = TrackingFormHeaderData.Non_Adherence_Id;
                                m.NonAdherenceOther = TrackingFormHeaderData.Non_Adherence_Other;
                                m.SocialWorkerNextActionTaken = TrackingFormHeaderData.SocialWorkerNextActionTaken;
                                m.SocialWorkerName = TrackingFormHeaderData.SocialWorkerName;
                                m.SocialWorkerTitle = TrackingFormHeaderData.SocialWorkerTitle;
                                m.SocialWorkerContact = TrackingFormHeaderData.SocialWorkerContact;
                                m.SocialWorkerEntryDate = TrackingFormHeaderData.SocialWorkerEntryDate;
                                m.ReviewedBy = TrackingFormHeaderData.ReviewedBy;
                                m.ReviewedTitle = TrackingFormHeaderData.ReviewedTitle;
                                m.ReviewedContact = TrackingFormHeaderData.ReviewedContact;
                                m.ReviewDate = TrackingFormHeaderData.ReviewDate;
                                m.ReasonForTreatmentInterruptionId = TrackingFormHeaderData.Reason_For_Treatment_InterruptionId;
                                m.StrategiesForImprovingTreatmentContinuityId = TrackingFormHeaderData.Strategies_For_Improving_Treatment_ContinuityId;
                                m.ReasonsForNonOptimizationId = TrackingFormHeaderData.Reasons_For_Non_OptimizationId;
                                m.OptimizedYesNo = TrackingFormHeaderData.OptimizedYesNo;
                                m.SupportedToDiscloseHivStatusToFamilyYesNoId = TrackingFormHeaderData.Supported_To_Disclose_HIV_Status_To_FamilyYesNoId;
                                db.HivTbTrackingForm.Add(m);
                                db.SaveChanges();
                            }

                            foreach (var n in HIVExposedInfantsData)
                            {
                                var _exist = db.HivTbTrackingFormExposedInfants.FirstOrDefault(o => o.HivTbTrackingFormExposedInfantsId == n.HivTbTrackingFormExposedInfantsId);
                                if (_exist == null)
                                {
                                    int id = 1;
                                    var last = db.HivTbTrackingFormExposedInfants.OrderBy(o => o.HivTbTrackingFormExposedInfantsId).AsNoTracking().ToList().LastOrDefault();
                                    if (last != null)
                                    {
                                        id = (last.HivTbTrackingFormExposedInfantsId + 1);
                                    }
                                    n.HivTbTrackingFormExposedInfantsId = id;
                                    n.HivTbTrackingFormId = TrackingFormHeaderData.HIV_TB_TrackingFormId;
                                    db.HivTbTrackingFormExposedInfants.Add(n);
                                    db.SaveChanges();
                                }
                                else
                                {
                                    db.Entry(_exist).CurrentValues.SetValues(n);
                                    db.Entry(_exist).State = EntityState.Modified;
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                }
                else
                {
                    using (var db = new MUCOBADIContext())
                    {
                        if (TrackingFormHeaderData.HouseHoldCode != null)
                        {
                            string householdCode = TrackingFormHeaderData.HouseHoldCode.Substring(0, 2) + "-" + TrackingFormHeaderData.HouseHoldCode.Substring(2, 2) + "-" + TrackingFormHeaderData.HouseHoldCode.Substring(4, 4);
                            args.Data.HouseHoldCode = householdCode;
                            TrackingFormHeaderData.HouseHoldCode = householdCode;
                        }
                        var exist = db.HivTbTrackingForm.FirstOrDefault(o => o.HivTbTrackingFormId == TrackingFormHeaderData.HIV_TB_TrackingFormId);
                        if (exist == null)
                        {
                            HivTbTrackingForm m = new HivTbTrackingForm();
                            int id = 1;
                            var last = db.HivTbTrackingForm.OrderBy(o => o.HivTbTrackingFormId).AsNoTracking().ToList().LastOrDefault();
                            if (last != null)
                            {
                                id = (last.HivTbTrackingFormId + 1);
                            }
                            TrackingFormHeaderData.HIV_TB_TrackingFormId = id;
                            m.HivTbTrackingFormId = id;
                            args.Data.HIV_TB_TrackingFormId = id;
                            m.HouseHoldMemberId = TrackingFormHeaderData.HouseHoldMemberId;
                            m.FollowUpDate = TrackingFormHeaderData.FollowUpDate;
                            m.HivstatusId = TrackingFormHeaderData.HIVStatusId;
                            m.OnArt = TrackingFormHeaderData.OnART;
                            m.Artnumber = TrackingFormHeaderData.ARTNumber;
                            m.PhoneNumber = TrackingFormHeaderData.PhoneNumber;
                            m.CohortNo = TrackingFormHeaderData.CohortNo;
                            m.ClientMemberStatusId = TrackingFormHeaderData.ClientMemberStatusId;
                            m.ClientMemberStatusOther = TrackingFormHeaderData.ClientMemberStatusOther;
                            m.CientClassificationId = TrackingFormHeaderData.CientClassificationId;
                            m.Weight = TrackingFormHeaderData.Weight;
                            m.FacilityId = TrackingFormHeaderData.FacilityId;
                            m.TreatmentDuration = TrackingFormHeaderData.TreatmentDuration;
                            m.RegimenCategoryId = TrackingFormHeaderData.RegimenCategoryId;
                            m.RegimenId = TrackingFormHeaderData.RegimenId;
                            m.ClientCareModalityId = TrackingFormHeaderData.ClientCareModalityId;
                            m.ClientCareModalityIdOther = TrackingFormHeaderData.ClientCareModalityIdOther;
                            m.DrugDispensingModalityId = TrackingFormHeaderData.DrugDispensingModalityId;
                            m.CurrentCarePointSubCountyId = TrackingFormHeaderData.CurrentCarePointSubCountyId;
                            m.CurrentCarePointDistrictId = TrackingFormHeaderData.CurrentCarePointDistrictId;
                            m.LastAppointmentDate = TrackingFormHeaderData.LastAppointmentDate;
                            m.NextAppointmentDate = TrackingFormHeaderData.NextAppointmentDate;
                            m.IsClientEligibleForViralload = TrackingFormHeaderData.IsClientEligibleForViralload;
                            m.ViralloadTestDone = TrackingFormHeaderData.ViralloadTestDone;
                            m.ViralloadResultsReceived = TrackingFormHeaderData.ViralloadResultsReceived;
                            m.ViralloadTestResults = TrackingFormHeaderData.ViralloadTestResults;
                            m.ViralLoadSuppressedId = TrackingFormHeaderData.ViralLoadSuppressedId;
                            m.LastViralloadTestDate = TrackingFormHeaderData.LastViralloadTestDate;
                            m.NextViralloadTestDate = TrackingFormHeaderData.NextViralloadTestDate;
                            m.ClientHasPresumptiveOrActiveTb = TrackingFormHeaderData.ClientHasPresumptiveOrActiveTB;
                            m.ClientReceivedTbscreeningSession = TrackingFormHeaderData.ClientReceivedTBScreeningSession;
                            m.ClientAtTbinfectionRisk = TrackingFormHeaderData.ClientAtTBInfectionRisk;
                            m.ClientRefferedTestedForTb = TrackingFormHeaderData.ClientReffered_TestedForTB;
                            m.TbtestResultId = TrackingFormHeaderData.TBTestResultId;
                            m.IsOnTbtreatment = TrackingFormHeaderData.IsOnTBTreatment;
                            m.TbtreatmentDuration = TrackingFormHeaderData.TBTreatmentDuration;
                            m.IsOnTbpreventiveTreatment = TrackingFormHeaderData.IsOnTBPreventiveTreatment;
                            m.TptTreatmentDuration = TrackingFormHeaderData.TPT_Treatment_Duration;
                            m.FollowupMeansId = TrackingFormHeaderData.FollowupMeansId;
                            m.ClientSuccessfullyContactedOrSeen = TrackingFormHeaderData.ClientSuccessfullyContactedOrSeen;
                            m.AnotherPersonContactedOnBehalfOfClient = TrackingFormHeaderData.AnotherPersonContactedOnBehalfOfClient;
                            m.PersonContactedId = TrackingFormHeaderData.PersonContactedId;
                            m.OtherPersonContacted = TrackingFormHeaderData.OtherPersonContacted;
                            m.ServiceProvidedId = TrackingFormHeaderData.ServiceProvidedId;
                            m.OtherServiceProvided = TrackingFormHeaderData.OtherServiceProvided;
                            m.NotSuppressingReasonId = TrackingFormHeaderData.NotSuppressingReasonId;
                            m.OtherNotSuppressingReason = TrackingFormHeaderData.OtherNotSuppressingReason;
                            m.NonAdherenceId = TrackingFormHeaderData.Non_Adherence_Id;
                            m.NonAdherenceOther = TrackingFormHeaderData.Non_Adherence_Other;
                            m.SocialWorkerNextActionTaken = TrackingFormHeaderData.SocialWorkerNextActionTaken;
                            m.SocialWorkerName = TrackingFormHeaderData.SocialWorkerName;
                            m.SocialWorkerTitle = TrackingFormHeaderData.SocialWorkerTitle;
                            m.SocialWorkerContact = TrackingFormHeaderData.SocialWorkerContact;
                            m.SocialWorkerEntryDate = TrackingFormHeaderData.SocialWorkerEntryDate;
                            m.ReviewedBy = TrackingFormHeaderData.ReviewedBy;
                            m.ReviewedTitle = TrackingFormHeaderData.ReviewedTitle;
                            m.ReviewedContact = TrackingFormHeaderData.ReviewedContact;
                            m.ReviewDate = TrackingFormHeaderData.ReviewDate;
                            m.ReasonForTreatmentInterruptionId = TrackingFormHeaderData.Reason_For_Treatment_InterruptionId;
                            m.StrategiesForImprovingTreatmentContinuityId = TrackingFormHeaderData.Strategies_For_Improving_Treatment_ContinuityId;
                            m.ReasonsForNonOptimizationId = TrackingFormHeaderData.Reasons_For_Non_OptimizationId;
                            m.OptimizedYesNo = TrackingFormHeaderData.OptimizedYesNo;
                            m.SupportedToDiscloseHivStatusToFamilyYesNoId = TrackingFormHeaderData.Supported_To_Disclose_HIV_Status_To_FamilyYesNoId;
                            db.HivTbTrackingForm.Add(m);
                            db.SaveChanges();
                        }

                        foreach (var n in HIVExposedInfantsData)
                        {
                            var _exist = db.HivTbTrackingFormExposedInfants.FirstOrDefault(o => o.HivTbTrackingFormExposedInfantsId == n.HivTbTrackingFormExposedInfantsId);
                            if (_exist == null)
                            {
                                int id = 1;
                                var last = db.HivTbTrackingFormExposedInfants.OrderBy(o => o.HivTbTrackingFormExposedInfantsId).AsNoTracking().ToList().LastOrDefault();
                                if (last != null)
                                {
                                    id = (last.HivTbTrackingFormExposedInfantsId + 1);
                                }
                                n.HivTbTrackingFormExposedInfantsId = id;
                                n.HivTbTrackingFormId = TrackingFormHeaderData.HIV_TB_TrackingFormId;
                                db.HivTbTrackingFormExposedInfants.Add(n);
                                db.SaveChanges();
                            }
                            else
                            {
                                db.Entry(_exist).CurrentValues.SetValues(n);
                                db.Entry(_exist).State = EntityState.Modified;
                                db.SaveChanges();
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    public void ActionComplete(ActionEventArgs<spHIV_TB_TrackingFormGetAllResult> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            TrackingFormHeaderGrid.PreventRender(false);
        }
    }
    #endregion Review Header
    #region Beneficiary Register
    public class TrackingBeneficiaryRegisterAdapter : DataAdaptor
    {
        public IToastService toastService;
        //private UserManagement _userManagement;
        public TrackingBeneficiaryRegisterAdapter(IToastService ts/*, UserManagement userManagement*/)
        {
            //_userManagement = userManagement;
            toastService = ts;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<spBeneficiaryIdentificationRegisterGetAllResult>();
            try
            {
                string DistrictId = null;
                string SubcountyId = null;
                string ParishId = null;
                string VillageId = null;
                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;
                    if (val.FirstOrDefault(o => o.Key == "DistrictId").Value != null)
                    {
                        DistrictId = val.FirstOrDefault(o => o.Key == "DistrictId").Value.ToString();
                    }
                    if (val.FirstOrDefault(o => o.Key == "SubcountyId").Value != null)
                    {
                        SubcountyId = val.FirstOrDefault(o => o.Key == "SubcountyId").Value.ToString();
                    }
                    if (val.FirstOrDefault(o => o.Key == "ParishId").Value != null)
                    {
                        ParishId = val.FirstOrDefault(o => o.Key == "ParishId").Value.ToString();
                    }
                    if (val.FirstOrDefault(o => o.Key == "VillageId").Value != null)
                    {
                        VillageId = val.FirstOrDefault(o => o.Key == "VillageId").Value.ToString();
                    }
                }
                using (var dbContext = new SPToCoreContext())
                {
                    data = await dbContext.spBeneficiaryIdentificationRegisterGetAllAsync(DistrictId, SubcountyId, ParishId, VillageId, null, null, null);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<spBeneficiaryIdentificationRegisterGetAllResult>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override Object Insert(DataManager dataManager, object value, string key)
        {
            return value;
        }
        public override object Remove(DataManager dataManager, object value, string keyField, string key)
        {
            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            return value;
        }
    }
    public void BeneficiaryRegisterActionComplete(ActionEventArgs<spBeneficiaryIdentificationRegisterGetAllResult> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            BeneficiaryRegisterGrid.PreventRender(false);
        }
    }
    #endregion Beneficiary Register
    #region HIV EXPOSED INFANTS
    public void OnExposedInfantsActionBegin(Syncfusion.Blazor.Grids.ActionEventArgs<HivTbTrackingFormExposedInfants> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            //args.RowData.HouseHoldMemberCode = ReviewHeaderData.HouseHoldCode;
            //args.RowData.HouseHoldId = ReviewHeaderData.HouseHoldId;
            // args.RowData.ApplicantId = ApplicantData.ApplicantId;
            args.RowData.HivTbTrackingFormId = TrackingFormHeaderData.HIV_TB_TrackingFormId;
        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (args.Data.HouseHoldMemberId== 0)
            {
                ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please Select the household Member", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.RegistrationDate == null)
            {
                ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please Select the Date of Registration", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.RegistrationStatusId == null)
            {
                ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please Select the Registration Status", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.SupportedToEnrollAndAdhereToPmtct == null)
            {
                ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please Select to indicate if the Client been supported to enroll and adhere to PMTCT", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.PmtctmotherProvidedWithTreatmentLiteracy == null)
            {
                ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please Select the PMTCT mother been provided with treatment literacy", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            else if (args.Data.PmtctmotherProvidedWithTreatmentLiteracy == null)
            {
                ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please Select the PMTCT mother been provided with treatment literacy", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
        }
    }
    public void OnExposedInfantsActionComplete(Syncfusion.Blazor.Grids.ActionEventArgs<HivTbTrackingFormExposedInfants> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            ExposedInfantsGrid.PreventRender(false);
        }
    }
    private void OnMemberDateChange(ChangedEventArgs<DateTime?> args)
    {
        if (NewHouseHoldMemberData.DoB.HasValue)
        {
            NewHouseHoldMemberData.Age = (DateTime.Now.Year - NewHouseHoldMemberData.DoB.Value.Year);
        }
    }
    private void OnMemberAgeChange()
    {
        if (NewHouseHoldMemberData.Age.HasValue)
        {
            NewHouseHoldMemberData.DoB = new DateTime((DateTime.Now.Year - NewHouseHoldMemberData.Age.Value), 1, 1);
        }
    }
    private void OnHouseHoldMemberChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ViewHouseHoldMembers> args)
    {
        try
        {
            if (args.ItemData != null)
            {
                TrackingFormHeaderData.Surname = args.ItemData.Surname;
                TrackingFormHeaderData.Givenname = args.ItemData.Givenname;
                TrackingFormHeaderData.Age = (DateTime.Now.Year - args.ItemData.DoB.Value.Year);
                TrackingFormHeaderData.GenderId = args.ItemData.GenderId;
                if (args.ItemData.HivstatusId.HasValue)
                {
                    TrackingFormHeaderData.HIVStatusId = args.ItemData.HivstatusId.Value;
                    TrackingFormHeaderData.ARTNumber=args.ItemData.Artnumber;
                    TrackingFormHeaderData.CohortNo=args.ItemData.Cohort;
                    TrackingFormHeaderData.OnART = args.ItemData.CurrentlyonArt;
                }
            }
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally { StateHasChanged(); }
    }
    private void OnFacilityDistrictChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ADistrict> args)
    {
        if (args.ItemData != null)
        {
            using (var db = new MUCOBADIContext())
            {
                facilitySubcountyData = db.ASubcounty.Where(o => o.DistrictId == args.ItemData.DistrictId).AsNoTracking().ToList();
            }
        }
    }
    #endregion HIV EXPOSED INFANTS
}
