@*<h3>VSLATrackingToolReportPage</h3>*@

@page "/VSLATrackingToolReportPage"
@using System.Collections.ObjectModel
@using MUCOBADI.Models;
@using MUCOBADI.Data;
@using System.IO;
@using Microsoft.EntityFrameworkCore;
@using System.Collections;
@inject UserManagement userManagement;
@inject NavigationManager Navigation;
@using Syncfusion.XlsIO;
@using Syncfusion.XlsIO.Implementation;
@using Syncfusion.XlsIORenderer;
@inject Microsoft.JSInterop.IJSRuntime JS

<style>
    h4 {
        background-color: black;
        color: whitesmoke;
        padding: 10px;
    }
</style>
<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;"> <strong>USAID ICARE |</strong> VSLA TRACKING TOOL REPORT</li>
</ol>
<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>
<div class="form-row">
    <div class="form-group col-md-12">
        <EditForm Model="@InputModel" OnValidSubmit="@SearchRecords">
            <div class="form-row">
                <div class="form-group col-md-3">
                    <p>District</p>
                    <SfMultiSelect @bind-Value="@InputModel.DistrictId" Enabled="@isEnabled" TValue="int?[]" TItem="ADistrict" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_DistrictData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search District" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                        <MultiSelectFieldSettings Value="@nameof(ADistrict.DistrictId)" Text="@nameof(ADistrict.DistrictDescription)"></MultiSelectFieldSettings>
                        <MultiSelectEvents TValue="int?[]" TItem="ADistrict" ValueChange="OnDistrictChange"></MultiSelectEvents>
                    </SfMultiSelect>
                </div>
                <div class="form-group col-md-3">
                    <p>Sub-County</p>
                    <SfMultiSelect @bind-Value="@InputModel.SubcountyId" TValue="int?[]" TItem="ASubcounty" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_SubcountyData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Sub-county" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                        <MultiSelectFieldSettings Value="@nameof(ASubcounty.SubcountyId)" Text="@nameof(ASubcounty.SubcountyDescription)"></MultiSelectFieldSettings>
                        <MultiSelectEvents TValue="int?[]" TItem="ASubcounty" ValueChange="OnSubcountyChange"></MultiSelectEvents>
                    </SfMultiSelect>
                </div>
                <div class="form-group col-md-3" hidden>
                    <p>Parish</p>
                    <SfMultiSelect @bind-Value="@InputModel.ParishId" TValue="int?[]" TItem="AParish" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_ParishData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Parish" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                        <MultiSelectFieldSettings Value="@nameof(AParish.ParishId)" Text="@nameof(AParish.ParishDescription)"></MultiSelectFieldSettings>
                        <MultiSelectEvents TValue="int?[]" TItem="AParish" ValueChange="OnParishChange"></MultiSelectEvents>
                    </SfMultiSelect>
                </div>
                <div class="form-group col-md-3" hidden>
                    <p>Village</p>
                    <SfMultiSelect @bind-Value="@InputModel.VillageId" TValue="int?[]" TItem="AVillage" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_VillageData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Village" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                        <MultiSelectFieldSettings Value="@nameof(AVillage.VillageId)" Text="@nameof(AVillage.VillageDescription)"></MultiSelectFieldSettings>
                    </SfMultiSelect>
                </div>
               @* <div class="form-group col-md-3">
                    <p>Reporting Period</p>
                    <SfDropDownList @bind-Value="@(InputModel.QuarterId)" Enabled="true" TItem="AQuarter" TValue="int?" DataSource="@QuarterData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                        <DropDownListFieldSettings Value="@nameof(AQuarter.QuarterId)" Text="@nameof(AQuarter.QuarterName)"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
                <div class="form-group col-md-3">
                    <p>Financial Year</p>
                    <SfDropDownList @bind-Value="@(InputModel.YearId)" Enabled="true" TItem="FianacialYear" TValue="int?" DataSource="@FianacialYearData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                        <DropDownListFieldSettings Value="@nameof(FianacialYear.FinancialYear)" Text="@nameof(FianacialYear.FinancialYearDesc)"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>*@
                <div class="form-group col-md-3">
                    <BSButton Color="BlazorStrap.Color.Primary" ButtonType="BlazorStrap.ButtonType.Submit">Download Report</BSButton>
                    <BSButton Color="BlazorStrap.Color.Secondary" ButtonType="BlazorStrap.ButtonType.Button" @onclick="ClearSearchBtnClick">Clear Search</BSButton>
                </div>
                <div class="form-group col-md-12">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                </div>
                @if (!string.IsNullOrEmpty(outComeResult))
                {
                    <div class="form-group col-md-12">
                        @if (outComeResult.Contains("No Record"))
                        {
                            <p class="alert alert-danger" style="padding:10px;">@outComeResult</p>
                        }
                        else if (outComeResult.Contains("Warning"))
                        {
                            <p class="alert alert-warning" style="padding:10px;">@outComeResult</p>
                        }
                        else
                        {
                            <p class="alert alert-success" style="padding:10px;">@outComeResult</p>
                        }
                    </div>
                }
                <div class="form-group col-md-12">
                    <SfSpinner @ref="ReportSpinner" Label="downloading the report please wait..." Size="70" Visible="false"></SfSpinner>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
{
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    #endregion Toasters
    private SearchPanel InputModel = new();
    SfSpinner ReportSpinner;

    List<AVillage> _VillageData { get; set; }
    List<AParish> _ParishData { get; set; }
    List<ASubcounty> _SubcountyData { get; set; }
    List<ADistrict> _DistrictData { get; set; }
    List<AQuarter> QuarterData { get; set; }
    List<FianacialYear> FianacialYearData { get; set; }
    bool isEnabled { get; set; } = false;
    string outComeResult { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            if (!userManagement.IsSignedIn())
            {
                Navigation.NavigateTo("/", true);
            }
            else
            {
                using (var db = new MUCOBADIContext())
                {
                    FianacialYearData = new List<FianacialYear>();
                    _DistrictData = db.ADistrict.AsNoTracking().ToList();
                    //QuarterData = db.AQuarter.AsNoTracking().ToList();
                    //int current_year = DateTime.Now.Year;
                    //var firstHomeVisitdata = db.BeneficiaryIdentificationRegister.Where(o=> o.DateofIdentification.HasValue==true).OrderBy(o => o.DateofIdentification).AsNoTracking().ToList().FirstOrDefault();
                    //if (firstHomeVisitdata != null)
                    //{
                    //    int firstyear = firstHomeVisitdata.DateofIdentification.Value.Year;
                    //    for (int i = 0; i <= (current_year - firstyear); i++)
                    //    {

                    //        if ((current_year - (firstyear + i)) > 0)
                    //        {
                    //            FianacialYearData.Add(new FianacialYear { FinancialYear = (firstyear + i), FinancialYearDesc = (firstyear + i).ToString() });
                    //        }
                    //    }
                    //}
                    //FianacialYearData.Add(new FianacialYear { FinancialYear = current_year, FinancialYearDesc = current_year.ToString() });
                    InputModel = new();
                    var user = db.ViewUserManagement.FirstOrDefault(o => o.UserName == userManagement.GetUserName());
                   if (!user.RoleName.Contains("Super Administrator") && !user.RoleName.Contains("Administrator") && !user.RoleName.Contains("mel director") && !user.RoleName.Contains("mel manager") && !user.RoleName.Contains("cluster manager"))
                    {
                        var districtlist = userManagement.GetUserDistrict();
                        if (districtlist != null && districtlist.Count > 0)
                        {
                            List<int?> m = new List<int?>();
                            foreach (var n in districtlist)
                            {
                                m.Add(n);
                            }

                            InputModel.DistrictId = m.ToArray();
                            _SubcountyData = db.ASubcounty.AsNoTracking().ToList().Where(o => districtlist.Any(a => a == o.DistrictId)).ToList();
                        }
                        var subcountyList = userManagement.GetUserSubcounty();
                        if (subcountyList != null && subcountyList.Count > 0)
                        {
                            List<int?> m = new List<int?>();
                            foreach (var n in subcountyList)
                            {
                                m.Add(n);
                            }
                            InputModel.SubcountyId = m.ToArray();
                            _ParishData = db.AParish.AsNoTracking().ToList().Where(o => subcountyList.Any(a => a == o.SubcountyId)).ToList();
                        }
                    }
                    else
                    {
                        isEnabled = true;
                    }
                }
            }

        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    private void ClearSearchBtnClick()
    {
        InputModel = new();
        using (var db = new MUCOBADIContext())
        {
            var user = db.ViewUserManagement.FirstOrDefault(o => o.UserName == userManagement.GetUserName());
           if (!user.RoleName.Contains("Super Administrator") && !user.RoleName.Contains("Administrator") && !user.RoleName.Contains("mel director") && !user.RoleName.Contains("mel manager") && !user.RoleName.Contains("cluster manager"))
            {
                var districtlist = userManagement.GetUserDistrict();
                if (districtlist != null && districtlist.Count > 0)
                {
                    List<int?> m = new List<int?>();
                    foreach (var n in districtlist)
                    {
                        m.Add(n);
                    }

                    InputModel.DistrictId = m.ToArray();
                    _SubcountyData = db.ASubcounty.AsNoTracking().ToList().Where(o => districtlist.Any(a => a == o.DistrictId)).ToList();
                }
                var subcountyList = userManagement.GetUserSubcounty();
                if (subcountyList != null && subcountyList.Count > 0)
                {
                    List<int?> m = new List<int?>();
                    foreach (var n in subcountyList)
                    {
                        m.Add(n);
                    }
                    InputModel.SubcountyId = m.ToArray();
                    _ParishData = db.AParish.AsNoTracking().ToList().Where(o => subcountyList.Any(a => a == o.SubcountyId)).ToList();
                }
            }
            else
            {
                isEnabled = true;
            }
        }
    }


    public void OnDistrictChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            using (var db = new MUCOBADIContext())
            {
                _SubcountyData = db.ASubcounty.Where(o => args.Value.Any(a => a == o.DistrictId) == true).AsNoTracking().ToList();
            }
        }
    }
    public void OnSubcountyChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            using (var db = new MUCOBADIContext())
            {
                _ParishData = db.AParish.Where(o => args.Value.Any(a => a == o.SubcountyId) == true).AsNoTracking().ToList();
            }
        }
    }
    public void OnParishChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            using (var db = new MUCOBADIContext())
            {
                _VillageData = db.AVillage.Where(o => args.Value.Any(a => a == o.ParishId) == true).AsNoTracking().ToList();
            }
        }
    }
    public class FianacialYear
    {
        public int FinancialYear { get; set; }
        public string FinancialYearDesc { get; set; }
    }
    private async Task SearchRecords()
    {
        try
        {
            await ReportSpinner.ShowAsync();
            outComeResult = null;
            string district = null;
            string Subcounty = null;
            string parish = null;
            string village = null;
            if (InputModel.DistrictId != null)
            {
                district = string.Join(",", InputModel.DistrictId);
            }
            if (InputModel.SubcountyId != null)
            {
                Subcounty = string.Join(",", InputModel.SubcountyId);
            }
            if (InputModel.ParishId != null)
            {
                parish = string.Join(",", InputModel.ParishId);
            }
            if (InputModel.VillageId != null)
            {
                village = string.Join(",", InputModel.VillageId);
            }
            //if (InputModel.QuarterId == null || InputModel.YearId == null)
            //{
            //    outComeResult = "Please select the reporting period and the financial year";
            //}
           // else
            //{
                DateTime? startdate = null;
                DateTime? enddate = null;
                //var quarter = QuarterData.FirstOrDefault(o => o.QuarterId == InputModel.QuarterId);
                //if (quarter != null)
                //{
                //    startdate = new DateTime(InputModel.YearId.Value, quarter.StartMonthId.Value, 1);
                //    if (quarter.EndMonthId < quarter.StartMonthId)
                //    {
                //        enddate = new DateTime((InputModel.YearId.Value + 1), quarter.EndMonthId.Value, DateTime.DaysInMonth((InputModel.YearId.Value + 1), quarter.EndMonthId.Value));
                //    }
                //    else
                //    {
                //        enddate = new DateTime(InputModel.YearId.Value, quarter.EndMonthId.Value, DateTime.DaysInMonth(InputModel.YearId.Value, quarter.EndMonthId.Value));
                //    }
                //}
                using (var db = new SPToCoreContext())
                {
                    var data = await db.spVSLA_Tracking_ToolReportGetAllAsync(district, Subcounty, startdate, enddate);
                    if (data.Count > 0)
                    {
                        using (ExcelEngine excelEngine = new ExcelEngine())
                        {
                            IApplication application = excelEngine.Excel;
                            application.DefaultVersion = ExcelVersion.Excel2013;
                            IWorkbook workbook = application.Workbooks.Create(1);
                            IWorksheet worksheet = workbook.Worksheets[0];
                            worksheet.Name = "VSLA TRACKING TOOL REPORT";

                            #region Styles
                            var headerStyle = workbook.Styles.Add("headerStyle");

                            headerStyle.BeginUpdate();
                            headerStyle.Color = Syncfusion.Drawing.Color.Black; //Syncfusion.Drawing.Color.FromArgb(255, 0, 0);
                            headerStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                            headerStyle.Font.Bold = true;
                            headerStyle.Font.FontName = "Arial";
                            headerStyle.Font.Size = 8f;
                            headerStyle.Font.Color = ExcelKnownColors.White;

                            headerStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                            headerStyle.Borders.Color = ExcelKnownColors.White;
                            headerStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                            headerStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                            headerStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                            //headerStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thick;

                            headerStyle.WrapText = true;

                            headerStyle.EndUpdate();

                            var Style = workbook.Styles.Add("bodyStyle");

                            Style.BeginUpdate();
                            Style.HorizontalAlignment = ExcelHAlign.HAlignLeft;
                            Style.VerticalAlignment = ExcelVAlign.VAlignTop;
                            Style.Font.Bold = false;
                            Style.Font.FontName = "Arial";
                            Style.Font.Size = 8f;
                            Style.Font.Color = ExcelKnownColors.Black;
                            Style.WrapText = true;
                            Style.Borders.Color = ExcelKnownColors.Black;
                            Style.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                            Style.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                            Style.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                            Style.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                            Style.EndUpdate();


                            var CategoryStyle = workbook.Styles.Add("CategoryStyle");

                            CategoryStyle.BeginUpdate();
                            CategoryStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                            CategoryStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 195, 0);
                            /*CategoryStyle.Color = Syncfusion.Drawing.Color.FromArgb(105, 59, 88);*/ //AUBERGINE
                            CategoryStyle.Font.Bold = true;
                            CategoryStyle.Font.FontName = "Arial";
                            CategoryStyle.Font.Size = 10f;
                            CategoryStyle.Font.Color = ExcelKnownColors.White;
                            CategoryStyle.WrapText = true;
                            CategoryStyle.Borders.Color = ExcelKnownColors.White;
                            CategoryStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                            CategoryStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                            CategoryStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                            CategoryStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                            CategoryStyle.EndUpdate();

                            var CategoryTotalStyle = workbook.Styles.Add("CategoryTotalStyle");

                            CategoryTotalStyle.BeginUpdate();
                            CategoryTotalStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                            CategoryTotalStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                            CategoryTotalStyle.Color = Syncfusion.Drawing.Color.DarkBlue;
                            CategoryTotalStyle.Font.Bold = true;
                            CategoryTotalStyle.Font.FontName = "Arial";
                            CategoryTotalStyle.Font.Size = 8f;
                            CategoryTotalStyle.Font.Color = ExcelKnownColors.White;
                            CategoryTotalStyle.WrapText = true;
                            CategoryTotalStyle.Borders.Color = ExcelKnownColors.White;
                            CategoryTotalStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                            CategoryTotalStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                            CategoryTotalStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                            CategoryTotalStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                            CategoryTotalStyle.EndUpdate();

                            var DivisionStyle = workbook.Styles.Add("DivisionStyle");

                            DivisionStyle.BeginUpdate();
                            DivisionStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                            DivisionStyle.Color = Syncfusion.Drawing.Color.FromArgb(255, 0, 0); //RED
                            DivisionStyle.Font.Bold = true;
                            DivisionStyle.Font.FontName = "Arial";
                            DivisionStyle.Font.Size = 8f;
                            DivisionStyle.Font.Color = ExcelKnownColors.White;
                            DivisionStyle.WrapText = true;
                            DivisionStyle.Borders.Color = ExcelKnownColors.White;
                            DivisionStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                            DivisionStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                            DivisionStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                            DivisionStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                            DivisionStyle.EndUpdate();

                            var DivisionTotalStyle = workbook.Styles.Add("DivisionTotalStyle");

                            DivisionTotalStyle.BeginUpdate();
                            DivisionTotalStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                            DivisionTotalStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                            DivisionTotalStyle.Color = Syncfusion.Drawing.Color.Black;
                            DivisionTotalStyle.Font.Bold = true;
                            DivisionTotalStyle.Font.FontName = "Arial";
                            DivisionTotalStyle.Font.Size = 8f;
                            DivisionTotalStyle.Font.Color = ExcelKnownColors.White;
                            DivisionTotalStyle.WrapText = true;
                            DivisionTotalStyle.Borders.Color = ExcelKnownColors.White;
                            DivisionTotalStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                            DivisionTotalStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                            DivisionTotalStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                            DivisionTotalStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                            DivisionTotalStyle.EndUpdate();


                            var TopicStyle = workbook.Styles.Add("TopicStyle");

                            TopicStyle.BeginUpdate();
                            TopicStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                            TopicStyle.Color = Syncfusion.Drawing.Color.FromArgb(105, 59, 88); //AUBERGINE
                            TopicStyle.Font.Bold = true;
                            TopicStyle.Font.FontName = "Arial";
                            TopicStyle.Font.Size = 8f;
                            TopicStyle.Font.Color = ExcelKnownColors.White;
                            TopicStyle.WrapText = true;
                            TopicStyle.Borders.Color = ExcelKnownColors.White;
                            TopicStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                            TopicStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                            TopicStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                            TopicStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                            TopicStyle.EndUpdate();

                            var TopicTotalStyle = workbook.Styles.Add("TopicTotalStyle");

                            TopicTotalStyle.BeginUpdate();
                            TopicTotalStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
                            TopicTotalStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                            TopicTotalStyle.Color = Syncfusion.Drawing.Color.DarkRed;
                            TopicTotalStyle.Font.Bold = true;
                            TopicTotalStyle.Font.FontName = "Arial";
                            TopicTotalStyle.Font.Size = 8f;
                            TopicTotalStyle.Font.Color = ExcelKnownColors.White;
                            TopicTotalStyle.WrapText = true;
                            TopicTotalStyle.Borders.Color = ExcelKnownColors.White;
                            TopicTotalStyle.Borders[ExcelBordersIndex.EdgeLeft].LineStyle = ExcelLineStyle.Thin;
                            TopicTotalStyle.Borders[ExcelBordersIndex.EdgeRight].LineStyle = ExcelLineStyle.Thin;
                            TopicTotalStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
                            TopicTotalStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
                            TopicTotalStyle.EndUpdate();
                            #endregion

                            int row = 1;
                            worksheet.Range["A" + row].Text = "VSLA TRACKING TOOL REPORT";
                            worksheet.Range["A" + row + ":AY" + row].CellStyle = CategoryStyle;
                            worksheet.Range["A" + row + ":AY" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;
                            worksheet.Range["A" + row + ":AY" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                            worksheet.Range["A" + row].RowHeight = 30;
                            worksheet.Range["A" + row + ":AY" + row].Merge();
                            row++;
                            row++;

                            worksheet.Range["J" + row].Text = "Background information at registration";
                            worksheet.Range["J" + row + ":N" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;
                            worksheet.Range["J" + row + ":N" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                            worksheet.Range["J" + row + ":N" + row].Merge();

                            worksheet.Range["O" + row].Text = "3. Amount of money (UGX) ";
                            worksheet.Range["O" + row + ":U" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;
                            worksheet.Range["O" + row + ":U" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                            worksheet.Range["O" + row + ":U" + row].Merge();

                            worksheet.Range["V" + row].Text = "4. Main reason for borrowing  ";
                            worksheet.Range["V" + row + ":W" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;
                            worksheet.Range["V" + row + ":W" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                            worksheet.Range["V" + row + ":W" + row].Merge();


                            worksheet.Range["A" + row].RowHeight = 20;
                            worksheet.Range["A" + row + ":AY" + row].CellStyle = headerStyle;
                            row++;
                            worksheet.Range["O" + row].Text = "Saved";
                            worksheet.Range["O" + row + ":Q" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;
                            worksheet.Range["O" + row + ":Q" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                            worksheet.Range["O" + row + ":Q" + row].Merge();

                            worksheet.Range["R" + row].Text = "Borrowed";
                            worksheet.Range["R" + row + ":S" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;
                            worksheet.Range["R" + row + ":S" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                            worksheet.Range["R" + row + ":S" + row].Merge();

                            worksheet.Range["T" + row].Text = "Re-paid";
                            worksheet.Range["T" + row + ":U" + row].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;
                            worksheet.Range["T" + row + ":U" + row].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
                            worksheet.Range["T" + row + ":U" + row].Merge();


                            worksheet.Range["A" + row].RowHeight = 20;
                            worksheet.Range["A" + row + ":AY" + row].CellStyle = headerStyle;
                            row++;

                            #region Header row
                            worksheet.Range["A" + row].Text = "Name of IP/CSO";
                            worksheet.Range["A" + row].ColumnWidth = 20;

                            worksheet.Range["B" + row].Text = "Group Name";
                            worksheet.Range["B" + row].ColumnWidth = 20;

                            worksheet.Range["C" + row].Text = "VSLA+ Code";
                            worksheet.Range["C" + row].ColumnWidth = 20;

                            worksheet.Range["D" + row].Text = "Group Formation";
                            worksheet.Range["D" + row].ColumnWidth = 20;

                            worksheet.Range["E" + row].Text = "District";
                            worksheet.Range["E" + row].ColumnWidth = 20;

                            worksheet.Range["F" + row].Text = "Sub-County";
                            worksheet.Range["F" + row].ColumnWidth = 20;

                            worksheet.Range["G" + row].Text = "Cycle";
                            worksheet.Range["G" + row].ColumnWidth = 20;

                            worksheet.Range["H" + row].Text = "Cycle Saving start Date ";
                            worksheet.Range["H" + row].ColumnWidth = 20;

                            worksheet.Range["I" + row].Text = "Reporting Month";
                            worksheet.Range["I" + row].ColumnWidth = 20;

                            worksheet.Range["J" + row].Text = "Beneficiary Unique ID  No.";
                            worksheet.Range["J" + row].ColumnWidth = 20;

                            worksheet.Range["K" + row].Text = "Full Name ";
                            worksheet.Range["K" + row].ColumnWidth = 20;

                            worksheet.Range["L" + row].Text = "Sex ";
                            worksheet.Range["L" + row].ColumnWidth = 20;

                            worksheet.Range["M" + row].Text = "Age";
                            worksheet.Range["M" + row].ColumnWidth = 20;

                            worksheet.Range["N" + row].Text = "Member Status";
                            worksheet.Range["N" + row].ColumnWidth = 20;

                            worksheet.Range["O" + row].Text = "LF";
                            worksheet.Range["O" + row].ColumnWidth = 20;

                            worksheet.Range["P" + row].Text = "WF ";
                            worksheet.Range["P" + row].ColumnWidth = 20;

                            worksheet.Range["Q" + row].Text = "OF";
                            worksheet.Range["Q" + row].ColumnWidth = 20;

                            worksheet.Range["R" + row].Text = "LF";
                            worksheet.Range["R" + row].ColumnWidth = 20;

                            worksheet.Range["S" + row].Text = "WF";
                            worksheet.Range["S" + row].ColumnWidth = 20;

                            worksheet.Range["T" + row].Text = "LF";
                            worksheet.Range["T" + row].ColumnWidth = 20;

                            worksheet.Range["U" + row].Text = "WF";
                            worksheet.Range["U" + row].ColumnWidth = 20;

                            worksheet.Range["V" + row].Text = "LF ";
                            worksheet.Range["V" + row].ColumnWidth = 20;

                            worksheet.Range["W" + row].Text = "WF ";
                            worksheet.Range["W" + row].ColumnWidth = 20;

                            worksheet.Range["X" + row].Text = "Linkage to External Savings ";
                            worksheet.Range["X" + row].ColumnWidth = 20;

                            worksheet.Range["Y" + row].Text = "Name of External Savings Linkaged to ";
                            worksheet.Range["Y" + row].ColumnWidth = 20;

                            worksheet.Range["Z" + row].Text = "Members at start of the Cycle";
                            worksheet.Range["Z" + row].ColumnWidth = 20;

                            worksheet.Range["AA" + row].Text = "Cumm. Value of Savings this Cycle (UGX)";
                            worksheet.Range["AA" + row].ColumnWidth = 20;

                            worksheet.Range["AB" + row].Text = "Loan Fund Cash in box+Bank (UGX)";
                            worksheet.Range["AB" + row].ColumnWidth = 20;

                            worksheet.Range["AC" + row].Text = "Cash Balance in OVC Fund";
                            worksheet.Range["AC" + row].ColumnWidth = 20;

                            worksheet.Range["AD" + row].Text = "Linkage to External Credit";
                            worksheet.Range["AD" + row].ColumnWidth = 20;

                            worksheet.Range["AE" + row].Text = "Name of External Credit Linkaged to ";
                            worksheet.Range["AE" + row].ColumnWidth = 20;

                            worksheet.Range["AF" + row].Text = "No. of members attending meeting";
                            worksheet.Range["AF" + row].ColumnWidth = 20;

                            worksheet.Range["AG" + row].Text = "Value of Loans outstanding (UGX)";
                            worksheet.Range["AG" + row].ColumnWidth = 20;

                            worksheet.Range["AH" + row].Text = "Cash in Welfare Fund (UGX)";
                            worksheet.Range["AH" + row].ColumnWidth = 20;

                            worksheet.Range["AI" + row].Text = "Cumulative No. of OVC Accessing T.C.S";
                            worksheet.Range["AI" + row].ColumnWidth = 20;

                            worksheet.Range["AJ" + row].Text = "Amount of Savings Deposited to FFI (UGX)";
                            worksheet.Range["AJ" + row].ColumnWidth = 20;

                            worksheet.Range["AK" + row].Text = "No. of Loans Outstanding";
                            worksheet.Range["AK" + row].ColumnWidth = 20;

                            worksheet.Range["AL" + row].Text = "Unpaid balance of late loans (UGX)";
                            worksheet.Range["AL" + row].ColumnWidth = 20;

                            worksheet.Range["AM" + row].Text = "Cumm. value of Property Now (UGX)";
                            worksheet.Range["AM" + row].ColumnWidth = 20;

                            worksheet.Range["AN" + row].Text = "Total Cumulative cash pay-out in OVC Fund";
                            worksheet.Range["AN" + row].ColumnWidth = 20;

                            worksheet.Range["AO" + row].Text = "Vale of Outstanding Loans at FFI (UGX)";
                            worksheet.Range["AO" + row].ColumnWidth = 20;

                            worksheet.Range["AP" + row].Text = "No. of members running IGAs";
                            worksheet.Range["AP" + row].ColumnWidth = 20;

                            worksheet.Range["AQ" + row].Text = "No. of Bens. Trained in F.L";
                            worksheet.Range["AQ" + row].ColumnWidth = 20;

                            worksheet.Range["AR" + row].Text = "No. of Bens. Trained in S.P.M";
                            worksheet.Range["AR" + row].ColumnWidth = 20;

                            worksheet.Range["AS" + row].Text = "VSLA Group trained by ";
                            worksheet.Range["AS" + row].ColumnWidth = 20;

                            worksheet.Range["AT" + row].Text = "Collected by: Name and sign ";
                            worksheet.Range["AT" + row].ColumnWidth = 20;

                            worksheet.Range["AU" + row].Text = "Designation";
                            worksheet.Range["AU" + row].ColumnWidth = 20;

                            worksheet.Range["AV" + row].Text = "Date";
                            worksheet.Range["AV" + row].ColumnWidth = 20;

                            worksheet.Range["AW" + row].Text = "Reviewed by: Name and sign ";
                            worksheet.Range["AW" + row].ColumnWidth = 20;

                            worksheet.Range["AX" + row].Text = "Designation ";
                            worksheet.Range["AX" + row].ColumnWidth = 20;

                            worksheet.Range["AY" + row].Text = "Date";
                            worksheet.Range["AY" + row].ColumnWidth = 20;


                            worksheet.Range["A" + row + ":AY" + row].CellStyle = headerStyle;
                            row++;
                            #endregion Header row
                            foreach(var n in data)
                            {
                                worksheet.Range["A" + row].Text = n.ImplementingPartnerName;

                                worksheet.Range["B" + row].Text = n.GroupName;
                                worksheet.Range["B" + row].ColumnWidth = 20;

                                worksheet.Range["C" + row].Text = n.GroupCode;
                                worksheet.Range["C" + row].ColumnWidth = 20;

                                if (n.GroupFoundation.HasValue)
                                {
                                    worksheet.Range["D" + row].Text = n.GroupFoundation.Value.ToString("dd/MM/yyyy");
                                    worksheet.Range["D" + row].ColumnWidth = 20; 
                                }

                                worksheet.Range["E" + row].Text = n.DistrictDescription;
                                worksheet.Range["E" + row].ColumnWidth = 20;

                                worksheet.Range["F" + row].Text = n.SubcountyDescription;
                                worksheet.Range["F" + row].ColumnWidth = 20;

                                worksheet.Range["G" + row].Text = n.GroupCycleDesc;
                                worksheet.Range["G" + row].ColumnWidth = 20;

                                if (n.Cycle_Saving_Start_Date.HasValue)
                                {
                                    worksheet.Range["H" + row].Text = n.Cycle_Saving_Start_Date.Value.ToString("dd/MM/yyyy");
                                    worksheet.Range["H" + row].ColumnWidth = 20;
                                }

                                worksheet.Range["I" + row].Text = n.MonthDesc;
                                worksheet.Range["I" + row].ColumnWidth = 20;

                                worksheet.Range["J" + row].Text = n.HouseHoldMemberCode;
                                worksheet.Range["J" + row].ColumnWidth = 20;

                                worksheet.Range["K" + row].Text = n.FullName;
                                worksheet.Range["K" + row].ColumnWidth = 20;

                                worksheet.Range["L" + row].Text = n.GenderDescription;
                                worksheet.Range["L" + row].ColumnWidth = 20;

                                if (n.Age.HasValue)
                                {
                                    worksheet.Range["M" + row].Number = n.Age.Value;
                                    worksheet.Range["M" + row].ColumnWidth = 20;
                                }

                                worksheet.Range["N" + row].Text = n.MemberStatusDesc;
                                worksheet.Range["N" + row].ColumnWidth = 20;

                                if (n.Saved_LF.HasValue)
                                {
                                    worksheet.Range["O" + row].Number = n.Saved_LF.Value;
                                }
                                worksheet.Range["O" + row].ColumnWidth = 20;

                                if (n.Saved_WF.HasValue)
                                {
                                    worksheet.Range["P" + row].Number = n.Saved_WF.Value;
                                }
                                worksheet.Range["P" + row].ColumnWidth = 20;

                                if (n.Saved_OF.HasValue)
                                {
                                    worksheet.Range["Q" + row].Number = n.Saved_OF.Value;
                                }
                                worksheet.Range["Q" + row].ColumnWidth = 20;

                                if (n.Borrowed_LF.HasValue)
                                {
                                    worksheet.Range["R" + row].Number = n.Borrowed_LF.Value;
                                }
                                worksheet.Range["R" + row].ColumnWidth = 20;

                                if (n.Borrowed_WF.HasValue)
                                {
                                    worksheet.Range["S" + row].Number = n.Borrowed_WF.Value;
                                }
                                worksheet.Range["S" + row].ColumnWidth = 20;

                                if (n.Repaid_LF.HasValue)
                                {
                                    worksheet.Range["T" + row].Number = n.Repaid_LF.Value;
                                }
                                worksheet.Range["T" + row].ColumnWidth = 20;

                                if (n.Repaid_WF.HasValue)
                                {
                                    worksheet.Range["U" + row].Number = n.Repaid_WF.Value;
                                }
                                worksheet.Range["U" + row].ColumnWidth = 20;

                                worksheet.Range["V" + row].Text = n.LF_Reason_For_Borrowing_Desc;
                                worksheet.Range["V" + row].ColumnWidth = 20;

                                worksheet.Range["W" + row].Text = n.WF_Reason_For_Borrowing_Desc;
                                worksheet.Range["W" + row].ColumnWidth = 20;

                                worksheet.Range["X" + row].Text = n.LinkageToExternalSavingDesc;
                                worksheet.Range["X" + row].ColumnWidth = 20;

                                worksheet.Range["Y" + row].Text = n.NameLinkageToExternalSaving;
                                worksheet.Range["Y" + row].ColumnWidth = 20;

                                if (n.No_Members_At_Start_of_Cycle.HasValue)
                                {
                                    worksheet.Range["Z" + row].Number = n.No_Members_At_Start_of_Cycle.Value;
                                }
                                worksheet.Range["Z" + row].ColumnWidth = 20;

                                if (n.Cumm_Value_of_Savings_this_Cycle.HasValue)
                                {
                                    worksheet.Range["AA" + row].Number = n.Cumm_Value_of_Savings_this_Cycle.Value;
                                }
                                worksheet.Range["AA" + row].ColumnWidth = 20;

                                if (n.Loan_Cash_In_Box_Bank.HasValue)
                                {
                                    worksheet.Range["AB" + row].Number = n.Loan_Cash_In_Box_Bank.Value;
                                }
                                worksheet.Range["AB" + row].ColumnWidth = 20;

                                if (n.Cash_Balance_In_Ovc_Fund.HasValue)
                                {
                                    worksheet.Range["AC" + row].Number = n.Cash_Balance_In_Ovc_Fund.Value;
                                }
                                worksheet.Range["AC" + row].ColumnWidth = 20;

                                worksheet.Range["AD" + row].Text = n.Linkage_To_External_Credit_Desc;
                                worksheet.Range["AD" + row].ColumnWidth = 20;

                                worksheet.Range["AE" + row].Text = n.Name_Linkage_To_External_Credit;
                                worksheet.Range["AE" + row].ColumnWidth = 20;

                                if (n.No_Member_attending_Meeting.HasValue)
                                {
                                    worksheet.Range["AF" + row].Number = n.No_Member_attending_Meeting.Value;
                                }
                                worksheet.Range["AF" + row].ColumnWidth = 20;

                                if (n.Value_of_loan_outStanding.HasValue)
                                {
                                    worksheet.Range["AG" + row].Number = n.Value_of_loan_outStanding.Value;
                                }
                                worksheet.Range["AG" + row].ColumnWidth = 20;

                                if (n.Cash_In_welfare_Fund.HasValue)
                                {
                                    worksheet.Range["AH" + row].Number = n.Cash_In_welfare_Fund.Value;
                                }
                                worksheet.Range["AH" + row].ColumnWidth = 20;

                                if (n.Cumulative_No_OVC_Accessing_TCS.HasValue)
                                {
                                    worksheet.Range["AI" + row].Number = n.Cumulative_No_OVC_Accessing_TCS.Value;
                                }
                                worksheet.Range["AI" + row].ColumnWidth = 20;

                                if (n.Amount_Saving_Deposited_To_FFI.HasValue)
                                {
                                    worksheet.Range["AJ" + row].Number = n.Amount_Saving_Deposited_To_FFI.Value;
                                }
                                worksheet.Range["AJ" + row].ColumnWidth = 20;

                                if (n.No_Of_Outstanding_Loan.HasValue)
                                {
                                    worksheet.Range["AK" + row].Number = n.No_Of_Outstanding_Loan.Value;
                                }
                                worksheet.Range["AK" + row].ColumnWidth = 20;

                                if (n.Unpaid_Balance_Of_Late_Loan.HasValue)
                                {
                                    worksheet.Range["AL" + row].Number = n.Unpaid_Balance_Of_Late_Loan.Value;
                                }
                                worksheet.Range["AL" + row].ColumnWidth = 20;

                                if (n.Cumm_Value_of_Property_Now.HasValue)
                                {
                                    worksheet.Range["AM" + row].Number = n.Cumm_Value_of_Property_Now.Value;
                                }
                                worksheet.Range["AM" + row].ColumnWidth = 20;

                                if (n.Total_Cumulative_cash_payout_OVC_Fund.HasValue)
                                {
                                    worksheet.Range["AN" + row].Number = n.Total_Cumulative_cash_payout_OVC_Fund.Value;
                                }
                                worksheet.Range["AN" + row].ColumnWidth = 20;

                                if (n.Vale_of_Outstanding_Loans_at_FFI.HasValue)
                                {
                                    worksheet.Range["AO" + row].Number = n.Vale_of_Outstanding_Loans_at_FFI.Value;
                                }
                                worksheet.Range["AO" + row].ColumnWidth = 20;

                                if (n.No_of_members_running_IGAs.HasValue)
                                {
                                    worksheet.Range["AP" + row].Number = n.No_of_members_running_IGAs.Value;
                                }
                                worksheet.Range["AP" + row].ColumnWidth = 20;

                                if (n.No_of_Bens_Trained_FL.HasValue)
                                {
                                    worksheet.Range["AQ" + row].Number = n.No_of_Bens_Trained_FL.Value;
                                }
                                worksheet.Range["AQ" + row].ColumnWidth = 20;

                                if (n.No_of_Bens_Trained_SPM.HasValue)
                                {
                                    worksheet.Range["AR" + row].Number = n.No_of_Bens_Trained_SPM.Value;
                                }
                                worksheet.Range["AR" + row].ColumnWidth = 20;

                                worksheet.Range["AS" + row].Text = n.VSLA_Group_Trainer_Desc;
                                worksheet.Range["AS" + row].ColumnWidth = 20;

                                worksheet.Range["AT" + row].Text = n.CollectedBy;
                                worksheet.Range["AT" + row].ColumnWidth = 20;

                                worksheet.Range["AU" + row].Text = n.CollectedDeignation;
                                worksheet.Range["AU" + row].ColumnWidth = 20;

                                if (n.CollectionDate.HasValue)
                                {
                                    worksheet.Range["AV" + row].Text = n.CollectionDate.Value.ToString("dd/MM/yyyy");
                                }
                                worksheet.Range["AV" + row].ColumnWidth = 20;

                                worksheet.Range["AW" + row].Text = n.ReviewedBy;
                                worksheet.Range["AW" + row].ColumnWidth = 20;

                                worksheet.Range["AX" + row].Text = n.ReviewDesignation;
                                worksheet.Range["AX" + row].ColumnWidth = 20;

                                if (n.ReviewDate.HasValue)
                                {
                                    worksheet.Range["AY" + row].Text = n.ReviewDate.Value.ToString("dd/MM/yyyy");
                                }
                                worksheet.Range["AY" + row].ColumnWidth = 20;

                                worksheet.Range["A" + row + ":AY" + row].CellStyle = Style;
                                row++;
                            }

                            MemoryStream ms = new MemoryStream();
                            // Save and close the document.
                            workbook.SaveAs(ms);
                            //Reset the memory stream position.
                            ms.Position = 0;
                            await JS.SaveAs("VSLA TRACKING TOOL REPORT.xlsx", ms.ToArray());
                            ms.Dispose();
                            workbook.Close();
                            //excelEngine.Dispose();
                            outComeResult = "Success:- The report was successfully downloaded.";
                        }
                    }
                    else
                    {
                        outComeResult = "No Record:- There were no records found for this search";
                    }
                }
           // }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            await ReportSpinner.HideAsync();
        }
    }

}
