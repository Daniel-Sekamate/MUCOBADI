@page "/ICAREDashboardPage"
@using MUCOBADI.DTOs.Dashboard;
@using MUCOBADI.Models;
@using MUCOBADI.Data;
@using Microsoft.EntityFrameworkCore;
@using Syncfusion.Blazor;
@using Syncfusion.Blazor.ProgressBar;
@*@inject MUCOBADIContext db;*@
@inject SPToCoreContext _dbcontext;
@inject IToastService toastService;
@inject NavigationManager Navigation;

<style>
	.pp {
		color: ghostwhite;
		background-color: #808285;
		padding: 10px;
	}

	.control-container {
		background-color: #adb5bd;
		height: 300px;
		margin: 0 auto;
		width: 500px;
	}

	.e-carousel .slide-content {
		align-items: center;
		display: flex;
		font-size: 1.25rem;
		height: 100%;
		justify-content: center;
	}

	/*Customize carousel*/
	.e-carousel .e-carousel-navigators .e-next .e-btn:not(:disabled) .e-btn-icon,
	.e-carousel .e-carousel-navigators .e-previous .e-btn:not(:disabled) .e-btn-icon
	{
		color: blackyellow;
		font-size: 25px;
	}

	.e-carousel .e-carousel-navigators {
		top: 150px;
	}

	.e-carousel .e-carousel-navigators .e-previous .e-btn:not(:disabled) .e-btn-icon, .e-carousel .e-carousel-navigators .e-next .e-btn:not(:disabled) .e-btn-icon, .e-carousel .e-carousel-navigators .e-play-pause .e-btn:not(:disabled) .e-btn-icon {
    color: black;
	}

	/*Put Previous and Next Buttons Top*/
	.e-carousel .e-carousel-navigators {
	height: auto;
	}

		.indicator-type.e-carousel .e-next-icon::before,
		.indicator-type.e-carousel .e-previous-icon::before {
			color: black;
	}


	table, th, td {
  border: 1px solid black;
}

h5 {
  display: block;
  font-size: -1em;
  font-weight: bold;
  color:maroon;
  background-color: white;
}

h6 {
        color: ghostwhite;
        background-color: #268cff;
        padding: 10px;
        width: 100%;
        font-size: 10px;
    }

    h4 {
        color: black;
        background-color: deepskyblue;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

    h3 {
        color: black;
        background-color: darkorange;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }
</style>

<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;">
        <strong>
            <img src="/login/images/mucobadilogo2.png" width="40" height="25" /> ICARE
        </strong>| DASHBOARD
    </li>
</ol>

<div class="form-group col-md-12">
		<div style="padding:10px;">
									<EditForm Model="@SearchModel">
										<div class="form-row">
											<div class="form-group col-md-2">
												<p>District</p>
												<SfMultiSelect 
													@bind-Value="@InputModel.DistrictId" 
													Enabled="true" 
													TValue="int?[]" 
													TItem="ADistrict" 
													AllowFiltering="true" 
													Placeholder="Please select" 
													Mode="@VisualMode.CheckBox"
												    DataSource="@DistrictsDataSource"
												    ShowSelectAll="true" 
													EnableSelectionOrder="true" 
													ShowDropDownIcon="true" 
													FilterBarPlaceholder="Search District" 
													FloatLabelType="FloatLabelType.Never" 
													PopupHeight="350px">
													<MultiSelectFieldSettings 
														Value="@nameof(ADistrict.DistrictId)" 
														Text="@nameof(ADistrict.DistrictDescription)">
													</MultiSelectFieldSettings>
													<MultiSelectEvents 
														TValue="int?[]"
														   TItem="ADistrict"
														   ValueChange="OnDistrictChange">
													</MultiSelectEvents>
												</SfMultiSelect>
											</div>
											<div class="form-group col-md-2">
												<p>Subcounty</p>
												<SfMultiSelect 
													@bind-Value="@InputModel.SubcountyId" 
													Enabled="@isSubcountyEnabled" 
													TValue="int?[]"
												    TItem="ASubcounty"
												    AllowFiltering="true" 
													Placeholder="Please select" 
													Mode="@VisualMode.CheckBox" 
													DataSource="@SubcountiesDataSource" 
													ShowSelectAll="true" 
													EnableSelectionOrder="true" 
													ShowDropDownIcon="true" 
													FilterBarPlaceholder="Search Subcounty" 
													FloatLabelType="FloatLabelType.Never" 
													PopupHeight="350px">
													<MultiSelectFieldSettings 
														Value="@nameof(ASubcounty.SubcountyId)" 
														Text="@nameof(ASubcounty.SubcountyDescription)">
													</MultiSelectFieldSettings>
												</SfMultiSelect>
											</div>
											<div class="form-group col-md-2">
												
												    <p>Start Date</p>
													<SfDatePicker @bind-Value=@InputModel.startDate TValue="DateTime?" Placeholder="Choose Start Date" Format="dd/MM/yyyy" FloatLabelType="FloatLabelType.Never">
													</SfDatePicker>
											</div>
											<div class="form-group col-md-2">
												<p>End Date</p>
													<SfDatePicker @bind-Value=@InputModel.endDate TValue="DateTime?" Placeholder="Choose End Date" Format="dd/MM/yyyy" FloatLabelType="FloatLabelType.Never" >
													</SfDatePicker>
                                            </div>
											<div class="form-group col-md-2">
												<p>Year</p>
												<SfMultiSelect 
													@bind-Value="@InputModel.FinancialYearId" 
													Enabled="true" 
													TValue="int?[]"
												   TItem="AFinancialYear"
												   AllowFiltering="true" 
													Placeholder="Please select" 
													Mode="@VisualMode.CheckBox"
												   DataSource="@YearsDataSource"
												   ShowSelectAll="true" 
													EnableSelectionOrder="true" 
													ShowDropDownIcon="true" 
													FilterBarPlaceholder="Search Year" 
													FloatLabelType="FloatLabelType.Never" 
													PopupHeight="350px">
													<MultiSelectFieldSettings Value="@nameof(AFinancialYear.FinancialYearDesc)"
																  Text="@nameof(AFinancialYear.FinancialYearDesc)">
													</MultiSelectFieldSettings>
												</SfMultiSelect>
											</div>
											<div class="form-group col-md-2">
												 <button type="button" class="btn btn-primary" @onclick="@SearchDashboard">Search</button>
													@*<BSButton Color="BlazorStrap.Color.Primary" ButtonType="BlazorStrap.ButtonType.Submit">Search</BSButton>*@
													<BSButton Color="BlazorStrap.Color.Secondary" ButtonType="BlazorStrap.ButtonType.Button" @onclick="ClearSearchBtnClick">Clear Search</BSButton>
											</div>
											
											<div class="form-group col-md-12">
												<DataAnnotationsValidator />
												<ValidationSummary />
											</div>
										</div>
									</EditForm>
								</div>

    </div>

<div class="col-md-9">
	@{
		if (InputModel.DistrictId == null && InputModel.SubcountyId == null && InputModel.QuarterId == null && InputModel.FinancialYearId == null)
		{
			<p style="color:purple;"><center><strong>DATA FOR QTR @QuarterNo @DateTime.Now.Year</strong></center></p>
		}
		else if((InputModel.DistrictId == null || 
			InputModel.SubcountyId == null || 
			InputModel.QuarterId == null || 
			InputModel.FinancialYearId == null) 
			&& Downloadreport == true)
		{
			string _DistrictId = null;
			if (InputModel.DistrictId != null)
			{
				var districtdesc = string.Join(", ", DistrictsDataSource.Where(o => InputModel.DistrictId.Any(a => a == o.DistrictId)).Select(o => o.DistrictDescription).ToArray());
				_DistrictId = districtdesc;
			}
			else
			{
				_DistrictId = "All Districts";
			}

			string _SubcountyId = null;
			if (InputModel.SubcountyId != null)
			{
				var subcountydesc = string.Join(", ", SubcountiesDataSource.Where(o => InputModel.SubcountyId.Any(a => a == o.SubcountyId)).Select(o => o.SubcountyDescription).ToArray());
				_SubcountyId = subcountydesc;
			}
			else
			{
				_SubcountyId = "All Subcounties";
			}

			string _QuarterId = null;
			if (InputModel.QuarterId != null)
			{
				var quarterdesc = string.Join(", ", QuarterData.Where(o => InputModel.QuarterId.Any(a => a == o.QuarterId)).Select(o => o.QuarterName).ToArray());
				_QuarterId = quarterdesc;
			}
			else
			{
				_QuarterId = "All Quarters";
			}

			string _FinancialYearId = null;
			if (InputModel.FinancialYearId != null)
			{
				_FinancialYearId = string.Join(",", InputModel.FinancialYearId);
			}
			else
			{
				_FinancialYearId = "All FinancialYears";
			}	
				<table width="1830px">
				<tr><th colspan="4" style="color:ghostwhite; text-align: center; background-color:cadetblue;">FILTERED BY (FILTERS APPLY ACROSS THE ENTIRE DASHBOARD)</th></tr>
					<tr>
						<th style="color:purple;">District</th>
						<th style="color:purple;">Subcounty</th>
						<th style="color:purple;">Quarter</th>
						<th style="color:purple;">Year</th>
					</tr>
					<tr>
						<td>@_DistrictId</td>
						<td>@_SubcountyId</td>
						<td>@_QuarterId</td>
						<td>@_FinancialYearId</td>
					</tr>
				</table>	
		}
	}	
</div>


<div class="row" style="margin-top:5px;">
			<SfCarousel AnimationEffect="CarouselAnimationEffect.Fade"
                    AutoPlay="true"
                    Interval="60000" 
					ButtonsVisibility="CarouselButtonVisibility.Visible"
					ShowIndicators="false">
					@try
					{
		
				    	<CarouselItem>
						<div class="row">
							<div class="col-md-8">
								<div  class="control-section" align='center'>
                                   <div class="control-section"> 
                                  <h5>OVC_SERV. Vs TARGET (0-18+ YEARS)</h5>
							 <SfGrid DataSource="@TargetsList" AllowExcelExport="true" AllowPdfExport="true"  AllowFiltering="false"
										AllowSorting="true" GridLines="GridLine.Both" AllowTextWrap="true">
									<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
									<GridEvents QueryCellInfo="QueryCellInfoHandler" TValue="OVCServeValueTargets"></GridEvents>
									 <GridAggregates>
										   <GridAggregate>
                                           <GridAggregateColumns>
											       <GridAggregateColumn Field="@nameof(OVCServeValueTargets.DistrictId)" Type="AggregateType.Sum" Format="N0">
													    <FooterTemplate>
														@{
															var aggregate = (context as AggregateTemplateContext);
															<div>
																<p>District count: @aggregate.Sum</p>
															</div>
														}
													</FooterTemplate>
												   </GridAggregateColumn>
												   <GridAggregateColumn Field="@nameof(OVCServeValueTargets.TargetValue)" Type="AggregateType.Sum" Format="N0">
													    <FooterTemplate>
														@{
															var aggregate1 = (context as AggregateTemplateContext);
															<div>
																<p>@aggregate1.Sum</p>
															</div>
														}
													</FooterTemplate>
												   </GridAggregateColumn>
												    <GridAggregateColumn Field="@nameof(OVCServeValueTargets.ageCategory17)" Type="AggregateType.Sum" Format="N0">
													    <FooterTemplate>
														@{
															var aggregate = (context as AggregateTemplateContext);
															<div>
																<p>@aggregate.Sum</p>
															</div>
														}
													</FooterTemplate>
												   </GridAggregateColumn>
												    <GridAggregateColumn Field="@nameof(OVCServeValueTargets.ageCategory18)" Type="AggregateType.Sum" Format="N0">
													    <FooterTemplate>
														@{
															var aggregate = (context as AggregateTemplateContext);
															<div>
																<p>@aggregate.Sum</p>
															</div>
														}
													</FooterTemplate>
												   </GridAggregateColumn>
												    <GridAggregateColumn Field="@nameof(OVCServeValueTargets.Active)" Type="AggregateType.Sum" Format="N0">
													    <FooterTemplate>
														@{
															var aggregate = (context as AggregateTemplateContext);
															<div>
																<p>@aggregate.Sum</p>
															</div>
														}
													</FooterTemplate>
												   </GridAggregateColumn>
												  @*   <GridAggregateColumn Field="@nameof(OVCServeValueTargets.Percentage)" Type="AggregateType.Average" Format="N1">
													    <FooterTemplate>
														@{
															var aggregate = (context as AggregateTemplateContext);
															<div>
																<p>@aggregate.Average</p>
															</div>
														}
													</FooterTemplate>
												   </GridAggregateColumn> *@
										   </GridAggregateColumns>
										   </GridAggregate>
									 </GridAggregates>
									 <GridColumns>
										<GridColumn Field=@nameof(OVCServeValueTargets.DistrictId) Visible="false" HeaderText="DistrictId" Width="110"> </GridColumn>
										<GridColumn Field=@nameof(OVCServeValueTargets.DistrictDescription) HeaderText="District" Width="100"></GridColumn>
										<GridColumn Field=@nameof(OVCServeValueTargets.TargetValue) HeaderText="Target" Width="100"></GridColumn>
										<GridColumn Field=@nameof(OVCServeValueTargets.ageCategory17) HeaderText="0-17 Served" Width="100"></GridColumn>
										<GridColumn Field=@nameof(OVCServeValueTargets.ageCategory18) HeaderText="18+ Served" Width="100"></GridColumn>
										<GridColumn Field=@nameof(OVCServeValueTargets.Active) HeaderText="OVC_SERV.(0-18+ Yrs)" Width="120"></GridColumn>
										<GridColumn Field=@nameof(OVCServeValueTargets.Percentage) HeaderText="% OVC_SERV" Format="N1" Width="100">
											  <Template>
												@{
													var ImplementationStatusProgressData = (context as OVCServeValueTargets);
													string Progress = ImplementationStatusProgressData.Percentage + "%";
													string textcolor = "##34495e";
													 string progColor = "#ffffff";
												 	//<b>textcolor</b>
													if (ImplementationStatusProgressData.Percentage  < 75)
													{
														progColor = "#c0392b";
													}
													else if (ImplementationStatusProgressData.Percentage >= 75 && ImplementationStatusProgressData.Percentage < 95)
													{
														progColor = "#f1c40f";
													}
													else if (ImplementationStatusProgressData.Percentage >= 95 && ImplementationStatusProgressData.Percentage <= 200)
													{
														progColor = "#2ecc71";
													}
													 
													<SfProgressBar Type="ProgressType.Linear" Height="15"
																   Width="100%" 
																   TrackThickness="30"
																   ProgressThickness="30"
																   ProgressColor="@progColor"
																   Value="ImplementationStatusProgressData.Percentage" Minimum="0" Maximum="200" ShowProgressValue="true">
														<ProgressBarLabelStyle Text=@Progress TextAlignment="TextAlignmentType.Center" Color="@textcolor"/>
													
													</SfProgressBar>
												}
											</Template>
										</GridColumn>
									</GridColumns>
							</SfGrid>
							
									</div>
								</div>
							</div>
							<div class="col-md-4">
								<div  class="control-section" align='center'>
                                   <div class="control-section"> 
                                  <h5>OVC_SERV Vs GENDER (0-18+ YEARS)</h5>
							 <SfGrid DataSource="@TargetsList" AllowExcelExport="true" AllowPdfExport="true"  AllowFiltering="false"
										AllowSorting="true" GridLines="GridLine.Both" AllowTextWrap="true">
									<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
									<GridEvents QueryCellInfo="QueryCellInfoHandler1" TValue="OVCServeValueTargets"></GridEvents>
									 <GridAggregates>
										   <GridAggregate>
                                           <GridAggregateColumns>
												   <GridAggregateColumn Field="@nameof(OVCServeValueTargets.Active)" Type="AggregateType.Sum" Format="N0">
													    <FooterTemplate>
														@{
															var aggregate = (context as AggregateTemplateContext);
															<div>
																<p>@aggregate.Sum</p>
															</div>
														}
													</FooterTemplate>
												   </GridAggregateColumn>
												   <GridAggregateColumn Field="@nameof(OVCServeValueTargets.PercentageFemaleActive)" Type="AggregateType.Average" Format="N1">
													    <FooterTemplate>
														@{
															var aggregate = (context as AggregateTemplateContext);
															<div>
															  <p>@aggregate.Average</p>
															</div>
														}
													</FooterTemplate>
												   </GridAggregateColumn>
												    <GridAggregateColumn Field="@nameof(OVCServeValueTargets.PercentageMaleActive)" Type="AggregateType.Average" Format="N1">
													    <FooterTemplate>
														@{
															var aggregate = (context as AggregateTemplateContext);
															<div>
																<p>@aggregate.Average</p>
															</div>
														}
													</FooterTemplate>
												   </GridAggregateColumn>
										   </GridAggregateColumns>
										   </GridAggregate>
									 </GridAggregates>
									 <GridColumns>
										<GridColumn Field=@nameof(OVCServeValueTargets.DistrictId) Visible="false" HeaderText="DistrictId" Width="110"> </GridColumn>
										<GridColumn Field=@nameof(OVCServeValueTargets.DistrictDescription) HeaderText="District" Width="100"></GridColumn>
										<GridColumn Field=@nameof(OVCServeValueTargets.Active) HeaderText="OVC_SERV.(0-18+ Yrs)" Width="140"></GridColumn>
										<GridColumn Field=@nameof(OVCServeValueTargets.FemaleActive) Width="100" HeaderText="Female" Visible="false" AllowEditing="false" TextAlign="TextAlign.Right" MinWidth="10"></GridColumn>
										<GridColumn Field=@nameof(OVCServeValueTargets.PercentageFemaleActive) Width="70" Visible="true" HeaderText="% Female" Format="N1" AllowEditing="false" TextAlign="TextAlign.Right" MinWidth="10"></GridColumn>
										<GridColumn Field=@nameof(OVCServeValueTargets.MaleActive) Width="90" HeaderText="Male"  Visible="false" AllowEditing="true" TextAlign="TextAlign.Right" MinWidth="10" AllowResizing=false></GridColumn>
										<GridColumn Field=@nameof(OVCServeValueTargets.PercentageMaleActive) Width="70" HeaderText="% Male" Visible="true" Format="N1" AllowEditing="true" TextAlign="TextAlign.Right" MinWidth="10" AllowResizing=false></GridColumn>
									</GridColumns>
							</SfGrid>
							
									</div>
								</div>
							</div>
					  	</div>
						</CarouselItem>
					
						<CarouselItem>
							<div class="row">
						     <div class="col-md-12">
								 <div  class="control-section" align='center'>
                                   <div class="control-section"> 
									   <h5>OVC HIV_STAT Vs AGE CATEGORY</h5>
									    <SfGrid DataSource="@TargetsList" AllowExcelExport="true" AllowPdfExport="true"  AllowFiltering="false"
										AllowSorting="true" GridLines="GridLine.Both" AllowTextWrap="true">
									<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
									<GridEvents QueryCellInfo="QueryCellInfoHandler1" TValue="OVCServeValueTargets"></GridEvents>
									<GridAggregates>
										   <GridAggregate>
                                           <GridAggregateColumns>
												   <GridAggregateColumn Field="@nameof(OVCServeValueTargets.Active)" Type="AggregateType.Sum" Format="N0">
													    <FooterTemplate>
														@{
															var aggregate = (context as AggregateTemplateContext);
															<div>
																<span><p>@aggregate.Sum</p></span>
															</div>
														}
													</FooterTemplate>
												   </GridAggregateColumn>
												   <GridAggregateColumn Field="@nameof(OVCServeValueTargets.PercentageageCategory17)" Type="AggregateType.Average" Format="N1">
													    <FooterTemplate>
														@{
															var aggregate = (context as AggregateTemplateContext);
															<div>
															  <span><p>@aggregate.Average</p></span>
															</div>
														}
													</FooterTemplate>
												   </GridAggregateColumn>
												      <GridAggregateColumn Field="@nameof(OVCServeValueTargets.PercentageageCategory18)" Type="AggregateType.Average" Format="N1">
													    <FooterTemplate>
														@{
															var aggregate = (context as AggregateTemplateContext);
															<div>
															  <span><p>@aggregate.Average</p></span>
															</div>
														}
													</FooterTemplate>
												   </GridAggregateColumn>
												    <GridAggregateColumn Field="@nameof(OVCServeValueTargets.HIVpostive17)" Type="AggregateType.Sum" Format="N1">
													    <FooterTemplate>
														@{
															var aggregate = (context as AggregateTemplateContext);
															<div>
																<span><p>@aggregate.Sum</p></span>
															</div>
														}
													</FooterTemplate>
												   </GridAggregateColumn>
												     <GridAggregateColumn Field="@nameof(OVCServeValueTargets.HIVpostive18)" Type="AggregateType.Sum" Format="N1">
													    <FooterTemplate>
														@{
															var aggregate = (context as AggregateTemplateContext);
															<div>
																<span><p>@aggregate.Sum</p></span>
															</div>
														}
													</FooterTemplate>
												   </GridAggregateColumn>
												     <GridAggregateColumn Field="@nameof(OVCServeValueTargets.HIVnegative17)" Type="AggregateType.Sum" Format="N1">
													    <FooterTemplate>
														@{
															var aggregate = (context as AggregateTemplateContext);
															<div>
																<span><p>@aggregate.Sum</p></span>
															</div>
														}
													</FooterTemplate>
												   </GridAggregateColumn>
												     <GridAggregateColumn Field="@nameof(OVCServeValueTargets.HIVnegative18)" Type="AggregateType.Sum" Format="N1">
													    <FooterTemplate>
														@{
															var aggregate = (context as AggregateTemplateContext);
															<div>
																<span><p>@aggregate.Sum</p></span>
															</div>
														}
													</FooterTemplate>
												   </GridAggregateColumn>
												     <GridAggregateColumn Field="@nameof(OVCServeValueTargets.Unknwon17)" Type="AggregateType.Sum" Format="N1">
													    <FooterTemplate>
														@{
															var aggregate = (context as AggregateTemplateContext);
															<div>
																<span><p>@aggregate.Sum</p></span>
															</div>
														}
													</FooterTemplate>
												   </GridAggregateColumn>
												     <GridAggregateColumn Field="@nameof(OVCServeValueTargets.Unknwon18)" Type="AggregateType.Sum" Format="N1">
													    <FooterTemplate>
														@{
															var aggregate = (context as AggregateTemplateContext);
															<div>
																<span><p>@aggregate.Sum</p></span>
															</div>
														}
													</FooterTemplate>
												   </GridAggregateColumn>
												<GridAggregateColumn Field="@nameof(OVCServeValueTargets.TNR18)" Type="AggregateType.Sum" Format="N1">
													<FooterTemplate>
														@{
															var aggregate = (context as AggregateTemplateContext);
															<div>
																<span><p>@aggregate.Sum</p></span>
															</div>
														}
													</FooterTemplate>
												</GridAggregateColumn>
												<GridAggregateColumn Field="@nameof(OVCServeValueTargets.TNR17)" Type="AggregateType.Sum" Format="N1">
													<FooterTemplate>
														@{
															var aggregate = (context as AggregateTemplateContext);
															<div>
																<span><p>@aggregate.Sum</p></span>
															</div>
														}
													</FooterTemplate>
												</GridAggregateColumn>
												<GridAggregateColumn Field="@nameof(OVCServeValueTargets.percentageC_ALHIV17)" Type="AggregateType.Average" Format="N1">
													<FooterTemplate>
														@{
															var aggregate = (context as AggregateTemplateContext);
															<div>
																<span><p>@aggregate.Average</p></span>
															</div>
														}
													</FooterTemplate>
												</GridAggregateColumn>
												<GridAggregateColumn Field="@nameof(OVCServeValueTargets.percentageC_ALHIV18)" Type="AggregateType.Average" Format="N1">
													<FooterTemplate>
														@{
															var aggregate = (context as AggregateTemplateContext);
															<div>
																<span><p>@aggregate.Average</p></span>
															</div>
														}
													</FooterTemplate>
												</GridAggregateColumn>
										   </GridAggregateColumns>
										   </GridAggregate>
									 </GridAggregates>
									 <GridColumns>
										<GridColumn Field=@nameof(OVCServeValueTargets.DistrictId) Visible="false" HeaderText="DistrictId" Width="110"> </GridColumn>
										<GridColumn Field=@nameof(OVCServeValueTargets.DistrictDescription) HeaderText="District" Width="100"></GridColumn>
										<GridColumn Field=@nameof(OVCServeValueTargets.Active) HeaderText="OVC_SERV.(0-18+)" Width="140"></GridColumn>
									   <GridColumn HeaderText="0-17 Age Category" HeaderTextAlign="TextAlign.Center">
											<GridColumns>
												<GridColumn Field=@nameof(OVCServeValueTargets.PercentageageCategory17) Width="100" Visible="true" HeaderText="% OVC_SERV" Format="N1" AllowEditing="false" TextAlign="TextAlign.Right" MinWidth="10"></GridColumn>
												<GridColumn Field=@nameof(OVCServeValueTargets.HIVpostive17) Width="100" HeaderText="HIV +"  AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
												<GridColumn Field=@nameof(OVCServeValueTargets.HIVnegative17) Width="100" HeaderText="HIV -"  AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
												<GridColumn Field=@nameof(OVCServeValueTargets.Unknwon17) Width="100" HeaderText="Unkown Status"  AllowEditing="true" TextAlign="TextAlign.Right" MinWidth="10" AllowResizing=false></GridColumn>
												<GridColumn Field=@nameof(OVCServeValueTargets.TNR17) Width="100" HeaderText="TNR"  AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
												<GridColumn Field=@nameof(OVCServeValueTargets.percentageC_ALHIV17) Width="100" HeaderText="%C/ALHIV"  AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
											</GridColumns>
									   	</GridColumn>
										  <GridColumn HeaderText="18+ Age Category" HeaderTextAlign="TextAlign.Center">
											<GridColumns>
												<GridColumn Field=@nameof(OVCServeValueTargets.PercentageageCategory18) Width="100" Visible="true" HeaderText="% OVC_SERV" Format="N1" AllowEditing="false" TextAlign="TextAlign.Right" MinWidth="10"></GridColumn>
												<GridColumn Field=@nameof(OVCServeValueTargets.HIVpostive18) Width="100" HeaderText="HIV +"  AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
												<GridColumn Field=@nameof(OVCServeValueTargets.HIVnegative18) Width="100" HeaderText="HIV -"  AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
												<GridColumn Field=@nameof(OVCServeValueTargets.Unknwon18) Width="100" HeaderText="Unkown Status"  AllowEditing="true" TextAlign="TextAlign.Right" MinWidth="10" AllowResizing=false></GridColumn>
												<GridColumn Field=@nameof(OVCServeValueTargets.TNR18) Width="100" HeaderText="TNR"  AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
												<GridColumn Field=@nameof(OVCServeValueTargets.percentageC_ALHIV18) Width="100" HeaderText="%C/ALHIV"  AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
											</GridColumns>
									   	</GridColumn>
									</GridColumns>
						        	</SfGrid>
							
									</div>
									</div>
								</div>
                           
							</div>	
							<div class="md-col-12">
								@if (TargetsList.Count > 0)
								{
							
								<div class="marquee-container">
						     	@*<img src="/Login/images/MucobadiLogo2.png" alt="Image Description" class="marquee-image">*@
								  <marquee behavior="scroll" direction="left">
									<span class="marquee-text">FY @CurrentYear OVC_SERV target 
									<span>@TargetsList[0].TargetValue</span>, currently at 
									<span>@TargetsList[0].Percentage</span>,
									including 
									<span>@TargetsList[0].PercentageFemaleActive</span> females and
									<span>@TargetsList[0].PercentageMaleActive</span> males,
									comprising 
									<span>@TargetsList[0].PercentageageCategory17</span> aged between 0-17 and 
									<span>@TargetsList[0].PercentageageCategory18</span> aged 18 and above.</span>
								  </marquee>
								</div>

								}
							</div>
						</CarouselItem>
						<CarouselItem>
				         <div class="row">
					       <div class="col-md-6">
					    	<div class="control-section" align='center'>
								<div class="control-section">
								@if (TableOVCVLList != null && TableOVCVLList.Count > 0)
								{
									<h5>DISTRICT OVC HIV_STAT POSITIVE CLIENTS ELIGIBLE FOR VL</h5>
									<SfGrid DataSource="@TableOVCVLList" AllowExcelExport="true" AllowPdfExport="true" AllowFiltering="false"
											AllowSorting="true" GridLines="GridLine.Both" AllowTextWrap="true">
										<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
										<GridEvents QueryCellInfo="QueryCellInfoHandlerTable" TValue="TableOVCVL"></GridEvents>
										<GridColumns>
											<GridColumn Field=@nameof(TableOVCVL._DistrictId) Visible="false" HeaderText="DistrictId" Width="110"> </GridColumn>
											<GridColumn Field=@nameof(TableOVCVL._DistrictDescription) HeaderText="District" Width="100"></GridColumn>
											<GridColumn Field=@nameof(TableOVCVL._District_VL_Eligible) Width="110" HeaderText="Eligible(0-18+)" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
											<GridColumn HeaderText="0-17 Age Category" HeaderTextAlign="TextAlign.Center">
												<GridColumns>

													<GridColumn Field=@nameof(TableOVCVL._female0_17_VL_Eligible) Width="70" HeaderText="F" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._Male0_17_VL_Eligible) Width="70" HeaderText="M" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._percentage0_17_VL_Eligible) Width="90" Visible="true" HeaderText="% Eligible" Format="N1" AllowEditing="false" TextAlign="TextAlign.Right" MinWidth="10"></GridColumn>

												</GridColumns>
											</GridColumn>
											<GridColumn HeaderText="18+ Age Category" HeaderTextAlign="TextAlign.Center">
												<GridColumns>
													<GridColumn Field=@nameof(TableOVCVL._female18_VL_Eligible) Width="70" HeaderText="F" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._Male18_VL_Eligible) Width="70" HeaderText="M" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._percentage18_VL_Eligible) Width="90" Visible="true" HeaderText="% Eligible" Format="N1" AllowEditing="false" TextAlign="TextAlign.Right" MinWidth="10"></GridColumn>
												</GridColumns>
											</GridColumn>
										</GridColumns>
									</SfGrid>
								}
								</div>
							   </div>
							</div>
					    	<div class="col-md-6">
							    <div  class="control-section" align='center'>
                                   <div class="control-section">
								@if (TableOVCVLList != null && TableOVCVLList.Count > 0)
								{
									<h5>DISTRICT OVC HIV_STAT POSITIVE CLIENTS WHOSE VL TEST DONE</h5>
									<SfGrid DataSource="@TableOVCVLList" AllowExcelExport="true" AllowPdfExport="true" AllowFiltering="false"
											AllowSorting="true" GridLines="GridLine.Both" AllowTextWrap="true">
										<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
										<GridEvents QueryCellInfo="QueryCellInfoHandlerTable" TValue="TableOVCVL"></GridEvents>
										<GridColumns>
											<GridColumn Field=@nameof(TableOVCVL._DistrictId) Visible="false" HeaderText="DistrictId" Width="110"> </GridColumn>
											<GridColumn Field=@nameof(TableOVCVL._DistrictDescription) HeaderText="District" Width="100"></GridColumn>
											<GridColumn Field=@nameof(TableOVCVL._District_VL_TestDone) Width="120" HeaderText="Test Done(0-18+)" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
											<GridColumn HeaderText="0-17 Age Category" HeaderTextAlign="TextAlign.Center">
												<GridColumns>

													<GridColumn Field=@nameof(TableOVCVL._female0_17_VL_TestDone) Width="70" HeaderText="F" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._Male0_17_VL_TestDone) Width="70" HeaderText="M" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._percentage0_17_VL_TestDone) Width="90" Visible="true" HeaderText="% Test Done" Format="N1" AllowEditing="false" TextAlign="TextAlign.Right" MinWidth="10"></GridColumn>

												</GridColumns>
											</GridColumn>
											<GridColumn HeaderText="18+ Age Category" HeaderTextAlign="TextAlign.Center">
												<GridColumns>
													<GridColumn Field=@nameof(TableOVCVL._female18_VL_TestDone) Width="70" HeaderText="F" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._Male18_VL_TestDone) Width="70" HeaderText="M" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._percentage18_VL_TestDone) Width="90" Visible="true" HeaderText="% Test Done" Format="N1" AllowEditing="false" TextAlign="TextAlign.Right" MinWidth="10"></GridColumn>
												</GridColumns>
											</GridColumn>
										</GridColumns>
									</SfGrid>
								}
									</div>
								</div>
							 </div>
						</div>
						</CarouselItem>
						<CarouselItem>
							<div class="row">
							<div class="col-md-6">
							    <div  class="control-section" align='center'>
                                   <div class="control-section"> 
								  @if(GroupedColumnModelData != null && GroupedColumnModelData.Count > 0)
									{
										<h5>DISTRICT AGE BAND OVC HIV_STAT POSITIVE CLIENTS ELIGIBLE FOR VL</h5>
										<MUCOBADI.Pages.Dashboards.PartialViews.GroupedColumnPage GroupedColumnModelData="@GroupedColumnModelData" verticalAxis="Eligible Count">

										</MUCOBADI.Pages.Dashboards.PartialViews.GroupedColumnPage>
									} 
									</div>
								</div>
							 </div>
							<div class="col-md-6">
								<div class="control-section" align='center'>
									<div class="control-section">
								   @if(GroupedColumnModelData2 != null && GroupedColumnModelData2.Count > 0)
									{
									<h5>DISTRICT AGE BAND OVC HIV_STAT POSITIVE CLIENTS WHOSE VL TEST DONE</h5>
										<MUCOBADI.Pages.Dashboards.PartialViews.GroupedColumnPage GroupedColumnModelData="@GroupedColumnModelData2" verticalAxis="Test Done Count">

										</MUCOBADI.Pages.Dashboards.PartialViews.GroupedColumnPage>
									} 
									</div>
								</div>
							</div>
							</div>
						</CarouselItem>
			<CarouselItem>
				<div class="row">
					<div class="col-md-6">
						<div class="control-section" align='center'>
							<div class="control-section">
								@if (TableOVCVLList != null && TableOVCVLList.Count > 0)
								{
									<h5>DISTRICT OVC HIV_STAT POSITIVE CLIENTS WITH SUPPRESSED RESULTS</h5>
									<SfGrid DataSource="@TableOVCVLList" AllowExcelExport="true" AllowPdfExport="true" AllowFiltering="false"
											AllowSorting="true" GridLines="GridLine.Both" AllowTextWrap="true">
										<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
										<GridEvents QueryCellInfo="QueryCellInfoHandlerTable" TValue="TableOVCVL"></GridEvents>
										<GridColumns>
											<GridColumn Field=@nameof(TableOVCVL._DistrictId) Visible="false" HeaderText="DistrictId" Width="110"> </GridColumn>
											<GridColumn Field=@nameof(TableOVCVL._DistrictDescription) HeaderText="District" Width="100"></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._District_VL_Eligible) Width="110" HeaderText="Suppressed(0-18+)" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
											<GridColumn HeaderText="0-17 Age Category" HeaderTextAlign="TextAlign.Center">
												<GridColumns>

													<GridColumn Field=@nameof(TableOVCVL.Female0_17SuppressedResults) Width="70" HeaderText="F" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL.Male0_17SuppressedResults) Width="70" HeaderText="M" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._percentage0_17SuppressedResults) Width="90" Visible="true" HeaderText="% Suppressed" Format="N1" AllowEditing="false" TextAlign="TextAlign.Right" MinWidth="10"></GridColumn>

												</GridColumns>
											</GridColumn>
											<GridColumn HeaderText="18+ Age Category" HeaderTextAlign="TextAlign.Center">
												<GridColumns>
													<GridColumn Field=@nameof(TableOVCVL.Female_18_SuppressedResults) Width="70" HeaderText="F" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL.Male_18_SuppressedResults) Width="70" HeaderText="M" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._percentage18SuppressedResults) Width="90" Visible="true" HeaderText="% Suppressed" Format="N1" AllowEditing="false" TextAlign="TextAlign.Right" MinWidth="10"></GridColumn>
												</GridColumns>
											</GridColumn>
										</GridColumns>
									</SfGrid>
								}

							</div>
						</div>
					</div>
					<div class="col-md-6">
						<div class="control-section" align='center'>
							<div class="control-section">
								@if (TableOVCVLList != null && TableOVCVLList.Count > 0)
								{
									<h5>DISTRICT OVC HIV_STAT POSITIVE CLIENTS WHOSE VL TEST RESULTS RECIEVED</h5>
									<SfGrid DataSource="@TableOVCVLList" AllowExcelExport="true" AllowPdfExport="true" AllowFiltering="false"
											AllowSorting="true" GridLines="GridLine.Both" AllowTextWrap="true">
										<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
										<GridEvents QueryCellInfo="QueryCellInfoHandlerTable" TValue="TableOVCVL"></GridEvents>
										<GridColumns>
											<GridColumn Field=@nameof(TableOVCVL._DistrictId) Visible="false" HeaderText="DistrictId" Width="110"> </GridColumn>
											<GridColumn Field=@nameof(TableOVCVL._DistrictDescription) HeaderText="District" Width="100"></GridColumn>
											<GridColumn Field=@nameof(TableOVCVL._District_VL_TestDone) Width="120" HeaderText="Test Done(0-18+)" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
											<GridColumn HeaderText="0-17 Age Category" HeaderTextAlign="TextAlign.Center">
												<GridColumns>

													<GridColumn Field=@nameof(TableOVCVL.Female0_17RecievedResults) Width="70" HeaderText="F" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL.Male0_17RecievedResults) Width="70" HeaderText="M" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._percentage0_17RecievedResults) Width="90" Visible="true" HeaderText="% Recieved" Format="N1" AllowEditing="false" TextAlign="TextAlign.Right" MinWidth="10"></GridColumn>

												</GridColumns>
											</GridColumn>
											<GridColumn HeaderText="18+ Age Category" HeaderTextAlign="TextAlign.Center">
												<GridColumns>
													<GridColumn Field=@nameof(TableOVCVL.Female_18_RecievedResults) Width="70" HeaderText="F" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL.Male_18_RecievedResults) Width="70" HeaderText="M" AllowEditing="true" TextAlign="TextAlign.Center" MinWidth="10" AllowResizing=false></GridColumn>
													<GridColumn Field=@nameof(TableOVCVL._percentage18RecievedResults) Width="90" Visible="true" HeaderText="% Recieved" Format="N1" AllowEditing="false" TextAlign="TextAlign.Right" MinWidth="10"></GridColumn>
												</GridColumns>
											</GridColumn>
										</GridColumns>
									</SfGrid>
								}
							</div>
						</div>
					</div>
				</div>
			</CarouselItem>
			<CarouselItem>
				<div class="row">
					<div class="col-md-6">
						<div class="control-section" align='center'>
							<div class="control-section">
								@if (GroupedColumnModelData3 != null && GroupedColumnModelData3.Count > 0)
								{
									<h5>DISTRICT AGE BAND OVC HIV_STAT POSITIVE CLIENTS WITH SUPPRESSED RESULTS</h5>

									<MUCOBADI.Pages.Dashboards.PartialViews.LineChartPage GroupedColumnModelData="@GroupedColumnModelData3" verticalAxis="Suppressed Count">

									</MUCOBADI.Pages.Dashboards.PartialViews.LineChartPage>
								}
							</div>
						</div>
					</div>
					<div class="col-md-6">
						<div class="control-section" align='center'>
							<div class="control-section">
								@if(GroupedColumnModelData4 != null && GroupedColumnModelData4.Count > 0)
								{
									<h5>DISTRICT AGE BAND OVC HIV_STAT POSITIVE CLIENTS WHOSE VL TEST RESULTS RECIEVED</h5>

									<MUCOBADI.Pages.Dashboards.PartialViews.LineChartPage GroupedColumnModelData="@GroupedColumnModelData4" verticalAxis="Recieved Results Count">

									</MUCOBADI.Pages.Dashboards.PartialViews.LineChartPage>
								}
							</div>
						</div>
					</div>
				</div>
			</CarouselItem>
			@*<CarouselItem>
						<div class="col-md-12">
							@if (DistrictData != null && DistrictData.Count > 0)
							{
								<ChartPartialPage SeriesDataSource=@DistrictData SeriesTitle="Total number of HHs on ICARE By District" LabelColor="Black" FontWeight="800"/>
							}
							else
							{
								<center style="margin-top:10px;"><h6>Total number of HHs on ICARE By Age Category</h6></center>
								<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
								<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
								</div>
							}
						</div>
					</CarouselItem>*@
					@*<CarouselItem>
						<div class="row" style="margin-top:5px;">
							<div class="col-md-6">
								@if (HIVStatusdData != null && HIVStatusdData.Count > 0)
								{
									<ChartPartialPage SeriesDataSource=@HIVStatusdData SeriesTitle="OVC HIV Positive Clients" LabelColor="Black"  FontWeight="800"/>
								}
								else
								{
									<center style="margin-top:10px;"><h6>OVC HIV Positive Clients</h6></center>
									<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
									<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
									</div>
								}
							</div>
							<div class="col-md-6">
								@if (ClientsOnArtData != null && ClientsOnArtData.Count > 0)
								{
									<ChartPartialPage SeriesDataSource=@ClientsOnArtData SeriesTitle="OVC HIV Positive Clients on ART" LabelColor="Black"  FontWeight="800"/>
								}
								else
								{
									<center style="margin-top:10px;"><h6>OVC HIV Positive Clients on ART</h6></center>
									<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
									<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
									</div>
								}
							</div>
						</div>
					</CarouselItem>*@
					@*<CarouselItem>
						<div class="row" style="margin-top:5px;">
							<div class="col-md-6">
								@if (ClientsEligibleforVLData != null && ClientsEligibleforVLData.Count > 0)
								{
									<ChartPartialPage SeriesDataSource=@ClientsEligibleforVLData SeriesTitle="OVC HIV Positive Clients Eligible for VL" LabelColor="Black"  FontWeight="800"/>
								}
								else
								{
									<center style="margin-top:10px;"><h6>OVC HIV Positive Clients Eligible for VL</h6></center>
									<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
										<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
									</div>
								}
							</div>
							<div class="col-md-6">
								@if (ClientsEligibleforVLTestDoneData != null && ClientsEligibleforVLTestDoneData.Count > 0)
								{
									<ChartPartialPage SeriesDataSource=@ClientsEligibleforVLTestDoneData SeriesTitle="OVC HIV Positive Clients Whose VL Test Done" LabelColor="Black"  FontWeight="800"/>
								}
								else
								{
									<center style="margin-top:10px;"><h6>OVC HIV Positive Clients Whose VL Test Done</h6></center>
									<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
										<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
									</div>
								}
							</div>
						</div>
					</CarouselItem>*@
					@*<CarouselItem>
						<div class="row" style="margin-top:5px;">
							<div class="col-md-6">
								@if (ClientsVLTestResultsReceivedData != null && ClientsVLTestResultsReceivedData.Count > 0)
								{
									<ChartPartialPage SeriesDataSource=@ClientsVLTestResultsReceivedData SeriesTitle="OVC HIV Positive Clients Whose VL Test Results Received" LabelColor="Black" FontWeight="800"/>
								}
								else
								{
								<center style="margin-top:10px;"><h6>OVC HIV Positive Clients Whose VL Test Results Received</h6></center>
									<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
										<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
									</div>
								}
							</div>
							<div class="col-md-6">
								@if (ClientsWithSuppressedResultsData != null && ClientsWithSuppressedResultsData.Count > 0)
								{
									<ChartPartialPage SeriesDataSource=@ClientsWithSuppressedResultsData SeriesTitle="Clients With Suppressed Results" LabelColor="Black" FontWeight="800"/>
								}
								else
								{
								<center style="margin-top:10px;"><h6>Clients With Suppressed Results</h6></center>
									<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
										<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
									</div>
								}
							</div>
						</div>
					</CarouselItem>*@
					
				@*	<CarouselItem>
						<h5>Total number of Beneficiaries on ICARE - By Known Risk Factor (0-17 Years)</h5>
						<table style="width:100%;font-size:20px">
							<tr>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>District</strong>
								</td>
								@if(InputModel.QuarterId != null ||
									InputModel.FinancialYearId != null ||
									InputModel.DistrictId != null ||
									InputModel.SubcountyId != null)
								{
									<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
										<strong>Subcounty</strong>
									</td>
								}
								

								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Adolescent Mother</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>C/ALHIV</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Child of FSW</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>FSW</strong>
									</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>HEI</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Living in HH with Adolescent Mother</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Living in HH with FSW</strong>
									</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Living in HH with HEI</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Living in HH with PLHIV</strong>
									</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Living in HH with SVAC</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Other</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>PLHIV</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>SVAC</strong>
								</td>
							</tr>
							@{
								double? totalAdolescentMother = 0;
								double? totalCALHIV = 0;
								double? totalChildofFSW = 0;
								double? totalFSW = 0;
								double? totalHEI = 0;
								double? totalLivinginHHwithAdolescentMother = 0;
								double? totalLivinginHHwithFSW = 0;
								double? totalLivinginHHwithHEI = 0;
								double? totalLivinginHHwithPLHIV = 0;
								double? totalLivinginHHwithSVAC = 0;
								double? totalPLHIV = 0;
								double? totalSVAC = 0;
								double? totalOther = 0;
							}
							@if(beneficiaryriskfactorchildren!=null)
							{
								@foreach (var item in beneficiaryriskfactorchildren)
								{
									<tr>
										<td>
											@item.DistrictDescription
										</td>
										<td>
											@item.SubcountyDescription
										</td>
										<td  style ="text-align:right">											
											@if(@item.AdolescentMother != null)
											{
												@item.AdolescentMother
											}
											@{
												totalAdolescentMother += item.AdolescentMother;
											}
										</td>
										<td  style ="text-align:right">
											@if(@item.CALHIV != null)
											{
												@item.CALHIV
											}
											@{
												totalCALHIV += item.CALHIV;
											}
										</td>
										<td  style ="text-align:right">
											@if(@item.ChildofFSW != null)
											{
												@item.ChildofFSW
											}
											@{
												totalChildofFSW += item.ChildofFSW;
											}
										</td>
										<td  style ="text-align:right">
											@if(@item.FSW != null)
											{
												@item.FSW
											}
											@{
											totalFSW += item.FSW;
											}
										</td>
										<td  style ="text-align:right">
											@if(@item.HEI != null)
											{
												@item.HEI
											}
											@{
												totalHEI += item.HEI;
											}
										</td>
										<td  style ="text-align:right">
											@if(@item.LivinginHHwithAdolescentMother != null)
											{
												@item.LivinginHHwithAdolescentMother
											}
											@{
												totalLivinginHHwithAdolescentMother += item.LivinginHHwithAdolescentMother;
											}
										</td>
										<td  style ="text-align:right">
											@if(@item.LivinginHHwithFSW != null)
											{
												@item.LivinginHHwithFSW
											}
											@{
												totalLivinginHHwithFSW += item.LivinginHHwithFSW;
											}
										</td>
										<td  style ="text-align:right">
											@if(@item.LivinginHHwithHEI != null)
											{
												@item.LivinginHHwithHEI
											}
											@{
												totalLivinginHHwithHEI += item.LivinginHHwithHEI;
											}
										</td>
										<td  style ="text-align:right">
											@if(@item.LivinginHHwithPLHIV != null)
											{
												@item.LivinginHHwithPLHIV
											}
											@{
												totalLivinginHHwithPLHIV += item.LivinginHHwithPLHIV;
											}
										</td>
										<td  style ="text-align:right">
											@if(@item.LivinginHHwithSVAC != null)
											{
												@item.LivinginHHwithSVAC
											}
											@{
												totalLivinginHHwithSVAC += item.LivinginHHwithSVAC;
											}
										</td>
										<td  style ="text-align:right">
											@if(@item.PLHIV != null)
											{
												@item.PLHIV
											}
											@{
												totalPLHIV += item.PLHIV;
											}
										</td>
										<td  style ="text-align:right">
											@if(@item.SVAC != null)
											{
												@item.SVAC
											}
											@{
												totalSVAC += item.SVAC;
											}
										</td>
										<td  style ="text-align:right">
											@if(@item.Other != null)
											{
												@item.Other
											}
											@{
												totalOther += item.Other;
											}
										</td>									
									</tr>
								}
							}
							<tr>
							<td><strong>Total</strong></td>
							<td></td>
							<td style ="text-align:right"><strong>@totalAdolescentMother.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalCALHIV.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalChildofFSW.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalFSW.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalHEI.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalLivinginHHwithAdolescentMother.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalLivinginHHwithFSW.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalLivinginHHwithHEI.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalLivinginHHwithPLHIV.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalLivinginHHwithSVAC.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalPLHIV.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalSVAC.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalOther.Value.ToString("#,##0")</strong></td>							
						</tr>
						</table>
					</CarouselItem>*@
					
					<CarouselItem>					
						<div class="row" style="margin-top:5px;">
								<div class="col-md-6">
								<h5>Number of Positive, Negative and Unknown Clients (0-17 Years)</h5>
									@if (PositiveNegativeUnknownData != null && PositiveNegativeUnknownData.Count > 0)
									{
									<CummulativeChartPartialPage SeriesDataSource=@PositiveNegativeUnknownData Radius="60%" 
									StartAngle="30" InnerRadius="5%" ExplodeIndex="10" Explode="true" ExplodeOffset="10%"
									ChartTitle="Number of Positive, Negative and Unknown Clients (0-17 Years)" />
									}
									else
									{
										@*<center style="margin-top:10px;"><h5>Number of Positive, Negative and Unknown Clients (0-17 Years)</h5></center>*@
										<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
											<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
										</div>
									}
								</div>
								<div class="col-md-6">
								<h5>Number of Positive, Negative and Unknown Clients (18+ Years)</h5>
									@if (PositiveNegativeUnknownData18Plus != null && PositiveNegativeUnknownData18Plus.Count > 0)
									{
									<CummulativeChartPartialPage SeriesDataSource=@PositiveNegativeUnknownData18Plus Radius="60%" 
									StartAngle="30" InnerRadius="5%" ExplodeIndex="10" Explode="true" ExplodeOffset="10%"
									ChartTitle="Number of Positive, Negative and Unknown Clients (18+ Years)" />
									}
									else
									{
										@*<center style="margin-top:10px;"><h5>Number of Positive, Negative and Unknown Clients (18+ Years)</h5></center>*@
										<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
											<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
										</div>
									}
								</div>
							</div>
					</CarouselItem>
					
					
					<CarouselItem>					
						<div class="row" style="margin-top:5px;">
							<div class="col-md-6">
								@if (NumberofActiveBeneficiariesData != null && NumberofActiveBeneficiariesData.Count > 0)
								{
									<ChartPartialPage SeriesDataSource=@NumberofActiveBeneficiariesData SeriesTitle="Total number of Active beneficiaries" LabelColor="White" FontWeight="800"/>
								}
								else
								{
									<center style="margin-top:10px;"><h5>Total number of Active beneficiaries</h5></center>
									<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
										<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
									</div>
								}
							</div>
							<div class="col-md-6">
								@if (NumberClientsWithChildProtectionServiceData != null && NumberClientsWithChildProtectionServiceData.Count > 0)
								{
									<ChartPartialPage SeriesDataSource=@NumberClientsWithChildProtectionServiceData SeriesTitle="Number of Clients with Child-Protection Service" LabelColor="White" FontWeight="800"/>
								}
								else
								{
									<center style="margin-top:10px;"><h5>Number of Clients with Child-Protection Service</h5></center>
									<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
										<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
									</div>
								}
							</div>
						</div>					
					</CarouselItem>

					

					}
					
					catch(Exception ex)
					{
					
					}
					finally
					{
						LoadingDialogue.HideAsync();
					}
			</SfCarousel>

</div>

<div>
	<SfDialog @ref="@LoadingDialogue"
			  ID="LoadingDialog"
			  Height="auto"
			  Width="20%"
			  AllowDragging="true"
			  Target=".mainbody"
			  ShowCloseIcon="false"
			  IsModal=true
			  Visible="false">
		<DialogTemplates>
			<Content>
				<div style="padding:25px">
					<div class="loader">
						<div class="loader--dot"></div>
						<div class="loader--dot"></div>
						<div class="loader--dot"></div>
						<div class="loader--dot"></div>
						<div class="loader--dot"></div>
						<div class="loader--dot"></div>
						<div class="loader-Loading-text"></div>
						@*<div class="loader-Saving-text"></div>*@
					</div>
				</div>
			</Content>
			<FooterTemplate>

			</FooterTemplate>
		</DialogTemplates>
	</SfDialog>
</div>

@code {
	private string CurrentYear => DateTime.Now.Year.ToString();
	public int count { get; set; }
	public int TNR18 { get; set; }
	public int countactive { get; set; }
	public int countOldActive { get; set; }
	public int TNR17 { get; set; }
	public int newEnrolled { get; set; }
	public int ageGroup17 { get; set; }
	public int ageGroup18 { get; set; }
	public int MaleActive { get; set; }
	public int FemaleActive { get; set; }
	public int HIVpostive17 { get; set; }
	public int HIVpostive18 { get; set; }
	public int HIVnegative17 { get; set; }
	public int HIVnegative18 { get; set; }
	public int Unknwon17 { get; set; }
	public int Unknwon18 { get; set; }
	public int numberOfHouseHolds{ get; set; }
	//Table OVC Eligible
	public double female0_17_VL_Eligible {get;set;}
	public double Male0_17_VL_Eligible {get;set;}
	public double female18_VL_Eligible { get; set; }
	public double Male18_VL_Eligible { get; set; }
	public double District_VL_Eligible {get;set;}
	//public double Ditrict18_VL_Eligible { get; set; }
	public double female0_17_VL_TestDone {get;set;}
	public double Male0_17_VL_TestDone {get;set;}
	public double female18_VL_TestDone { get; set; }
	public double Male18_VL_TestDone { get; set; }
	public double District_VL_TestDone {get;set;}
	//public double Ditrict18_VL_TestDone {get;set;}
	public double percentage18_VL_TestDone {get;set;}
	public double percentage0_17_VL_TestDone { get; set; }
	public double percentage0_17_VL_Eligible {get;set;}
	public double percentage18_VL_Eligible {get;set;}
	public double Total_Eligible{get;set;}
	public double Total_TestDone{get;set;}
	public double Total_EligibleF18{get;set;}
	public double Total_TestDoneF18{get;set;}
	public double Total_EligibleF17{get;set;}
	public double Total_TestDoneF17{get;set;}
	public double Total_EligibleM18{get;set;}
	public double Total_TestDoneM18{get;set;}
	public double Total_EligibleM17{get;set;}
	public double Total_TestDoneM17{get;set;}
	public string DistrictDescription{get;set;}
	public double lessthan1{get;set;}
	public double OnetoFour { get; set; }
	public double FivetoNine { get; set; }
	public double TentoFourteen { get; set; }
	public double FifteentoSeventeen { get; set; }
	public double Eighteento25YearsPlus { get; set; }
	public double Suppressed_LessThanOne { get; set; }
	public double Suppressed_OnetoFour { get; set; }
	public double Suppressed_FivetoNine { get; set; }
	public double Suppressed_TentoFourteen { get; set; }
	public double Suppressed_FifteentoSeventeen { get; set; }
	public double Suppressed_18YearsPlus { get; set; }
	public double TestDone_LessThanOne { get; set; }
	public double TestDone_OnetoFour { get; set; }
	public double TestDone_FivetoNine { get; set; }
	public double TestDone_TentoFourteen { get; set; }
	public double TestDone_FifteentoSeventeen { get; set; }
	public double TestDone_18YearsPlus { get; set; }
	public double RecievedResults_LessThanOne { get; set; }
	public double RecievedResults_OnetoFour { get; set; }
	public double RecievedResults_FivetoNine { get; set; }
	public double RecievedResults_TentoFourteen { get; set; }
	public double RecievedResults_FifteentoSeventeen { get; set; }
	public double RecievedResults_18YearsPlus { get; set; }
	public class TableOVCVL
	{
		public double _female0_17_VL_Eligible {get;set;}
		public double _Male0_17_VL_Eligible {get;set;}
		public double _female18_VL_Eligible { get; set; }
		public double _Male18_VL_Eligible { get; set; }
		public double _District_VL_Eligible {get;set;}
		public double _female0_17_VL_TestDone {get;set;}
		public double _Male0_17_VL_TestDone {get;set;}
		public double _female18_VL_TestDone { get; set; }
		public double _Male18_VL_TestDone { get; set; }
		public double _District_VL_TestDone {get;set;}
		public double _percentage18_VL_TestDone {get;set;}
		public double _percentage0_17_VL_TestDone { get; set; }
		public double _percentage0_17_VL_Eligible {get;set;}
		public double _percentage18_VL_Eligible {get;set;}
		public double _percentage0_17RecievedResults{get;set;}
		public double _percentage18RecievedResults { get; set; }
		public double _Total_Eligible{get;set;}
		public double _Total_TestDone{get;set;}
		public string _DistrictDescription{ get; set; }
		public int _DistrictId{get;set;}
		public double Female0_17RecievedResults { get; set; }
		public double Female_18_RecievedResults { get; set; }
		public double Male0_17RecievedResults { get; set; }
		public double Male_18_RecievedResults { get; set; }
		public double RecievedResultsTotal0_17{ get; set; }
		public double RecievedResultsTotal18{ get; set; }
		public double _percentage18SuppressedResults { get; set; }
		public double _percentage0_17SuppressedResults { get; set; }
		public double Female0_17SuppressedResults { get; set; }
		public double Female_18_SuppressedResults { get; set; }
		public double Male0_17SuppressedResults { get; set; }
		public double Male_18_SuppressedResults { get; set; }
		public double SuppressedResultsTotal0_17 { get; set; }
		public double SuppressedResultsTotal18 { get; set; }
		public double Suppressed_Results_District { get; set; }
		public double Recieved_Results_District { get; set; }
		//Age bands
		public double _lessthan1{get;set;}
		public double _OnetoFour { get; set; }
		public double _FivetoNine { get; set; }
		public double _TentoFourteen { get; set; }
		public double _FifteentoSeventeen { get; set; }
		public double _Eighteento25YearsPlus { get; set; }
		public double _Suppressed_LessThanOne { get; set; }
		public double _Suppressed_OnetoFour { get; set; }
		public double _Suppressed_FivetoNine { get; set; }
		public double _Suppressed_TentoFourteen { get; set; }
		public double _Suppressed_FifteentoSeventeen { get; set; }
		public double _Suppressed_18YearsPlus { get; set; }
		public double _TestDone_LessThanOne { get; set; }
		public double _TestDone_OnetoFour { get; set; }
		public double _TestDone_FivetoNine { get; set; }
		public double _TestDone_TentoFourteen { get; set; }
		public double _TestDone_FifteentoSeventeen { get; set; }
		public double _TestDone_18YearsPlus { get; set; }
	}
	#region Toasters
	public static string ToastContent { get; set; }
	SfToast ToastObj;
	SfToast DeleteToastObj;
	private string ToastPosition = "Right";
	private int AlarmTimeout { get; set; } = 120000;
	private List<ToastModel> Toast = new List<ToastModel>
	{
		new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
		new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
		new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
		new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
	};
	#endregion Toasters

	string QuarterNo { get; set; }
	string Qtr= null; 
	string PreviousQtr = null;
	string Yr = null;
	private List<ViewDashboardBeneficiaryIdentificationRegister> TotalHouseHoldsToVisit { get; set; }
	private List<spDashboardHouseHoldsGetAllResult> TotalHouseholdsVisited { get; set; }
	List<spDashboard_OVC_SERVResult> OvcServeData { get; set; }
	List<ViewDashboardTnrhivstatus> UnknownTNRData { get; set; }
	List<ViewATargets> TargetsData { get; set; }
	List<DasboardDistricts> data { get; set; }
	List<ViewDashboardBeneficiariesonIcarepivot> ICAREBeneficiariesData { get; set; }
	List<ViewDashboardBeneficiariesonIcarepivotNoFilter> ICAREBeneficiariesDataOverrall { get; set; }
	List<ViewDashboardOvcServiceReportingToolDetail> HomeVisitData { get; set; }
	List<AKnownRiskFactorsBinding> RiskFactorsData { get; set; }
	List<ViewDashboardHouseHoldNoVisits> HHNoVisitsData { get; set; }
	List<AFinancialYear> YearsDataSource { get; set; }
	List<ADistrict> DistrictsDataSource { get; set; }
	List<ASubcounty> SubcountiesDataSource { get; set; }

	private Syncfusion.Blazor.Theme Theme { get; set; }
	private double[] Spacing = new double[] { 15, 15 };
	private double Ratio = 160 / 100;
	SearchPanel SearchModel { get; set; } = new();
	List<SeriesModel> AgeCategoryData { get; set; }
	List<SeriesModel> DistrictData { get; set; }
	List<SeriesModel> HIVStatusdData { get; set; }
	List<SeriesModel> ProgramStatusData { get; set; }
	List<SeriesModel> ClientsOnArtData { get; set; }
	List<SeriesModel> ClientsEligibleforVLTestDoneData { get; set; }
	List<SeriesModel> ClientsEligibleforVLData { get; set; }
	List<SeriesModel> ClientsVLTestResultsReceivedData { get; set; }
	List<SeriesModel> ClientsWithSuppressedResultsData { get; set; }
	List<SeriesModel> RiskFactorData { get; set; }
	//List<GroupedColumnModel> GroupedColumnModelData { get; set; }
	List<GroupedColumnModel> GroupedColumnModelData = new List<GroupedColumnModel>();
	List<GroupedColumnModel> GroupedColumnModelData2 = new List<GroupedColumnModel>();
	List<GroupedColumnModel> GroupedColumnModelData3 = new List<GroupedColumnModel>();
	List<GroupedColumnModel> GroupedColumnModelData4 = new List<GroupedColumnModel>();
	List<DashboardModel> PositiveNegativeUnknownData { get; set; }
	List<DashboardModel> PositiveNegativeUnknownData18Plus { get; set; }
	public static double? TotalCALHIV { get; set; } = 0;
	List<SeriesModel>? NumberofActiveBeneficiariesData { get; set; }
	List<SeriesModel>? NumberofClientWithHealthServiceData { get; set; }
	List<SeriesModel>? NumberofClientWithHealthServiceDataChildren { get; set; }
	List<SeriesModel>? NumberClientsWithChildProtectionServiceData { get; set; }
	List<SeriesModel>? NumberClientsWithChildProtectionServiceData1 { get; set; }
	List<string> SeriesColors { get; set; } = new List<string>()
	{
		"#2485FA","#4d0702","#808285","#6002EE","#008b00","#262626","#424d44","#472b42","#1e4167","#3d1d00"
	};
	SfDialog? LoadingDialogue;
	private UtilitiesSearchPanel InputModel = new();
	List<AQuarter> QuarterData { get; set; }
	bool isQuarterEnabled { get; set; } = true;
	bool isSubcountyEnabled  { get; set; } = false;
	bool Downloadreport { get; set; } = false;
	Random random = new Random();

	public class OvcHivStat
	{
		public string DistrictDescription { get; set; }
		public double? OVCServ { get; set; }
		public double? HivPositive { get; set; }
		public double? HivNegative { get; set; }
		public double? Unknownstatus { get; set; }
		public double? UnknownTNR { get; set; }
		public double? CALHIV { get; set; }
	}
	public class OvcServeAgeGroups
	{
		public string DistrictDescription { get; set; }
		public string SubcountyDescription { get; set; }
		public double? OVCServTotal { get; set; }
		public double? Children { get; set; }
		public double? Adults { get; set; }
		public double? PercentageChildren { get; set; }
		public double? PercentageAdults { get; set; }
	}

	List<OvcHivStat> ovchivchildren = new List<OvcHivStat>();
	List<OvcHivStat> ovcadults = new List<OvcHivStat>();
	List<OvcServeAgeGroups> ovcservagegroups = new List<OvcServeAgeGroups>();

	public class OVCServeValueTargets
	{
		public double? TargetValue { get; set; }
		public int? DistrictId { get; set; }
		public int? FinancialYearId { get; set; }
		public string DistrictDescription { get; set; }
		public string FinancialYearDesc { get; set; }
		public int? VisitationMonth { get; set; }
		public int? Qtr { get; set; }
		public int? VisitationYear { get; set; }
		public double? ActualValue { get; set; }
		public double? Active { get; set; }
		public double? Graduated { get; set; }
		public double Percentage { get; set; }
		public double? ActivePreviousQtr { get; set; }
		public double? NewlyEnrolled { get; set; }
		public double? FinalServ { get; set; }
		public double? ageCategory17 { get; set; }
		public double? ageCategory18 { get; set; }
		public double? MaleActive { get; set; }
		public double? FemaleActive { get; set; }
		public double? PercentageMaleActive { get; set; }
		public double? PercentageFemaleActive { get; set; }
		public double? PercentageageCategory17 { get; set; }
		public double? PercentageageCategory18 { get; set; }
		public double? TNR17 { get; set; }
		public double? TNR18 { get; set; }
		public double? HIVpostive17 { get; set; }
		public double? HIVpostive18 { get; set; }
		public double? HIVnegative17 { get; set; }
		public double? HIVnegative18 { get; set; }
		public double? Unknwon17 { get; set; }
		public double? Unknwon18 { get; set; }
		public double? percentageC_ALHIV18 { get; set; }
		public double? percentageC_ALHIV17 { get; set; }
		public double? numberOfHouseHolds { get; set; }
	}

	List<OVCServeValueTargets> TargetsList = new List<OVCServeValueTargets>();
	List<TableOVCVL> TableOVCVLList = new List<TableOVCVL>();
	public class BeneficiaryRiskFactor
	{
		public string DistrictDescription { get; set; }
		public string KnownRiskFactorDescription { get; set; }
		public double? TotalNumber { get; set; }
		public int? DistrictId { get; set; }
		public double? AdolescentMother { get; set; }
		public double CALHIV { get; set; }
		public double ChildofFSW { get; set; }
		public double FSW { get; set; }
		public double HEI { get; set; }
		public double LivinginHHwithAdolescentMother { get; set; }
		public double LivinginHHwithFSW { get; set; }
		public double LivinginHHwithHEI { get; set; }
		public double LivinginHHwithPLHIV { get; set; }
		public double LivinginHHwithSVAC { get; set; }
		public double Other { get; set; }
		public double PLHIV { get; set; }
		public double SVAC { get; set; }
		public int? SubcountyId { get; set; }
		public string SubcountyDescription { get; set; }

	}
	List<BeneficiaryRiskFactor> beneficiaryriskfactorchildren = new List<BeneficiaryRiskFactor>();

	public class DasboardDistricts
	{
		public int? DistrictId { get; set; }
		public string DistrictDescription { get; set; }
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			await base.OnInitializedAsync();

			QuarterData = await _dbcontext
			.AQuarter
			.Where(o => o.QuarterId >= 1 && o.QuarterId <= 4)
			.ToListAsync();

			YearsDataSource = await _dbcontext
			.AFinancialYear
			.OrderBy(o => o.FinancialYearDesc)
			.ToListAsync();

			DistrictsDataSource = await _dbcontext
			.ADistrict
			.OrderBy(o => o.DistrictDescription)
			.ToListAsync();

			SubcountiesDataSource = await _dbcontext
			.ASubcounty
			.OrderBy(o => o.SubcountyDescription)
			.ToListAsync();

			await LoadDashboards();
		}
		catch(Exception ex)
		{
			throw ex;
		}

		finally
		{


		}
	}

	public class PreviousQtrsClass
	{
		public string PreviousQtrs { get; set; }
	}

	private async Task SearchDashboard()
	{

		try		
		{
			Downloadreport = true;
			if (!InputModel.startDate.HasValue)
			{
				toastService.ShowInfo("Please enter the start date");
			}
			else if (!InputModel.endDate.HasValue)
			{
				toastService.ShowInfo("Please enter the end date");
			}
			else 
			if(InputModel.QuarterId == null && InputModel.FinancialYearId == null && InputModel.DistrictId == null && InputModel.SubcountyId == null)
			{
				await LoadingDialogue.ShowAsync();
				//Clear the current list in the table
				TargetsList.Clear();
				ovcservagegroups.Clear();
				ovchivchildren.Clear();
				ovcadults.Clear();
				beneficiaryriskfactorchildren.Clear();
				await LoadDashboards();
			}
			else
			{
				string StartDate = null;
				string EndDate = null;
				//var _financialYear = _dbcontext.AFinancialYear.FirstOrDefault(o => o.FinancialYearDesc.Trim() == currentYear.ToString());
				if (InputModel.startDate.HasValue)
				{
					StartDate = InputModel.startDate.Value.ToString("yyyy-MM-dd");

				}
				if (InputModel.endDate.HasValue)
				{
					EndDate = InputModel.endDate.Value.ToString("yyyy-MM-dd");

				}
				//Quarter
				string _QuarterId = null;
				if (InputModel.QuarterId != null)
				{
					_QuarterId = string.Join(",", InputModel.QuarterId);
				}

				string[] _QuarterId1 = new string[] { };
				if (!string.IsNullOrEmpty(_QuarterId))
				{
					_QuarterId1 = _QuarterId.Split(',');
				}

				List<string> PreviousQtrsList = new List<string> ();
				string[] _PreviousQtrsList = new string[] { };

				if (!string.IsNullOrEmpty(_QuarterId))
				{
					foreach (char n in _QuarterId)
					{
						if (n.ToString() == "1")
						{
							PreviousQtrsList.Add("4");
						}
						else if (n.ToString() == "2")
						{
							PreviousQtrsList.Add("1");
						}

						else if (n.ToString() == "3")
						{
							PreviousQtrsList.Add("2");
						}

						else if (n.ToString() == "4")
						{
							PreviousQtrsList.Add("3");
						}

						if (PreviousQtrsList.Count > 0)
						{
							_PreviousQtrsList = PreviousQtrsList.ToArray();
						}
					}
				}

				//Financial Year
				string _YearId = null;
				if (InputModel.FinancialYearId != null)
				{
					_YearId = string.Join(",", InputModel.FinancialYearId);
				}

				string[] _YearId1 = new string[] { };
				if (!string.IsNullOrEmpty(_YearId))
				{
					_YearId1 = _YearId.Split(',');
				}

				//District
				string _DistrictId = null;
				if (InputModel.DistrictId != null)
				{
					_DistrictId = string.Join(",", InputModel.DistrictId);
				}

				string[] _DistrictId1 = new string[] { };
				if (!string.IsNullOrEmpty(_DistrictId))
				{
					_DistrictId1 = _DistrictId.Split(',');
				}

				//Subcounty
				string _SubcountyId = null;
				if (InputModel.SubcountyId != null)
				{
					_SubcountyId = string.Join(",", InputModel.SubcountyId);
				}

				string[] _SubcountyId1 = new string[] { };
				if (!string.IsNullOrEmpty(_SubcountyId))
				{
					_SubcountyId1 = _SubcountyId.Split(',');
				}

				try
				{
					await LoadingDialogue.ShowAsync();

					//Clear the current list in the table
					TargetsList.Clear();
					ovcservagegroups.Clear();
					ovchivchildren.Clear();
					ovcadults.Clear();
					beneficiaryriskfactorchildren.Clear();

					//Datasources to load OVCServe Data and Targets
					TargetsData = await  _dbcontext.ViewATargets
					.Where(o => (_YearId1.Length == 0 || (o.FinancialYearDesc != null && _YearId1.Any(a => a == o.FinancialYearDesc.Trim()) == true)))
					.ToListAsync();

					OvcServeData = await _dbcontext.spDashboard_OVC_SERVAsync(_DistrictId, null, null, null, null, Convert.ToDateTime(StartDate), Convert.ToDateTime(EndDate));

					ICAREBeneficiariesData = await _dbcontext.ViewDashboardBeneficiariesonIcarepivot
					.Where(o => (_YearId1.Length == 0 || (o.VisitationYear != null && _YearId1.Any(a => a == o.VisitationYear.ToString()) == true)
					&& (_QuarterId1.Length == 0 || (o.Qtr != null && _QuarterId1.Any(a => a == o.Qtr.ToString()))
					|| ((_PreviousQtrsList.Length == 0 || (o.Qtr != null && _PreviousQtrsList.Any(a => a == o.Qtr.ToString()) == true)) && o.ProgramParticipationId == 2)))
					&& (_DistrictId1.Length == 0 || (o.DistrictId != null && _DistrictId1.Any(a => a == o.DistrictId.ToString()) == true))
					&& (_SubcountyId1.Length == 0 || (o.SubcountyId != null && _SubcountyId1.Any(a => a == o.SubcountyId.ToString()) == true))
					).ToListAsync();

					ICAREBeneficiariesDataOverrall = await _dbcontext.ViewDashboardBeneficiariesonIcarepivotNoFilter
					.Where(o => (_YearId1.Length == 0 || (o.VisitationYear != null && _YearId1.Any(a => a == o.VisitationYear.ToString()) == true)
					&& (_QuarterId1.Length == 0 || (o.Qtr != null && _QuarterId1.Any(a => a == o.Qtr.ToString()))
					|| ((_PreviousQtrsList.Length == 0 || (o.Qtr != null && _PreviousQtrsList.Any(a => a == o.Qtr.ToString()) == true)) && o.ProgramParticipationId == 2)))
					&& (_DistrictId1.Length == 0 || (o.DistrictId != null && _DistrictId1.Any(a => a == o.DistrictId.ToString()) == true))).ToListAsync();

					ovchivchildren = new List<OvcHivStat>();
					ovcadults = new List<OvcHivStat>();
					var _data = OvcServeData.Select(o => new { o.DistrictId, o.DistrictDescription, o.FinancialYearDesc }).Distinct().ToList();
					//OVC_Serv Vs Target
					foreach (var item in _data)
					{
						if (OvcServeData != null && OvcServeData.Count > 0)
						{
							//Target Values
							//	var ovcserveTarget = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString()).Distinct().ToList();
							var ovcservefilter = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString()).ToList();
							if (ovcservefilter != null)
							{
								count = ovcservefilter.Count();
							}
							//Active Current Qtr
							var ovcservefilterCurrentactive = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1).ToList();
							if (ovcservefilterCurrentactive != null)
							{
								countactive = ovcservefilterCurrentactive.Count();
							}
							//Active 17
							var ovcserveageGroup17 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "0-17 Years").ToList();
							if (ovcserveageGroup17 != null)
							{
								ageGroup17 = ovcserveageGroup17.Count();
							}
							//Active 18
							var ovcserveageGroup18 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "18+ Years").ToList();
							if (ovcserveageGroup18 != null)
							{
								ageGroup18 = ovcserveageGroup18.Count();
							}
							//Active Male
							var ovcserveMale = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.GenderId == "M").ToList();
							if (ovcserveMale != null)
							{
								MaleActive = ovcserveMale.Count();
							}
							//Active Female
							var ovcserveFemale = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.GenderId == "F").ToList();
							if (ovcserveFemale != null)
							{
								FemaleActive = ovcserveFemale.Count();
							}
							//HIV postive 0-17
							var HIVpostive177 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "0-17 Years" && o.HIVStatusId == 1).ToList();
							if (HIVpostive177 != null)
							{
								HIVpostive17 = HIVpostive177.Count();
							}
							//HIV -ve 0-17
							var HIVnegaive177 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "0-17 Years" && o.HIVStatusId == 2).ToList();
							if (HIVnegaive177 != null)
							{
								HIVnegative17 = HIVnegaive177.Count();
							}
							//Unknown status 0-17
							var Unknown177 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "0-17 Years" && o.HIVStatusId == 3).ToList();
							if (Unknown177 != null)
							{
								Unknwon17 = Unknown177.Count();
							}
							//HIV postive 18+
							var HIVpostive188 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "18+ Years" && o.HIVStatusId == 1).ToList();
							if (HIVpostive188 != null)
							{
								HIVpostive18 = HIVpostive188.Count();
							}
							//HIV _ve 18+
							var HIVnegative188 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "18+ Years" && o.HIVStatusId == 2).ToList();
							if (HIVnegative188 != null)
							{
								HIVnegative18 = HIVnegative188.Count();
							}
							//Unknown status 18+
							var Unknown188 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "18+ Years" && o.HIVStatusId == 3).ToList();
							if (Unknown188 != null)
							{
								Unknwon18 = Unknown188.Count();
							}
							//Test Not Required 17
							var filteredHouseholds17 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "0-17 Years")
															.GroupBy(data => data.HouseHoldId)
															.Where(group =>
																group.Count() > 1 &&
																group.All(data => data.HIVStatusId == 1) &&
																group.Any(data => data.HIVStatusId == 3)
															)
															.SelectMany(group => group);
							if (filteredHouseholds17 != null)
							{
								TNR17 = filteredHouseholds17.Count();
							}

							//Test Not Required 18
							var filteredHouseholds18 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "18+ Years")
															.GroupBy(data => data.HouseHoldId)
															.Where(group =>
																group.Count() > 1 &&
																group.All(data => data.HIVStatusId == 1) &&
																group.Any(data => data.HIVStatusId == 3)
															)
															.SelectMany(group => group);
							if (filteredHouseholds18 != null)
							{
								TNR18 = filteredHouseholds18.Count();
							}
						}
						OVCServeValueTargets mm = new OVCServeValueTargets();
						mm.DistrictDescription = item.DistrictDescription;
						mm.FinancialYearDesc = item.FinancialYearDesc.ToString();
						mm.ActivePreviousQtr = countOldActive;
						mm.FinalServ = countactive + newEnrolled;
						mm.ageCategory17 = ageGroup17;
						mm.ageCategory18 = ageGroup18;
						mm.FemaleActive = FemaleActive;
						mm.MaleActive = MaleActive;
						mm.TNR17 = TNR17;
						mm.TNR18 = TNR18;
						mm.HIVpostive17 = HIVpostive17;
						mm.HIVpostive18 = HIVpostive18;
						mm.HIVnegative17 = HIVnegative17;
						mm.HIVnegative18 = HIVnegative18;
						mm.Unknwon17 = Unknwon17;
						mm.Unknwon18 = Unknwon18;
						var tvalue = TargetsData.FirstOrDefault(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc == item.FinancialYearDesc.ToString());
						if (tvalue != null)
						{
							mm.TargetValue = tvalue.TargetValue;
						}
						else
						{
							mm.TargetValue = 0;
						}
						mm.ActualValue = count;
						mm.Active = ageGroup17 + ageGroup18;
						if (mm.TargetValue > 0)
						{
							mm.Percentage = Math.Round((((double)mm.Active / (double)mm.TargetValue) * 100), 1);
						}
						if (mm.Active > 0)
						{
							mm.PercentageFemaleActive = Math.Round((((double)mm.FemaleActive / (double)mm.Active) * 100), 1);
							mm.PercentageMaleActive = Math.Round((((double)mm.MaleActive / (double)mm.Active) * 100), 1);
							mm.PercentageageCategory17 = Math.Round((((double)mm.ageCategory17 / (double)mm.Active) * 100), 1);
							mm.PercentageageCategory18 = Math.Round((((double)mm.ageCategory18 / (double)mm.Active) * 100), 1);
							mm.percentageC_ALHIV17 = Math.Round((((double)mm.HIVpostive17 / (double)mm.Active) * 100), 1);
							mm.percentageC_ALHIV18 = Math.Round((((double)mm.HIVpostive18 / (double)mm.Active) * 100), 1);
						}

						TargetsList.Add(mm);
					}
					TargetsList = TargetsList.OrderByDescending(o => o.Percentage).ToList();

					//Beneficiaries KnownRiskFactor
					foreach (var item in ICAREBeneficiariesData)
					{
						BeneficiaryRiskFactor mm = new BeneficiaryRiskFactor();
						mm.DistrictDescription = item.DistrictDescription;
						mm.SubcountyDescription = item.SubcountyDescription;
						mm.AdolescentMother = item.AdolescentMother;
						mm.CALHIV = item.Calhiv;
						mm.ChildofFSW = item.ChildofFsw;
						mm.FSW = item.Fsw;
						mm.HEI = item.Hei;
						mm.LivinginHHwithAdolescentMother = item.LivinginHhwithAdolescentMother;
						mm.LivinginHHwithFSW = item.LivinginHhwithFsw;
						mm.LivinginHHwithHEI = item.LivinginHhwithHei;
						mm.LivinginHHwithPLHIV = item.LivinginHhwithPlhiv;
						mm.LivinginHHwithSVAC = item.LivinginHhwithSvac;
						mm.Other = item.Other;
						mm.PLHIV = item.Plhiv;
						mm.SVAC = item.Svac;

						beneficiaryriskfactorchildren.Add(mm);
					}
					beneficiaryriskfactorchildren = beneficiaryriskfactorchildren.OrderBy(o => o.DistrictDescription).ThenByDescending(o => o.TotalNumber).ToList();


					//GRAPHS DATASOURCES

					Random rand = new Random();
					var ProgramStatus = await _dbcontext.ViewDashboardOvcServeIdentification/*.ToListAsync();*/
					.Where(o => (_YearId1.Length == 0 || (o.VisitationYear != null && _YearId1.Any(a => a == o.VisitationYear.ToString()) == true)
					&& (_QuarterId1.Length == 0 || (o.Qtr != null && _QuarterId1.Any(a => a == o.Qtr.ToString()))
					|| ((_PreviousQtrsList.Length == 0 || (o.Qtr != null && _PreviousQtrsList.Any(a => a == o.Qtr.ToString()) == true)) && o.ProgramParticipationId == 2)))
					&& (_DistrictId1.Length == 0 || (o.DistrictId != null && _DistrictId1.Any(a => a == o.DistrictId.ToString()) == true))
					&& (_SubcountyId1.Length == 0 || (o.SubcountyId != null && _SubcountyId1.Any(a => a == o.SubcountyId.ToString()) == true))
					).ToListAsync();

					var programparrticipation = _dbcontext.AProgramParticipationStatus.ToList();
					if (ProgramStatus != null)
					{
						ProgramStatusData = new List<SeriesModel>();
						AgeCategoryData = new List<SeriesModel>();
						RiskFactorData = new List<SeriesModel>();

						//Total number of HHs on ICARE By Program Participation and Gender
						var genderdata = ProgramStatus.Select(o => new { o.GenderId, o.GenderDescription }).ToList().Distinct().ToList();
						var mProgramStatusData = new SeriesModel();
						mProgramStatusData.ChartType = ChartSeriesType.Column;
						mProgramStatusData.SeriesName = "Overall";
						rand = new Random();
						mProgramStatusData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						mProgramStatusData.ColumnWidth = 0.7;
						mProgramStatusData.YAxisTitle = "Number";
						mProgramStatusData.Interval = 1000;
						mProgramStatusData.Datasource = new List<DashboardModel>();

						foreach (var item in programparrticipation)
						{
							mProgramStatusData.Datasource.Add(new DashboardModel()
								{
									ColumnX = item.ProgramParticipationDescription,
									ColumnY = ProgramStatus.Where(o => o.ProgramParticipationId == item.ProgramParticipationId).ToList().Count
								});
						}
						ProgramStatusData.Add(mProgramStatusData);

						//Total number of HHs on ICARE By District

						DistrictData = new List<SeriesModel>();
						var _DistrictData = new SeriesModel();
						_DistrictData.ChartType = ChartSeriesType.Column;
						_DistrictData.SeriesName = "District";
						rand = new Random();
						_DistrictData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_DistrictData.ColumnWidth = 0.7;
						_DistrictData.YAxisTitle = "Number";
						_DistrictData.Interval = 1000;
						_DistrictData.Datasource = new List<DashboardModel>();
						var category = ProgramStatus.Select(o => o.DistrictDescription).ToList().Distinct().ToList();
						foreach (var item in category)
						{
							_DistrictData.Datasource.Add(new DashboardModel()
								{
										ColumnX = item,
										ColumnY = ProgramStatus.Where(o => o.DistrictDescription == item).ToList().Count
								});
						}
						DistrictData.Add(_DistrictData);	

						//Total number of Beneficiaries on ICARE - By Known Risk Factor
						var riskcategory = _dbcontext.AKnownRiskFactors.ToList();

						var riskdata = ProgramStatus.Select(o => new { o.KnownRiskFactorId, o.KnownRiskFactorDescription }).Distinct().ToList();

						var _RiskFactorData = new SeriesModel();
						_RiskFactorData.ChartType = ChartSeriesType.Column;
						_RiskFactorData.SeriesName = "Known Risk Factors";
						rand = new Random();
						_RiskFactorData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_RiskFactorData.ColumnWidth = 0.7;
						_RiskFactorData.YAxisTitle = "Number";
						_RiskFactorData.Interval = 1000;
						_RiskFactorData.Datasource = new List<DashboardModel>();

						foreach (var item in riskcategory)
						{
							_RiskFactorData.Datasource.Add(new DashboardModel()
									{
										ColumnX = item.KnownRiskFactorDescription,
										ColumnY = ProgramStatus.Where(o => o.KnownRiskFactorId == item.KnownRiskFactorId).ToList().Count

									});
						}
						RiskFactorData.Add(_RiskFactorData);
					}

					//PositiveNegativeUnknown 0-17
					PositiveNegativeUnknownData = new List<DashboardModel>();
					var _PositiveNegativeUnknownData = new DashboardModel();
					rand = new Random();
					int indexstatus = rand.Next(0, (SeriesColors.Count() - 1));

					var riskstatus = ProgramStatus.Select(o => o.HivstatusDescription).ToList().Distinct().ToList();

					foreach (var item in riskstatus)
					{
						var overrall = ProgramStatus.ToList().Count;
						var desc = ProgramStatus.Where(o => o.HivstatusDescription == item && o.AgeCategory == "0-17 Years").ToList().Count;

						if (overrall>0)
						{
							var totalpercentage = ((double)(desc) / (double)(overrall)) * 100;

							PositiveNegativeUnknownData.Add(new DashboardModel()
							{
							ColumnX = item,
							ColumnY = Math.Round(totalpercentage, 1),
							DataLabelMappingName = item + " : " + Math.Round(totalpercentage, 1) + " % " + desc
							});
						}
					}

					//PositiveNegativeUnknown 18+
					PositiveNegativeUnknownData18Plus = new List<DashboardModel>();
					var _PositiveNegativeUnknownData18Plus = new DashboardModel();
					rand = new Random();
					int indexstatus18Plus = rand.Next(0, (SeriesColors.Count() - 1));

					var riskstatus18Plus = ProgramStatus.Select(o => o.HivstatusDescription).ToList().Distinct().ToList();

					foreach (var item in riskstatus18Plus)
					{
						var overrall = ProgramStatus.ToList().Count;					
						var desc = ProgramStatus.Where(o => o.HivstatusDescription == item && o.AgeCategory == "18+ Years").ToList().Count;

						if (overrall>0)
						{
							var totalpercentage = ((double)(desc)/(double)(overrall))*100;

							PositiveNegativeUnknownData18Plus.Add(new DashboardModel()
										{
											ColumnX = item,
											ColumnY = Math.Round(totalpercentage, 1),
											DataLabelMappingName = item + " : " + Math.Round(totalpercentage, 1) + " % " + desc
										});
						}
					}

					//OvcHIVPositiveClients				
					var OVC_HIV = await _dbcontext.ViewDashboardOvcHiv
					.Where(o => (_YearId1.Length == 0 || (o.FollowUpYear != null && _YearId1.Any(a => a == o.FollowUpYear.ToString()) == true))
					&& (_QuarterId1.Length == 0 || (o.Qtr != null && _QuarterId1.Any(a => a == o.Qtr.ToString()) == true))
					&& (_DistrictId1.Length == 0 || (o.DistrictId != null && _DistrictId1.Any(a => a == o.DistrictId.ToString()) == true))
					&& (_SubcountyId1.Length == 0 || (o.SubcountyId != null && _SubcountyId1.Any(a => a == o.SubcountyId.ToString()) == true)))
					.ToListAsync();

					if (OVC_HIV != null)
					{
						var genderdata = OVC_HIV.Select(o => new { o.GenderId, o.GenderDescription }).ToList().Distinct().ToList();
						HIVStatusdData = new List<SeriesModel>();
						var _HIVStatusdData = new SeriesModel();
						_HIVStatusdData.ChartType = ChartSeriesType.Column;
						_HIVStatusdData.SeriesName = "Overall";
						rand = new Random();
						_HIVStatusdData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_HIVStatusdData.ColumnWidth = 0.7;
						_HIVStatusdData.YAxisTitle = "Number";
						_HIVStatusdData.Interval = 1000;
						_HIVStatusdData.Datasource = new List<DashboardModel>();
						var category = OVC_HIV.Select(o => o.AgeCategory).ToList().Distinct().ToList();

						foreach (var item in category)
						{
							_HIVStatusdData.Datasource.Add(new DashboardModel()
										{
											ColumnX = item,
											ColumnY = OVC_HIV.Where(o => o.AgeCategory == item).ToList().Count
										});
						}
						HIVStatusdData.Add(_HIVStatusdData);

						foreach (var item in genderdata)
						{
							var _gHIVStatusdData = new SeriesModel();
							_gHIVStatusdData.ChartType = ChartSeriesType.Column;
							_gHIVStatusdData.SeriesName = item.GenderDescription;
							_gHIVStatusdData.GroupBy = item.GenderDescription;
							rand = new Random();
							_gHIVStatusdData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
							_gHIVStatusdData.ColumnWidth = 0.7;
							_gHIVStatusdData.YAxisTitle = "Number";
							_gHIVStatusdData.Interval = 1000;
							_gHIVStatusdData.Datasource = new List<DashboardModel>();
							var gcategory = OVC_HIV.Select(o => o.AgeCategory).ToList().Distinct().ToList();

							foreach (var _item in category)
							{
								_gHIVStatusdData.Datasource.Add(new DashboardModel()
											{
												ColumnX = _item,
												ColumnY = OVC_HIV.Where(o => o.AgeCategory == _item && o.GenderId == item.GenderId).ToList().Count
											});
							}
							HIVStatusdData.Add(_gHIVStatusdData);
						}

					}

					//OvcHIVPositiveClientsOnArt

					var ClientsOnArt = await _dbcontext.ViewDashboardOvcHiv
					.Where(o => (_YearId1.Length == 0 || (o.FollowUpYear != null && _YearId1.Any(a => a == o.FollowUpYear.ToString()) == true))
					&& (_QuarterId1.Length == 0 || (o.Qtr != null && _QuarterId1.Any(a => a == o.Qtr.ToString()) == true))
					&& (_DistrictId1.Length == 0 || (o.DistrictId != null && _DistrictId1.Any(a => a == o.DistrictId.ToString()) == true))
					&& (_SubcountyId1.Length == 0 || (o.SubcountyId != null && _SubcountyId1.Any(a => a == o.SubcountyId.ToString()) == true)))
					.ToListAsync();

					if (ClientsOnArt != null)
					{
						var genderdata = ClientsOnArt.Select(o => new { o.GenderId, o.GenderDescription }).ToList().Distinct().ToList();
						ClientsOnArtData = new List<SeriesModel>();
						var _ClientsOnArtData = new SeriesModel();
						_ClientsOnArtData.ChartType = ChartSeriesType.Column;
						_ClientsOnArtData.SeriesName = "Overall";
						rand = new Random();
						_ClientsOnArtData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_ClientsOnArtData.ColumnWidth = 0.7;
						_ClientsOnArtData.YAxisTitle = "Number";
						_ClientsOnArtData.Interval = 1000;
						_ClientsOnArtData.Datasource = new List<DashboardModel>();
						var category = ClientsOnArt.Select(o => o.AgeCategory).ToList().Distinct().ToList();
						foreach (var item in category)
						{
							_ClientsOnArtData.Datasource.Add(new DashboardModel()
										{
											ColumnX = item,
											ColumnY = OVC_HIV.Where(o => o.AgeCategory == item && o.OnArt ==1).ToList().Count
										});
						}
						ClientsOnArtData.Add(_ClientsOnArtData);
						foreach (var item in genderdata)
						{
							var _gClientsOnArtData = new SeriesModel();
							_gClientsOnArtData.ChartType = ChartSeriesType.Column;
							_gClientsOnArtData.SeriesName = item.GenderDescription;
							_gClientsOnArtData.GroupBy = item.GenderDescription;
							rand = new Random();
							_gClientsOnArtData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
							_gClientsOnArtData.ColumnWidth = 0.7;
							_gClientsOnArtData.YAxisTitle = "Number";
							_gClientsOnArtData.Interval = 1000;
							_gClientsOnArtData.Datasource = new List<DashboardModel>();
							var gcategory = ClientsOnArt.Select(o => o.AgeCategory).ToList().Distinct().ToList();
							foreach (var _item in category)
							{
								_gClientsOnArtData.Datasource.Add(new DashboardModel()
											{
												ColumnX = _item,
												ColumnY = ClientsOnArt.Where(o => o.AgeCategory == _item && o.GenderId == item.GenderId && o.OnArt == 1).ToList().Count
											});
							}
							ClientsOnArtData.Add(_gClientsOnArtData);
						}
					}

					//OvcHIVPositiveClientsEligibleforVL

					var ClientsEligibleforVL = await _dbcontext.ViewDashboardOvcHiv
					.Where(o => (_YearId1.Length == 0 || (o.FollowUpYear != null && _YearId1.Any(a => a == o.FollowUpYear.ToString()) == true))
					&& (_QuarterId1.Length == 0 || (o.Qtr != null && _QuarterId1.Any(a => a == o.Qtr.ToString()) == true))
					&& (_DistrictId1.Length == 0 || (o.DistrictId != null && _DistrictId1.Any(a => a == o.DistrictId.ToString()) == true))
					&& (_SubcountyId1.Length == 0 || (o.SubcountyId != null && _SubcountyId1.Any(a => a == o.SubcountyId.ToString()) == true)))
					.ToListAsync();

					if (ClientsEligibleforVL != null)
					{
						var genderdata = ClientsEligibleforVL.Select(o => new { o.GenderId, o.GenderDescription }).ToList().Distinct().ToList();
						ClientsEligibleforVLData = new List<SeriesModel>();
						var _ClientsEligibleforVLData = new SeriesModel();
						_ClientsEligibleforVLData.ChartType = ChartSeriesType.Column;
						_ClientsEligibleforVLData.SeriesName = "Overall";
						rand = new Random();
						_ClientsEligibleforVLData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_ClientsEligibleforVLData.ColumnWidth = 0.7;
						_ClientsEligibleforVLData.YAxisTitle = "Number";
						_ClientsEligibleforVLData.Interval = 1000;
						_ClientsEligibleforVLData.Datasource = new List<DashboardModel>();
						var category = ClientsEligibleforVL.Select(o => o.AgeCategory).ToList().Distinct().ToList();
						foreach (var item in category)
						{
							_ClientsEligibleforVLData.Datasource.Add(new DashboardModel()
										{
											ColumnX = item,
											ColumnY = ClientsEligibleforVL.Where(o => o.AgeCategory == item && o.IsClientEligibleForViralload == 1).ToList().Count
										});
						}
						ClientsEligibleforVLData.Add(_ClientsEligibleforVLData);
						foreach (var item in genderdata)
						{
							var _gClientsEligibleforVLData = new SeriesModel();
							_gClientsEligibleforVLData.ChartType = ChartSeriesType.Column;
							_gClientsEligibleforVLData.SeriesName = item.GenderDescription;
							_gClientsEligibleforVLData.GroupBy = item.GenderDescription;
							rand = new Random();
							_gClientsEligibleforVLData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
							_gClientsEligibleforVLData.ColumnWidth = 0.7;
							_gClientsEligibleforVLData.YAxisTitle = "Number";
							_gClientsEligibleforVLData.Interval = 1000;
							_gClientsEligibleforVLData.Datasource = new List<DashboardModel>();
							var gcategory = ClientsEligibleforVL.Select(o => o.AgeCategory).ToList().Distinct().ToList();

							foreach (var _item in category)
							{
								_gClientsEligibleforVLData.Datasource.Add(new DashboardModel()
											{
												ColumnX = _item,
												ColumnY = ClientsEligibleforVL.Where(o => o.AgeCategory == _item && o.GenderId == item.GenderId && o.IsClientEligibleForViralload == 1).ToList().Count
											});
							}
							ClientsEligibleforVLData.Add(_gClientsEligibleforVLData);
						}
						//var tableData = ClientsEligibleforVL.Select(o=> new{o.AgeCategory, o.DistrictDescription})
					}

					//OvcHIVPositiveClientswhoseVLTestDone
					var ClientsEligibleforVLTestDone = await _dbcontext.ViewDashboardOvcHiv
					.Where(o => (_YearId1.Length == 0 || (o.FollowUpYear != null && _YearId1.Any(a => a == o.FollowUpYear.ToString()) == true))
					&& (_QuarterId1.Length == 0 || (o.Qtr != null && _QuarterId1.Any(a => a == o.Qtr.ToString()) == true))
					&& (_DistrictId1.Length == 0 || (o.DistrictId != null && _DistrictId1.Any(a => a == o.DistrictId.ToString()) == true))
					&& (_SubcountyId1.Length == 0 || (o.SubcountyId != null && _SubcountyId1.Any(a => a == o.SubcountyId.ToString()) == true)))
					.ToListAsync();
					if (ClientsEligibleforVLTestDone != null)
					{
						var genderdata = ClientsEligibleforVLTestDone.Select(o => new { o.GenderId, o.GenderDescription }).ToList().Distinct().ToList();
						ClientsEligibleforVLTestDoneData = new List<SeriesModel>();
						var _ClientsEligibleforVLTestDoneData = new SeriesModel();
						_ClientsEligibleforVLTestDoneData.ChartType = ChartSeriesType.Column;
						_ClientsEligibleforVLTestDoneData.SeriesName = "Overall";
						rand = new Random();					
						_ClientsEligibleforVLTestDoneData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_ClientsEligibleforVLTestDoneData.ColumnWidth = 0.7;
						_ClientsEligibleforVLTestDoneData.YAxisTitle = "Number";
						_ClientsEligibleforVLTestDoneData.Interval = 1000;
						_ClientsEligibleforVLTestDoneData.Datasource = new List<DashboardModel>();
						var category = ClientsEligibleforVLTestDone.Select(o => o.AgeCategory).ToList().Distinct().ToList();
						foreach (var item in category)
						{
							_ClientsEligibleforVLTestDoneData.Datasource.Add(new DashboardModel()
										{
											ColumnX = item,
											ColumnY = ClientsEligibleforVLTestDone.Where(o => o.AgeCategory == item && o.ViralloadTestDone == 1).ToList().Count
										});
						}
						ClientsEligibleforVLTestDoneData.Add(_ClientsEligibleforVLTestDoneData);
						foreach (var item in genderdata)
						{
							var _gClientsEligibleforVLTestDoneData = new SeriesModel();
							_gClientsEligibleforVLTestDoneData.ChartType = ChartSeriesType.Column;
							_gClientsEligibleforVLTestDoneData.SeriesName = item.GenderDescription;
							_gClientsEligibleforVLTestDoneData.GroupBy = item.GenderDescription;
							rand = new Random();
							_gClientsEligibleforVLTestDoneData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
							_gClientsEligibleforVLTestDoneData.ColumnWidth = 0.7;
							_gClientsEligibleforVLTestDoneData.YAxisTitle = "Number";
							_gClientsEligibleforVLTestDoneData.Interval = 1000;
							_gClientsEligibleforVLTestDoneData.Datasource = new List<DashboardModel>();
							var gcategory = ClientsEligibleforVLTestDone.Select(o => o.AgeCategory).ToList().Distinct().ToList();
							foreach (var _item in category)
							{
								_gClientsEligibleforVLTestDoneData.Datasource.Add(new DashboardModel()
											{
												ColumnX = _item,
												ColumnY = ClientsEligibleforVLTestDone.Where(o => o.AgeCategory == _item && o.GenderId == item.GenderId && o.ViralloadTestDone == 1).ToList().Count
											});
							}
							ClientsEligibleforVLTestDoneData.Add(_gClientsEligibleforVLTestDoneData);
						}
					}

					//OvcHIVPositiveClientswhoseVLTestResultsReceived

					var ClientsWhoseVLTestResultsReceived = await _dbcontext.ViewDashboardOvcHiv
					.Where(o => (_YearId1.Length == 0 || (o.FollowUpYear != null && _YearId1.Any(a => a == o.FollowUpYear.ToString()) == true))
					&& (_QuarterId1.Length == 0 || (o.Qtr != null && _QuarterId1.Any(a => a == o.Qtr.ToString()) == true))
					&& (_DistrictId1.Length == 0 || (o.DistrictId != null && _DistrictId1.Any(a => a == o.DistrictId.ToString()) == true))
					&& (_SubcountyId1.Length == 0 || (o.SubcountyId != null && _SubcountyId1.Any(a => a == o.SubcountyId.ToString()) == true)))
					.ToListAsync();

					//Table Data
					var TableData =  await _dbcontext.ViewDashboardOvcHiv
					.Where(o => (_YearId1.Length == 0 || (o.FollowUpYear != null && _YearId1.Any(a => a == o.FollowUpYear.ToString()) == true))
						&& (_QuarterId1.Length == 0 || (o.Qtr != null && _QuarterId1.Any(a => a == o.Qtr.ToString()) == true))
						&& (_DistrictId1.Length == 0 || (o.DistrictId != null && _DistrictId1.Any(a => a == o.DistrictId.ToString()) == true))
						&& (_SubcountyId1.Length == 0 || (o.SubcountyId != null && _SubcountyId1.Any(a => a == o.SubcountyId.ToString()) == true)))
					.ToListAsync();
					var _TableData = TableData.Select(o => new { o.DistrictId, o.DistrictDescription}).Distinct().ToList();
					foreach (var _item in _TableData)
					{
						if(TableData != null && TableData.Count > 0)
						{
							//Total Eligible For VL
							var _Total_Eligible = TableData.Where(o => o.IsClientEligibleForViralload == 1).ToList();
							if (_Total_Eligible != null)
							{
								Total_Eligible = _Total_Eligible.Count();
							}
							//Total Test Done VL
							var _Total_VL_TestDone = TableData.Where(o =>  o.ViralloadTestDone == 1).ToList();
							if (_Total_VL_TestDone != null)
							{
								Total_TestDone = _Total_VL_TestDone.Count();
							}
							/////Eligible For VL
							//Female 0-17
							var Female0_17_Eligible = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "F" && o.AgeCategory == "0-17 Years" && o.IsClientEligibleForViralload == 1).ToList();
							if (Female0_17_Eligible != null)
							{
								female0_17_VL_Eligible = Female0_17_Eligible.Count();
							}
							//Female 18
							var Female18_Eligible = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "F" && o.AgeCategory == "18+ Years" && o.IsClientEligibleForViralload == 1).ToList();
							if (Female18_Eligible != null)
							{
								female18_VL_Eligible = Female18_Eligible.Count();
							}
							//TTotal Female Eligible
							var TTFemale0_17_Eligible = TableData.Where(o => o.GenderId == "F" && o.AgeCategory == "0-17 Years" && o.IsClientEligibleForViralload == 1).ToList();
							if (TTFemale0_17_Eligible != null)
							{
								Total_EligibleF17 = TTFemale0_17_Eligible.Count();
							}
							var TTFemale18_Eligible = TableData.Where(o => o.GenderId == "F" && o.AgeCategory == "18+ Years" && o.IsClientEligibleForViralload == 1).ToList();
							if (TTFemale18_Eligible != null)
							{
								Total_EligibleF18 = TTFemale18_Eligible.Count();
							}
							//Male 0_17
							var Male17_Eligible = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "M" && o.AgeCategory == "0-17 Years" && o.IsClientEligibleForViralload == 1).ToList();
							if (Male17_Eligible != null)
							{
								Male0_17_VL_Eligible = Male17_Eligible.Count();
							}
							//Male 0_18
							var Male18_Eligible = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "M" && o.AgeCategory == "18+ Years" && o.IsClientEligibleForViralload == 1).ToList();
							if (Male18_Eligible != null)
							{
								Male18_VL_Eligible = Male18_Eligible.Count();
							}
							//TTotal Male Eligible
							var TTMale17_Eligible = TableData.Where(o =>  o.GenderId == "M" && o.AgeCategory == "0-17 Years" && o.IsClientEligibleForViralload == 1).ToList();
							if (TTMale17_Eligible != null)
							{
								Total_EligibleM17 = TTMale17_Eligible.Count();
							}
							var TTMale18_Eligible = TableData.Where(o =>  o.GenderId == "M" && o.AgeCategory == "18+ Years" && o.IsClientEligibleForViralload == 1).ToList();
							if (TTMale18_Eligible != null)
							{
								Total_EligibleM18 = TTMale18_Eligible.Count();
							}
							/////VL Tests Done
							var Female0_17_Tests_Done = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "F" && o.AgeCategory == "0-17 Years" && o.ViralloadTestDone == 1).ToList();
							if (Female0_17_Tests_Done != null)
							{
								female0_17_VL_TestDone = Female0_17_Tests_Done.Count();
							}
							//Female 18
							var Female18_TestDone = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "F" && o.AgeCategory == "18+ Years" && o.ViralloadTestDone == 1).ToList();
							if (Female18_TestDone != null)
							{
								female18_VL_TestDone = Female18_TestDone.Count();
							}
							///Total Female Test Done
							var TTFemale0_17_Tests_Done = TableData.Where(o => o.GenderId == "F" && o.AgeCategory == "0-17 Years" && o.ViralloadTestDone == 1).ToList();
							if (TTFemale0_17_Tests_Done != null)
							{
								Total_TestDoneF17 = TTFemale0_17_Tests_Done.Count();
							}
							var TTFemale18_TestDone = TableData.Where(o => o.GenderId == "F" && o.AgeCategory == "18+ Years" && o.ViralloadTestDone == 1).ToList();
							if (TTFemale18_TestDone != null)
							{
								Total_TestDoneF18 = TTFemale18_TestDone.Count();
							}
							//Male 0_17
							var Male17_TestDone = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "M" && o.AgeCategory == "0-17 Years" && o.ViralloadTestDone == 1).ToList();
							if (Male17_TestDone != null)
							{
								Male0_17_VL_TestDone = Male17_TestDone.Count();
							}
							//Male 0_18
							var Male18_TestDone = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "M" && o.AgeCategory == "18+ Years" && o.ViralloadTestDone == 1).ToList();
							if (Male18_TestDone != null)
							{
								Male18_VL_TestDone = Male18_TestDone.Count();
							}
							// Total Male Test Done
							var TTMale17_TestDone = TableData.Where(o =>  o.GenderId == "M" && o.AgeCategory == "0-17 Years" && o.ViralloadTestDone == 1).ToList();
							if (TTMale17_TestDone != null)
							{
								Total_TestDoneM17 = TTMale17_TestDone.Count();
							}
							var TTMale18_TestDone = TableData.Where(o =>  o.GenderId == "M" && o.AgeCategory == "18+ Years" && o.ViralloadTestDone == 1).ToList();
							if (TTMale18_TestDone != null)
							{
								Total_TestDoneM18 = TTMale18_TestDone.Count();
							}
							double sum17EligibleTT = female0_17_VL_Eligible + Male0_17_VL_Eligible;
							double sum18EligibleTT = female18_VL_Eligible + Male18_VL_Eligible;
							double overallSumEligible  = sum18EligibleTT + sum17EligibleTT;
							double sum17VL_TestDone  = female0_17_VL_TestDone + Male0_17_VL_TestDone;
							double sum18VL_TestDone = female18_VL_TestDone + Male18_VL_TestDone;
							double overallSumTestDone = sum17VL_TestDone + sum18VL_TestDone;
							DistrictDescription = _item.DistrictDescription;
							District_VL_Eligible = sum17EligibleTT + sum18EligibleTT;
							District_VL_TestDone = sum17VL_TestDone + sum18VL_TestDone;
							//var totalAgeGroup = 
							//percentage18_VL_TestDone
							if (Total_Eligible > 0)
							{
								percentage0_17_VL_Eligible = Math.Round((((double)sum17EligibleTT / (double)Total_Eligible) * 100), 1);
								percentage18_VL_Eligible = Math.Round((((double)sum18EligibleTT / (double)Total_Eligible) * 100), 1);
								percentage0_17_VL_TestDone = Math.Round((((double)sum17VL_TestDone / (double)Total_TestDone) * 100), 1);
								percentage18_VL_TestDone = Math.Round((((double)sum18VL_TestDone / (double)Total_TestDone) * 100), 1);
							}
						}
						TableOVCVL tOVC = new TableOVCVL();
						tOVC._District_VL_Eligible = District_VL_Eligible;
						tOVC._District_VL_TestDone = District_VL_TestDone;
						tOVC._DistrictDescription = DistrictDescription;
						tOVC._female0_17_VL_Eligible = female0_17_VL_Eligible;
						tOVC._female18_VL_Eligible = female18_VL_Eligible;
						tOVC._female0_17_VL_TestDone = female0_17_VL_TestDone;
						tOVC._female18_VL_TestDone = female18_VL_TestDone;
						tOVC._Male0_17_VL_Eligible = Male0_17_VL_Eligible;
						tOVC._Male18_VL_Eligible = Male18_VL_Eligible;
						tOVC._Male0_17_VL_TestDone = Male0_17_VL_TestDone;
						tOVC._Male18_VL_TestDone = Male18_VL_TestDone;
						tOVC._percentage0_17_VL_Eligible = percentage0_17_VL_Eligible;
						tOVC._percentage18_VL_Eligible = percentage18_VL_Eligible;
						tOVC._percentage0_17_VL_TestDone = percentage0_17_VL_TestDone;
						tOVC._percentage18_VL_TestDone = percentage18_VL_TestDone;
						TableOVCVLList.Add(tOVC);
					}
					//TableOVCVLList = TableOVCVLList.OrderByDescending(o => o.percentageF0_17_VL_Eligible).ToList();
					if (ClientsWhoseVLTestResultsReceived != null)
					{
						var genderdata = ClientsWhoseVLTestResultsReceived.Select(o => new { o.GenderId, o.GenderDescription}).ToList().Distinct().ToList();
						ClientsVLTestResultsReceivedData = new List<SeriesModel>();
						var _ClientsVLTestResultsReceivedData = new SeriesModel();
						_ClientsVLTestResultsReceivedData.ChartType = ChartSeriesType.Column;
						_ClientsVLTestResultsReceivedData.SeriesName = "Overall";
						rand = new Random();
						_ClientsVLTestResultsReceivedData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_ClientsVLTestResultsReceivedData.ColumnWidth = 0.7;
						_ClientsVLTestResultsReceivedData.YAxisTitle = "Number";
						_ClientsVLTestResultsReceivedData.Interval = 1000;
						_ClientsVLTestResultsReceivedData.Datasource = new List<DashboardModel>();
						var category = ClientsWhoseVLTestResultsReceived.Select(o => o.AgeCategory).ToList().Distinct().ToList();
						foreach (var item in category)
						{
							_ClientsVLTestResultsReceivedData.Datasource.Add(new DashboardModel()
										{
											ColumnX = item,
											ColumnY = ClientsWhoseVLTestResultsReceived.Where(o => o.AgeCategory == item && o.ViralloadResultsReceived == 1).ToList().Count
										});
						}
						ClientsVLTestResultsReceivedData.Add(_ClientsVLTestResultsReceivedData);
						foreach (var item in genderdata)
						{
							var _gClientsVLTestResultsReceivedData = new SeriesModel();
							_gClientsVLTestResultsReceivedData.ChartType = ChartSeriesType.Column;
							_gClientsVLTestResultsReceivedData.SeriesName = item.GenderDescription;
							_gClientsVLTestResultsReceivedData.GroupBy = item.GenderDescription;
							rand = new Random();
							_gClientsVLTestResultsReceivedData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
							_gClientsVLTestResultsReceivedData.ColumnWidth = 0.7;
							_gClientsVLTestResultsReceivedData.YAxisTitle = "Number";
							_gClientsVLTestResultsReceivedData.Interval = 1000;
							_gClientsVLTestResultsReceivedData.Datasource = new List<DashboardModel>();
							var gcategory = ClientsWhoseVLTestResultsReceived.Select(o => o.AgeCategory).ToList().Distinct().ToList();
							foreach (var _item in category)
							{
								_gClientsVLTestResultsReceivedData.Datasource.Add(new DashboardModel()
											{
												ColumnX = _item,
												ColumnY = ClientsWhoseVLTestResultsReceived.Where(o => o.AgeCategory == _item && o.GenderId == item.GenderId && o.ViralloadResultsReceived == 1).ToList().Count
											});
							}
							ClientsVLTestResultsReceivedData.Add(_gClientsVLTestResultsReceivedData);
						}
					}

					//OvcHIVPositiveClientswithSuppressedResults

					var ClientsWithSuppressedResults = await _dbcontext.ViewDashboardOvcHiv
					.Where(o => (_YearId1.Length == 0 || (o.FollowUpYear != null && _YearId1.Any(a => a == o.FollowUpYear.ToString()) == true))
					&& (_QuarterId1.Length == 0 || (o.Qtr != null && _QuarterId1.Any(a => a == o.Qtr.ToString()) == true))
					&& (_DistrictId1.Length == 0 || (o.DistrictId != null && _DistrictId1.Any(a => a == o.DistrictId.ToString()) == true))
					&& (_SubcountyId1.Length == 0 || (o.SubcountyId != null && _SubcountyId1.Any(a => a == o.SubcountyId.ToString()) == true)))
					.ToListAsync();

					if (ClientsWithSuppressedResults != null)
					{
						var genderdata = ProgramStatus.Select(o => new { o.GenderId, o.GenderDescription }).ToList().Distinct().ToList();
						var vlresultdata = ProgramStatus.Select(o => new { o.ViralLoadSuppressedId, o.ViralLoadSuppressedDescription }).ToList().Distinct().ToList();

						ClientsWithSuppressedResultsData = new List<SeriesModel>();
						var _ClientsWithSuppressedResultsData = new SeriesModel();
						_ClientsWithSuppressedResultsData.ChartType = ChartSeriesType.Column;
						_ClientsWithSuppressedResultsData.SeriesName = "Total Clients";
						rand = new Random();					
						_ClientsWithSuppressedResultsData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_ClientsWithSuppressedResultsData.ColumnWidth = 0.7;
						_ClientsWithSuppressedResultsData.YAxisTitle = "Number";
						_ClientsWithSuppressedResultsData.Interval = 1000;
						_ClientsWithSuppressedResultsData.Datasource = new List<DashboardModel>();
						var category = OVC_HIV.Select(o => o.AgeCategory).ToList().Distinct().ToList();
						foreach (var item in category)
						{
							_ClientsWithSuppressedResultsData.Datasource.Add(new DashboardModel()
										{
											ColumnX = item,
											ColumnY = OVC_HIV.Where(o => o.AgeCategory == item /*&& o.ViralLoadSuppressedId == 1*/).ToList().Count
										});
						}
						ClientsWithSuppressedResultsData.Add(_ClientsWithSuppressedResultsData);

						foreach (var item in vlresultdata)
						{
							var _gClientsWithSuppressedResultsData = new SeriesModel();
							_gClientsWithSuppressedResultsData.ChartType = ChartSeriesType.Column;
							_gClientsWithSuppressedResultsData.SeriesName = item.ViralLoadSuppressedDescription;
							_gClientsWithSuppressedResultsData.GroupBy = item.ViralLoadSuppressedDescription;
							rand = new Random();
							_gClientsWithSuppressedResultsData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
							_gClientsWithSuppressedResultsData.ColumnWidth = 0.7;
							_gClientsWithSuppressedResultsData.YAxisTitle = "Number";
							_gClientsWithSuppressedResultsData.Interval = 1000;
							_gClientsWithSuppressedResultsData.Datasource = new List<DashboardModel>();
							var gcategory = ClientsWithSuppressedResults.Select(o => o.AgeCategory).ToList().Distinct().ToList();
							foreach (var _item in category)
							{
								_gClientsWithSuppressedResultsData.Datasource.Add(new DashboardModel()
											{
												ColumnX = _item,
												ColumnY = ClientsWithSuppressedResults.Where(o => o.AgeCategory == _item && o.ViralLoadSuppressedId == item.ViralLoadSuppressedId/* && o.ViralLoadSuppressedId == 1*/).ToList().Count
											});
							}
							ClientsWithSuppressedResultsData.Add(_gClientsWithSuppressedResultsData);
						}
					}

					//Total number of Active beneficiaries

					var NoActiveOfActiveBeneficiaries = await _dbcontext.ViewDashboardOvcServiceReportingToolDetail/*.ToListAsync();*/
					.Where(o => (_YearId1.Length == 0 || (o.VisitationYear != null && _YearId1.Any(a => a == o.VisitationYear.ToString()) == true)
					&& (_QuarterId1.Length == 0 || (o.Qtr != null && _QuarterId1.Any(a => a == o.Qtr.ToString()))
					|| ((_PreviousQtrsList.Length == 0 || (o.Qtr != null && _PreviousQtrsList.Any(a => a == o.Qtr.ToString()) == true)) && o.ProgramParticipationId == 2)))
					&& (_DistrictId1.Length == 0 || (o.DistrictId != null && _DistrictId1.Any(a => a == o.DistrictId.ToString()) == true))
					&& (_SubcountyId1.Length == 0 || (o.SubcountyId != null && _SubcountyId1.Any(a => a == o.SubcountyId.ToString()) == true))
					).ToListAsync();

					if (NoActiveOfActiveBeneficiaries != null)
					{
						NumberofActiveBeneficiariesData = new List<SeriesModel>();
						var category = NoActiveOfActiveBeneficiaries.Select(o => o.AgeCategory).ToList().Distinct().ToList();
						foreach (var item in category)
						{
							var _NumberofActiveBeneficiariesData = new SeriesModel();
							_NumberofActiveBeneficiariesData.ChartType = ChartSeriesType.StackingColumn;
							_NumberofActiveBeneficiariesData.SeriesName = item;
							rand = new Random();
							_NumberofActiveBeneficiariesData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
							_NumberofActiveBeneficiariesData.ColumnWidth = 0.7;
							_NumberofActiveBeneficiariesData.YAxisTitle = "Number";
							_NumberofActiveBeneficiariesData.Interval = 1000;
							_NumberofActiveBeneficiariesData.Datasource = new List<DashboardModel>();
							_NumberofActiveBeneficiariesData.Datasource.Add(new DashboardModel()
										{
											ColumnX = "OVC_SERV",
											ColumnY = NoActiveOfActiveBeneficiaries.Where(o => o.AgeCategory == item).ToList().Count
										});
							NumberofActiveBeneficiariesData.Add(_NumberofActiveBeneficiariesData);
						}
						//HIV STATUS DATA
						var hivstatus = NoActiveOfActiveBeneficiaries.Select(o => o.HivstatusDescription).ToList().Distinct().ToList();
						foreach (var _item in hivstatus)
						{
							var _HIVStatusData = new SeriesModel();
							_HIVStatusData.ChartType = ChartSeriesType.StackingColumn;
							_HIVStatusData.SeriesName = _item;
							rand = new Random();
							_HIVStatusData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
							_HIVStatusData.ColumnWidth = 0.7;
							_HIVStatusData.YAxisTitle = "Number";
							_HIVStatusData.Interval = 1000;
							_HIVStatusData.Datasource = new List<DashboardModel>();
							_HIVStatusData.Datasource.Add(new DashboardModel()
										{
											ColumnX = "OVC_HIVSTAT",

											ColumnY = NoActiveOfActiveBeneficiaries.Where(o => o.HivstatusDescription == _item && o.AgeCategory == "Children").ToList().Count
										});
							NumberofActiveBeneficiariesData.Add(_HIVStatusData);

						}
						//Eligibe
						var eligible = await _dbcontext.ViewVlrVlcVlsDashboard
						.Where(o => (_YearId1.Length == 0 || (o.FollowUpDateYear != null && _YearId1.Any(a => a == o.FollowUpDateYear.ToString()) == true))
						&& (_QuarterId1.Length == 0 || (o.Qtr != null && _QuarterId1.Any(a => a == o.Qtr.ToString()) == true))
						&& (_DistrictId1.Length == 0 || (o.DistrictId != null && _DistrictId1.Any(a => a == o.DistrictId.ToString()) == true))
						&& (_SubcountyId1.Length == 0 || (o.SubcountyId != null && _SubcountyId1.Any(a => a == o.SubcountyId.ToString()) == true)))
						.ToListAsync();

						var vlc_vlr = await _dbcontext.ViewVlrVlcVlsDashboard
						.Where(o => (_YearId1.Length == 0 || (o.FollowUpDateYear != null && _YearId1.Any(a => a == o.FollowUpDateYear.ToString()) == true))
						&& (_QuarterId1.Length == 0 || (o.Qtr != null && _QuarterId1.Any(a => a == o.Qtr.ToString()) == true))
						&& (_DistrictId1.Length == 0 || (o.DistrictId != null && _DistrictId1.Any(a => a == o.DistrictId.ToString()) == true))
						&& (_SubcountyId1.Length == 0 || (o.SubcountyId != null && _SubcountyId1.Any(a => a == o.SubcountyId.ToString()) == true)))
						.ToListAsync();

						var supressed = _dbcontext.AViralLoadSuppressed.Where(o => (o.ViralLoadSuppressedId == 3) || (o.ViralLoadSuppressedId == 4)).ToList();

						if (vlc_vlr != null)
						{
							var _vlc = vlc_vlr.Select(o => o.ViralLoadSuppressedDescription).ToList().Distinct().ToList();
							foreach (var _item1 in supressed)
							{
								var _VLRData = new SeriesModel();
								_VLRData.ChartType = ChartSeriesType.StackingColumn;
								_VLRData.SeriesName = _item1.ViralLoadSuppressedDescription;
								rand = new Random();
								int _index1 = rand.Next(0, (SeriesColors.Count() - 1));
								_VLRData.SeriesColor = SeriesColors[_index1];
								_VLRData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
								_VLRData.ColumnWidth = 0.7;
								_VLRData.YAxisTitle = "Number";
								_VLRData.Interval = 1000;
								_VLRData.Datasource = new List<DashboardModel>();

								_VLRData.Datasource.Add(new DashboardModel()
											{
												ColumnX = "VLR/VLC",
												ColumnY = vlc_vlr.Where(o => o.ViralLoadSuppressedId == _item1.ViralLoadSuppressedId && o.AgeCategory == "Children" && o.IsClientEligibleForViralload == 1).ToList().Count
											});
								NumberofActiveBeneficiariesData.Add(_VLRData);
							}
						}
						//VLC_Dashboard

						var vlcs = await _dbcontext.ViewVlrVlcVlsDashboard
						.Where(o => (_YearId1.Length == 0 || (o.FollowUpDateYear != null && _YearId1.Any(a => a == o.FollowUpDateYear.ToString()) == true))
						&& (_QuarterId1.Length == 0 || (o.Qtr != null && _QuarterId1.Any(a => a == o.Qtr.ToString()) == true))
						&& (_DistrictId1.Length == 0 || (o.DistrictId != null && _DistrictId1.Any(a => a == o.DistrictId.ToString()) == true))
						&& (_SubcountyId1.Length == 0 || (o.SubcountyId != null && _SubcountyId1.Any(a => a == o.SubcountyId.ToString()) == true)))
						.ToListAsync();		

						var vlcsuppresed = _dbcontext.AViralLoadSuppressed.Where(o => (o.ViralLoadSuppressedId == 1) || (o.ViralLoadSuppressedId == 2)).ToList();
						if (vlcs != null)
						{
							//	var _vlc = vlc_vlr.Select(o => o.ViralLoadSuppressedDescription).ToList().Distinct().ToList();
							foreach (var _item2 in vlcsuppresed)
							{
								var _VLCData = new SeriesModel();
								_VLCData.ChartType = ChartSeriesType.StackingColumn;
								_VLCData.SeriesName = _item2.ViralLoadSuppressedDescription;
								rand = new Random();
								_VLCData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
								_VLCData.ColumnWidth = 0.7;
								_VLCData.YAxisTitle = "Number";
								_VLCData.Interval = 1000;
								_VLCData.Datasource = new List<DashboardModel>();
								_VLCData.Datasource.Add(new DashboardModel()
											{
												ColumnX = "VLS",
												ColumnY = vlcs.Where(o => o.ViralLoadSuppressedId == _item2.ViralLoadSuppressedId && o.AgeCategory == "Children" && o.IsClientEligibleForViralload == 1).ToList().Count
											});
								NumberofActiveBeneficiariesData.Add(_VLCData);
							}
						}
					}

					//Number of Clients with Child-protection service(StackedColumn)

					var NoChildProtectionService = await _dbcontext.ViewDashboardOvcServiceReportingToolDetail/*.ToListAsync();*/
						.Where(o => (_YearId1.Length == 0 || (o.VisitationYear != null && _YearId1.Any(a => a == o.VisitationYear.ToString()) == true)
						&& (_QuarterId1.Length == 0 || (o.Qtr != null && _QuarterId1.Any(a => a == o.Qtr.ToString()))
						|| ((_PreviousQtrsList.Length == 0 || (o.Qtr != null && _PreviousQtrsList.Any(a => a == o.Qtr.ToString()) == true)) && o.ProgramParticipationId == 2)))
						&& (_DistrictId1.Length == 0 || (o.DistrictId != null && _DistrictId1.Any(a => a == o.DistrictId.ToString()) == true))
						&& (_SubcountyId1.Length == 0 || (o.SubcountyId != null && _SubcountyId1.Any(a => a == o.SubcountyId.ToString()) == true))
						).ToListAsync();	

					if (NoChildProtectionService != null)
					{
						NumberClientsWithChildProtectionServiceData = new List<SeriesModel>();
						var category = NoChildProtectionService.Select(o => o.AgeCategory).ToList().Distinct().ToList();
						foreach (var item in category)
						{
							var _NumberClientsWithChildProtectionServiceData = new SeriesModel();
							_NumberClientsWithChildProtectionServiceData.ChartType = ChartSeriesType.StackingColumn;
							_NumberClientsWithChildProtectionServiceData.SeriesName = item;
							rand = new Random();
							_NumberClientsWithChildProtectionServiceData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
							_NumberClientsWithChildProtectionServiceData.ColumnWidth = 0.7;
							_NumberClientsWithChildProtectionServiceData.YAxisTitle = "Number";
							_NumberClientsWithChildProtectionServiceData.Interval = 1000;
							_NumberClientsWithChildProtectionServiceData.Datasource = new List<DashboardModel>();
							_NumberClientsWithChildProtectionServiceData.Datasource.Add(new DashboardModel()
										{
											ColumnX = "OVC_SERV",
											ColumnY = NoChildProtectionService.Where(o => o.AgeCategory == item).ToList().Count
										});
							NumberClientsWithChildProtectionServiceData.Add(_NumberClientsWithChildProtectionServiceData);
						}
						//HIV STATUS DATA
						var hivstatus = NoChildProtectionService.Select(o => o.HivstatusDescription).ToList().Distinct().ToList();
						foreach (var _item in hivstatus)
						{
							var _HIVStatusData = new SeriesModel();
							_HIVStatusData.ChartType = ChartSeriesType.StackingColumn;
							_HIVStatusData.SeriesName = _item;
							rand = new Random();
							_HIVStatusData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
							_HIVStatusData.ColumnWidth = 0.7;
							_HIVStatusData.YAxisTitle = "Number";
							_HIVStatusData.Interval = 1000;
							_HIVStatusData.Datasource = new List<DashboardModel>();
							_HIVStatusData.Datasource.Add(new DashboardModel()
										{
											ColumnX = "OVC_HIVSTAT",
											ColumnY = NoChildProtectionService.Where(o => o.HivstatusDescription == _item && o.AgeCategory == "Children" && o.ChildProtectionServiceReceived == "1").ToList().Count
										});
							NumberClientsWithChildProtectionServiceData.Add(_HIVStatusData);
						}

						var vlc_vlr = await _dbcontext.ViewVlrVlcVlsDashboard
						.Where(o => (_YearId1.Length == 0 || (o.FollowUpDateYear != null && _YearId1.Any(a => a == o.FollowUpDateYear.ToString()) == true))
						&& (_QuarterId1.Length == 0 || (o.Qtr != null && _QuarterId1.Any(a => a == o.Qtr.ToString()) == true))
						&& (_DistrictId1.Length == 0 || (o.DistrictId != null && _DistrictId1.Any(a => a == o.DistrictId.ToString()) == true))
						&& (_SubcountyId1.Length == 0 || (o.SubcountyId != null && _SubcountyId1.Any(a => a == o.SubcountyId.ToString()) == true)))
						.ToListAsync();

						var supressed = _dbcontext.AViralLoadSuppressed.Where(o => (o.ViralLoadSuppressedId == 3) || (o.ViralLoadSuppressedId == 4)).ToList();
						if (vlc_vlr != null)
						{
							var _vlc = vlc_vlr.Select(o => o.ViralLoadSuppressedDescription).ToList().Distinct().ToList();
							foreach (var _item1 in supressed)
							{
								var _VLRData = new SeriesModel();
								_VLRData.ChartType = ChartSeriesType.StackingColumn;
								_VLRData.SeriesName = _item1.ViralLoadSuppressedDescription;
								rand = new Random();
								_VLRData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
								_VLRData.ColumnWidth = 0.7;
								_VLRData.YAxisTitle = "Number";
								_VLRData.Interval = 1000;
								_VLRData.Datasource = new List<DashboardModel>();

								_VLRData.Datasource.Add(new DashboardModel()
											{
												ColumnX = "VLR/VLC",
												ColumnY = vlc_vlr.Where(o => o.ViralLoadSuppressedId == _item1.ViralLoadSuppressedId && o.AgeCategory == "Children" && o.IsClientEligibleForViralload == 1).ToList().Count
											});
								NumberClientsWithChildProtectionServiceData.Add(_VLRData);
							}
						}
						//VLC_Dashboard

						var vlcs = await _dbcontext.ViewVlrVlcVlsDashboard
						.Where(o => (_YearId1.Length == 0 || (o.FollowUpDateYear != null && _YearId1.Any(a => a == o.FollowUpDateYear.ToString()) == true))
						&& (_QuarterId1.Length == 0 || (o.Qtr != null && _QuarterId1.Any(a => a == o.Qtr.ToString()) == true))
						&& (_DistrictId1.Length == 0 || (o.DistrictId != null && _DistrictId1.Any(a => a == o.DistrictId.ToString()) == true))
						&& (_SubcountyId1.Length == 0 || (o.SubcountyId != null && _SubcountyId1.Any(a => a == o.SubcountyId.ToString()) == true)))
						.ToListAsync();		

						var vlcsuppresed = _dbcontext.AViralLoadSuppressed.Where(o => (o.ViralLoadSuppressedId == 1) || (o.ViralLoadSuppressedId == 2)).ToList();
						if (vlcs != null)
						{
							//	var _vlc = vlc_vlr.Select(o => o.ViralLoadSuppressedDescription).ToList().Distinct().ToList();
							foreach (var _item2 in vlcsuppresed)
							{
								var _VLCData = new SeriesModel();
								_VLCData.ChartType = ChartSeriesType.StackingColumn;
								_VLCData.SeriesName = _item2.ViralLoadSuppressedDescription;
								rand = new Random();
								_VLCData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
								_VLCData.ColumnWidth = 0.7;
								_VLCData.YAxisTitle = "Number";
								_VLCData.Interval = 1000;
								_VLCData.Datasource = new List<DashboardModel>();
								_VLCData.Datasource.Add(new DashboardModel()
											{
												ColumnX = "VLS",
												ColumnY = vlcs.Where(o => o.ViralLoadSuppressedId == _item2.ViralLoadSuppressedId && o.AgeCategory == "Children" && o.IsClientEligibleForViralload == 1).ToList().Count
											});
								NumberClientsWithChildProtectionServiceData.Add(_VLCData);
							}
						}
					}

					//HOME VISIT TOOL(BarColumn)
					//Number of clients who received PSS
					//var NoChildProtectionService1 = _dbcontext.ViewDashboardOvcServiceReportingToolDetail.
					//	Where(o => o.VisitationMonth >= StartMonth && o.VisitationMonth <= EndMonth && o.VisitationYear == currentYear).AsNoTracking().ToList();

					var NoChildProtectionService1 = await _dbcontext.ViewDashboardOvcServiceReportingToolDetail/*.ToListAsync();*/
						.Where(o => (_YearId1.Length == 0 || (o.VisitationYear != null && _YearId1.Any(a => a == o.VisitationYear.ToString()) == true)
						&& (_QuarterId1.Length == 0 || (o.Qtr != null && _QuarterId1.Any(a => a == o.Qtr.ToString()))
						|| ((_PreviousQtrsList.Length == 0 || (o.Qtr != null && _PreviousQtrsList.Any(a => a == o.Qtr.ToString()) == true)) && o.ProgramParticipationId == 2)))
						&& (_DistrictId1.Length == 0 || (o.DistrictId != null && _DistrictId1.Any(a => a == o.DistrictId.ToString()) == true))
						&& (_SubcountyId1.Length == 0 || (o.SubcountyId != null && _SubcountyId1.Any(a => a == o.SubcountyId.ToString()) == true))
						).ToListAsync();	

					if (NoChildProtectionService1 != null)
					{
						NumberClientsWithChildProtectionServiceData1 = new List<SeriesModel>();
						var category = NoChildProtectionService1.Select(o => o.AgeCategory).ToList().Distinct().ToList();
						foreach (var item in category)
						{
							var _NumberClientsWithChildProtectionServiceData1 = new SeriesModel();
							_NumberClientsWithChildProtectionServiceData1.ChartType = ChartSeriesType.StackingColumn100;
							_NumberClientsWithChildProtectionServiceData1.SeriesName = item;
							rand = new Random();								
							_NumberClientsWithChildProtectionServiceData1.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
							_NumberClientsWithChildProtectionServiceData1.ColumnWidth = 0.7;
							_NumberClientsWithChildProtectionServiceData1.YAxisTitle = "Number";
							_NumberClientsWithChildProtectionServiceData1.Interval = 1000;
							_NumberClientsWithChildProtectionServiceData1.Datasource = new List<DashboardModel>();
							_NumberClientsWithChildProtectionServiceData1.Datasource.Add(new DashboardModel()
										{
											ColumnX = "PSS",
											ColumnY = NoChildProtectionService1.Where(o => o.AgeCategory == item && o.Pssreceived == "1").ToList().Count
										});
							NumberClientsWithChildProtectionServiceData1.Add(_NumberClientsWithChildProtectionServiceData1);
						}
						//Number of clients who received Education
						var category1 = NoChildProtectionService1.Select(o => o.AgeCategory).ToList().Distinct().ToList();
						foreach (var _item in category1)
						{
							var _EducationData = new SeriesModel();
							_EducationData.ChartType = ChartSeriesType.StackingColumn100;
							_EducationData.SeriesName = _item;
							rand = new Random();
							_EducationData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
							_EducationData.ColumnWidth = 0.7;
							_EducationData.YAxisTitle = "Number";
							_EducationData.Interval = 1000;
							_EducationData.Datasource = new List<DashboardModel>();
							_EducationData.Datasource.Add(new DashboardModel()
										{
											ColumnX = "Education",
											ColumnY = NoChildProtectionService1.Where(o => o.AgeCategory == _item && o.EducationReceived == "1").ToList().Count
										});
							NumberClientsWithChildProtectionServiceData1.Add(_EducationData);
						}
						//Number of clients who received Food security &  Nutrition
						var category2 = NoChildProtectionService1.Select(o => o.AgeCategory).ToList().Distinct().ToList();
						foreach (var _item in category2)
						{
							var _FSNData = new SeriesModel();
							_FSNData.ChartType = ChartSeriesType.StackingColumn100;
							_FSNData.SeriesName = _item;
							rand = new Random();
							_FSNData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
							_FSNData.ColumnWidth = 0.7;
							_FSNData.YAxisTitle = "Number";
							_FSNData.Interval = 1000;
							_FSNData.Datasource = new List<DashboardModel>();
							_FSNData.Datasource.Add(new DashboardModel()
										{
											ColumnX = "FSN",
											ColumnY = NoChildProtectionService1.Where(o => o.AgeCategory == _item && o.FoodSecurityNutritionReceived == "1").ToList().Count
										});
							NumberClientsWithChildProtectionServiceData1.Add(_FSNData);
						}
						//Number of clients with Economic stability service
						var category3 = NoChildProtectionService1.Select(o => o.AgeCategory).ToList().Distinct().ToList();
						foreach (var _item in category3)
						{
							var _EconomicData = new SeriesModel();
							_EconomicData.ChartType = ChartSeriesType.StackingColumn100;
							_EconomicData.SeriesName = _item;
							rand = new Random();
							_EconomicData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
							_EconomicData.ColumnWidth = 0.7;
							_EconomicData.YAxisTitle = "Number";
							_EconomicData.Interval = 1000;
							_EconomicData.Datasource = new List<DashboardModel>();
							_EconomicData.Datasource.Add(new DashboardModel()
										{
											ColumnX = "Economic Stability",
											ColumnY = NoChildProtectionService1.Where(o => o.AgeCategory == _item && o.EconomicStabilityServiceReceived == "1").ToList().Count
										});
							NumberClientsWithChildProtectionServiceData1.Add(_EconomicData);
						}
						//Number of clients with Health service
						var category4 = NoChildProtectionService1.Select(o => o.AgeCategory).ToList().Distinct().ToList();
						foreach (var _item in category4)
						{
							var _HealthData = new SeriesModel();
							_HealthData.ChartType = ChartSeriesType.StackingColumn100;
							_HealthData.SeriesName = _item;
							rand = new Random();
							_HealthData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
							_HealthData.ColumnWidth = 0.7;
							_HealthData.YAxisTitle = "Number";
							_HealthData.Interval = 1000;
							_HealthData.Datasource = new List<DashboardModel>();
							_HealthData.Datasource.Add(new DashboardModel()
										{
											ColumnX = "Health",
											ColumnY = NoChildProtectionService1.Where(o => o.AgeCategory == _item && o.HealthServiceReceived == "1").ToList().Count
										});
							NumberClientsWithChildProtectionServiceData1.Add(_HealthData);
						}
						//Number of clients with Child-protection service
						var category5 = NoChildProtectionService1.Select(o => o.AgeCategory).ToList().Distinct().ToList();
						foreach (var _item in category5)
						{
							var _ChildData = new SeriesModel();
							_ChildData.ChartType = ChartSeriesType.StackingColumn100;
							_ChildData.SeriesName = _item;
							rand = new Random();
							_ChildData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
							_ChildData.ColumnWidth = 0.7;
							_ChildData.YAxisTitle = "Number";
							_ChildData.Interval = 1000;
							_ChildData.Datasource = new List<DashboardModel>();
							_ChildData.Datasource.Add(new DashboardModel()
										{
											ColumnX = "Child-Protection",
											ColumnY = NoChildProtectionService1.Where(o => o.AgeCategory == _item && o.AgeCategory == "Children" && o.ChildProtectionServiceReceived == "1").ToList().Count
										});
							NumberClientsWithChildProtectionServiceData1.Add(_ChildData);
						}

					}

					data = new List<DasboardDistricts>();
					TotalHouseHoldsToVisit = _dbcontext.ViewDashboardBeneficiaryIdentificationRegister.ToList();
					TotalHouseholdsVisited = await _dbcontext.spDashboardHouseHoldsGetAllAsync();

					var _district = TotalHouseholdsVisited.Select(o => new { o.DistrictId, o.DistrictDescription }).ToList().Distinct().ToList();
					foreach (var n in _district)
					{
						data.Add(new DasboardDistricts()
						{
							DistrictId = n.DistrictId,
							DistrictDescription = n.DistrictDescription
					    });
					}
				}
				catch (Exception ex)
				{
					throw ex;
				}
				finally
				{
					//await LoadingDialogue.HideAsync();
					//Navigation.NavigateTo("/ICAREDashboardPage", true);
				}
			}
		}
		catch(Exception ex)
		{

		}
		finally
		{
			//Downloadreport = false;
		}		
	}

	private void ClearSearchBtnClick()
	{
		InputModel = new();
	}

	private async Task LoadDashboards()
	{
		try
		{	
			using (var _dbcontext = new SPToCoreContext())
			{
				var currentMonth = DateTime.Now.Month;
<<<<<<< HEAD
				var currentYear = DateTime.Now.Year - 1;
=======
				var currentYear = DateTime.Now.Year;
>>>>>>> 8bc1de6fbfadf219bc83e728615777a61ac50699
				string startDate = null;
				string endDate = null;
				//var _financialYear = _dbcontext.AFinancialYear.FirstOrDefault(o => o.FinancialYearDesc.Trim() == currentYear.ToString());
				var _financialYear = new AFinancialYear();
				//var yearParameter = _financialYear.FinancialYearDesc.ToString();
				SearchModel = new SearchPanel();
				SearchModel.Startdate = new DateTime(DateTime.Now.Year, 1, 1);
				SearchModel.Enddate = new DateTime(DateTime.Now.Year, 12, 31);

				int StartMonth = 1;
				int EndMonth = 12;

				if (currentMonth >= 1 && currentMonth <= 3)
				{
					QuarterNo = "TWO (JAN-MAR)";
					startDate = currentYear +"-01-01";
					endDate =  currentYear +"-03-31";
					Qtr = "2";
					PreviousQtr = "1";
					StartMonth = 1;
					EndMonth = 3;
					_financialYear = _dbcontext.AFinancialYear.FirstOrDefault(o => o.FinancialYearDesc.Trim() == (currentYear-1).ToString());
				}
				else if (currentMonth >= 4 && currentMonth <= 6)
				{
					QuarterNo = "THREE (APR-JUN)";
					startDate = currentYear +"-04-01";
					endDate =  currentYear +"-06-30";
					Qtr = "3";
					PreviousQtr = "2";
					StartMonth = 4;
					EndMonth = 6;
					_financialYear = _dbcontext.AFinancialYear.FirstOrDefault(o => o.FinancialYearDesc.Trim() == currentYear.ToString());
				}
				else if (currentMonth >= 7 && currentMonth <= 9)
				{
					QuarterNo = "FOUR (JUL-SEP)";
					startDate = currentYear +"-07-01";
					endDate =  currentYear +"-09-30";
					Qtr = "4";
					PreviousQtr = "3";
					StartMonth = 7;
					EndMonth = 9;
					_financialYear = _dbcontext.AFinancialYear.FirstOrDefault(o => o.FinancialYearDesc.Trim() == currentYear.ToString());
				}
				else if (currentMonth >= 10 && currentMonth <= 12)
				{
					QuarterNo = "ONE (OCT-DEC)";
					startDate = currentYear +"-10-01";
					endDate =  currentYear +"-12-31";
					Qtr = "1";
					PreviousQtr = "4";
					StartMonth = 10;
					EndMonth = 12;
					_financialYear = _dbcontext.AFinancialYear.FirstOrDefault(o => o.FinancialYearDesc.Trim() == currentYear.ToString());
				}
				//Datasources to load OVCServe Data and Targets
				TargetsData = await _dbcontext.ViewATargets.Where(o => o.FinancialYearDesc.Trim() == _financialYear.FinancialYearDesc).ToListAsync();
				OvcServeData = await _dbcontext.spDashboard_OVC_SERVAsync(null, null, _financialYear.FinancialYearId.ToString(), null, null, Convert.ToDateTime(startDate), Convert.ToDateTime(endDate));
				UnknownTNRData = await _dbcontext.ViewDashboardTnrhivstatus.Where(o => o.VisitationYear == _financialYear.FinancialYearId && o.Qtr.ToString() == Qtr).ToListAsync();
				ICAREBeneficiariesData = await _dbcontext.ViewDashboardBeneficiariesonIcarepivot.Where(o => o.VisitationYear == _financialYear.FinancialYearId && (o.Qtr.ToString() == Qtr/*|| o.Qtr.ToString() == PreviousQtr*/)).ToListAsync();
				ICAREBeneficiariesDataOverrall = await _dbcontext.ViewDashboardBeneficiariesonIcarepivotNoFilter.Where(o => o.VisitationYear == _financialYear.FinancialYearId && (o.Qtr.ToString() == Qtr/*|| o.Qtr.ToString() == PreviousQtr*/)).ToListAsync();
				RiskFactorsData = await _dbcontext.AKnownRiskFactorsBinding.ToListAsync();
				HHNoVisitsData = await _dbcontext.ViewDashboardHouseHoldNoVisits.Where(o => o.VisitationYear == _financialYear.FinancialYearId && o.Qtr == Qtr).ToListAsync();
				HomeVisitData = await _dbcontext.ViewDashboardOvcServiceReportingToolDetail.Where(o => o.VisitationYear == _financialYear.FinancialYearId && o.Qtr == Qtr).ToListAsync();

				ovchivchildren = new List<OvcHivStat>();
				ovcadults = new List<OvcHivStat>();

				var _data = OvcServeData.Select(o => new { o.DistrictId, o.DistrictDescription, o.FinancialYearDesc}).Distinct().ToList();
				//OVC_Serv Vs Target
				foreach (var item in _data)
				{
					if (OvcServeData != null && OvcServeData.Count > 0)
					{
						//Target Values
						//	var ovcserveTarget = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString()).Distinct().ToList();
						var ovcservefilter = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString()).ToList();
						if (ovcservefilter != null)
						{
							count = ovcservefilter.Count();
						}
						//Active Current Qtr
						var ovcservefilterCurrentactive = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1).ToList();
						if (ovcservefilterCurrentactive != null)
						{
							countactive = ovcservefilterCurrentactive.Count();
						}
						//Active 17
						var ovcserveageGroup17 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "0-17 Years").ToList();
						if (ovcserveageGroup17 != null)
						{
							ageGroup17 = ovcserveageGroup17.Count();
						}
						//Active 18
						var ovcserveageGroup18 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "18+ Years").ToList();
						if (ovcserveageGroup18 != null)
						{
							ageGroup18 = ovcserveageGroup18.Count();
						}
						//Active Male
						var ovcserveMale = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.GenderId == "M").ToList();
						if (ovcserveMale != null)
						{
							MaleActive = ovcserveMale.Count();
						}
						//Active Female
						var ovcserveFemale = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.GenderId == "F").ToList();
						if (ovcserveFemale != null)
						{
							FemaleActive = ovcserveFemale.Count();
						}
						//HIV postive 0-17
						var HIVpostive177 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "0-17 Years" && o.HIVStatusId == 1).ToList();
						if (HIVpostive177 != null)
						{
							HIVpostive17 = HIVpostive177.Count();
						}
						//HIV -ve 0-17
						var HIVnegaive177 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "0-17 Years" && o.HIVStatusId == 2).ToList();
						if (HIVnegaive177 != null)
						{
							HIVnegative17 = HIVnegaive177.Count();
						}
						//Unknown status 0-17
						var Unknown177 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "0-17 Years" && o.HIVStatusId == 3).ToList();
						if (Unknown177 != null)
						{
							Unknwon17 = Unknown177.Count();
						}
						//HIV postive 18+
						var HIVpostive188 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "18+ Years" && o.HIVStatusId == 1).ToList();
						if (HIVpostive188 != null)
						{
							HIVpostive18 = HIVpostive188.Count();
						}
						//HIV _ve 18+
						var HIVnegative188 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "18+ Years" && o.HIVStatusId == 2).ToList();
						if (HIVnegative188 != null)
						{
							HIVnegative18 = HIVnegative188.Count();
						}
						//Unknown status 18+
						var Unknown188 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "18+ Years" && o.HIVStatusId == 3).ToList();
						if (Unknown188 != null)
						{
							Unknwon18 = Unknown188.Count();
						}
						//Test Not Required 17
						var filteredHouseholds17 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "0-17 Years")
														.GroupBy(data => data.HouseHoldId)
														.Where(group => 
															group.Count() > 1 &&
															group.All(data => data.HIVStatusId == 1) &&
															group.Any(data => data.HIVStatusId == 3) 
														)
														.SelectMany(group => group);
						if(filteredHouseholds17 != null)
						{
							TNR17 = filteredHouseholds17.Count();
						}

						//Test Not Required 18
						var filteredHouseholds18 = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1 && o.Age_Category == "18+ Years")
														.GroupBy(data => data.HouseHoldId)
														.Where(group => 
															group.Count() > 1 &&
															group.All(data => data.HIVStatusId == 1) &&
															group.Any(data => data.HIVStatusId == 3) 
														)
														.SelectMany(group => group);
						if(filteredHouseholds18 != null)
						{
							TNR18 = filteredHouseholds18.Count();
						}
						//Number of House holds by district
						var NumberOfHH = OvcServeData
						.GroupBy(r => r.DistrictId)
						.Select(g => new { DistrictId = g.Key, Count = g.Select(r => r.HouseHoldId).Distinct().Count() });
						//var HH = NumberOfHH.Where(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc.ToString() == item.FinancialYearDesc.ToString() && o.ProgramParticipationId == 1).ToList();
						if (NumberOfHH != null)
						{
							numberOfHouseHolds = numberOfHouseHolds;
						}
					}
					OVCServeValueTargets mm = new OVCServeValueTargets();
					mm.DistrictDescription = item.DistrictDescription;
					mm.FinancialYearDesc = item.FinancialYearDesc.ToString();
					mm.ActivePreviousQtr = countOldActive;
					mm.FinalServ = countactive + newEnrolled;
					mm.ageCategory17 = ageGroup17;
					mm.ageCategory18 = ageGroup18;
					mm.FemaleActive = FemaleActive;
					mm.MaleActive = MaleActive;
					mm.TNR17 = TNR17;
					mm.TNR18 = TNR18;
					mm.HIVpostive17 = HIVpostive17;
					mm.HIVpostive18 = HIVpostive18;
					mm.HIVnegative17 = HIVnegative17;
					mm.HIVnegative18 = HIVnegative18;
					mm.Unknwon17 = Unknwon17;
					mm.Unknwon18 = Unknwon18;
					mm.numberOfHouseHolds = numberOfHouseHolds;
					var tvalue = TargetsData.FirstOrDefault(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc == item.FinancialYearDesc.ToString());
					if (tvalue != null)
					{
						mm.TargetValue = tvalue.TargetValue;
					}
					else
					{
						mm.TargetValue = 0;
					}
					mm.ActualValue = count;
					mm.Active = ageGroup17 + ageGroup18;
					if (mm.TargetValue > 0)
					{
						mm.Percentage = Math.Round((((double)mm.Active / (double)mm.TargetValue) * 100), 1);
					}
					if (mm.Active > 0)
					{
						mm.PercentageFemaleActive = Math.Round((((double)mm.FemaleActive / (double)mm.Active) * 100), 1);
						mm.PercentageMaleActive = Math.Round((((double)mm.MaleActive / (double)mm.Active) * 100), 1);
						mm.PercentageageCategory17 = Math.Round((((double)mm.ageCategory17 / (double)mm.Active) * 100), 1);
						mm.PercentageageCategory18 = Math.Round((((double)mm.ageCategory18 / (double)mm.Active) * 100), 1);
						mm.percentageC_ALHIV17 = Math.Round((((double)mm.HIVpostive17 / (double)mm.Active) * 100), 1);
						mm.percentageC_ALHIV18 = Math.Round((((double)mm.HIVpostive18 / (double)mm.Active) * 100), 1);
					}

					TargetsList.Add(mm);
				}
				TargetsList = TargetsList.OrderByDescending(o => o.Percentage).ToList();

				//Beneficiaries KnownRiskFactor
				foreach (var item in ICAREBeneficiariesDataOverrall)
				{
					BeneficiaryRiskFactor mm = new BeneficiaryRiskFactor();
					mm.DistrictDescription = item.DistrictDescription;
					mm.AdolescentMother = item.AdolescentMother;
					mm.CALHIV = item.Calhiv;
					mm.ChildofFSW = item.ChildofFsw;
					mm.FSW = item.Fsw;
					mm.HEI = item.Hei;
					mm.LivinginHHwithAdolescentMother = item.LivinginHhwithAdolescentMother;
					mm.LivinginHHwithFSW = item.LivinginHhwithFsw;
					mm.LivinginHHwithHEI = item.LivinginHhwithHei;
					mm.LivinginHHwithPLHIV = item.LivinginHhwithPlhiv;
					mm.LivinginHHwithSVAC = item.LivinginHhwithSvac;
					mm.Other = item.Other;
					mm.PLHIV = item.Plhiv;
					mm.SVAC = item.Svac;
					beneficiaryriskfactorchildren.Add(mm);
				}
				beneficiaryriskfactorchildren = beneficiaryriskfactorchildren.OrderBy(o => o.DistrictDescription).ThenByDescending(o => o.TotalNumber).ToList();

				//Table Data
				var TableData = await _dbcontext.ViewDashboardOvcHiv
				.Where(o => o.FollowUpMonth >= StartMonth && o.FollowUpMonth <= EndMonth && o.FollowUpYear == _financialYear.FinancialYearId).AsNoTracking()
				.ToListAsync();
				double female0_17RecievedResults = 0.0;
				double female_18_RecievedResults = 0.0;
				double male0_17RecievedResults = 0.0;
				double male_18_RecievedResults = 0.0;
				double percentage0_17 = 0.0;
				double Total0_17 = 0.0;
				double percentage18 = 0.0;
				double Total18 = 0.0;
				double TotalRecieved = 0.0;
				//Suppressed
				double female0_17SuppressedResults = 0.0;
				double female_18_SuppressedResults = 0.0;
				double male0_17SuppressedResults = 0.0;
				double male_18_SuppressedResults = 0.0;
				double SuppressedPercentage0_17 = 0.0;
				double SuppressedTotal0_17 = 0.0;
				double SuppressedPercentage18 = 0.0;
				double SuppressedTotal18 = 0.0;
				double TotalSuppressed = 0.0;
				var _TableData = TableData.Select(o => new { o.DistrictId, o.DistrictDescription }).Distinct().ToList();
				foreach (var _item in _TableData)
				{
					if (TableData != null && TableData.Count > 0)
					{
						//Total Eligible For VL
						var _Total_Eligible = TableData.Where(o => o.IsClientEligibleForViralload == 1).ToList();
						if (_Total_Eligible != null)
						{
							Total_Eligible = _Total_Eligible.Count();
						}
						//Total Test Done VL
						var _Total_VL_TestDone = TableData.Where(o => o.ViralloadTestDone == 1).ToList();
						if (_Total_VL_TestDone != null)
						{
							Total_TestDone = _Total_VL_TestDone.Count();
						}
						/////Eligible For VL
						//Female 0-17
						var Female0_17_Eligible = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "F" && o.AgeCategory == "0-17 Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (Female0_17_Eligible != null)
						{
							female0_17_VL_Eligible = Female0_17_Eligible.Count();
						}
						//Female 18
						var Female18_Eligible = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "F" && o.AgeCategory == "18+ Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (Female18_Eligible != null)
						{
							female18_VL_Eligible = Female18_Eligible.Count();
						}
						//TTotal Female Eligible
						var TTFemale0_17_Eligible = TableData.Where(o => o.GenderId == "F" && o.AgeCategory == "0-17 Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (TTFemale0_17_Eligible != null)
						{
							Total_EligibleF17 = TTFemale0_17_Eligible.Count();
						}
						var TTFemale18_Eligible = TableData.Where(o => o.GenderId == "F" && o.AgeCategory == "18+ Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (TTFemale18_Eligible != null)
						{
							Total_EligibleF18 = TTFemale18_Eligible.Count();
						}
						//Male 0_17
						var Male17_Eligible = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "M" && o.AgeCategory == "0-17 Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (Male17_Eligible != null)
						{
							Male0_17_VL_Eligible = Male17_Eligible.Count();
						}
						//Male 0_18
						var Male18_Eligible = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "M" && o.AgeCategory == "18+ Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (Male18_Eligible != null)
						{
							Male18_VL_Eligible = Male18_Eligible.Count();
						}
						//TTotal Male Eligible
						var TTMale17_Eligible = TableData.Where(o => o.GenderId == "M" && o.AgeCategory == "0-17 Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (TTMale17_Eligible != null)
						{
							Total_EligibleM17 = TTMale17_Eligible.Count();
						}
						var TTMale18_Eligible = TableData.Where(o => o.GenderId == "M" && o.AgeCategory == "18+ Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (TTMale18_Eligible != null)
						{
							Total_EligibleM18 = TTMale18_Eligible.Count();
						}
						/////VL Tests Done
						var Female0_17_Tests_Done = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "F" && o.AgeCategory == "0-17 Years" && o.ViralloadTestDone == 1).ToList();
						if (Female0_17_Tests_Done != null)
						{
							female0_17_VL_TestDone = Female0_17_Tests_Done.Count();
						}
						//Female 18
						var Female18_TestDone = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "F" && o.AgeCategory == "18+ Years" && o.ViralloadTestDone == 1).ToList();
						if (Female18_TestDone != null)
						{
							female18_VL_TestDone = Female18_TestDone.Count();
						}
						///Total Female Test Done
						var TTFemale0_17_Tests_Done = TableData.Where(o => o.GenderId == "F" && o.AgeCategory == "0-17 Years" && o.ViralloadTestDone == 1).ToList();
						if (TTFemale0_17_Tests_Done != null)
						{
							Total_TestDoneF17 = TTFemale0_17_Tests_Done.Count();
						}
						var TTFemale18_TestDone = TableData.Where(o => o.GenderId == "F" && o.AgeCategory == "18+ Years" && o.ViralloadTestDone == 1).ToList();
						if (TTFemale18_TestDone != null)
						{
							Total_TestDoneF18 = TTFemale18_TestDone.Count();
						}
						//Male 0_17
						var Male17_TestDone = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "M" && o.AgeCategory == "0-17 Years" && o.ViralloadTestDone == 1).ToList();
						if (Male17_TestDone != null)
						{
							Male0_17_VL_TestDone = Male17_TestDone.Count();
						}
						//Male 0_18
						var Male18_TestDone = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "M" && o.AgeCategory == "18+ Years" && o.ViralloadTestDone == 1).ToList();
						if (Male18_TestDone != null)
						{
							Male18_VL_TestDone = Male18_TestDone.Count();
						}
						// Total Male Test Done
						var TTMale17_TestDone = TableData.Where(o => o.GenderId == "M" && o.AgeCategory == "0-17 Years" && o.ViralloadTestDone == 1).ToList();
						if (TTMale17_TestDone != null)
						{
							Total_TestDoneM17 = TTMale17_TestDone.Count();
						}
						var TTMale18_TestDone = TableData.Where(o => o.GenderId == "M" && o.AgeCategory == "18+ Years" && o.ViralloadTestDone == 1).ToList();
						if (TTMale18_TestDone != null)
						{
							Total_TestDoneM18 = TTMale18_TestDone.Count();
						}
						double sum17EligibleTT = female0_17_VL_Eligible + Male0_17_VL_Eligible;
						double sum18EligibleTT = female18_VL_Eligible + Male18_VL_Eligible;
						double overallSumEligible = sum18EligibleTT + sum17EligibleTT;
						double sum17VL_TestDone = female0_17_VL_TestDone + Male0_17_VL_TestDone;
						double sum18VL_TestDone = female18_VL_TestDone + Male18_VL_TestDone;
						double overallSumTestDone = sum17VL_TestDone + sum18VL_TestDone;
						DistrictDescription = _item.DistrictDescription;
						District_VL_Eligible = sum17EligibleTT + sum18EligibleTT;
						District_VL_TestDone = sum17VL_TestDone + sum18VL_TestDone;
						//var totalAgeGroup =
						//percentage18_VL_TestDone
						if (Total_Eligible > 0)
						{
							percentage0_17_VL_Eligible = Math.Round((((double)sum17EligibleTT / (double)Total_Eligible) * 100), 1);
							percentage18_VL_Eligible = Math.Round((((double)sum18EligibleTT / (double)Total_Eligible) * 100), 1);
							percentage0_17_VL_TestDone = Math.Round((((double)sum17VL_TestDone / (double)Total_TestDone) * 100), 1);
							percentage18_VL_TestDone = Math.Round((((double)sum18VL_TestDone / (double)Total_TestDone) * 100), 1);
						}
						//RECIEVED RESULTS
						//OverallTotal
						var RecievedResults = TableData.Where(o => o.ViralloadResultsReceived == 1).ToList();
						if (RecievedResults != null)
						{
							TotalRecieved = RecievedResults.Count();
						}
						//Female 0-17
						var Female0_17_RecievedResults = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "F" && o.AgeCategory == "0-17 Years" && o.ViralloadResultsReceived == 1).ToList();
						if (Female0_17_RecievedResults != null)
						{
							female0_17RecievedResults = Female0_17_RecievedResults.Count();
						}
						//Female 18
						var Female18_RecievedResults = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "F" && o.AgeCategory == "18+ Years" && o.ViralloadResultsReceived == 1).ToList();
						if (Female18_RecievedResults != null)
						{
							female_18_RecievedResults = Female18_RecievedResults.Count();
						}
						//Male 0-17
						var Male0_17_RecievedResults = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "M" && o.AgeCategory == "0-17 Years" && o.ViralloadResultsReceived == 1).ToList();
						if (Male0_17_RecievedResults != null)
						{
							male0_17RecievedResults = Male0_17_RecievedResults.Count();
						}
						//Male 18
						var Male18_RecievedResults = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "M" && o.AgeCategory == "18+ Years" && o.ViralloadResultsReceived == 1).ToList();
						if (Male18_RecievedResults != null)
						{
							male_18_RecievedResults = Female18_RecievedResults.Count();
						}
						Total0_17 = female0_17RecievedResults + male0_17RecievedResults;
						Total18 = female_18_RecievedResults + male_18_RecievedResults;
						if (TotalRecieved > 0)
						{
							percentage0_17 = Math.Round((((double)Total0_17 / (double)TotalRecieved) * 100), 1);
							percentage18 = Math.Round((((double)Total18 / (double)TotalRecieved) * 100), 1);
						}

						//SUPPRESSED RESULTS
						//OverallTotal
						var SuppressedResults = TableData.Where(o => o.ViralLoadSuppressedId == 1).ToList();
						if (SuppressedResults != null)
						{
							TotalSuppressed = SuppressedResults.Count();
						}
						//Female 0-17
						var Female0_17_SuppressedResults = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "F" && o.AgeCategory == "0-17 Years" && o.ViralLoadSuppressedId == 1).ToList();
						if (Female0_17_SuppressedResults != null)
						{
							female0_17SuppressedResults = Female0_17_SuppressedResults.Count();
						}
						//Female 18
						var Female18_SuppressedResults = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "F" && o.AgeCategory == "18+ Years" && o.ViralLoadSuppressedId == 1).ToList();
						if (Female18_SuppressedResults != null)
						{
							female_18_SuppressedResults = Female18_SuppressedResults.Count();
						}
						//Male 0-17
						var Male0_17_SuppressedResults = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "M" && o.AgeCategory == "0-17 Years" && o.ViralLoadSuppressedId == 1).ToList();
						if (Male0_17_SuppressedResults != null)
						{
							male0_17SuppressedResults = Male0_17_SuppressedResults.Count();
						}
						//Male 18
						var Male18_SuppressedResults = TableData.Where(o => o.DistrictId == _item.DistrictId && o.GenderId == "M" && o.AgeCategory == "18+ Years" && o.ViralLoadSuppressedId == 1).ToList();
						if (Male18_SuppressedResults != null)
						{
							male_18_SuppressedResults = Female18_SuppressedResults.Count();
						}
						SuppressedTotal0_17 = female0_17SuppressedResults + male0_17SuppressedResults;
						SuppressedTotal18 = female_18_SuppressedResults + male_18_SuppressedResults;
						if (TotalSuppressed > 0)
						{
							SuppressedPercentage0_17 = Math.Round((((double)SuppressedTotal0_17 / (double)TotalSuppressed) * 100), 1);
							SuppressedPercentage18 = Math.Round((((double)SuppressedTotal18 / (double)TotalSuppressed) * 100), 1);
						}
						//AGE BANDS DATA ELIGIBLE FOR VL
						//Less than 1
						var Lessthan1 = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "1 Year" && o.IsClientEligibleForViralload == 1).ToList();
						if (Lessthan1 != null)
						{
							lessthan1 = Lessthan1.Count();
						}
						//1 to 4
						var one_Four = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "1-4 Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (one_Four != null)
						{
							OnetoFour = one_Four.Count();
						}
						// 5 to 9
						var five_Nine = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "5-9 Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (five_Nine != null)
						{
							FivetoNine = five_Nine.Count();
						}
						// 10 to 14
						var ten_Fourteen = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "10-14 Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (ten_Fourteen != null)
						{
							TentoFourteen = ten_Fourteen.Count();
						}
						// 15 to 17
						var fifteen_Seventeen = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "15-17 Years" && o.IsClientEligibleForViralload == 1).ToList();
						if (fifteen_Seventeen != null)
						{
							FifteentoSeventeen = fifteen_Seventeen.Count();
						}
						// 18 plus
						var eightyrs_plusz = TableData.Where(o => o.DistrictId == _item.DistrictId && (o.AgeBands == "15-17 Years" || o.AgeBands == "18-24 Years" || o.AgeBands == "25+ Years") && o.IsClientEligibleForViralload == 1).ToList();
						if (eightyrs_plusz != null)
						{
							Eighteento25YearsPlus = eightyrs_plusz.Count();
						}
						//AGE BANDS DATA TestDone FOR VL
						//Less than 1
						var TestDone_Lessthan1 = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "1 Year" && o.ViralloadTestDone == 1).ToList();
						if (TestDone_Lessthan1 != null)
						{
							TestDone_LessThanOne = TestDone_Lessthan1.Count();
						}
						//1 to 4
						var TestDone_one_Four = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "1-4 Years" && o.ViralloadTestDone == 1).ToList();
						if (TestDone_one_Four != null)
						{
							TestDone_OnetoFour = TestDone_one_Four.Count();
						}
						// 5 to 9
						var TestDone_five_Nine = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "5-9 Years" && o.ViralloadTestDone == 1).ToList();
						if (five_Nine != null)
						{
							TestDone_FivetoNine = TestDone_five_Nine.Count();
						}
						// 10 to 14
						var TestDone_ten_Fourteen = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "10-14 Years" && o.ViralloadTestDone == 1).ToList();
						if (ten_Fourteen != null)
						{
							TestDone_TentoFourteen = TestDone_ten_Fourteen.Count();
						}
						// 15 to 17
						var TestDone_fifteen_Seventeen = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "15-17 Years" && o.ViralloadTestDone == 1).ToList();
						if (fifteen_Seventeen != null)
						{
							TestDone_FifteentoSeventeen = TestDone_fifteen_Seventeen.Count();
						}
						// 18 plus
						var TestDone_eightyrs_plusz = TableData.Where(o => o.DistrictId == _item.DistrictId && (o.AgeBands == "15-17 Years" || o.AgeCategory == "18-24 Years" || o.AgeCategory == "25+ Years") && o.ViralloadTestDone == 1).ToList();
						if (eightyrs_plusz != null)
						{
							TestDone_18YearsPlus = TestDone_eightyrs_plusz.Count();
						}
				//SUPPRESED AGE BANDS
						//Less than 1
						var Suppressed_Lessthan1 = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "1 Year" && o.ViralLoadSuppressedId == 1).ToList();
						if (Suppressed_Lessthan1 != null)
						{
							Suppressed_LessThanOne = Suppressed_Lessthan1.Count();
						}
						//1 to 4
						var Suppressed_one_Four = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "1-4 Years" && o.ViralLoadSuppressedId == 1).ToList();
						if (Suppressed_one_Four != null)
						{
							Suppressed_OnetoFour = Suppressed_one_Four.Count();
						}
						// 5 to 9
						var Suppressed_five_Nine = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "5-9 Years" && o.ViralLoadSuppressedId == 1).ToList();
						if (five_Nine != null)
						{
							Suppressed_FivetoNine = Suppressed_five_Nine.Count();
						}
						// 10 to 14
						var Suppressed_ten_Fourteen = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "10-14 Years" && o.ViralLoadSuppressedId == 1).ToList();
						if (ten_Fourteen != null)
						{
							Suppressed_TentoFourteen = Suppressed_ten_Fourteen.Count();
						}
						// 15 to 17
						var Suppressed_fifteen_Seventeen = TableData.Where(o => o.DistrictId == _item.DistrictId && o.AgeBands == "15-17 Years" && o.ViralLoadSuppressedId == 1).ToList();
						if (fifteen_Seventeen != null)
						{
							Suppressed_FifteentoSeventeen = Suppressed_fifteen_Seventeen.Count();
						}
						// 18 plus
						var Suppressed_eightyrs_plusz = TableData.Where(o => o.DistrictId == _item.DistrictId && (o.AgeBands == "15-17 Years" || o.AgeCategory == "18-24 Years" || o.AgeCategory == "25+ Years") && o.ViralLoadSuppressedId == 1).ToList();
						if (eightyrs_plusz != null)
						{
							Suppressed_18YearsPlus = Suppressed_eightyrs_plusz.Count();
						}
				} 
			        TableOVCVL tOVC = new TableOVCVL();
					tOVC._District_VL_Eligible = District_VL_Eligible;
					tOVC._District_VL_TestDone = District_VL_TestDone;
					tOVC._DistrictDescription = DistrictDescription;
					tOVC._female0_17_VL_Eligible = female0_17_VL_Eligible;
					tOVC._female18_VL_Eligible = female18_VL_Eligible;
					tOVC._female0_17_VL_TestDone = female0_17_VL_TestDone;
					tOVC._female18_VL_TestDone = female18_VL_TestDone;
					tOVC._Male0_17_VL_Eligible = Male0_17_VL_Eligible;
					tOVC._Male18_VL_Eligible = Male18_VL_Eligible;
					tOVC._Male0_17_VL_TestDone = Male0_17_VL_TestDone;
					tOVC._Male18_VL_TestDone = Male18_VL_TestDone;
					tOVC._percentage0_17_VL_Eligible = percentage0_17_VL_Eligible;
					tOVC._percentage18_VL_Eligible = percentage18_VL_Eligible;
					tOVC._percentage0_17_VL_TestDone = percentage0_17_VL_TestDone;
					tOVC._percentage18_VL_TestDone = percentage18_VL_TestDone;
					//RESULTS RECIEVED
					tOVC._percentage18RecievedResults = percentage18;
					tOVC._percentage0_17RecievedResults = percentage0_17;
					tOVC.Female0_17RecievedResults = female0_17RecievedResults;
					tOVC.Female_18_RecievedResults = female_18_RecievedResults;
					tOVC.Male0_17RecievedResults = male0_17RecievedResults;
					tOVC.Male_18_RecievedResults = male_18_RecievedResults;
					tOVC.RecievedResultsTotal0_17 = Total0_17;
					tOVC.RecievedResultsTotal18 = Total18;
					tOVC.Recieved_Results_District = Total0_17 + Total18;
					//SUPPRESSED RESULTS
					tOVC._percentage18SuppressedResults = SuppressedPercentage18;
					tOVC._percentage0_17SuppressedResults = SuppressedPercentage0_17;
					tOVC.Female0_17SuppressedResults = female0_17SuppressedResults;
					tOVC.Female_18_SuppressedResults = female_18_SuppressedResults;
					tOVC.Male0_17SuppressedResults = male0_17SuppressedResults;
					tOVC.Male_18_SuppressedResults = male_18_SuppressedResults;
					tOVC.SuppressedResultsTotal0_17 = SuppressedTotal0_17;
					tOVC.SuppressedResultsTotal18 = SuppressedTotal18;
					tOVC.Suppressed_Results_District = SuppressedTotal0_17 + SuppressedTotal18;
					//AGE
					TableOVCVLList.Add(tOVC);

					GroupedColumnModel _GroupedColumnModelData = new GroupedColumnModel();
					_GroupedColumnModelData.DistrictDescription = DistrictDescription;
					_GroupedColumnModelData.LessThanOne = lessthan1;
					_GroupedColumnModelData.OnetoFour = OnetoFour;
					_GroupedColumnModelData.FivetoNine = FivetoNine;
					_GroupedColumnModelData.TentoFourteen = TentoFourteen;
					_GroupedColumnModelData.FifteentoSeventeen = FifteentoSeventeen;
					_GroupedColumnModelData.EigteenPlus = Eighteento25YearsPlus;
					GroupedColumnModelData.Add(_GroupedColumnModelData);

					
					GroupedColumnModel _GroupedColumnModelData2 = new GroupedColumnModel();
					_GroupedColumnModelData2.DistrictDescription = DistrictDescription;
					_GroupedColumnModelData2.LessThanOne = TestDone_LessThanOne;
					_GroupedColumnModelData2.OnetoFour = TestDone_OnetoFour;
					_GroupedColumnModelData2.FivetoNine = TestDone_FivetoNine;
					_GroupedColumnModelData2.TentoFourteen = TestDone_TentoFourteen;
					_GroupedColumnModelData2.FifteentoSeventeen = TestDone_FifteentoSeventeen;
					_GroupedColumnModelData2.EigteenPlus = TestDone_18YearsPlus;
					GroupedColumnModelData2.Add(_GroupedColumnModelData2);

					//Suppressed
					GroupedColumnModel _GroupedColumnModelData3 = new GroupedColumnModel();
					_GroupedColumnModelData3.DistrictDescription = DistrictDescription;
					_GroupedColumnModelData3.DistrictName = DistrictDescription;
					_GroupedColumnModelData3.LessThanOne = Suppressed_LessThanOne;
					_GroupedColumnModelData3.OnetoFour = Suppressed_OnetoFour;
					_GroupedColumnModelData3.FivetoNine = Suppressed_FivetoNine;
					_GroupedColumnModelData3.TentoFourteen = Suppressed_TentoFourteen;
					_GroupedColumnModelData3.FifteentoSeventeen = Suppressed_FifteentoSeventeen;
					_GroupedColumnModelData3.EigteenPlus = Suppressed_18YearsPlus;
					GroupedColumnModelData3.Add(_GroupedColumnModelData3);

					//Recieved
					GroupedColumnModel _GroupedColumnModelData4 = new GroupedColumnModel();
					_GroupedColumnModelData4.DistrictDescription = DistrictDescription;
					_GroupedColumnModelData4.DistrictName = DistrictDescription;
					_GroupedColumnModelData4.LessThanOne = RecievedResults_LessThanOne;
					_GroupedColumnModelData4.OnetoFour = RecievedResults_OnetoFour;
					_GroupedColumnModelData4.FivetoNine = RecievedResults_FivetoNine;
					_GroupedColumnModelData4.TentoFourteen = RecievedResults_TentoFourteen;
					_GroupedColumnModelData4.FifteentoSeventeen = RecievedResults_FifteentoSeventeen;
					_GroupedColumnModelData4.EigteenPlus = RecievedResults_18YearsPlus;
					GroupedColumnModelData4.Add(_GroupedColumnModelData4);
				}
				//TableOVCVLList = TableOVCVLList.OrderByDescending(o => o.percentageF0_17_VL_Eligible).ToList();
				//GRAPHS DATASOURCES

				Random rand = new Random();
				var ProgramStatus = _dbcontext.ViewDashboardOvcServeIdentification
				.Where(o => o.VisitationMonth >= StartMonth && o.VisitationMonth <= EndMonth && o.VisitationYear == _financialYear.FinancialYearId)
				.AsNoTracking().ToList();

				var programparrticipation = _dbcontext.AProgramParticipationStatus.ToList();
				if (ProgramStatus != null)
				{
					ProgramStatusData = new List<SeriesModel>();
					AgeCategoryData = new List<SeriesModel>();
					RiskFactorData = new List<SeriesModel>();

					//Total number of HHs on ICARE By Program Participation and Gender
					var genderdata = ProgramStatus.Select(o => new { o.GenderId, o.GenderDescription }).ToList().Distinct().ToList();
					var mProgramStatusData = new SeriesModel();
					mProgramStatusData.ChartType = ChartSeriesType.Column;
					mProgramStatusData.SeriesName = "Overall";
					//mProgramStatusData.GroupBy = _item.GenderDescription;
					rand = new Random();
					mProgramStatusData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
					mProgramStatusData.ColumnWidth = 0.7;
					mProgramStatusData.YAxisTitle = "Number";
					mProgramStatusData.Interval = 1000;
					mProgramStatusData.Datasource = new List<DashboardModel>();

					foreach (var item in programparrticipation)
					{
						mProgramStatusData.Datasource.Add(new DashboardModel()
						{
							ColumnX = item.ProgramParticipationDescription,
							ColumnY = ProgramStatus.Where(o => o.ProgramParticipationId == item.ProgramParticipationId).ToList().Count
						});
					}
					ProgramStatusData.Add(mProgramStatusData);


					//Total number of HHs on ICARE By District

					DistrictData = new List<SeriesModel>();
					var _DistrictData = new SeriesModel();
					_DistrictData.ChartType = ChartSeriesType.Column;
					_DistrictData.SeriesName = "District";
					rand = new Random();
					//int indexnew = rand.Next(0, (SeriesColors.Count() - 1));
					//_DistrictData.SeriesColor = SeriesColors[indexnew];
					_DistrictData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
					_DistrictData.ColumnWidth = 0.7;
					_DistrictData.YAxisTitle = "Number";
					_DistrictData.Interval = 1000;
					_DistrictData.Datasource = new List<DashboardModel>();
					var category = ProgramStatus.Select(o => o.DistrictDescription).ToList().Distinct().ToList();
					foreach (var item in category)
					{
						_DistrictData.Datasource.Add(new DashboardModel()
						{
								ColumnX = item,
								ColumnY = ProgramStatus.Where(o => o.DistrictDescription == item).ToList().Count
						});
					}
					DistrictData.Add(_DistrictData);	

					//Total number of Beneficiaries on ICARE - By Known Risk Factor
					var riskcategory = _dbcontext.AKnownRiskFactors.ToList();

					var riskdata = ProgramStatus.Select(o => new { o.KnownRiskFactorId, o.KnownRiskFactorDescription }).Distinct().ToList();

					var _RiskFactorData = new SeriesModel();
					_RiskFactorData.ChartType = ChartSeriesType.Column;
					_RiskFactorData.SeriesName = "Known Risk Factors";
					rand = new Random();
					//int _riskindex = rand.Next(0, (SeriesColors.Count() - 1));
					//_RiskFactorData.SeriesColor = SeriesColors[_riskindex];
					_RiskFactorData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
					_RiskFactorData.ColumnWidth = 0.7;
					_RiskFactorData.YAxisTitle = "Number";
					_RiskFactorData.Interval = 1000;
					_RiskFactorData.Datasource = new List<DashboardModel>();

					foreach (var item in riskcategory)
					{
						_RiskFactorData.Datasource.Add(new DashboardModel()
							{
								ColumnX = item.KnownRiskFactorDescription,
								ColumnY = ProgramStatus.Where(o => o.KnownRiskFactorId == item.KnownRiskFactorId).ToList().Count

							});
					}
					RiskFactorData.Add(_RiskFactorData);
				}

				//PositiveNegativeUnknown 0-17
				PositiveNegativeUnknownData = new List<DashboardModel>();
				var _PositiveNegativeUnknownData = new DashboardModel();
				rand = new Random();
				int indexstatus = rand.Next(0, (SeriesColors.Count() - 1));

				var riskstatus = ProgramStatus.Select(o => o.HivstatusDescription).ToList().Distinct().ToList();

				foreach (var item in riskstatus)
				{
					var overrall = ProgramStatus.ToList().Count;
					var desc = ProgramStatus.Where(o => o.HivstatusDescription == item && o.AgeCategory == "0-17 Years").ToList().Count;

					if (overrall>0)
					{
						var totalpercentage = ((double)(desc) / (double)(overrall)) * 100;

						PositiveNegativeUnknownData.Add(new DashboardModel()
								{
									ColumnX = item,
									ColumnY = Math.Round(totalpercentage, 1),
									DataLabelMappingName = item + " : " + Math.Round(totalpercentage, 1) + " % " + desc
								});
					}
				}

				//PositiveNegativeUnknown 18+
				PositiveNegativeUnknownData18Plus = new List<DashboardModel>();
				var _PositiveNegativeUnknownData18Plus = new DashboardModel();
				rand = new Random();
				int indexstatus18Plus = rand.Next(0, (SeriesColors.Count() - 1));

				var riskstatus18Plus = ProgramStatus.Select(o => o.HivstatusDescription).ToList().Distinct().ToList();

				foreach (var item in riskstatus18Plus)
				{
					var overrall = ProgramStatus.ToList().Count;					
					var desc = ProgramStatus.Where(o => o.HivstatusDescription == item && o.AgeCategory == "18+ Years").ToList().Count;

					if (overrall>0)
					{
						var totalpercentage = ((double)(desc)/(double)(overrall))*100;

						PositiveNegativeUnknownData18Plus.Add(new DashboardModel()
								{
									ColumnX = item,
									ColumnY = Math.Round(totalpercentage, 1),
									DataLabelMappingName = item + " : " + Math.Round(totalpercentage, 1) + " % " + desc
								});
					}

				}


				//OvcHIVPositiveClients
				var OVC_HIV = _dbcontext.ViewDashboardOvcHiv.
				Where(o => o.FollowUpMonth >= StartMonth && o.FollowUpMonth <= EndMonth && o.FollowUpYear == _financialYear.FinancialYearId).AsNoTracking().ToList();
				if (OVC_HIV != null)
				{
					var genderdata = OVC_HIV.Select(o => new { o.GenderId, o.GenderDescription }).ToList().Distinct().ToList();
					HIVStatusdData = new List<SeriesModel>();
					var _HIVStatusdData = new SeriesModel();
					_HIVStatusdData.ChartType = ChartSeriesType.Column;
					_HIVStatusdData.SeriesName = "Overall";
					rand = new Random();
					//int index = rand.Next(0, (SeriesColors.Count() - 1));
					//_HIVStatusdData.SeriesColor = SeriesColors[index];
					_HIVStatusdData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
					_HIVStatusdData.ColumnWidth = 0.7;
					_HIVStatusdData.YAxisTitle = "Number";
					_HIVStatusdData.Interval = 1000;
					_HIVStatusdData.Datasource = new List<DashboardModel>();
					var category = OVC_HIV.Select(o => o.AgeCategory).ToList().Distinct().ToList();

					foreach (var item in category)
					{
						_HIVStatusdData.Datasource.Add(new DashboardModel()
								{
									ColumnX = item,
									ColumnY = OVC_HIV.Where(o => o.AgeCategory == item).ToList().Count
								});
					}
					HIVStatusdData.Add(_HIVStatusdData);

					foreach (var item in genderdata)
					{
						var _gHIVStatusdData = new SeriesModel();
						_gHIVStatusdData.ChartType = ChartSeriesType.Column;
						_gHIVStatusdData.SeriesName = item.GenderDescription;
						_gHIVStatusdData.GroupBy = item.GenderDescription;
						rand = new Random();
						//int gindex = rand.Next(0, (SeriesColors.Count() - 1));
						//_gHIVStatusdData.SeriesColor = SeriesColors[gindex];
						_gHIVStatusdData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_gHIVStatusdData.ColumnWidth = 0.7;
						_gHIVStatusdData.YAxisTitle = "Number";
						_gHIVStatusdData.Interval = 1000;
						_gHIVStatusdData.Datasource = new List<DashboardModel>();
						var gcategory = OVC_HIV.Select(o => o.AgeCategory).ToList().Distinct().ToList();

						foreach (var _item in category)
						{
							_gHIVStatusdData.Datasource.Add(new DashboardModel()
									{
										ColumnX = _item,
										ColumnY = OVC_HIV.Where(o => o.AgeCategory == _item && o.GenderId == item.GenderId).ToList().Count
									});
						}
						HIVStatusdData.Add(_gHIVStatusdData);
					}

				}

				//OvcHIVPositiveClientsOnArt
				var ClientsOnArt = _dbcontext.ViewDashboardOvcHiv.
				Where(o => o.FollowUpMonth >= StartMonth && o.FollowUpMonth <= EndMonth && o.FollowUpYear == _financialYear.FinancialYearId).AsNoTracking().ToList();
				if (ClientsOnArt != null)
				{
					var genderdata = ClientsOnArt.Select(o => new { o.GenderId, o.GenderDescription }).ToList().Distinct().ToList();
					ClientsOnArtData = new List<SeriesModel>();
					var _ClientsOnArtData = new SeriesModel();
					_ClientsOnArtData.ChartType = ChartSeriesType.Column;
					_ClientsOnArtData.SeriesName = "Overall";
					rand = new Random();
					_ClientsOnArtData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
					_ClientsOnArtData.ColumnWidth = 0.7;
					_ClientsOnArtData.YAxisTitle = "Number";
					_ClientsOnArtData.Interval = 1000;
					_ClientsOnArtData.Datasource = new List<DashboardModel>();
					var category = ClientsOnArt.Select(o => o.AgeCategory).ToList().Distinct().ToList();
					foreach (var item in category)
					{
						_ClientsOnArtData.Datasource.Add(new DashboardModel()
								{
									ColumnX = item,
									ColumnY = OVC_HIV.Where(o => o.AgeCategory == item && o.OnArt ==1).ToList().Count
								});
					}
					ClientsOnArtData.Add(_ClientsOnArtData);
					foreach (var item in genderdata)
					{
						var _gClientsOnArtData = new SeriesModel();
						_gClientsOnArtData.ChartType = ChartSeriesType.Column;
						_gClientsOnArtData.SeriesName = item.GenderDescription;
						_gClientsOnArtData.GroupBy = item.GenderDescription;
						rand = new Random();
						_gClientsOnArtData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_gClientsOnArtData.ColumnWidth = 0.7;
						_gClientsOnArtData.YAxisTitle = "Number";
						_gClientsOnArtData.Interval = 1000;
						_gClientsOnArtData.Datasource = new List<DashboardModel>();
						var gcategory = ClientsOnArt.Select(o => o.AgeCategory).ToList().Distinct().ToList();
						foreach (var _item in category)
						{
							_gClientsOnArtData.Datasource.Add(new DashboardModel()
									{
										ColumnX = _item,
										ColumnY = ClientsOnArt.Where(o => o.AgeCategory == _item && o.GenderId == item.GenderId && o.OnArt == 1).ToList().Count
									});
						}
						ClientsOnArtData.Add(_gClientsOnArtData);
					}
				}

				//OvcHIVPositiveClientsEligibleforVL
				var ClientsEligibleforVL = _dbcontext.ViewDashboardOvcHiv.
				Where(o => o.FollowUpMonth >= StartMonth && o.FollowUpMonth <= EndMonth && o.FollowUpYear == _financialYear.FinancialYearId).AsNoTracking().ToList();
				if (ClientsEligibleforVL != null)
				{
					var genderdata = ClientsEligibleforVL.Select(o => new { o.GenderId, o.GenderDescription }).ToList().Distinct().ToList();
					ClientsEligibleforVLData = new List<SeriesModel>();
					var _ClientsEligibleforVLData = new SeriesModel();
					_ClientsEligibleforVLData.ChartType = ChartSeriesType.Column;
					_ClientsEligibleforVLData.SeriesName = "Overall";
					rand = new Random();
					//int index = rand.Next(0, (SeriesColors.Count() - 1));
					//_ClientsEligibleforVLData.SeriesColor = SeriesColors[index];
					_ClientsEligibleforVLData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
					_ClientsEligibleforVLData.ColumnWidth = 0.7;
					_ClientsEligibleforVLData.YAxisTitle = "Number";
					_ClientsEligibleforVLData.Interval = 1000;
					_ClientsEligibleforVLData.Datasource = new List<DashboardModel>();
					var category = ClientsEligibleforVL.Select(o => o.AgeCategory).ToList().Distinct().ToList();
					foreach (var item in category)
					{
						_ClientsEligibleforVLData.Datasource.Add(new DashboardModel()
								{
									ColumnX = item,
									ColumnY = ClientsEligibleforVL.Where(o => o.AgeCategory == item && o.IsClientEligibleForViralload == 1).ToList().Count
								});
					}
					ClientsEligibleforVLData.Add(_ClientsEligibleforVLData);
					foreach (var item in genderdata)
					{
						var _gClientsEligibleforVLData = new SeriesModel();
						_gClientsEligibleforVLData.ChartType = ChartSeriesType.Column;
						_gClientsEligibleforVLData.SeriesName = item.GenderDescription;
						_gClientsEligibleforVLData.GroupBy = item.GenderDescription;
						rand = new Random();
						_gClientsEligibleforVLData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_gClientsEligibleforVLData.ColumnWidth = 0.7;
						_gClientsEligibleforVLData.YAxisTitle = "Number";
						_gClientsEligibleforVLData.Interval = 1000;
						_gClientsEligibleforVLData.Datasource = new List<DashboardModel>();
						var gcategory = ClientsEligibleforVL.Select(o => o.AgeCategory).ToList().Distinct().ToList();

						foreach (var _item in category)
						{
							_gClientsEligibleforVLData.Datasource.Add(new DashboardModel()
									{
										ColumnX = _item,
										ColumnY = ClientsEligibleforVL.Where(o => o.AgeCategory == _item && o.GenderId == item.GenderId && o.IsClientEligibleForViralload == 1).ToList().Count
									});
						}
						ClientsEligibleforVLData.Add(_gClientsEligibleforVLData);
					}
				}

				//OvcHIVPositiveClientswhoseVLTestDone
				var ClientsEligibleforVLTestDone = _dbcontext.ViewDashboardOvcHiv.
				Where(o => o.FollowUpMonth >= StartMonth && o.FollowUpMonth <= EndMonth && o.FollowUpYear == _financialYear.FinancialYearId).AsNoTracking().ToList();
				if (ClientsEligibleforVLTestDone != null)
				{
					var genderdata = ClientsEligibleforVLTestDone.Select(o => new { o.GenderId, o.GenderDescription }).ToList().Distinct().ToList();
					ClientsEligibleforVLTestDoneData = new List<SeriesModel>();
					var _ClientsEligibleforVLTestDoneData = new SeriesModel();
					_ClientsEligibleforVLTestDoneData.ChartType = ChartSeriesType.Column;
					_ClientsEligibleforVLTestDoneData.SeriesName = "Overall";
					rand = new Random();
					_ClientsEligibleforVLTestDoneData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
					_ClientsEligibleforVLTestDoneData.ColumnWidth = 0.7;
					_ClientsEligibleforVLTestDoneData.YAxisTitle = "Number";
					_ClientsEligibleforVLTestDoneData.Interval = 1000;
					_ClientsEligibleforVLTestDoneData.Datasource = new List<DashboardModel>();
					var category = ClientsEligibleforVLTestDone.Select(o => o.AgeCategory).ToList().Distinct().ToList();
					foreach (var item in category)
					{
						_ClientsEligibleforVLTestDoneData.Datasource.Add(new DashboardModel()
								{
									ColumnX = item,
									ColumnY = ClientsEligibleforVLTestDone.Where(o => o.AgeCategory == item && o.ViralloadTestDone == 1).ToList().Count
								});
					}
					ClientsEligibleforVLTestDoneData.Add(_ClientsEligibleforVLTestDoneData);
					foreach (var item in genderdata)
					{
						var _gClientsEligibleforVLTestDoneData = new SeriesModel();
						_gClientsEligibleforVLTestDoneData.ChartType = ChartSeriesType.Column;
						_gClientsEligibleforVLTestDoneData.SeriesName = item.GenderDescription;
						_gClientsEligibleforVLTestDoneData.GroupBy = item.GenderDescription;
						rand = new Random();
						_gClientsEligibleforVLTestDoneData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_gClientsEligibleforVLTestDoneData.ColumnWidth = 0.7;
						_gClientsEligibleforVLTestDoneData.YAxisTitle = "Number";
						_gClientsEligibleforVLTestDoneData.Interval = 1000;
						_gClientsEligibleforVLTestDoneData.Datasource = new List<DashboardModel>();
						var gcategory = ClientsEligibleforVLTestDone.Select(o => o.AgeCategory).ToList().Distinct().ToList();
						foreach (var _item in category)
						{
							_gClientsEligibleforVLTestDoneData.Datasource.Add(new DashboardModel()
									{
										ColumnX = _item,
										ColumnY = ClientsEligibleforVLTestDone.Where(o => o.AgeCategory == _item && o.GenderId == item.GenderId && o.ViralloadTestDone == 1).ToList().Count
									});
						}
						ClientsEligibleforVLTestDoneData.Add(_gClientsEligibleforVLTestDoneData);
					}
				}

				//OvcHIVPositiveClientswhoseVLTestResultsReceived
				var ClientsWhoseVLTestResultsReceived = _dbcontext.ViewDashboardOvcHiv.
				Where(o => o.FollowUpMonth >= StartMonth && o.FollowUpMonth <= EndMonth && o.FollowUpYear == _financialYear.FinancialYearId).AsNoTracking().ToList();
				if (ClientsWhoseVLTestResultsReceived != null)
				{
					var genderdata = ClientsWhoseVLTestResultsReceived.Select(o => new { o.GenderId, o.GenderDescription}).ToList().Distinct().ToList();
					ClientsVLTestResultsReceivedData = new List<SeriesModel>();
					var _ClientsVLTestResultsReceivedData = new SeriesModel();
					_ClientsVLTestResultsReceivedData.ChartType = ChartSeriesType.Column;
					_ClientsVLTestResultsReceivedData.SeriesName = "Overall";
					rand = new Random();
					_ClientsVLTestResultsReceivedData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
					_ClientsVLTestResultsReceivedData.ColumnWidth = 0.7;
					_ClientsVLTestResultsReceivedData.YAxisTitle = "Number";
					_ClientsVLTestResultsReceivedData.Interval = 1000;
					_ClientsVLTestResultsReceivedData.Datasource = new List<DashboardModel>();
					var category = ClientsWhoseVLTestResultsReceived.Select(o => o.AgeCategory).ToList().Distinct().ToList();
					foreach (var item in category)
					{
						_ClientsVLTestResultsReceivedData.Datasource.Add(new DashboardModel()
								{
									ColumnX = item,
									ColumnY = ClientsWhoseVLTestResultsReceived.Where(o => o.AgeCategory == item && o.ViralloadResultsReceived == 1).ToList().Count
								});
					}
					ClientsVLTestResultsReceivedData.Add(_ClientsVLTestResultsReceivedData);
					foreach (var item in genderdata)
					{
						var _gClientsVLTestResultsReceivedData = new SeriesModel();
						_gClientsVLTestResultsReceivedData.ChartType = ChartSeriesType.Column;
						_gClientsVLTestResultsReceivedData.SeriesName = item.GenderDescription;
						_gClientsVLTestResultsReceivedData.GroupBy = item.GenderDescription;
						rand = new Random();
						//int gindex = rand.Next(0, (SeriesColors.Count() - 1));
						//_gClientsVLTestResultsReceivedData.SeriesColor = SeriesColors[gindex];
						_gClientsVLTestResultsReceivedData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_gClientsVLTestResultsReceivedData.ColumnWidth = 0.7;
						_gClientsVLTestResultsReceivedData.YAxisTitle = "Number";
						_gClientsVLTestResultsReceivedData.Interval = 1000;
						_gClientsVLTestResultsReceivedData.Datasource = new List<DashboardModel>();
						var gcategory = ClientsWhoseVLTestResultsReceived.Select(o => o.AgeCategory).ToList().Distinct().ToList();
						foreach (var _item in category)
						{
							_gClientsVLTestResultsReceivedData.Datasource.Add(new DashboardModel()
									{
										ColumnX = _item,
										ColumnY = ClientsWhoseVLTestResultsReceived.Where(o => o.AgeCategory == _item && o.GenderId == item.GenderId && o.ViralloadResultsReceived == 1).ToList().Count
									});
						}
						ClientsVLTestResultsReceivedData.Add(_gClientsVLTestResultsReceivedData);
					}
				}
				var ClientsWithSuppressedResults = _dbcontext.ViewDashboardOvcHiv.
				Where(o => o.FollowUpMonth >= StartMonth && o.FollowUpMonth <= EndMonth && o.FollowUpYear == _financialYear.FinancialYearId).AsNoTracking().ToList();

				if (ClientsWithSuppressedResults != null)
				{
					var genderdata = ProgramStatus.Select(o => new { o.GenderId, o.GenderDescription }).ToList().Distinct().ToList();
					var vlresultdata = ProgramStatus.Select(o => new { o.ViralLoadSuppressedId, o.ViralLoadSuppressedDescription }).ToList().Distinct().ToList();

					ClientsWithSuppressedResultsData = new List<SeriesModel>();
					var _ClientsWithSuppressedResultsData = new SeriesModel();
					_ClientsWithSuppressedResultsData.ChartType = ChartSeriesType.Column;
					_ClientsWithSuppressedResultsData.SeriesName = "Total Clients";
					rand = new Random();					
					_ClientsWithSuppressedResultsData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
					_ClientsWithSuppressedResultsData.ColumnWidth = 0.7;
					_ClientsWithSuppressedResultsData.YAxisTitle = "Number";
					_ClientsWithSuppressedResultsData.Interval = 1000;
					_ClientsWithSuppressedResultsData.Datasource = new List<DashboardModel>();
					var category = OVC_HIV.Select(o => o.AgeCategory).ToList().Distinct().ToList();
					foreach (var item in category)
					{
						_ClientsWithSuppressedResultsData.Datasource.Add(new DashboardModel()
									{
										ColumnX = item,
										ColumnY = OVC_HIV.Where(o => o.AgeCategory == item /*&& o.ViralLoadSuppressedId == 1*/).ToList().Count
									});
					}
					ClientsWithSuppressedResultsData.Add(_ClientsWithSuppressedResultsData);



					foreach (var item in vlresultdata)
					{
						var _gClientsWithSuppressedResultsData = new SeriesModel();
						_gClientsWithSuppressedResultsData.ChartType = ChartSeriesType.Column;
						_gClientsWithSuppressedResultsData.SeriesName = item.ViralLoadSuppressedDescription;
						_gClientsWithSuppressedResultsData.GroupBy = item.ViralLoadSuppressedDescription;
						rand = new Random();
						_gClientsWithSuppressedResultsData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_gClientsWithSuppressedResultsData.ColumnWidth = 0.7;
						_gClientsWithSuppressedResultsData.YAxisTitle = "Number";
						_gClientsWithSuppressedResultsData.Interval = 1000;
						_gClientsWithSuppressedResultsData.Datasource = new List<DashboardModel>();
						var gcategory = ClientsWithSuppressedResults.Select(o => o.AgeCategory).ToList().Distinct().ToList();
						foreach (var _item in category)
						{
							_gClientsWithSuppressedResultsData.Datasource.Add(new DashboardModel()
										{
											ColumnX = _item,
											ColumnY = ClientsWithSuppressedResults.Where(o => o.AgeCategory == _item && o.ViralLoadSuppressedId == item.ViralLoadSuppressedId/* && o.ViralLoadSuppressedId == 1*/).ToList().Count
										});
						}
						ClientsWithSuppressedResultsData.Add(_gClientsWithSuppressedResultsData);
					}
				}

				//Total number of Active beneficiaries
				var NoActiveOfActiveBeneficiaries = _dbcontext.ViewDashboardOvcServiceReportingToolDetail.
					Where(o => o.VisitationMonth >= StartMonth && o.VisitationMonth <= EndMonth && o.VisitationYear == _financialYear.FinancialYearId).AsNoTracking().ToList();
				if (NoActiveOfActiveBeneficiaries != null)
				{
					NumberofActiveBeneficiariesData = new List<SeriesModel>();
					var category = NoActiveOfActiveBeneficiaries.Select(o => o.AgeCategory).ToList().Distinct().ToList();
					foreach (var item in category)
					{
						var _NumberofActiveBeneficiariesData = new SeriesModel();
						_NumberofActiveBeneficiariesData.ChartType = ChartSeriesType.StackingColumn;
						_NumberofActiveBeneficiariesData.SeriesName = item;
						rand = new Random();

						_NumberofActiveBeneficiariesData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_NumberofActiveBeneficiariesData.ColumnWidth = 0.7;
						_NumberofActiveBeneficiariesData.YAxisTitle = "Number";
						_NumberofActiveBeneficiariesData.Interval = 1000;
						_NumberofActiveBeneficiariesData.Datasource = new List<DashboardModel>();
						_NumberofActiveBeneficiariesData.Datasource.Add(new DashboardModel()
								{
									ColumnX = "OVC_SERV",
									ColumnY = NoActiveOfActiveBeneficiaries.Where(o => o.AgeCategory == item).ToList().Count
								});
						NumberofActiveBeneficiariesData.Add(_NumberofActiveBeneficiariesData);
					}
					//HIV STATUS DATA
					var hivstatus = NoActiveOfActiveBeneficiaries.Select(o => o.HivstatusDescription).ToList().Distinct().ToList();
					foreach (var _item in hivstatus)
					{
						var _HIVStatusData = new SeriesModel();
						_HIVStatusData.ChartType = ChartSeriesType.StackingColumn;
						_HIVStatusData.SeriesName = _item;
						rand = new Random();
						//int _index = rand.Next(0, (SeriesColors.Count() - 1));
						//_HIVStatusData.SeriesColor = SeriesColors[_index];
						_HIVStatusData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_HIVStatusData.ColumnWidth = 0.7;
						_HIVStatusData.YAxisTitle = "Number";
						_HIVStatusData.Interval = 1000;
						_HIVStatusData.Datasource = new List<DashboardModel>();
						_HIVStatusData.Datasource.Add(new DashboardModel()
								{
									ColumnX = "OVC_HIVSTAT",

									ColumnY = NoActiveOfActiveBeneficiaries.Where(o => o.HivstatusDescription == _item && o.AgeCategory == "Children").ToList().Count
								});
						NumberofActiveBeneficiariesData.Add(_HIVStatusData);

					}
					//Eligibe
					var eligible = _dbcontext.ViewVlrVlcVlsDashboard.
							Where(o => o.FollowUpDateMonth >= StartMonth && o.FollowUpDateMonth <= EndMonth && o.FollowUpDateYear == currentYear).AsNoTracking().ToList();
					//VLR_VLC_VLS_Dashboard
					var vlc_vlr = _dbcontext.ViewVlrVlcVlsDashboard.
								Where(o => o.FollowUpDateMonth >= StartMonth && o.FollowUpDateMonth <= EndMonth && o.FollowUpDateYear == currentYear).AsNoTracking().ToList();
					var supressed = _dbcontext.AViralLoadSuppressed.Where(o => (o.ViralLoadSuppressedId == 3) || (o.ViralLoadSuppressedId == 4)).ToList();
					if (vlc_vlr != null)
					{
						var _vlc = vlc_vlr.Select(o => o.ViralLoadSuppressedDescription).ToList().Distinct().ToList();
						foreach (var _item1 in supressed)
						{
							var _VLRData = new SeriesModel();
							_VLRData.ChartType = ChartSeriesType.StackingColumn;
							_VLRData.SeriesName = _item1.ViralLoadSuppressedDescription;
							rand = new Random();
							//int _index1 = rand.Next(0, (SeriesColors.Count() - 1));
							//_VLRData.SeriesColor = SeriesColors[_index1];
							_VLRData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
							_VLRData.ColumnWidth = 0.7;
							_VLRData.YAxisTitle = "Number";
							_VLRData.Interval = 1000;
							_VLRData.Datasource = new List<DashboardModel>();

							_VLRData.Datasource.Add(new DashboardModel()
									{
										ColumnX = "VLR/VLC",
										ColumnY = vlc_vlr.Where(o => o.ViralLoadSuppressedId == _item1.ViralLoadSuppressedId && o.AgeCategory == "Children" && o.IsClientEligibleForViralload == 1).ToList().Count
									});
							NumberofActiveBeneficiariesData.Add(_VLRData);
						}
					}
					//VLC_Dashboard
					var vlcs = _dbcontext.ViewVlrVlcVlsDashboard.
							Where(o => o.FollowUpDateMonth >= StartMonth && o.FollowUpDateMonth <= EndMonth && o.FollowUpDateYear == currentYear).AsNoTracking().ToList();
					var vlcsuppresed = _dbcontext.AViralLoadSuppressed.Where(o => (o.ViralLoadSuppressedId == 1) || (o.ViralLoadSuppressedId == 2)).ToList();
					if (vlcs != null)
					{
						//	var _vlc = vlc_vlr.Select(o => o.ViralLoadSuppressedDescription).ToList().Distinct().ToList();
						foreach (var _item2 in vlcsuppresed)
						{
							var _VLCData = new SeriesModel();
							_VLCData.ChartType = ChartSeriesType.StackingColumn;
							_VLCData.SeriesName = _item2.ViralLoadSuppressedDescription;
							rand = new Random();
							//int _index1 = rand.Next(0, (SeriesColors.Count() - 1));
							//_VLCData.SeriesColor = SeriesColors[_index1];
							_VLCData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
							_VLCData.ColumnWidth = 0.7;
							_VLCData.YAxisTitle = "Number";
							_VLCData.Interval = 1000;
							_VLCData.Datasource = new List<DashboardModel>();
							_VLCData.Datasource.Add(new DashboardModel()
									{
										ColumnX = "VLS",
										ColumnY = vlcs.Where(o => o.ViralLoadSuppressedId == _item2.ViralLoadSuppressedId && o.AgeCategory == "Children" && o.IsClientEligibleForViralload == 1).ToList().Count
									});
							NumberofActiveBeneficiariesData.Add(_VLCData);
						}
					}
				}
				var BeneficiaryTableData = NoActiveOfActiveBeneficiaries.Select(o=> new {o.DistrictId, o.DistrictDescription}).Distinct().ToList();
				foreach (var _item in BeneficiaryTableData)
				{
					if(NoActiveOfActiveBeneficiaries != null && NoActiveOfActiveBeneficiaries.Count > 0)
					{
						
					}
				}
				//Number of Clients with Child-protection service(StackedColumn)
				var NoChildProtectionService = _dbcontext.ViewDashboardOvcServiceReportingToolDetail.
					Where(o => o.VisitationMonth >= StartMonth && o.VisitationMonth <= EndMonth && o.VisitationYear == _financialYear.FinancialYearId && o.ChildProtectionServiceReceived == "1").AsNoTracking().ToList();
				if (NoChildProtectionService != null)
				{
					NumberClientsWithChildProtectionServiceData = new List<SeriesModel>();
					var category = NoChildProtectionService.Select(o => o.AgeCategory).ToList().Distinct().ToList();
					foreach (var item in category)
					{
						var _NumberClientsWithChildProtectionServiceData = new SeriesModel();
						_NumberClientsWithChildProtectionServiceData.ChartType = ChartSeriesType.StackingColumn;
						_NumberClientsWithChildProtectionServiceData.SeriesName = item;
						rand = new Random();
						//int index = rand.Next(0, (SeriesColors.Count() - 1));
						//_NumberClientsWithChildProtectionServiceData.SeriesColor = SeriesColors[index];
						_NumberClientsWithChildProtectionServiceData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_NumberClientsWithChildProtectionServiceData.ColumnWidth = 0.7;
						_NumberClientsWithChildProtectionServiceData.YAxisTitle = "Number";
						_NumberClientsWithChildProtectionServiceData.Interval = 1000;
						_NumberClientsWithChildProtectionServiceData.Datasource = new List<DashboardModel>();
						_NumberClientsWithChildProtectionServiceData.Datasource.Add(new DashboardModel()
								{
									ColumnX = "OVC_SERV",
									ColumnY = NoChildProtectionService.Where(o => o.AgeCategory == item).ToList().Count
								});
						NumberClientsWithChildProtectionServiceData.Add(_NumberClientsWithChildProtectionServiceData);
					}
					//HIV STATUS DATA
					var hivstatus = NoChildProtectionService.Select(o => o.HivstatusDescription).ToList().Distinct().ToList();
					foreach (var _item in hivstatus)
					{
						var _HIVStatusData = new SeriesModel();
						_HIVStatusData.ChartType = ChartSeriesType.StackingColumn;
						_HIVStatusData.SeriesName = _item;
						rand = new Random();
						//int _index = rand.Next(0, (SeriesColors.Count() - 1));
						//_HIVStatusData.SeriesColor = SeriesColors[_index];
						_HIVStatusData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_HIVStatusData.ColumnWidth = 0.7;
						_HIVStatusData.YAxisTitle = "Number";
						_HIVStatusData.Interval = 1000;
						_HIVStatusData.Datasource = new List<DashboardModel>();
						_HIVStatusData.Datasource.Add(new DashboardModel()
								{
									ColumnX = "OVC_HIVSTAT",
									ColumnY = NoChildProtectionService.Where(o => o.HivstatusDescription == _item && o.AgeCategory == "Children" && o.ChildProtectionServiceReceived == "1").ToList().Count
								});
						NumberClientsWithChildProtectionServiceData.Add(_HIVStatusData);
					}
					////Eligible_Dashboard
					//var eligble = _dbcontext.ViewVlrVlcVlsDashboard.
					//			Where(o => o.FollowUpDateMonth >= StartMonth && o.FollowUpDateMonth <= EndMonth && o.FollowUpDateYear == currentYear).AsNoTracking().ToList();
					//var supressed = _dbcontext.AViralLoadSuppressed.Where(o => (o.ViralLoadSuppressedId == 3) || (o.ViralLoadSuppressedId == 4)).ToList();
					//VLR_VLC_VLS_Dashboard
					var vlc_vlr = _dbcontext.ViewVlrVlcVlsDashboard.
								Where(o => o.FollowUpDateMonth >= StartMonth && o.FollowUpDateMonth <= EndMonth && o.FollowUpDateYear == currentYear).AsNoTracking().ToList();
					var supressed = _dbcontext.AViralLoadSuppressed.Where(o => (o.ViralLoadSuppressedId == 3) || (o.ViralLoadSuppressedId == 4)).ToList();
					if (vlc_vlr != null)
					{
						var _vlc = vlc_vlr.Select(o => o.ViralLoadSuppressedDescription).ToList().Distinct().ToList();
						foreach (var _item1 in supressed)
						{
							var _VLRData = new SeriesModel();
							_VLRData.ChartType = ChartSeriesType.StackingColumn;
							_VLRData.SeriesName = _item1.ViralLoadSuppressedDescription;
							rand = new Random();
							//int _index1 = rand.Next(0, (SeriesColors.Count() - 1));
							//_VLRData.SeriesColor = SeriesColors[_index1];
							_VLRData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
							_VLRData.ColumnWidth = 0.7;
							_VLRData.YAxisTitle = "Number";
							_VLRData.Interval = 1000;
							_VLRData.Datasource = new List<DashboardModel>();

							_VLRData.Datasource.Add(new DashboardModel()
									{
										ColumnX = "VLR/VLC",
										ColumnY = vlc_vlr.Where(o => o.ViralLoadSuppressedId == _item1.ViralLoadSuppressedId && o.AgeCategory == "Children" && o.IsClientEligibleForViralload == 1).ToList().Count
									});
							NumberClientsWithChildProtectionServiceData.Add(_VLRData);
						}
					}
					//VLC_Dashboard
					var vlcs = _dbcontext.ViewVlrVlcVlsDashboard.
							Where(o => o.FollowUpDateMonth >= StartMonth && o.FollowUpDateMonth <= EndMonth && o.FollowUpDateYear == currentYear).AsNoTracking().ToList();
					var vlcsuppresed = _dbcontext.AViralLoadSuppressed.Where(o => (o.ViralLoadSuppressedId == 1) || (o.ViralLoadSuppressedId == 2)).ToList();
					if (vlcs != null)
					{
						//	var _vlc = vlc_vlr.Select(o => o.ViralLoadSuppressedDescription).ToList().Distinct().ToList();
						foreach (var _item2 in vlcsuppresed)
						{
							var _VLCData = new SeriesModel();
							_VLCData.ChartType = ChartSeriesType.StackingColumn;
							_VLCData.SeriesName = _item2.ViralLoadSuppressedDescription;
							rand = new Random();
							//int _index1 = rand.Next(0, (SeriesColors.Count() - 1));
							//_VLCData.SeriesColor = SeriesColors[_index1];
							_VLCData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
							_VLCData.ColumnWidth = 0.7;
							_VLCData.YAxisTitle = "Number";
							_VLCData.Interval = 1000;
							_VLCData.Datasource = new List<DashboardModel>();
							_VLCData.Datasource.Add(new DashboardModel()
									{
										ColumnX = "VLS",
										ColumnY = vlcs.Where(o => o.ViralLoadSuppressedId == _item2.ViralLoadSuppressedId && o.AgeCategory == "Children" && o.IsClientEligibleForViralload == 1).ToList().Count
									});
							NumberClientsWithChildProtectionServiceData.Add(_VLCData);
						}
					}
				}

				//HOME VISIT TOOL(BarColumn)
				//Number of clients who received PSS
				var NoChildProtectionService1 = _dbcontext.ViewDashboardOvcServiceReportingToolDetail.
					Where(o => o.VisitationMonth >= StartMonth && o.VisitationMonth <= EndMonth && o.VisitationYear == _financialYear.FinancialYearId).AsNoTracking().ToList();
				if (NoChildProtectionService1 != null)
				{
					NumberClientsWithChildProtectionServiceData1 = new List<SeriesModel>();
					var category = NoChildProtectionService1.Select(o => o.AgeCategory).ToList().Distinct().ToList();
					foreach (var item in category)
					{
						var _NumberClientsWithChildProtectionServiceData1 = new SeriesModel();
						_NumberClientsWithChildProtectionServiceData1.ChartType = ChartSeriesType.StackingColumn100;
						_NumberClientsWithChildProtectionServiceData1.SeriesName = item;
						rand = new Random();
						//int index = rand.Next(0, (SeriesColors.Count() - 1));
						//_NumberClientsWithChildProtectionServiceData1.SeriesColor = SeriesColors[index];
						_NumberClientsWithChildProtectionServiceData1.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_NumberClientsWithChildProtectionServiceData1.ColumnWidth = 0.7;
						_NumberClientsWithChildProtectionServiceData1.YAxisTitle = "Number";
						_NumberClientsWithChildProtectionServiceData1.Interval = 1000;
						_NumberClientsWithChildProtectionServiceData1.Datasource = new List<DashboardModel>();
						_NumberClientsWithChildProtectionServiceData1.Datasource.Add(new DashboardModel()
								{
									ColumnX = "PSS",
									ColumnY = NoChildProtectionService1.Where(o => o.AgeCategory == item && o.Pssreceived == "1").ToList().Count
								});
						NumberClientsWithChildProtectionServiceData1.Add(_NumberClientsWithChildProtectionServiceData1);
					}
					//Number of clients who received Education
					var category1 = NoChildProtectionService1.Select(o => o.AgeCategory).ToList().Distinct().ToList();
					foreach (var _item in category1)
					{
						var _EducationData = new SeriesModel();
						_EducationData.ChartType = ChartSeriesType.StackingColumn100;
						_EducationData.SeriesName = _item;
						rand = new Random();
						//int _index = rand.Next(0, (SeriesColors.Count() - 1));
						//_EducationData.SeriesColor = SeriesColors[_index];
						_EducationData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_EducationData.ColumnWidth = 0.7;
						_EducationData.YAxisTitle = "Number";
						_EducationData.Interval = 1000;
						_EducationData.Datasource = new List<DashboardModel>();
						_EducationData.Datasource.Add(new DashboardModel()
								{
									ColumnX = "Education",
									ColumnY = NoChildProtectionService1.Where(o => o.AgeCategory == _item && o.EducationReceived == "1").ToList().Count
								});
						NumberClientsWithChildProtectionServiceData1.Add(_EducationData);
					}
					//Number of clients who received Food security &  Nutrition
					var category2 = NoChildProtectionService1.Select(o => o.AgeCategory).ToList().Distinct().ToList();
					foreach (var _item in category2)
					{
						var _FSNData = new SeriesModel();
						_FSNData.ChartType = ChartSeriesType.StackingColumn100;
						_FSNData.SeriesName = _item;
						rand = new Random();
						//int _index = rand.Next(0, (SeriesColors.Count() - 1));
						//_FSNData.SeriesColor = SeriesColors[_index];
						_FSNData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_FSNData.ColumnWidth = 0.7;
						_FSNData.YAxisTitle = "Number";
						_FSNData.Interval = 1000;
						_FSNData.Datasource = new List<DashboardModel>();
						_FSNData.Datasource.Add(new DashboardModel()
								{
									ColumnX = "FSN",
									ColumnY = NoChildProtectionService1.Where(o => o.AgeCategory == _item && o.FoodSecurityNutritionReceived == "1").ToList().Count
								});
						NumberClientsWithChildProtectionServiceData1.Add(_FSNData);
					}
					//Number of clients with Economic stability service
					var category3 = NoChildProtectionService1.Select(o => o.AgeCategory).ToList().Distinct().ToList();
					foreach (var _item in category3)
					{
						var _EconomicData = new SeriesModel();
						_EconomicData.ChartType = ChartSeriesType.StackingColumn100;
						_EconomicData.SeriesName = _item;
						rand = new Random();
						//int _index = rand.Next(0, (SeriesColors.Count() - 1));
						//_EconomicData.SeriesColor = SeriesColors[_index];
						_EconomicData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_EconomicData.ColumnWidth = 0.7;
						_EconomicData.YAxisTitle = "Number";
						_EconomicData.Interval = 1000;
						_EconomicData.Datasource = new List<DashboardModel>();
						_EconomicData.Datasource.Add(new DashboardModel()
								{
									ColumnX = "Economic Stability",
									ColumnY = NoChildProtectionService1.Where(o => o.AgeCategory == _item && o.EconomicStabilityServiceReceived == "1").ToList().Count
								});
						NumberClientsWithChildProtectionServiceData1.Add(_EconomicData);
					}
					//Number of clients with Health service
					var category4 = NoChildProtectionService1.Select(o => o.AgeCategory).ToList().Distinct().ToList();
					foreach (var _item in category4)
					{
						var _HealthData = new SeriesModel();
						_HealthData.ChartType = ChartSeriesType.StackingColumn100;
						_HealthData.SeriesName = _item;
						rand = new Random();
						//int _index = rand.Next(0, (SeriesColors.Count() - 1));
						//_HealthData.SeriesColor = SeriesColors[_index];
						_HealthData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_HealthData.ColumnWidth = 0.7;
						_HealthData.YAxisTitle = "Number";
						_HealthData.Interval = 1000;
						_HealthData.Datasource = new List<DashboardModel>();
						_HealthData.Datasource.Add(new DashboardModel()
								{
									ColumnX = "Health",
									ColumnY = NoChildProtectionService1.Where(o => o.AgeCategory == _item && o.HealthServiceReceived == "1").ToList().Count
								});
						NumberClientsWithChildProtectionServiceData1.Add(_HealthData);
					}
					//Number of clients with Child-protection service
					var category5 = NoChildProtectionService1.Select(o => o.AgeCategory).ToList().Distinct().ToList();
					foreach (var _item in category5)
					{
						var _ChildData = new SeriesModel();
						_ChildData.ChartType = ChartSeriesType.StackingColumn100;
						_ChildData.SeriesName = _item;
						rand = new Random();
						//int _index = rand.Next(0, (SeriesColors.Count() - 1));
						//_ChildData.SeriesColor = SeriesColors[_index];
						_ChildData.SeriesColor = String.Format("#{0:X6}", random.Next(0x1000000));
						_ChildData.ColumnWidth = 0.7;
						_ChildData.YAxisTitle = "Number";
						_ChildData.Interval = 1000;
						_ChildData.Datasource = new List<DashboardModel>();
						_ChildData.Datasource.Add(new DashboardModel()
								{
									ColumnX = "Child-Protection",
									ColumnY = NoChildProtectionService1.Where(o => o.AgeCategory == _item && o.AgeCategory == "Children" && o.ChildProtectionServiceReceived == "1").ToList().Count
								});
						NumberClientsWithChildProtectionServiceData1.Add(_ChildData);
					}

				}

				data = new List<DasboardDistricts>();
				TotalHouseHoldsToVisit = _dbcontext.ViewDashboardBeneficiaryIdentificationRegister.ToList();
				TotalHouseholdsVisited = await _dbcontext.spDashboardHouseHoldsGetAllAsync();

				var _district = TotalHouseholdsVisited.Select(o => new { o.DistrictId, o.DistrictDescription }).ToList().Distinct().ToList();
				foreach (var n in _district)
				{
					data.Add(new DasboardDistricts()
							{
								DistrictId = n.DistrictId,
								DistrictDescription = n.DistrictDescription
							});
				}

			}
		}
		catch(Exception ex)
		{			

		}
		finally
		{

		}
	}

	public void OnDistrictChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
	{
		if (args.Value != null)
		{
			isSubcountyEnabled = true;
			using (var db = new MUCOBADIContext())
			{
				SubcountiesDataSource = db.ASubcounty.Where(o => args.Value.Any(a => a == o.DistrictId) == true).ToList();
				isSubcountyEnabled = true;
			}
		}
	}

	public void QueryCellInfoHandler(QueryCellInfoEventArgs<OVCServeValueTargets> Args)
	{

		   if (Args.Column.Field == nameof(OVCServeValueTargets.PercentageMaleActive))
			{
				Args.Cell.AddStyle(new string[] { "background-color:#fdcb6e", "color:#2c3e50", "font-weight:bold" });
			}
			if (Args.Column.Field == nameof(OVCServeValueTargets.PercentageFemaleActive))
			{
				Args.Cell.AddStyle(new string[] { "background-color:#fdcb6e", "color:#2c3e50", "font-weight:bold" });
			}
			if (Args.Column.Field == nameof(OVCServeValueTargets.Percentage))
			{
			Args.Cell.AddStyle(new string[] { "background-color:#ecf0f1", "color:#2c3e50", "font-weight:bold" });
			}

	}
	public void QueryCellInfoHandler1(QueryCellInfoEventArgs<OVCServeValueTargets> Args)
	{
	    if (Args.Column.Field == nameof(OVCServeValueTargets.PercentageMaleActive))
    	{
	  	Args.Cell.AddStyle(new string[] { "background-color:#fdcb6e", "color:#2c3e50", "font-weight:bold" });
		}
		 if (Args.Column.Field == nameof(OVCServeValueTargets.PercentageFemaleActive))
		{
		 Args.Cell.AddStyle(new string[] { "background-color:#fdcb6e", "color:#2c3e50", "font-weight:bold" });
		}
		//PercentageageCategory17
		if (Args.Column.Field == nameof(OVCServeValueTargets.PercentageageCategory17))
    	{
	  	Args.Cell.AddStyle(new string[] { "background-color:#fdcb6e", "color:#2c3e50", "font-weight:bold" });
		}
		 if (Args.Column.Field == nameof(OVCServeValueTargets.PercentageageCategory18))
		{
		 Args.Cell.AddStyle(new string[] { "background-color:#fdcb6e", "color:#2c3e50", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(OVCServeValueTargets.HIVpostive17))
    	{
	  	Args.Cell.AddStyle(new string[] { "background-color:#e74c3c", "color:ghostwhite", "font-weight:bold" });
		}
		 if (Args.Column.Field == nameof(OVCServeValueTargets.HIVpostive18))
		{
		 Args.Cell.AddStyle(new string[] { "background-color:#e74c3c", "color:ghostwhite", "font-weight:bold" });
		}
	     if (Args.Column.Field == nameof(OVCServeValueTargets.HIVnegative17))
    	{
	  	Args.Cell.AddStyle(new string[] { "background-color:#2ecc71", "color:ghostwhite", "font-weight:bold" });
		}
		 if (Args.Column.Field == nameof(OVCServeValueTargets.HIVnegative18))
		{
		 Args.Cell.AddStyle(new string[] { "background-color:#2ecc71", "color:ghostwhite", "font-weight:bold" });
		}      
	}
	public void QueryCellInfoHandlerTable(QueryCellInfoEventArgs<TableOVCVL> Args)
	{
		if (Args.Column.Field == nameof(TableOVCVL._female0_17_VL_TestDone))
    	{
	  	Args.Cell.AddStyle(new string[] { "background-color:#d2dae2", "color:#1e272e", "font-weight:bold" });
		}
		   
		if (Args.Column.Field == nameof(TableOVCVL._Male0_17_VL_TestDone))
    	{
	  	Args.Cell.AddStyle(new string[] { "background-color:#d2dae2", "color:#1e272e", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(TableOVCVL._percentage0_17_VL_TestDone))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#d2dae2", "color:#1e272e", "font-weight:bold" });
		}

		if (Args.Column.Field == nameof(TableOVCVL._female18_VL_TestDone))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#808e9b", "color:#ffffff", "font-weight:bold" });
		}

		if (Args.Column.Field == nameof(TableOVCVL._Male18_VL_TestDone))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#808e9b", "color:#ffffff", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(TableOVCVL._percentage18_VL_TestDone))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#808e9b", "color:#ffffff", "font-weight:bold" });
		}
		//
		if (Args.Column.Field == nameof(TableOVCVL._female0_17_VL_Eligible))
    	{
			Args.Cell.AddStyle(new string[] { "background-color:#d2dae2", "color:#1e272e", "font-weight:bold" });
		}
		   
		if (Args.Column.Field == nameof(TableOVCVL._Male0_17_VL_Eligible))
    	{
	  	Args.Cell.AddStyle(new string[] { "background-color:#d2dae2", "color:#1e272e", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(TableOVCVL._percentage0_17_VL_Eligible))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#d2dae2", "color:#1e272e", "font-weight:bold" });
		}

		if (Args.Column.Field == nameof(TableOVCVL._female18_VL_Eligible))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#808e9b", "color:#ffffff", "font-weight:bold" });
		}

		if (Args.Column.Field == nameof(TableOVCVL._Male18_VL_Eligible))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#808e9b", "color:#ffffff", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(TableOVCVL._percentage18_VL_Eligible))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#808e9b", "color:#ffffff", "font-weight:bold" });
		}
		////////
		if (Args.Column.Field == nameof(TableOVCVL.Female0_17SuppressedResults))
    	{
	  	Args.Cell.AddStyle(new string[] { "background-color:#d2dae2", "color:#1e272e", "font-weight:bold" });
		}
		   
		if (Args.Column.Field == nameof(TableOVCVL.Male0_17SuppressedResults))
    	{
	  	Args.Cell.AddStyle(new string[] { "background-color:#d2dae2", "color:#1e272e", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(TableOVCVL._percentage0_17SuppressedResults))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#d2dae2", "color:#1e272e", "font-weight:bold" });
		}

		if (Args.Column.Field == nameof(TableOVCVL.Female_18_SuppressedResults))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#808e9b", "color:#ffffff", "font-weight:bold" });
		}

		if (Args.Column.Field == nameof(TableOVCVL.Male_18_SuppressedResults))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#808e9b", "color:#ffffff", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(TableOVCVL._percentage18SuppressedResults))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#808e9b", "color:#ffffff", "font-weight:bold" });
		}
		//
		if (Args.Column.Field == nameof(TableOVCVL.Female0_17RecievedResults))
    	{
			Args.Cell.AddStyle(new string[] { "background-color:#d2dae2", "color:#1e272e", "font-weight:bold" });
		}
		   
		if (Args.Column.Field == nameof(TableOVCVL.Male0_17RecievedResults))
    	{
	  	Args.Cell.AddStyle(new string[] { "background-color:#d2dae2", "color:#1e272e", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(TableOVCVL._percentage0_17RecievedResults))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#d2dae2", "color:#1e272e", "font-weight:bold" });
		}

		if (Args.Column.Field == nameof(TableOVCVL.Female_18_RecievedResults))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#808e9b", "color:#ffffff", "font-weight:bold" });
		}

		if (Args.Column.Field == nameof(TableOVCVL.Male_18_RecievedResults))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#808e9b", "color:#ffffff", "font-weight:bold" });
		}
		if (Args.Column.Field == nameof(TableOVCVL._percentage18RecievedResults))
		{
			Args.Cell.AddStyle(new string[] { "background-color:#808e9b", "color:#ffffff", "font-weight:bold" });
		}
	}
}
<style>
    /*Define Colors for Cells*/
    .NotImplemented {
        background-color: darkred;
    }

    .ImplementationComplete {
        background-color: forestgreen;
    }

    .ImplementationinProgress {
        background-color: yellow;
    }

    .Continous {
        background-color: darkblue;
    }

    .StatusNotReported {
        background-color: deepskyblue;
    }

    .PlannedStartDatez {
        background-color: purple
    }

    .NolongerApplicable {
        background-color: mediumvioletred;
    }
    /*Change color for text in Grid*/
    /*QueryCellInfo*/
    /*.NotImplemented*/
    .e-grid .e-gridcontent .e-rowcell.NotImplemented {
        color: ghostwhite;
    }
    /*.ImplementationComplete*/
    .e-grid .e-gridcontent .e-rowcell.ImplementationComplete {
        color: ghostwhite;
    }
    /*.ImplementationinProgress*/
    .e-grid .e-gridcontent .e-rowcell.ImplementationinProgress {
        color: darkred;
    }
    /*.Continous*/
    .e-grid .e-gridcontent .e-rowcell.Continous {
        color: ghostwhite;
    }
    /*.StatusNotReported*/
    .e-grid .e-gridcontent .e-rowcell.StatusNotReported {
        color: ghostwhite;
    }
    /*.NolongerApplicable*/
    .e-grid .e-gridcontent .e-rowcell.NolongerApplicable {
        color: ghostwhite;
    }
    /*QueryCellInfo*/
    .Low {
        background-color: green;
    }

    .Medium {
        background-color: lightseagreen;
    }

    .Medium-High {
        background-color: gold;
    }

    .High {
        background-color: red;
    }

	.marquee-container {
		position: relative;
	}

	.marquee-text {
		font-size: 24px;
		color: #000; /* Dark black color for static text */
	}

	.marquee-image {
		position: absolute;
		bottom: 0;
		right: 0;
		height: 24px;
	}

	.marquee-text span {
		color: #ff0000; /* Red color for dynamic text */
	}
</style>