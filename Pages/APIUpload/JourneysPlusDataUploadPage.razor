@*<h3>JourneysPlusDataUploadPage</h3>*@
@page "/JourneysPlusDataUploadPage"
@using Syncfusion.Blazor.Inputs
@using System.IO;
@using System.ComponentModel.DataAnnotations
@using Syncfusion.XlsIO
@using MUCOBADI.Models
@using System.Collections;
@using Microsoft.EntityFrameworkCore;
@using System.Globalization;
@using MUCOBADI.Data;
@inject UserManagement userManagement;
@inject NavigationManager Navigation;

<style>

        h3 {
            color: red;
            text-align: center;
            font-family: Cambria, Cochin, Georgia, Times, Times New Roman, serif
        }
</style>

<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="width: 100%; background-color: bisque; color: brown; font-family: Cambria; padding: 5px; font: bolder;"> <strong> Journeys Plus </strong></li>
</ol>

<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>

<div class="form-row">
    <h3>Click on Button Below to Upload the File (Use the Template From the System)</h3>
    <div class="form-group col-md-12">
          <div class="alert-info" style="padding:10px;">
            <p>Before uploading this excel, please ensure that the following date columns are in the correct date format (Preferably in the 'dd/MM/yyyy' format);</p>
           <div class="row">
               <div class="col-md-3">
                    <ul>
                        <li>Dates of Training (from)</li>
                        <li>Dates of Training (to)</li>
                        <li>Let’s Communicate</li>
                        <li>Making Friends</li>
                        <li>What is important to me </li>
                        <li>Talents, Interests and Personal qualities</li>
                        <li>Respecting Similarities and differences</li>
                    </ul>
               </div>
               <div class="col-md-3">
                   <ul>
                        <li>The Feelings game</li>
                        <li>Let’s Decide</li>
                        <li>Gender</li>
                        <li>My Body</li>
                        <li>Menstruation</li>
                        <li>Making Reusable sanitary pads</li>
                        <li>Child Pregnancy</li>
                    </ul>
               </div>
               <div class="col-md-3">
                   <ul>
                        <li>Image</li>
                        <li>Facts about HIV/AIDS and other STIs</li>
                        <li>How HIV affects our bodies</li>
                        <li>How HIV and AIDS affects children</li>
                        <li>Healthy and Unhealthy Relationships</li>
                        <li>Positive and Negative attention</li>
                        <li>Status</li>
                    </ul>
               </div>
               <div class="col-md-3">
                   <ul>
                         <li>Sexual Harassment</li>
                        <li>Community response to Violence</li>
                        <li> My circle of support</li>
                         <li>Our Project</li>
                        <li>Coodinated Date</li>
                        <li>ReviewDate </li>
                    </ul>
               </div>
           </div>
        </div>
    </div>
  
    <div class="form-group col-md-12">
        <SfUploader @ref="UploadObj" ID="UploadFiles" ShowFileList="false">
            <UploaderEvents ValueChange="OnUploadChange"></UploaderEvents>
        </SfUploader>
    </div>
    <div class="form-group col-md-12">
        @if (!string.IsNullOrEmpty(rownumber))
        {
            <p style="color:#28a745;">Uploading Record @rownumber of @usedRows Please wait ........ </p>
        }
       @* <p>Row Number: @rownumber <br/>Column Number: @columnnnumber<br/> Used Rows: @usedRows</p>*@
    </div>
    <div class="form-group col-md-12">
        <SfSpinner @ref="UploadingSpinner" Label="Uploading records please wait....." Size="50"></SfSpinner>
    </div>
   <div class="form-group col-md-12">
        @if (!string.IsNullOrEmpty(MessageResponse))
        {
            <p class="badge-success" style="padding:10px;">@MessageResponse</p>
        }
    </div>
    <div class="form-group col-md-12">
        @if (!string.IsNullOrEmpty(MessageError))
        {
            <p class="badge-danger" style="padding:10px;">@MessageError</p>
        }
    </div>
</div>

@code {
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
{
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    #endregion Toasters

    SfUploader UploadObj;
    SfSpinner UploadingSpinner;
    string _MessageResponse;
    string MessageResponse { get { return _MessageResponse; } set { if (value != null && value != _MessageResponse)
            {
                _MessageResponse = value;
                StateHasChanged();
            } } }
    string _Messageerror;
    string MessageError { get { return _Messageerror; } set { if (value != null && value != _Messageerror)
            {
                _Messageerror = value;
                StateHasChanged();
            } } }
    string _rownumber;
    string _columnnnumber;
    string rownumber { get { return _rownumber; } set { if (value != null && value != _rownumber)
            {
                _rownumber = value;
                StateHasChanged();
            } } }
    string columnnnumber { get { return _columnnnumber; } set { if (value != null && value != _columnnnumber)
            {
                _columnnnumber = value;
                StateHasChanged();
            } } }
    string usedRows { get; set; }
    public async Task OnUploadChange(UploadChangeEventArgs args)
    {
        MessageResponse = null;
        await UploadingSpinner.ShowAsync();
        try
        {
            foreach (var file in args.Files)
        {
            using (ExcelEngine excelEngine = new ExcelEngine())
            {
                //Instantiate the Excel application object
                IApplication application = excelEngine.Excel;

                file.Stream.Position = 0;
                //Set the default application version
                application.DefaultVersion = ExcelVersion.Xlsx;
                IWorkbook workbook = excelEngine.Excel.Workbooks.Open(file.Stream);

                //Get the first worksheet in the workbook into IWorksheet
                IWorksheet worksheet = workbook.Worksheets[0];

                if(worksheet.Range[1, 1].Value.Trim().Contains("PARTNER") && worksheet.Range[1, 2].Value.Trim().Contains("HH CODE")
                && worksheet.Range[1, 6].Value.Trim().Contains("Name of training")&& worksheet.Range[1, 9].Value.Trim().Contains("Dates of Training")
                && worksheet.Range[1, 17].Value.Trim().Contains("Communicate")&& worksheet.Range[1, 18].Value.Trim().Contains("Friends"))
                {
                    CommunityTrainingRegister trainingRegisterHeader = new CommunityTrainingRegister();
                    CommunityTrainingRegisterDirectMember trainingDirectmembers = new();
                    CommunityTrainingRegisterIndirectMember trainingIndirectmembers = new();

                    using (var db = new MUCOBADIContext())
                    {
                        var districts = db.ADistrict.ToList();
                        var subcounties = db.ASubcounty.ToList();
                        var groups = db.AGroups.ToList();
                        var vslaGroupComposition = db.VslaGroupComposition.ToList();

                        for (int row = 2; row <= worksheet.UsedRange.LastRow; row++)
                        {
                            usedRows = worksheet.UsedRange.LastRow.ToString();
                            rownumber = row.ToString();
                            await Task.Delay(10);
                            trainingRegisterHeader = new CommunityTrainingRegister();
                            int? _district = null;
                            int? _subcounty = null;
                            int? _groupTypeId = 4;
                            string _vslaGroupCode = null;
                            int? _groupId = null;
                            if (worksheet.IsRowVisible(row))
                            {
                                trainingRegisterHeader.ImplementingPartnerId = 1;
                                trainingRegisterHeader.CurriculumId = 1;

                                //District
                                if (!string.IsNullOrEmpty(worksheet.Range[row, 3].Value.Trim())
                                    && (worksheet.Range[row, 3].Value.Trim() != ""))
                                {
                                    columnnnumber = "3";
                                    var district = districts
                                        .FirstOrDefault(x => x.DistrictDescription.ToLower()
                                            == worksheet.Range[row, 3].Value.Trim().ToLower());
                                    if (district != null)
                                    {
                                        trainingRegisterHeader.DistrictId = Convert.ToInt32(district.DistrictId);
                                        _district = Convert.ToInt32(district.DistrictId);
                                    }
                                    else
                                        _district = null;
                                }

                                //Sub county
                                if (!string.IsNullOrEmpty(worksheet.Range[row, 4].Value.Trim())
                                    && (worksheet.Range[row, 4].Value.Trim() != ""))
                                {
                                    columnnnumber = "4";

                                    var subcounty = subcounties.FirstOrDefault(x => x.DistrictId == _district && x.SubcountyDescription.ToLower().Contains(worksheet.Range[row, 4].Value.Trim().ToLower()));


                                    if (subcounty != null)
                                    {
                                        trainingRegisterHeader.SubcountyId = Convert.ToInt32(subcounty.SubcountyId);
                                        _subcounty = Convert.ToInt32(subcounty.SubcountyId);
                                    }
                                    else
                                        _subcounty = null;
                                }

                                //GroupId
                                if (!string.IsNullOrEmpty(worksheet.Range[row, 7].Value.Trim()) &&
                                (worksheet.Range[row, 7].Value.Trim() != ""))
                                {
                                    columnnnumber = "7";
                                    var obj = groups
                                    .FirstOrDefault(x => x.GroupName.Trim() == worksheet.Range[row, 7].Value.Trim());

                                    if (obj != null)
                                    {
                                        trainingRegisterHeader.GroupId = obj.GroupId;
                                        _groupId = obj.GroupId;
                                    }
                                    else
                                        _groupId = null;
                                }

                                //GroupCode
                                if (!string.IsNullOrEmpty(worksheet.Range[row, 8].Value.Trim())
                                   && (worksheet.Range[row, 8].Value.Trim() != ""))
                                {
                                    columnnnumber = "8";
                                    if(worksheet.Range[row, 8].Value.Trim()=="DIRECT" || worksheet.Range[row, 8].Value.Trim() == "INDIRECT")
                                    {
                                        _vslaGroupCode = null;
                                    }
                                    else
                                    {
                                        trainingRegisterHeader.GroupCode = worksheet.Range[row, 8].Value.Trim();
                                        _vslaGroupCode = worksheet.Range[row, 8].Value.Trim();
                                    }
                                }
                                else
                                    _vslaGroupCode = null;

                                //Dates of Training (from)
                                if (!string.IsNullOrEmpty(worksheet.Range[row, 9].Value.Trim())
                                    && (worksheet.Range[row, 9].Value.Trim() != ""))
                                {
                                    columnnnumber = "9";

                                    DateTime _date = DateTime.Now;
                                    if(DateTime.TryParseExact(worksheet.Range[row, 9].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                    {
                                        trainingRegisterHeader.TrainingStartDate = _date;
                                    }
                                    else if(DateTime.TryParseExact(worksheet.Range[row, 9].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                    {
                                        trainingRegisterHeader.TrainingStartDate = _date;
                                    }
                                    else if(DateTime.TryParseExact(worksheet.Range[row, 9].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                    {
                                        trainingRegisterHeader.TrainingStartDate = _date;
                                    }
                                    else if(DateTime.TryParseExact(worksheet.Range[row, 9].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                    {
                                        trainingRegisterHeader.TrainingStartDate = _date;
                                    }
                                }

                                //Dates of Training (to)
                                if (!string.IsNullOrEmpty(worksheet.Range[row, 10].Value.Trim())
                                    && (worksheet.Range[row, 9].Value.Trim() != ""))
                                {
                                    columnnnumber = "10";

                                    DateTime _date = DateTime.Now;
                                    if(DateTime.TryParseExact(worksheet.Range[row, 10].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                    {
                                        trainingRegisterHeader.TrainingEndDate = _date;
                                    }
                                    else if(DateTime.TryParseExact(worksheet.Range[row, 10].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                    {
                                        trainingRegisterHeader.TrainingEndDate = _date;
                                    }
                                    else if(DateTime.TryParseExact(worksheet.Range[row, 10].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                    {
                                        trainingRegisterHeader.TrainingEndDate = _date;
                                    }
                                    else if(DateTime.TryParseExact(worksheet.Range[row, 10].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                    {
                                        trainingRegisterHeader.TrainingEndDate = _date;
                                    }
                                }

                                //Training Venue
                                if (!string.IsNullOrEmpty(worksheet.Range[row, 11].Value.Trim())
                                    && (worksheet.Range[row, 11].Value.Trim() != ""))
                                {
                                    columnnnumber = "11";
                                    trainingRegisterHeader.TrainingVenue = worksheet.Range[row, 11].Value.Trim();
                                }

                                //Trainer/ Artisan/ Facilitator
                                if (!string.IsNullOrEmpty(worksheet.Range[row, 12].Value.Trim())
                                    && (worksheet.Range[row, 12].Value.Trim() != ""))
                                {
                                    columnnnumber = "12";
                                    trainingRegisterHeader.Trainer = worksheet.Range[row, 11].Value.Trim();
                                }

                                //Coordinated By
                                if (!string.IsNullOrEmpty(worksheet.Range[row, 40].Value.Trim())
                                    && (worksheet.Range[row, 40].Value.Trim() != ""))
                                {
                                    columnnnumber = "40";
                                    trainingRegisterHeader.CoodinatedBy = worksheet.Range[row, 40].Value.Trim();
                                }

                                //Coodinated Date
                                if (!string.IsNullOrEmpty(worksheet.Range[row, 41].Value.Trim())
                                    && (worksheet.Range[row, 41].Value.Trim() != ""))
                                {
                                    columnnnumber = "41";

                                    DateTime _date = DateTime.Now;
                                    if(DateTime.TryParseExact(worksheet.Range[row, 41].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                    {
                                        trainingRegisterHeader.CoordinatorDate = _date;
                                    }
                                    else if(DateTime.TryParseExact(worksheet.Range[row, 41].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                    {
                                        trainingRegisterHeader.CoordinatorDate = _date;
                                    }
                                    else if(DateTime.TryParseExact(worksheet.Range[row, 41].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                    {
                                        trainingRegisterHeader.CoordinatorDate = _date;
                                    }
                                    else if(DateTime.TryParseExact(worksheet.Range[row, 41].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                    {
                                        trainingRegisterHeader.CoordinatorDate = _date;
                                    }
                                }

                                //Coordinators Contact
                                if (!string.IsNullOrEmpty(worksheet.Range[row, 42].Value.Trim())
                                    && (worksheet.Range[row, 42].Value.Trim() != ""))
                                {
                                    columnnnumber = "42";
                                    trainingRegisterHeader.CoordinatorPhoneNumber = worksheet.Range[row, 42].Value.Trim();
                                }

                                //Reviewed By
                                if (!string.IsNullOrEmpty(worksheet.Range[row, 43].Value.Trim())
                                    && (worksheet.Range[row, 43].Value.Trim() != ""))
                                {
                                    columnnnumber = "43";
                                    trainingRegisterHeader.ReviewedBy = worksheet.Range[row, 43].Value.Trim();
                                }

                                //Review Date
                                if (!string.IsNullOrEmpty(worksheet.Range[row, 44].Value.Trim())
                                    && (worksheet.Range[row, 44].Value.Trim() != ""))
                                {
                                    columnnnumber = "44";

                                    DateTime _date = DateTime.Now;
                                    if(DateTime.TryParseExact(worksheet.Range[row, 44].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                    {
                                        trainingRegisterHeader.ReviewDate = _date;
                                    }
                                    else if(DateTime.TryParseExact(worksheet.Range[row, 44].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                    {
                                        trainingRegisterHeader.ReviewDate = _date;
                                    }
                                    else if(DateTime.TryParseExact(worksheet.Range[row, 44].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                    {
                                        trainingRegisterHeader.ReviewDate = _date;
                                    }
                                    else if(DateTime.TryParseExact(worksheet.Range[row, 44].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                    {
                                        trainingRegisterHeader.ReviewDate = _date;
                                    }
                                }

                                //Reviewers Contact
                                if (!string.IsNullOrEmpty(worksheet.Range[row, 45].Value.Trim())
                                    && (worksheet.Range[row, 45].Value.Trim() != ""))
                                {
                                    columnnnumber = "45";
                                    trainingRegisterHeader.ReviewerPhoneNumber = worksheet.Range[row, 42].Value.Trim();
                                }

                                //Getting the group composition
                                VslaGroupComposition _table1 = db.VslaGroupComposition
                                .FirstOrDefault(
                                    o => o.DistrictId == _district &&
                                    o.SubcountyId == _subcounty &&
                                    o.GroupTypeId == _groupTypeId &&
                                    (o.GroupCode == _vslaGroupCode || o.GroupCode== null) &&
                                    o.GroupId == _groupId);

                                if(_table1 != null)
                                {
                                    trainingRegisterHeader.GroupCompositionCode = _table1.GroupCompositionCode;
                                    var communityexists = db.CommunityTrainingRegister.FirstOrDefault(o => o.GroupCompositionCode == _table1.GroupCompositionCode && o.CurriculumId == trainingRegisterHeader.CurriculumId);
                                    if(communityexists== null)
                                    {
                                        int id = 1;
                                        var last = db.CommunityTrainingRegister.OrderBy(o => o.CommunityTrainingRegisterId).ToList().LastOrDefault();
                                        if (last != null)
                                        {
                                            id = (last.CommunityTrainingRegisterId + 1);
                                        }
                                        trainingRegisterHeader.CommunityTrainingRegisterId = id;
                                        try
                                        {
                                            db.CommunityTrainingRegister.Add(trainingRegisterHeader);
                                            db.SaveChanges();
                                        }
                                        catch (Exception ex)
                                        {
                                            throw ex;
                                        }
                                    }
                                    else
                                    {
                                        trainingRegisterHeader.CommunityTrainingRegisterId = communityexists.CommunityTrainingRegisterId;

                                        //db.Entry(communityexists).CurrentValues.SetValues(trainingRegisterHeader);
                                        //db.Entry(communityexists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                        //db.SaveChanges();
                                    }
                                    string membername = null;
                                    string membercode = null;
                                    //Member Code
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 13].Value.Trim())
                                        && (worksheet.Range[row, 13].Value.Trim() != ""))
                                    {
                                        columnnnumber = "13";
                                        membercode = worksheet.Range[row, 13].Value.Trim();
                                    }
                                    //Name of participant
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 14].Value.Trim())
                                        && (worksheet.Range[row, 14].Value.Trim() != ""))
                                    {
                                        columnnnumber = "14";
                                        membername = worksheet.Range[row, 14].Value.Trim();
                                    }

                                    // Let’s Communicate
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 17].Value.Trim())
                                        && (worksheet.Range[row, 17].Value.Trim() != ""))
                                    {
                                        columnnnumber = "17";
                                        trainingDirectmembers.SessionId = 1;
                                        trainingIndirectmembers.SessionId = 1;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 17].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 17].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 17].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 17].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }
                                    // Making Friends
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 18].Value.Trim())
                                        && (worksheet.Range[row, 18].Value.Trim() != ""))
                                    {
                                        columnnnumber = "18";
                                        trainingDirectmembers.SessionId = 2;
                                        trainingIndirectmembers.SessionId = 2;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 18].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 18].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 18].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 18].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }
                                    // What is important to me 
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 19].Value.Trim())
                                        && (worksheet.Range[row, 19].Value.Trim() != ""))
                                    {
                                        columnnnumber = "19";
                                        trainingDirectmembers.SessionId = 3;
                                        trainingIndirectmembers.SessionId = 3;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 19].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 19].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 19].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 19].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    // Talents, Interests and Personal qualities
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 20].Value.Trim())
                                        && (worksheet.Range[row, 20].Value.Trim() != ""))
                                    {
                                        columnnnumber = "20";
                                        trainingDirectmembers.SessionId = 4;
                                        trainingIndirectmembers.SessionId = 4;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 20].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 20].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 20].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 20].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }
                                    // Respecting Similarities and differences
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 21].Value.Trim())
                                        && (worksheet.Range[row, 21].Value.Trim() != ""))
                                    {
                                        columnnnumber = "21";
                                        trainingDirectmembers.SessionId = 5;
                                        trainingIndirectmembers.SessionId = 5;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 21].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 21].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 21].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 21].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    // The Feelings game
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 22].Value.Trim())
                                        && (worksheet.Range[row, 22].Value.Trim() != ""))
                                    {
                                        columnnnumber = "22";
                                        trainingDirectmembers.SessionId = 6;
                                        trainingIndirectmembers.SessionId = 6;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 21].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 21].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 21].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 21].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    // Let’s Decide
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 23].Value.Trim())
                                        && (worksheet.Range[row, 23].Value.Trim() != ""))
                                    {
                                        columnnnumber = "23";
                                        trainingDirectmembers.SessionId = 7;
                                        trainingIndirectmembers.SessionId = 7;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 23].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 23].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 23].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 23].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    // Gender
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 24].Value.Trim())
                                        && (worksheet.Range[row, 24].Value.Trim() != ""))
                                    {
                                        columnnnumber = "24";
                                        trainingDirectmembers.SessionId = 8;
                                        trainingIndirectmembers.SessionId = 8;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 24].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 24].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 24].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 24].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    // My Body
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 25].Value.Trim())
                                        && (worksheet.Range[row, 25].Value.Trim() != ""))
                                    {
                                        columnnnumber = "25";
                                        trainingDirectmembers.SessionId = 9;
                                        trainingIndirectmembers.SessionId = 9;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 25].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 25].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 25].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 25].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    // Menstruation 
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 26].Value.Trim())
                                        && (worksheet.Range[row, 26].Value.Trim() != ""))
                                    {
                                        columnnnumber = "26";
                                        trainingDirectmembers.SessionId = 10;
                                        trainingIndirectmembers.SessionId = 10;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 26].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 26].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 26].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 26].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }
                                    // Making Reusable sanitary pad
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 27].Value.Trim())
                                        && (worksheet.Range[row, 27].Value.Trim() != ""))
                                    {
                                        columnnnumber = "27";
                                        trainingDirectmembers.SessionId = 11;
                                        trainingIndirectmembers.SessionId = 11;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 27].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 27].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 27].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 27].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }
                                    // Child Pregnancy
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 28].Value.Trim())
                                        && (worksheet.Range[row, 28].Value.Trim() != ""))
                                    {
                                        columnnnumber = "28";
                                        trainingDirectmembers.SessionId = 12;
                                        trainingIndirectmembers.SessionId = 12;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 28].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 28].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 28].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 28].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    // Image
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 29].Value.Trim())
                                        && (worksheet.Range[row, 29].Value.Trim() != ""))
                                    {
                                        columnnnumber = "29";
                                        trainingDirectmembers.SessionId = 13;
                                        trainingIndirectmembers.SessionId = 13;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 29].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 29].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 29].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 29].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    // Facts about HIV/AIDS and other STIs
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 30].Value.Trim())
                                        && (worksheet.Range[row, 30].Value.Trim() != ""))
                                    {
                                        columnnnumber = "30";
                                        trainingDirectmembers.SessionId = 14;
                                        trainingIndirectmembers.SessionId = 14;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 30].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 30].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 30].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 30].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    // How HIV affects our bodies
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 31].Value.Trim())
                                        && (worksheet.Range[row, 31].Value.Trim() != ""))
                                    {
                                        columnnnumber = "31";
                                        trainingDirectmembers.SessionId = 15;
                                        trainingIndirectmembers.SessionId = 15;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 31].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 31].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 31].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 31].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    // How HIV and AIDS affects children
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 32].Value.Trim())
                                        && (worksheet.Range[row, 32].Value.Trim() != ""))
                                    {
                                        columnnnumber = "32";
                                        trainingDirectmembers.SessionId = 16;
                                        trainingIndirectmembers.SessionId = 16;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 32].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 32].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 32].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 32].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    // Healthy and Unhealthy Relationships
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 33].Value.Trim())
                                        && (worksheet.Range[row, 33].Value.Trim() != ""))
                                    {
                                        columnnnumber = "33";
                                        trainingDirectmembers.SessionId = 17;
                                        trainingIndirectmembers.SessionId = 17;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 33].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 33].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 33].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 33].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    // Positive and Negative attention
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 34].Value.Trim())
                                        && (worksheet.Range[row, 34].Value.Trim() != ""))
                                    {
                                        columnnnumber = "34";
                                        trainingDirectmembers.SessionId = 18;
                                        trainingIndirectmembers.SessionId = 18;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 34].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 34].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 34].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 34].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    // Status
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 35].Value.Trim())
                                        && (worksheet.Range[row, 35].Value.Trim() != ""))
                                    {
                                        columnnnumber = "35";
                                        trainingDirectmembers.SessionId = 19;
                                        trainingIndirectmembers.SessionId = 19;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 35].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 35].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 35].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 35].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    // Sexual Harassment
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 36].Value.Trim())
                                        && (worksheet.Range[row, 36].Value.Trim() != ""))
                                    {
                                        columnnnumber = "36";
                                        trainingDirectmembers.SessionId = 20;
                                        trainingIndirectmembers.SessionId = 20;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 36].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 36].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 36].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 36].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    // Community response to Violence
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 37].Value.Trim())
                                        && (worksheet.Range[row, 37].Value.Trim() != ""))
                                    {
                                        columnnnumber = "37";
                                        trainingDirectmembers.SessionId = 21;
                                        trainingIndirectmembers.SessionId = 21;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 37].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 37].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 37].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 37].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    //  My circle of support
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 38].Value.Trim())
                                        && (worksheet.Range[row, 38].Value.Trim() != ""))
                                    {
                                        columnnnumber = "38";
                                        trainingDirectmembers.SessionId = 22;
                                        trainingIndirectmembers.SessionId = 22;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 38].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 38].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 38].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 38].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    // Our Project
                                    if (!string.IsNullOrEmpty(worksheet.Range[row, 39].Value.Trim())
                                        && (worksheet.Range[row, 39].Value.Trim() != ""))
                                    {
                                        columnnnumber = "39";
                                        trainingDirectmembers.SessionId = 23;
                                        trainingIndirectmembers.SessionId = 23;
                                        trainingDirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        trainingIndirectmembers.CommunityTrainingRegisterId = trainingRegisterHeader.CommunityTrainingRegisterId;
                                        DateTime _date = DateTime.Now;
                                        if(DateTime.TryParseExact(worksheet.Range[row, 39].Value.Trim(),"dd/MM/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 39].Value.Trim(),"M/d/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 39].Value.Trim(),"MM/dd/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }
                                        else if(DateTime.TryParseExact(worksheet.Range[row, 39].Value.Trim(),"d/M/yyyy",CultureInfo.InvariantCulture,DateTimeStyles.None, out _date))
                                        {
                                            trainingDirectmembers.SessionDate = _date;
                                            trainingIndirectmembers.SessionDate = _date;
                                        }

                                        var directmemberexists = db.ViewVslaGroupDirectMembers.FirstOrDefault(o => o.HouseHoldMemberCode == membercode && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                        if(directmemberexists != null)
                                        {
                                            trainingDirectmembers.VslaGroupDirectMemberId = directmemberexists.VslaGroupDirectMemberId;
                                            var exists = db.CommunityTrainingRegisterDirectMember.FirstOrDefault(o => o.VslaGroupDirectMemberId == trainingDirectmembers.VslaGroupDirectMemberId && o.CommunityTrainingRegisterId == trainingDirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingDirectmembers.SessionId);
                                            if(exists == null && trainingDirectmembers.SessionId != null)
                                            {
                                                int id = 1;
                                                var last = db.CommunityTrainingRegisterDirectMember.OrderBy(o => o.CommunityTrainingRegisterDirectMemberId).ToList().LastOrDefault();
                                                if (last != null)
                                                {
                                                    id = (last.CommunityTrainingRegisterDirectMemberId + 1);
                                                }
                                                trainingDirectmembers.CommunityTrainingRegisterDirectMemberId = id;
                                                db.CommunityTrainingRegisterDirectMember.Add(trainingDirectmembers);
                                                db.SaveChanges();
                                            }
                                            else if(exists != null)
                                            {

                                                exists.SessionDate = trainingDirectmembers.SessionDate;
                                                ///db.Entry(exists).CurrentValues.SetValues(directmember);
                                                db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                db.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            var indirectmemberexists = db.ViewVslaGroupIndirectMember.FirstOrDefault(o => o.IndirectMemberCode == membercode && o.MemberName==membername && o.GroupCompositionCode == trainingRegisterHeader.GroupCompositionCode);
                                            if(indirectmemberexists != null)
                                            {
                                                trainingIndirectmembers.VslaGroupIndirectMemberId = indirectmemberexists.VslaGroupIndirectMemberId;

                                                var exists = db.CommunityTrainingRegisterIndirectMember.FirstOrDefault(o => o.VslaGroupIndirectMemberId == trainingIndirectmembers.VslaGroupIndirectMemberId && o.CommunityTrainingRegisterId == trainingIndirectmembers.CommunityTrainingRegisterId && o.SessionId == trainingIndirectmembers.SessionId);
                                                if(exists == null && trainingIndirectmembers.SessionId != null)
                                                {
                                                    int id = 1;
                                                    var last = db.CommunityTrainingRegisterIndirectMember.OrderBy(o => o.CommunityTrainingRegisterIndirectMemberId).ToList().LastOrDefault();
                                                    if (last != null)
                                                    {
                                                        id = (last.CommunityTrainingRegisterIndirectMemberId + 1);
                                                    }
                                                    trainingIndirectmembers.CommunityTrainingRegisterIndirectMemberId = id;
                                                    db.CommunityTrainingRegisterIndirectMember.Add(trainingIndirectmembers);
                                                    db.SaveChanges();
                                                }
                                                else if(exists != null)
                                                {

                                                    exists.SessionDate = trainingIndirectmembers.SessionDate;
                                                    //db.Entry(exists).CurrentValues.SetValues(indirectmember);
                                                    db.Entry(exists).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                    db.SaveChanges();
                                                }
                                            }
                                        }
                                    }
                                }

                            }
                        }
                         MessageResponse = "Journeys Plus data has been successfully uploaded";
                        rownumber = null;
                        await UploadingSpinner.HideAsync();
                    }
                }
                else
                {
                    MessageError = "please ensure that the excel you have uploaded is the correct one.";
                    await UploadingSpinner.HideAsync();
                }
            }
        }
        }
        catch(Exception ex)
        {
            MessageError = $"an error ({ex.Message.ToString()}) occured while trying to read records on row {rownumber} and at column {columnnnumber}";
        }
        finally{
            await UploadingSpinner.HideAsync();
        }
    }
}
