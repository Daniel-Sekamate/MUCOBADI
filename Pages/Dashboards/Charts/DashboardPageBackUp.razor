@page "/DashboardPage"
@using MUCOBADI.DTOs.Dashboard;
@using MUCOBADI.Models;
@using MUCOBADI.Data;
@using Microsoft.EntityFrameworkCore;
@using Syncfusion.Blazor;
@using Syncfusion.Blazor.ProgressBar;
@*@inject MUCOBADIContext db;*@
@inject SPToCoreContext dbcontext;

<style>
	.pp {
		color: ghostwhite;
		background-color: #808285;
		padding: 10px;
	}

	.control-container {
		background-color: #adb5bd;
		height: 300px;
		margin: 0 auto;
		width: 500px;
	}

	.e-carousel .slide-content {
		align-items: center;
		display: flex;
		font-size: 1.25rem;
		height: 100%;
		justify-content: center;
	}

	/*Customize carousel*/
	.e-carousel .e-carousel-navigators .e-next .e-btn:not(:disabled) .e-btn-icon,
	.e-carousel .e-carousel-navigators .e-previous .e-btn:not(:disabled) .e-btn-icon
	{
		color: blackyellow;
		font-size: 25px;
	}

	.e-carousel .e-carousel-navigators {
		top: 150px;
	}

	.e-carousel .e-carousel-navigators .e-previous .e-btn:not(:disabled) .e-btn-icon, .e-carousel .e-carousel-navigators .e-next .e-btn:not(:disabled) .e-btn-icon, .e-carousel .e-carousel-navigators .e-play-pause .e-btn:not(:disabled) .e-btn-icon {
    color: black;
	}

	table, th, td {
  border: 1px solid black;
}

h5 {
  display: block;
  font-size: -1em;
  font-weight: bold;
  color:maroon;
  background-color: white;
}

h6 {
        color: ghostwhite;
        background-color: #268cff;
        padding: 10px;
        width: 100%;
        font-size: 10px;
    }

    h4 {
        color: black;
        background-color: deepskyblue;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }

    h3 {
        color: black;
        background-color: darkorange;
        padding: 10px;
        width: 100%;
        font-size: 15px;
    }
</style>

<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>

<div class="row">
	<div class="col-md-12">
		<ol class="breadcrumb" style="margin-top:5px;">
			<li class="breadcrumb-item active" style="color: brown;"> <strong>Dashboard</strong></li>
		</ol>
    </div>
	<div class="col-md-9">
		<p style="color:purple;"><center><strong>DATA FOR QTR @QuarterNo @DateTime.Now.Year</strong></center></p>
		
		@*START*@
		    @*<div class="form-group col-md-12">
				<SfAccordion ExpandMode="@ExpandMode.Single">
					<AccordionItems>
						<AccordionItem Expanded="true">
							<HeaderTemplate>Search Panel</HeaderTemplate>
							<ContentTemplate>
								<div style="padding:10px;">
									<EditForm Model="@SearchModel" OnValidSubmit="@SearchDashboard">
										<div class="form-row">
											<div class="form-group col-md-3">
												<p>Region</p>
												<SfMultiSelect @bind-Value="@InputModel.RegionId" TValue="int?[]" TItem="ARegion" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@RegionData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Region" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
													<MultiSelectFieldSettings Value="@nameof(ARegion.RegionId)" Text="@nameof(ARegion.RegionDescription)"></MultiSelectFieldSettings>
													<MultiSelectEvents TValue="int?[]" TItem="ARegion" ValueChange="OnRegionChange"></MultiSelectEvents>
												</SfMultiSelect>
											</div>
											<div class="form-group col-md-3">
												<p>District</p>
												<SfMultiSelect @bind-Value="@InputModel.DistrictId" Enabled="@isEnabled" TValue="int?[]" TItem="ADistrict" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@DistrictData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search District" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
													<MultiSelectFieldSettings Value="@nameof(ADistrict.DistrictId)" Text="@nameof(ADistrict.DistrictDescription)"></MultiSelectFieldSettings>
													<MultiSelectEvents TValue="int?[]" TItem="ADistrict" ValueChange="OnDistrictChange"></MultiSelectEvents>
												</SfMultiSelect>
											</div>
											<div class="form-group col-md-3">
												<p>Visitation Start date</p>
												<SfDatePicker @bind-Value="@SearchModel.Startdate" TValue="DateTime?" Format="dd/MM/yyyy" Placeholder="Please select date" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
											</div>
											<div class="form-group col-md-3">
											<p>Visitation End date</p>
											<SfDatePicker @bind-Value="@SearchModel.Enddate" TValue="DateTime?" Format="dd/MM/yyyy" Placeholder="Please select date" FloatLabelType="FloatLabelType.Never"></SfDatePicker>
											</div>
											<div class="form-group col-md-3">
												<BSButton Color="Color.Primary" ButtonType="BlazorStrap.ButtonType.Submit">Search</BSButton>
												<BSButton Color="Color.Secondary" ButtonType="BlazorStrap.ButtonType.Button" @onclick="ClearSearchBtnClick">Clear Search</BSButton>
											</div>
											<div class="form-group col-md-12">
												<DataAnnotationsValidator />
												<ValidationSummary />
											</div>
										</div>
									</EditForm>
								</div>
							</ContentTemplate>
						</AccordionItem>
					</AccordionItems>
				</SfAccordion>
    </div>*@
		
		<div class="row" style="margin-top:5px;">
			<SfCarousel AnimationEffect="CarouselAnimationEffect.Fade"
                    AutoPlay="true"
                    Interval="60000" 
					ButtonsVisibility="CarouselButtonVisibility.Visible"
					ShowIndicators="false">
					<CarouselItem>
						<h5>OVC_SERV. Vs TARGET (0-18+ YEARS)</h5>
						<table style="width:100%;font-size:20px">
							<tr>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>District</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Target</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>OVC_SERV.</strong>
								</td>
								@*<td>
									<strong>Year</strong>
								</td>*@
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Percent (%)</strong>
								</td>
							</tr>
							@{
								double? totaltarget = 0;
								double? totalovcserve = 0;
								double? totalpercentage = 0;
							}
							@foreach(var item in TargetsList)
							{
								double? percentagevalue = 0;
							<tr>
								<td>
									@item.DistrictDescription
								</td>
								<td style="text-align:right">
									@{
										totaltarget += item.TargetValue;
									}
									@item.TargetValue.Value.ToString("#,##0")
								</td>
								<td style="text-align:right">
									@{
										totalovcserve += item.ActualValue;
									}
									@item.ActualValue.Value.ToString("#,##0")
								</td>
								
									@if(item.TargetValue>0)
									{
										@if (totaltarget > 0)
										{
											totalpercentage = Math.Round(((double)totalovcserve / (double)totaltarget) * 100, 1);
										}
										@*<strong>@item.Percentage%</strong>*@
										if(@item.Percentage < 75)
										{
											<td style="text-align:right;background-color:red;color:ghostwhite;font-weight:bold;">
												<p style="color:ghostwhite;font-weight:bold;">@item.Percentage%</p>
											</td>
										}
										else if(@item.Percentage >= 75 && @item.Percentage < 95)
										{
											<td style="text-align:right;background-color:yellow;color:black;font-weight:bold;">
												<p style="color:black;font-weight:bold;">@item.Percentage%</p>
											</td>
										}
										else if (@item.Percentage > 95)
										{
											<td style="text-align:right;background-color:green;color:ghostwhite;font-weight:bold;">
												<p style="color:black;font-weight:bold;">@item.Percentage%</p>
											</td>
										}
									}
							</tr>							
							}
						<tr>
							<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;"><strong>Total</strong></td>
							<td style="text-align:right"><strong>@totaltarget.Value.ToString("#,##0")</strong></td>
							<td style="text-align:right"><strong>@totalovcserve.Value.ToString("#,##0")</strong></td>
							@*<td style ="text-align:right"><strong>@totalpercentage.Value.ToString("#,##0")%</strong></td>*@

							@if(@totalpercentage < 75)
							{
											<td style="text-align:right;background-color:red;color:ghostwhite;font-weight:bold;">
												<p style="color:ghostwhite;font-weight:bold;">@totalpercentage.Value.ToString("#,##0")%</p>
											</td>
							}
							else if(@totalpercentage >= 75 && @totalpercentage < 95)
							{
											<td style="text-align:right;background-color:yellow;color:black;font-weight:bold;">
												<p style="color:black;font-weight:bold;">@totalpercentage.Value.ToString("#,##0")%</p>
											</td>
							}
							else if (@totalpercentage > 95)
							{
											<td style="text-align:right;background-color:green;color:black;font-weight:bold;">
												<p style="color:black;font-weight:bold;">@totalpercentage.Value.ToString("#,##0")%</p>
											</td>
							}
						</tr>
						</table>
					</CarouselItem>
					
					<CarouselItem>
						<h5>OVC_SERV.</h5>
						<table style="width:100%;font-size:20px">
							<tr>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>District</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>OVC_SERV.</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Children (0-17 Years)</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Adults (18+ Years)</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>% Children</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>% Adults</strong>
								</td>
							</tr>
							@{
								double? totalovc = 0;
								double? totalchildren = 0;
								double? totaladults = 0;
								double? percentagechildren = 0;
								double? percentageadults = 0;
							}
							@if (ovcservagegroups != null)
							{
								@foreach (var item in ovcservagegroups)
								{
									<tr>
										<td>
											@item.DistrictDescription
										</td>
										<td style="text-align:right">
											@{
												totalovc += item.OVCServTotal;
											}
											@item.OVCServTotal.Value.ToString("#,##0")
										</td>
										<td style="text-align:right">
											@{
												totalchildren += item.Children;
											}
											@item.Children.Value.ToString("#,##0")
										</td>
										<td style="text-align:right">
											@{
												totaladults += item.Adults;
											}
											@item.Adults.Value.ToString("#,##0")
										</td>
										<td style="text-align:right">
											@{
												@if (totalovc > 0)
												{
													percentagechildren = Math.Round(((double)totalchildren / (double)totalovc) * 100, 1);
												}
												<strong>@item.PercentageChildren%</strong>
											}
										</td>
										<td style="text-align:right">
											@{
												@if (totalovc > 0)
												{
													percentageadults = Math.Round(((double)totaladults / (double)totalovc) * 100, 1);
												}
												<strong>@item.PercentageAdults%</strong>
											}
										</td>										
									</tr>
								}
							}
							<tr>
								<td>
									<strong>Total</strong>
								</td>
								<td style="text-align:right">
									<strong>@totalovc.Value.ToString("#,##0")</strong>
								</td>
								<td style="text-align:right">
									<strong>@totalchildren.Value.ToString("#,##0")</strong>
								</td>
								<td style="text-align:right">
									<strong>@totaladults.Value.ToString("#,##0")</strong>
								</td>
								<td style="text-align:right">
									<strong>@percentagechildren%</strong>
								</td>
								<td style="text-align:right">
									<strong>@percentageadults%</strong>
								</td>
							</tr>
						</table>
					</CarouselItem>
					
					<CarouselItem>
						<h5>OVC HIV_STAT (18+ Years)</h5>
						<table style="width:100%;font-size:20px">
							<tr>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>District</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>OVC_SERV. (18+ ) Years</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>HIV Positive</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>HIV Negative</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Unknown Status</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Unknown HIV Status (TNR)</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>% C/ALHIV</strong>
								</td>
							</tr>
							@{
								double? totalovc = 0;
								double? totalhivpositive = 0;
								double? totalhivnegative = 0;
								double? Unknownhivstatus = 0;
								double? TNR = 0;
								double? CALHIV = 0;
							}
							@if (ovcadults != null)
							{
								@foreach (var item in ovcadults)
								{
									<tr>
										<td>
											@item.DistrictDescription
										</td>
										<td style="text-align:right">
											@{
												totalovc += item.OVCServ;
											}
											@item.OVCServ.Value.ToString("#,##0")
										</td>
										<td style="text-align:right">
											@{
												totalhivpositive += item.HivPositive;
											}
											@item.HivPositive.Value.ToString("#,##0")
										</td>
										<td style="text-align:right">
											@{
												totalhivnegative += item.HivNegative;
											}
											@item.HivNegative.Value.ToString("#,##0")
										</td>
										<td style="text-align:right">
											@{
												Unknownhivstatus += item.Unknownstatus;
											}
											@item.Unknownstatus.Value.ToString("#,##0")
										</td>
										<td style="text-align:right">
											@{
												TNR += item.UnknownTNR;
											}
											@item.UnknownTNR.Value.ToString("#,##0")
										</td>
										<td style="text-align:right">
											@if (totalovc > 0)
											{
												CALHIV = Math.Round(((double)totalhivpositive / (double)totalovc) * 100, 1);
											}
											<strong>@item.CALHIV%</strong>
										</td>
									</tr>
								}
							}
							<tr>
								<td>
									<strong>Total</strong>
								</td>
								<td style="text-align:right">
									<strong>@totalovc.Value.ToString("#,##0")</strong>
								</td>
								<td style="text-align:right">
									<strong>@totalhivpositive.Value.ToString("#,##0")</strong>
								</td>
								<td style="text-align:right">
									<strong>@totalhivnegative.Value.ToString("#,##0")</strong>
								</td>
								<td style="text-align:right">
									<strong>@Unknownhivstatus.Value.ToString("#,##0")</strong>
								</td>
								<td style="text-align:right">
									<strong>@TNR.Value.ToString("#,##0")</strong>
								</td>
								<td style="text-align:right">
									<strong>@CALHIV%</strong> @*.Value.ToString("0.00")*@
								</td>
							</tr>
						</table>
					</CarouselItem>

					<CarouselItem>
						<h5>OVC HIV_STAT (0-17 Years)</h5>
						<table style="width:100%;font-size:20px">
							<tr>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>District</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>OVC_SERV. (0-17) Years</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>HIV Positive</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>HIV Negative</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Unknown Status</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Unknown HIV Status (TNR)</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>% C/ALHIV</strong>
								</td>
							</tr>
							@{
								double? totalovc = 0;
								double? totalhivpositive = 0;
								double? totalhivnegative = 0;
								double? Unknownhivstatus = 0;
								double? TNR = 0;
								double?  CALHIV = 0;
							}
							@if(ovchivchildren!=null)
							{
								@foreach (var item in ovchivchildren)
								{
									<tr>
										<td>
											@item.DistrictDescription
										</td>
										<td style="text-align:right">
											@{
												totalovc += item.OVCServ;
											}
											@item.OVCServ.Value.ToString("#,##0")
										</td>								
										<td style="text-align:right">
											@{
												totalhivpositive += item.HivPositive;
											}
											@item.HivPositive.Value.ToString("#,##0")
										</td style="text-align:right">
										<td style="text-align:right">
											@{
												totalhivnegative += item.HivNegative;
											}
											@item.HivNegative.Value.ToString("#,##0")
										</td>
										<td style="text-align:right"> 
											@{
											Unknownhivstatus += item.Unknownstatus;
											}
											@item.Unknownstatus.Value.ToString("#,##0")
										</td>
										<td style="text-align:right">											
											@{
												TNR += item.UnknownTNR;
											}
											@item.UnknownTNR.Value.ToString("#,##0")
										</td>
										<td style="text-align:right">
												@if(totalovc >0)
												{
													CALHIV = Math.Round(((double)totalhivpositive / (double)totalovc) * 100,1);
												}
												<strong>@item.CALHIV%</strong>
										</td>
									</tr>
								}
							}
							<tr>
								<td>
									<strong>Total</strong>
								</td>
								<td style="text-align:right">
									<strong>@totalovc.Value.ToString("#,##0")</strong>
								</td>
								<td style="text-align:right">
									<strong>@totalhivpositive.Value.ToString("#,##0")</strong>
								</td>
								<td style="text-align:right">
									<strong>@totalhivnegative.Value.ToString("#,##0")</strong>
								</td>
								<td style="text-align:right">
									<strong>@Unknownhivstatus.Value.ToString("#,##0")</strong>
								</td>
								<td style="text-align:right">
									<strong>@TNR.Value.ToString("#,##0")</strong>
								</td>
								<td style="text-align:right"> 
								<strong>@CALHIV%</strong> @*.Value.ToString("0.00")*@
								</td>
							</tr>
						</table>
					</CarouselItem>
					
					@*Director advised we remove this graph*@
					@*<CarouselItem>
						<div class="col-md-12">
							@if (ProgramStatusData != null && ProgramStatusData.Count > 0)
							{
								<ChartPartialPage SeriesDataSource=@ProgramStatusData SeriesTitle="Total number of HHs on ICARE By Program Participation" LabelColor="Black"  FontWeight="800"/>
							}
							else
							{
								<center style="margin-top:10px;"><h6>Total number of HHs on ICARE By Program Participation</h6></center>
								<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
								<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
								</div>
							}
						</div>
					</CarouselItem>*@
					<CarouselItem>
						<div class="col-md-12">
							@if (DistrictData != null && DistrictData.Count > 0)
							{
								<ChartPartialPage SeriesDataSource=@DistrictData SeriesTitle="Total number of HHs on ICARE By District" LabelColor="Black" FontWeight="800"/>
							}
							else
							{
								<center style="margin-top:10px;"><h6>Total number of HHs on ICARE By Age Category</h6></center>
								<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
								<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
								</div>
							}
						</div>
					</CarouselItem>
					<CarouselItem>
						<div class="row" style="margin-top:5px;">
							<div class="col-md-6">
								@if (HIVStatusdData != null && HIVStatusdData.Count > 0)
								{
									<ChartPartialPage SeriesDataSource=@HIVStatusdData SeriesTitle="OVC HIV Positive Clients" LabelColor="Black"  FontWeight="800"/>
								}
								else
								{
									<center style="margin-top:10px;"><h6>OVC HIV Positive Clients</h6></center>
									<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
									<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
									</div>
								}
							</div>
							<div class="col-md-6">
								@if (ClientsOnArtData != null && ClientsOnArtData.Count > 0)
								{
									<ChartPartialPage SeriesDataSource=@ClientsOnArtData SeriesTitle="OVC HIV Positive Clients on ART" LabelColor="Black"  FontWeight="800"/>
								}
								else
								{
									<center style="margin-top:10px;"><h6>OVC HIV Positive Clients on ART</h6></center>
									<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
									<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
									</div>
								}
							</div>
						</div>
					</CarouselItem>
					<CarouselItem>
						<div class="row" style="margin-top:5px;">
							<div class="col-md-6">
								@if (ClientsEligibleforVLData != null && ClientsEligibleforVLData.Count > 0)
								{
									<ChartPartialPage SeriesDataSource=@ClientsEligibleforVLData SeriesTitle="OVC HIV Positive Clients Eligible for VL" LabelColor="Black"  FontWeight="800"/>
								}
								else
								{
									<center style="margin-top:10px;"><h6>OVC HIV Positive Clients Eligible for VL</h6></center>
									<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
										<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
									</div>
								}
							</div>
							<div class="col-md-6">
								@if (ClientsEligibleforVLTestDoneData != null && ClientsEligibleforVLTestDoneData.Count > 0)
								{
									<ChartPartialPage SeriesDataSource=@ClientsEligibleforVLTestDoneData SeriesTitle="OVC HIV Positive Clients Whose VL Test Done" LabelColor="Black"  FontWeight="800"/>
								}
								else
								{
									<center style="margin-top:10px;"><h6>OVC HIV Positive Clients Whose VL Test Done</h6></center>
									<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
										<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
									</div>
								}
							</div>
						</div>
					</CarouselItem>
					<CarouselItem>
						<div class="row" style="margin-top:5px;">
							<div class="col-md-6">
								@if (ClientsVLTestResultsReceivedData != null && ClientsVLTestResultsReceivedData.Count > 0)
								{
									<ChartPartialPage SeriesDataSource=@ClientsVLTestResultsReceivedData SeriesTitle="OVC HIV Positive Clients Whose VL Test Results Received" LabelColor="Black" FontWeight="800"/>
								}
								else
								{
								<center style="margin-top:10px;"><h6>OVC HIV Positive Clients Whose VL Test Results Received</h6></center>
									<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
										<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
									</div>
								}
							</div>
							<div class="col-md-6">
								
							</div>
						</div>
					</CarouselItem>
					
					<CarouselItem>
						<h5>Total number of Beneficiaries on ICARE - By Known Risk Factor (0-17 Years)</h5>
						<table style="width:100%;font-size:20px">
							<tr>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>District</strong>
								</td>
								
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Adolescent Mother</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>C/ALHIV</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Child of FSW</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>FSW</strong>
									</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>HEI</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Living in HH with Adolescent Mother</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Living in HH with FSW</strong>
									</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Living in HH with HEI</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Living in HH with PLHIV</strong>
									</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Living in HH with SVAC</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Other</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>PLHIV</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>SVAC</strong>
								</td>
							</tr>
							@{
								double? totalAdolescentMother = 0;
								double? totalCALHIV = 0;
								double? totalChildofFSW = 0;
								double? totalFSW = 0;
								double? totalHEI = 0;
								double? totalLivinginHHwithAdolescentMother = 0;
								double? totalLivinginHHwithFSW = 0;
								double? totalLivinginHHwithHEI = 0;
								double? totalLivinginHHwithPLHIV = 0;
								double? totalLivinginHHwithSVAC = 0;
								double? totalPLHIV = 0;
								double? totalSVAC = 0;
								double? totalOther = 0;
							}
							@if(beneficiaryriskfactorchildren!=null)
							{
								@foreach (var item in beneficiaryriskfactorchildren)
								{
									<tr>
										<td>
											@item.DistrictDescription
										</td>
										<td  style ="text-align:right">
											@item.AdolescentMother
											@{
											totalAdolescentMother += item.AdolescentMother;
											}
										</td>
										<td  style ="text-align:right">
											@item.CALHIV
											@{
											totalCALHIV += item.CALHIV;
											}
										</td>
										<td  style ="text-align:right">
											@item.ChildofFSW
											@{
											totalChildofFSW += item.ChildofFSW;
											}
										</td>
										<td  style ="text-align:right">
											@item.FSW
											@{
											totalFSW += item.FSW;
											}
										</td>
										<td  style ="text-align:right">
											@item.HEI
											@{
											totalHEI += item.HEI;
											}
										</td>
										<td  style ="text-align:right">
											@item.LivinginHHwithAdolescentMother
											@{
											totalLivinginHHwithAdolescentMother += item.LivinginHHwithAdolescentMother;
											}
										</td>
										<td  style ="text-align:right">
											@item.LivinginHHwithFSW
											@{
											totalLivinginHHwithFSW += item.LivinginHHwithFSW;
											}
										</td>
										<td  style ="text-align:right">
											@item.LivinginHHwithHEI
											@{
											totalLivinginHHwithHEI += item.LivinginHHwithHEI;
											}
										</td>
										<td  style ="text-align:right">
											@item.LivinginHHwithPLHIV
											@{
											totalLivinginHHwithPLHIV += item.LivinginHHwithPLHIV;
											}
										</td>
										<td  style ="text-align:right">
											@item.LivinginHHwithSVAC
											@{
											totalLivinginHHwithSVAC += item.LivinginHHwithSVAC;
											}
										</td>
										<td  style ="text-align:right">
											@item.PLHIV
											@{
											totalPLHIV += item.PLHIV;
											}
										</td>
										<td  style ="text-align:right">
											@item.SVAC
											@{
											totalSVAC += item.SVAC;
											}
										</td>
										<td  style ="text-align:right">
											@item.Other
											@{
												totalOther += item.Other;
											}
										</td>									
									</tr>
								}
							}
							<tr>
							<td><strong>Total</strong></td>
							<td style ="text-align:right"><strong>@totalAdolescentMother.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalCALHIV.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalChildofFSW.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalFSW.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalHEI.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalLivinginHHwithAdolescentMother.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalLivinginHHwithFSW.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalLivinginHHwithHEI.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalLivinginHHwithPLHIV.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalLivinginHHwithSVAC.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalPLHIV.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalSVAC.Value.ToString("#,##0")</strong></td>
							<td style ="text-align:right"><strong>@totalOther.Value.ToString("#,##0")</strong></td>							
						</tr>
						</table>
					</CarouselItem>
					
					<CarouselItem>					
						<div class="row" style="margin-top:5px;">
								<div class="col-md-6">
								<h5>Number of Positive, Negative and Unknown Clients (0-17 Years)</h5>
									@if (PositiveNegativeUnknownData != null && PositiveNegativeUnknownData.Count > 0)
									{
									<CummulativeChartPartialPage SeriesDataSource=@PositiveNegativeUnknownData Radius="60%" 
									StartAngle="30" InnerRadius="5%" ExplodeIndex="10" Explode="true" ExplodeOffset="10%"
									ChartTitle="Number of Positive, Negative and Unknown Clients (0-17 Years)" />
									}
									else
									{
										@*<center style="margin-top:10px;"><h5>Number of Positive, Negative and Unknown Clients (0-17 Years)</h5></center>*@
										<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
											<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
										</div>
									}
								</div>
								<div class="col-md-6">
								<h5>Number of Positive, Negative and Unknown Clients (18+ Years)</h5>
									@if (PositiveNegativeUnknownData18Plus != null && PositiveNegativeUnknownData18Plus.Count > 0)
									{
									<CummulativeChartPartialPage SeriesDataSource=@PositiveNegativeUnknownData18Plus Radius="60%" 
									StartAngle="30" InnerRadius="5%" ExplodeIndex="10" Explode="true" ExplodeOffset="10%"
									ChartTitle="Number of Positive, Negative and Unknown Clients (18+ Years)" />
									}
									else
									{
										@*<center style="margin-top:10px;"><h5>Number of Positive, Negative and Unknown Clients (18+ Years)</h5></center>*@
										<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
											<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
										</div>
									}
								</div>
							</div>
					</CarouselItem>
					
					
					<CarouselItem>					
						<div class="row" style="margin-top:5px;">
							<div class="col-md-6">
								@if (NumberofActiveBeneficiariesData != null && NumberofActiveBeneficiariesData.Count > 0)
								{
									<ChartPartialPage SeriesDataSource=@NumberofActiveBeneficiariesData SeriesTitle="Total number of Active beneficiaries" LabelColor="White" FontWeight="800"/>
								}
								else
								{
									<center style="margin-top:10px;"><h5>Total number of Active beneficiaries</h5></center>
									<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
										<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
									</div>
								}
							</div>
							<div class="col-md-6">
								@if (NumberClientsWithChildProtectionServiceData != null && NumberClientsWithChildProtectionServiceData.Count > 0)
								{
									<ChartPartialPage SeriesDataSource=@NumberClientsWithChildProtectionServiceData SeriesTitle="Number of Clients with Child-Protection Service" LabelColor="White" FontWeight="800"/>
								}
								else
								{
									<center style="margin-top:10px;"><h5>Number of Clients with Child-Protection Service</h5></center>
									<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
										<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
									</div>
								}
							</div>
						</div>					
					</CarouselItem>

					@*Ending Epidemic Cascade 18+ Years*@
					@*<CarouselItem>
						<div class="row" style="margin-top:5px;">
							<div class="col-md-6">
								@if (NumberofClientWithHealthServiceData != null && NumberofClientWithHealthServiceData.Count > 0)
								{
									<ChartPartialPage SeriesDataSource=@NumberofClientWithHealthServiceData SeriesTitle="Ending Epidemic Cascade (0-17 Years)" LabelColor="White" FontWeight="800"/>
								}
								else
								{
								<center style="margin-top:10px;"><h5>Ending Epidemic Cascade (0-17 Years)</h5></center>
									<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
										<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
									</div>
								}
							</div>

							<div class="col-md-6">
								@if (NumberofClientWithHealthServiceDataChildren != null && NumberofClientWithHealthServiceDataChildren.Count > 0)
								{
									<ChartPartialPage SeriesDataSource=@NumberofClientWithHealthServiceDataChildren SeriesTitle="Ending Epidemic Cascade (18+ Years)" LabelColor="White" FontWeight="800"/>
								}
								else
								{
								<center style="margin-top:10px;"><h5>Ending Epidemic Cascade (18+ Years)</h5></center>
									<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
										<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
									</div>
								}
							</div>
					</div>
					</CarouselItem>		
					*@

					<CarouselItem>
						<h5>HOME VISIT</h5>
						<table style="width:100%;font-size:20px">
							<tr>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>Home Visit Service</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>&lt;1 Yr</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>1-4 Yrs</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>5-9 Yrs</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>10-14 Yrs</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>15-17 Yrs</strong>
								</td>
								<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
									<strong>18+ Yrs</strong>
								</td>
							</tr>
							<tr>
								@{
								double? totalLessThan1YearCP = 1;
								double? totalOneToFourCP = 0;
								double? totalFiveToNineCP = 0;
								double? totalTenToFourteenCP = 0;
								double? totalFifteenToSeventeenCP = 0;
								double? totalEighteenAboveCP = 0;

								double? totalLessThan1YearES = 2;
								double? totalOneToFourES = 0;
								double? totalFiveToNineES = 0;
								double? totalTenToFourteenES = 0;
								double? totalFifteenToSeventeenES = 0;
								double? totalEighteenAboveES = 0;

								double? totalLessThan1YearED = 0;
								double? totalOneToFourED = 0;
								double? totalFiveToNineED = 0;
								double? totalTenToFourteenED = 0;
								double? totalFifteenToSeventeenED = 0;
								double? totalEighteenAboveED = 0;

								double? totalLessThan1YearFSN = 0;
								double? totalOneToFourFSN = 0;
								double? totalFiveToNineFSN = 0;
								double? totalTenToFourteenFSN = 0;
								double? totalFifteenToSeventeenFSN = 0;
								double? totalEighteenAboveFSN = 0;

								double? totalLessThan1YearHE = 0;
								double? totalOneToFourHE = 0;
								double? totalFiveToNineHE = 0;
								double? totalTenToFourteenHE = 0;
								double? totalFifteenToSeventeenHE = 0;
								double? totalEighteenAboveHE = 0;

								double? totalLessThan1YearPSS = 0;
								double? totalOneToFourPSS = 0;
								double? totalFiveToNinePSS = 0;
								double? totalTenToFourteenPSS = 0;
								double? totalFifteenToSeventeenPSS = 0;
								double? totalEighteenAbovePSS = 0;

								}
								@{
								<td>
									<strong>Child Protection</strong>
								</td>
								<td>
								@{									
									totalLessThan1YearCP = HomeVisitData.Count(o=>o.AgeBands=="1 Year" && o.ChildProtectionServiceReceived == "1");
								}	
								<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="1 Year" && o.ChildProtectionServiceReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
								@{									
									totalOneToFourCP = HomeVisitData.Count(o=>o.AgeBands=="1-4 Years" && o.ChildProtectionServiceReceived == "1");
								}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="1-4 Years" && o.ChildProtectionServiceReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
								@{									
									totalFiveToNineCP = HomeVisitData.Count(o=>o.AgeBands=="5-9 Years" && o.ChildProtectionServiceReceived == "1");
								}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="5-9 Years" && o.ChildProtectionServiceReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
								@{									
									totalTenToFourteenCP = HomeVisitData.Count(o=>o.AgeBands=="10-14 Years" && o.ChildProtectionServiceReceived == "1");
								}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="10-14 Years" && o.ChildProtectionServiceReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
								@{									
									totalFifteenToSeventeenCP = HomeVisitData.Count(o=>o.AgeBands=="15-17 Years" && o.ChildProtectionServiceReceived == "1");
								}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="15-17 Years" && o.ChildProtectionServiceReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
								@{									
									totalEighteenAboveCP = HomeVisitData.Count(o=>o.AgeBands=="18+ Years" && o.ChildProtectionServiceReceived == "1");
								}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="18+ Years" && o.ChildProtectionServiceReceived == "1").ToString("#,##0")</p>
								</td>
								}
							</tr>
							<tr>
								<td>
									<strong>Economic Stability</strong>
								</td>
								<td>
									@{									
										totalLessThan1YearES = HomeVisitData.Count(o=>o.AgeBands=="1 Year" && o.EconomicStabilityServiceReceived == "1");
									}	
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="1 Year" && o.EconomicStabilityServiceReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalOneToFourES = HomeVisitData.Count(o=>o.AgeBands=="1-4 Years" && o.EconomicStabilityServiceReceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="1-4 Years" && o.EconomicStabilityServiceReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalFiveToNineES = HomeVisitData.Count(o=>o.AgeBands=="5-9 Years" && o.EconomicStabilityServiceReceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="5-9 Years" && o.EconomicStabilityServiceReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalTenToFourteenES = HomeVisitData.Count(o=>o.AgeBands=="10-14 Years" && o.EconomicStabilityServiceReceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="10-14 Years" && o.EconomicStabilityServiceReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalFifteenToSeventeenES = HomeVisitData.Count(o=>o.AgeBands=="15-17 Years" && o.EconomicStabilityServiceReceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="15-17 Years" && o.EconomicStabilityServiceReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalEighteenAboveES = HomeVisitData.Count(o=>o.AgeBands=="18+ Years" && o.EconomicStabilityServiceReceived == "1");
									}
									<p  style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="18+ Years" && o.EconomicStabilityServiceReceived == "1").ToString("#,##0")</p>
								</td>
							</tr>
							<tr>
								<td>
									<strong>Education</strong>
								</td>
								<td>
									@{									
										totalLessThan1YearED = HomeVisitData.Count(o=>o.AgeBands=="1 Year" && o.EducationReceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="1 Year" && o.EducationReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalOneToFourED = HomeVisitData.Count(o=>o.AgeBands=="1-4 Years" && o.EducationReceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="1-4 Years" && o.EducationReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalFiveToNineED = HomeVisitData.Count(o=>o.AgeBands=="5-9 Years" && o.EducationReceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="5-9 Years" && o.EducationReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalTenToFourteenED = HomeVisitData.Count(o=>o.AgeBands=="10-14 Years" && o.EducationReceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="10-14 Years" && o.EducationReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalFifteenToSeventeenED = HomeVisitData.Count(o=>o.AgeBands=="15-17 Years" && o.EducationReceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="15-17 Years" && o.EducationReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalEighteenAboveED = HomeVisitData.Count(o=>o.AgeBands=="18+ Years" && o.EducationReceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="18+ Years" && o.EducationReceived == "1").ToString("#,##0")</p>
								</td>
							</tr>
							<tr>
								<td>
									<strong>FSN</strong>
								</td>
								<td>
									@{									
										totalLessThan1YearFSN = HomeVisitData.Count(o=>o.AgeBands=="1 Year" && o.FoodSecurityNutritionReceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="1 Year" && o.FoodSecurityNutritionReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalOneToFourFSN = HomeVisitData.Count(o=>o.AgeBands=="1-4 Years" && o.FoodSecurityNutritionReceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="1-4 Years" && o.FoodSecurityNutritionReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalFiveToNineFSN = HomeVisitData.Count(o=>o.AgeBands=="5-9 Years" && o.FoodSecurityNutritionReceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="5-9 Years" && o.FoodSecurityNutritionReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalTenToFourteenFSN = HomeVisitData.Count(o=>o.AgeBands=="10-14 Years" && o.FoodSecurityNutritionReceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="10-14 Years" && o.FoodSecurityNutritionReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalFifteenToSeventeenFSN = HomeVisitData.Count(o=>o.AgeBands=="15-17 Years" && o.FoodSecurityNutritionReceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="15-17 Years" && o.FoodSecurityNutritionReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalEighteenAboveFSN = HomeVisitData.Count(o=>o.AgeBands=="18+ Years" && o.FoodSecurityNutritionReceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="18+ Years" && o.FoodSecurityNutritionReceived == "1").ToString("#,##0")</p>
								</td>
							</tr>
							<tr>
								<td>
									<strong>Health</strong>
								</td>
								<td>
									@{									
										totalLessThan1YearHE = HomeVisitData.Count(o=>o.AgeBands=="1 Year" && o.HealthServiceReceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="1 Year" && o.HealthServiceReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalOneToFourHE = HomeVisitData.Count(o=>o.AgeBands=="1-4 Years" && o.HealthServiceReceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="1-4 Years" && o.HealthServiceReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalFiveToNineHE = HomeVisitData.Count(o=>o.AgeBands=="5-9 Years" && o.HealthServiceReceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="5-9 Years" && o.HealthServiceReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalTenToFourteenHE = HomeVisitData.Count(o=>o.AgeBands=="10-14 Years" && o.HealthServiceReceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="10-14 Years" && o.HealthServiceReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalFifteenToSeventeenHE = HomeVisitData.Count(o=>o.AgeBands=="15-17 Years" && o.HealthServiceReceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="15-17 Years" && o.HealthServiceReceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalEighteenAboveHE = HomeVisitData.Count(o=>o.AgeBands=="18+ Years" && o.HealthServiceReceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="18+ Years" && o.HealthServiceReceived == "1").ToString("#,##0")</p>
								</td>
							</tr>
							<tr>
								<td>
									<strong>PSS</strong>
								</td>
								<td>
									@{									
										totalLessThan1YearPSS = HomeVisitData.Count(o=>o.AgeBands=="1 Year" && o.Pssreceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="1 Year" && o.Pssreceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalOneToFourPSS = HomeVisitData.Count(o=>o.AgeBands=="1-4 Years" && o.Pssreceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="1-4 Years" && o.Pssreceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalFiveToNinePSS = HomeVisitData.Count(o=>o.AgeBands=="5-9 Years" && o.Pssreceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="5-9 Years" && o.Pssreceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalTenToFourteenPSS = HomeVisitData.Count(o=>o.AgeBands=="10-14 Years" && o.Pssreceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="10-14 Years" && o.Pssreceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalFifteenToSeventeenPSS = HomeVisitData.Count(o=>o.AgeBands=="15-17 Years" && o.Pssreceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="15-17 Years" && o.Pssreceived == "1").ToString("#,##0")</p>
								</td>
								<td>
									@{									
										totalEighteenAbovePSS = HomeVisitData.Count(o=>o.AgeBands=="18+ Years" && o.Pssreceived == "1");
									}
									<p style="font-size:20px;text-align:right;">@HomeVisitData.Count(o=>o.AgeBands=="18+ Years" && o.Pssreceived == "1").ToString("#,##0")</p>
								</td>
							</tr>
							
							<tr>
								<td>
									<strong>Total</strong>
								</td>
								<td style="text-align:right">
									<strong>
										@(totalLessThan1YearCP +
										totalLessThan1YearES+
										totalLessThan1YearED+
										totalLessThan1YearFSN+
										totalLessThan1YearHE+
										totalLessThan1YearPSS)
									</strong>
								</td>
								<td style="text-align:right">
									<strong>
									@{
										@(totalOneToFourCP +
										totalOneToFourES+
										totalOneToFourED+
										totalOneToFourFSN+
										totalOneToFourHE+
										totalOneToFourPSS)
									}	
									</strong>
								</td>
								<td style="text-align:right">
									<strong>
									@{
										@(totalFiveToNineCP +
										totalFiveToNineES+
										totalFiveToNineED+
										totalFiveToNineFSN+
										totalFiveToNineHE+
										totalFiveToNinePSS)
									}	
									</strong>
								</td>
								<td style="text-align:right">
									<strong>
									@{
										@(totalTenToFourteenCP +
										totalTenToFourteenES+
										totalTenToFourteenED+
										totalTenToFourteenFSN+
										totalTenToFourteenHE+
										totalTenToFourteenPSS)
									}	
									</strong>
								</td>
								<td style="text-align:right">
									<strong>
									@{
										@(totalFifteenToSeventeenCP +
										totalFifteenToSeventeenES+
										totalFifteenToSeventeenED+
										totalFifteenToSeventeenFSN+
										totalFifteenToSeventeenHE+
										totalFifteenToSeventeenPSS)
									}	
									</strong>
								</td>
								<td style="text-align:right">
									<strong>
									@{
										@(totalEighteenAboveCP +
										totalEighteenAboveES+
										totalEighteenAboveED+
										totalEighteenAboveFSN+
										totalEighteenAboveHE+
										totalEighteenAbovePSS)
									}	
									</strong>
								</td>
							</tr>
						</table>
						@*<div class="row" style="margin-top:5px;">
							<div class="col-md-12">
								@if (NumberClientsWithChildProtectionServiceData1 != null && NumberClientsWithChildProtectionServiceData1.Count > 0)
								{
									<ChartPartialPage SeriesDataSource=@NumberClientsWithChildProtectionServiceData1 SeriesTitle="Home Visit Tool" LabelColor="White" FontWeight="800"/>
								}
								else
								{
									<center style="margin-top:10px;"><h5>Home Visit Tool</h5></center>
									<div style="width:100%; height:250px; margin-top:6px;display: flex;align-items: center;justify-content: center;">
										<p><span class="fa fa-exclamation-circle"></span> There is no data to display</p>
									</div>
								}
							</div>
						</div>*@
					</CarouselItem>
			
					
					<CarouselItem  Interval="600000"> @*10 Minutes for this Widget*@
					<SfCarousel AnimationEffect="CarouselAnimationEffect.Fade"
						AutoPlay="true"
						Interval="60000"
						ButtonsVisibility="CarouselButtonVisibility.Visible"
						ShowIndicators="false">
						@if(data!=null)
						{
						@foreach (var n in data)
						{
							var hh = TotalHouseHoldsToVisit.Where(o => o.DistrictId == n.DistrictId).ToList();
							var _data = HHNoVisitsData.Where(o => o.DistrictId == n.DistrictId).ToList();
							var _SubCounty = _data.Select(o => new { o.SubcountyId, o.SubcountyDescription }).ToList().Distinct().ToList();
							int count = 0;
							var subTaken = _SubCounty.Skip(count).Take(8).ToList();

							@*int countt = 0;
							var subTaken = _SubCounty.Skip(countt).Take(8).ToList();*@

							do
							{
								<CarouselItem>
									<h5>HOUSEHOLD VISITS.</h5>
									<div class="row">
										<div class="col-md-12">
											<p style="color:black;"><b>District : </b>@n.DistrictDescription</p>
										</div>
										<div class="col-md-12">
								<div class="row">
									<div class="col-md-6">
										<p style="margin:5px; color:black;"><b>Total HHolds</b></p>
										@if (hh != null)
										{
											<p style="margin:5px; color:black;">@hh.Sum(o=> o.HouseHoldNo).Value.ToString("#,##0")</p>
										}
										else
										{
											<p style="margin:5px;">0</p>
										}
									</div>
									<div class="col-md-6">
										<p style="margin:5px; color:black;"><b>HHolds Visited</b></p>

										@if (_data != null)
										{
											<p style="margin:5px; color:black;">@_data.Sum(o=> o.NoofVisits).Value.ToString("#,##0")</p>
										}
										else
										{
											<p style="margin:5px;">0</p>
										}
									</div>
								</div>
							</div>
									</div>
									<table style="width:100%;font-size:20px">
										<tr>
											<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
												<strong>Subcounty</strong>
											</td>
											<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
												<strong>Total HHolds</strong>
											</td>
											<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
												<strong><font color="White">Visited Once</font></strong>
											</td>
											<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
												<strong><font color="White">Visited Twice</font></strong>
											</td>
											<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
												<strong><font color="White">Visited Thrice</font></strong>
											</td>
														<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
												<strong><font color="White">% Visited</font></strong>
											</td>
										</tr>
										@{
											double? totalHholds = 0;
											double? totalvisitedonce = 0;
											double? totalvisitedtwice = 0;
											double? totalvisitedthrice = 0;
											double? totalpercentage = 0;
										}
											@foreach (var item in subTaken)
											{
												var Subhh = TotalHouseHoldsToVisit.FirstOrDefault(o => o.SubcountyId == item.SubcountyId);
												var Subdata = HHNoVisitsData.Where(o => o.SubcountyId == item.SubcountyId).ToList();
												double VisitedOnceCount =0;
												double VisitedTwiceCount =0;
												double VisitedThriceCount =0;
												foreach(var x in Subdata)
												{
													if(x.NoofVisits > 2)
													{
														VisitedOnceCount++;
														VisitedTwiceCount++;
														VisitedThriceCount++;
													}
													else if(x.NoofVisits == 2)
													{
														VisitedOnceCount++;
														VisitedTwiceCount++;
													}
													else if(x.NoofVisits == 1)
													{
														VisitedOnceCount++;
													}
												}
												<tr>
													<td style="margin:5px; color:black;">@item.SubcountyDescription</td>
													<td>
														<p style="margin:5px; color:black; text-align:right"><strong>@Subhh.HouseHoldNo.Value.ToString("#,##0")</strong></p>
													</td>
													<td>
														<p style="margin:5px; color:black; text-align:right"><strong>@VisitedOnceCount.ToString("#,##0")</strong></p>
													</td>
													<td>
														<p style="margin:5px; color:black; text-align:right"><strong>@VisitedTwiceCount.ToString("#,##0")</strong></p>
													</td>
													<td>
														<p style="margin:5px; color:black; text-align:right"><strong>@VisitedThriceCount.ToString("#,##0")</strong></p>
													</td>
													<td style="text-align:right">
														@if(Subhh.HouseHoldNo > 0){
															var _Percentage = Math.Round(((VisitedOnceCount / (double)(Subhh.HouseHoldNo)) * (double)(100)), 1);
																
																string Progress = _Percentage +"%";
																string textcolor = "#FFFFFF";
																if (_Percentage < 45)
																{
																	textcolor = "#000000";
																}
																string TrackerColor ="#EA2027";
																if(_Percentage >=50 && _Percentage <80){
																	TrackerColor ="#FFC312";
																}
																else if(_Percentage >=80 && _Percentage <= 100){
																	TrackerColor ="#009432";
																}
																<SfProgressBar Type="ProgressType.Linear" Height="30"
																			   Width="100%" TrackColor="#eee"
																			   TrackThickness="30"
																			   ProgressThickness="30"
																			   InnerRadius="190%"
																			   CornerRadius="CornerType.Round"
																			   Value="@_Percentage" Minimum="0" Maximum="100"
																			   ShowProgressValue="true" ProgressColor="@TrackerColor">
																	<ProgressBarLabelStyle Text=@Progress TextAlignment="TextAlignmentType.Center" Color="@textcolor"/>
																	<ProgressBarAnimation Enable="true" Duration="2000" Delay="0" />
																	
																</SfProgressBar>
														}
														else
														{
															<p style="margin:5px; color:black;"><strong>0%</strong></p>
														}
														
													</td>
												</tr>
											}
								</table>
								</CarouselItem>
								count = count + 8;
							}
							while (count < _SubCounty.Count);

							// adding elements in firstlist
							@*for (int count = 0; count < _SubCounty.Count; count++) 
							{
								<CarouselItem>
									<h5>HOUSEHOLD VISITS.</h5>
									<div class="row">
										<div class="col-md-12">
											<p style="color:black;"><b>District : </b>@n.DistrictDescription</p>
										</div>
										<div class="col-md-12">
								<div class="row">
									<div class="col-md-6">
										<p style="margin:5px; color:black;"><b>Total HHolds</b></p>
										@if (hh != null)
										{
											<p style="margin:5px; color:black;">@hh.Sum(o=> o.HouseHoldNo).Value.ToString("#,##0")</p>
										}
										else
										{
											<p style="margin:5px;">0</p>
										}
									</div>
									<div class="col-md-6">
										<p style="margin:5px; color:black;"><b>HHolds Visited</b></p>

										@if (_data != null)
										{
											<p style="margin:5px; color:black;">@_data.Sum(o=> o.NoofVisits).Value.ToString("#,##0")</p>
										}
										else
										{
											<p style="margin:5px;">0</p>
										}
									</div>
								</div>
							</div>
									</div>
									<table style="width:100%;font-size:20px">
										<tr>
											<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
												<strong>Subcounty</strong>
											</td>
											<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
												<strong>Total HHolds</strong>
											</td>
											<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
												<strong><font color="White">Visited Once</font></strong>
											</td>
											<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
												<strong><font color="White">Visited Twice</font></strong>
											</td>
											<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
												<strong><font color="White">Visited Thrice</font></strong>
											</td>
														<td style="border-color:ghostwhite; background-color:black; color:ghostwhite;">
												<strong><font color="White">% Visited</font></strong>
											</td>
										</tr>
										@{
											double? totalHholds = 0;
											double? totalvisitedonce = 0;
											double? totalvisitedtwice = 0;
											double? totalvisitedthrice = 0;
											double? totalpercentage = 0;
										}
											@foreach (var item in subTaken)
											{
												var Subhh = TotalHouseHoldsToVisit.FirstOrDefault(o => o.SubcountyId == item.SubcountyId);
												var Subdata = HHNoVisitsData.Where(o => o.SubcountyId == item.SubcountyId).ToList();
												double VisitedOnceCount =0;
												double VisitedTwiceCount =0;
												double VisitedThriceCount =0;
												foreach(var x in Subdata)
												{
													if(x.NoofVisits > 2)
													{
														VisitedOnceCount++;
														VisitedTwiceCount++;
														VisitedThriceCount++;
													}
													else if(x.NoofVisits == 2)
													{
														VisitedOnceCount++;
														VisitedTwiceCount++;
													}
													else if(x.NoofVisits == 1)
													{
														VisitedOnceCount++;
													}
												}
												<tr>
													<td style="margin:5px; color:black;">@item.SubcountyDescription</td>
													<td>
														<p style="margin:5px; color:black; text-align:right"><strong>@Subhh.HouseHoldNo.Value.ToString("#,##0")</strong></p>
													</td>
													<td>
														<p style="margin:5px; color:black; text-align:right"><strong>@VisitedOnceCount.ToString("#,##0")</strong></p>
													</td>
													<td>
														<p style="margin:5px; color:black; text-align:right"><strong>@VisitedTwiceCount.ToString("#,##0")</strong></p>
													</td>
													<td>
														<p style="margin:5px; color:black; text-align:right"><strong>@VisitedThriceCount.ToString("#,##0")</strong></p>
													</td>
													<td style="text-align:right">
														@if(Subhh.HouseHoldNo > 0){
															var _Percentage = Math.Round(((VisitedOnceCount / (double)(Subhh.HouseHoldNo)) * (double)(100)), 1);
																
																string Progress = _Percentage +"%";
																string textcolor = "#FFFFFF";
																if (_Percentage < 45)
																{
																	textcolor = "#000000";
																}
																string TrackerColor ="#EA2027";
																if(_Percentage >=50 && _Percentage <80){
																	TrackerColor ="#FFC312";
																}
																else if(_Percentage >=80 && _Percentage <= 100){
																	TrackerColor ="#009432";
																}
																<SfProgressBar Type="ProgressType.Linear" Height="30"
																			   Width="100%" TrackColor="#eee"
																			   TrackThickness="30"
																			   ProgressThickness="30"
																			   InnerRadius="190%"
																			   CornerRadius="CornerType.Round"
																			   Value="@_Percentage" Minimum="0" Maximum="100"
																			   ShowProgressValue="true" ProgressColor="@TrackerColor">
																	<ProgressBarLabelStyle Text=@Progress TextAlignment="TextAlignmentType.Center" Color="@textcolor"/>
																	<ProgressBarAnimation Enable="true" Duration="2000" Delay="0" />
																	
																</SfProgressBar>
														}
														else
														{
															<p style="margin:5px; color:black;"><strong>0%</strong></p>
														}
														
													</td>
												</tr>
											}
								</table>
								</CarouselItem>
							}*@
					}
					}
					</SfCarousel>
					</CarouselItem>
			</SfCarousel>
		</div>		
	</div>
	<div class="col-md-3">
        <p style="color:purple;"><strong>MUCOBADI MIS @DateTime.Now.Year</strong></p>
        
		<marquee width="98%" direction="up" height="470px" scrollamount="2" ONMOUSEOVER="this.stop()" ONMOUSEOUT="this.start()">
			<img src="/Login/images/DashboardImages/Picture1.png" width="350" height="200"/>
			<img src="/Login/images/DashboardImages/Picture2.png" width="350" height="200"/>			
			<img src="/Login/images/DashboardImages/Picture3.png" width="350" height="200"/>
			<img src="/Login/images/DashboardImages/Picture4.png" width="350" height="200"/>
			<img src="/Login/images/DashboardImages/Picture5.png" width="350" height="200"/>
			<img src="/Login/images/DashboardImages/Picture6.png" width="350" height="200"/>			
			<img src="/Login/images/DashboardImages/Picture7.png" width="350" height="200"/>
			<img src="/Login/images/DashboardImages/Picture8.png" width="350" height="200"/>
			<img src="/Login/images/DashboardImages/Picture9.png" width="350" height="200"/>
			<img src="/Login/images/DashboardImages/Picture10.png" width="350" height="200"/>
			<img src="/Login/images/DashboardImages/Picture11.png" width="350" height="200"/>
		</marquee>
    </div>

</div>


	<div>
		<SfDialog @ref="@LoadingDialogue"
				  ID="LoadingDialog"
				  Height="auto"
				  Width="20%"
				  AllowDragging="true"
				  Target=".mainbody"
				  ShowCloseIcon="false"
				  IsModal=true
				  Visible="false">
			<DialogTemplates>
				<Content>
					<div style="padding:25px">
						<div class="loader">
							<div class="loader--dot"></div>
							<div class="loader--dot"></div>
							<div class="loader--dot"></div>
							<div class="loader--dot"></div>
							<div class="loader--dot"></div>
							<div class="loader--dot"></div>
							<div class="loader-Loading-text"></div>
							@*<div class="loader-Saving-text"></div>*@
						</div>
					</div>
				</Content>
				<FooterTemplate>

				</FooterTemplate>
			</DialogTemplates>
		</SfDialog>
	</div>

@code {
	#region Toasters
	public static string ToastContent { get; set; }
	SfToast ToastObj;
	SfToast DeleteToastObj;
	private string ToastPosition = "Right";
	private int AlarmTimeout { get; set; } = 120000;
	private List<ToastModel> Toast = new List<ToastModel>
	{
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
	#endregion Toasters

	string QuarterNo { get; set; }
	string Qtr = null;
	string PreviousQtr = null;
	string Yr = null;
	private List<ViewDashboardBeneficiaryIdentificationRegister> TotalHouseHoldsToVisit { get; set; }
	private List<spDashboardHouseHoldsGetAllResult> TotalHouseholdsVisited { get; set; }
	List<ViewDashboardOvcserveVsTarget> OvcServeData { get; set; }
	List<ViewDashboardTnrhivstatus> UnknownTNRData { get; set; }
	List<ViewATargets> TargetsData { get; set; }
	List<DasboardDistricts> data { get; set; }
	List<ViewDashboardBeneficiariesonIcarepivot> ICAREBeneficiariesData { get; set; }
	List<ViewDashboardOvcServiceReportingToolDetail> HomeVisitData { get; set; }
	List<AKnownRiskFactorsBinding> RiskFactorsData { get; set; }
	List<ViewDashboardHouseHoldNoVisits> HHNoVisitsData { get; set; }

	private Syncfusion.Blazor.Theme Theme { get; set; }
	private double[] Spacing = new double[] { 15, 15 };
	private double Ratio = 160 / 100;
	SearchPanel SearchModel { get; set; } = new();
	List<SeriesModel> AgeCategoryData { get; set; }
	List<SeriesModel> DistrictData { get; set; }
	List<SeriesModel> HIVStatusdData { get; set; }
	List<SeriesModel> ProgramStatusData { get; set; }
	List<SeriesModel> ClientsOnArtData { get; set; }
	List<SeriesModel> ClientsEligibleforVLTestDoneData { get; set; }
	List<SeriesModel> ClientsEligibleforVLData { get; set; }
	List<SeriesModel> ClientsVLTestResultsReceivedData { get; set; }
	List<SeriesModel> ClientsWithSuppressedResultsData { get; set; }
	List<SeriesModel> RiskFactorData { get; set; }
	List<DashboardModel> PositiveNegativeUnknownData { get; set; }
	List<DashboardModel> PositiveNegativeUnknownData18Plus { get; set; }
	public static double? TotalCALHIV { get; set; } = 0;
	List<SeriesModel>? NumberofActiveBeneficiariesData { get; set; }
	List<SeriesModel>? NumberofClientWithHealthServiceData { get; set; }
	List<SeriesModel>? NumberofClientWithHealthServiceDataChildren { get; set; }
	List<SeriesModel>? NumberClientsWithChildProtectionServiceData { get; set; }
	List<SeriesModel>? NumberClientsWithChildProtectionServiceData1 { get; set; }
	List<string> SeriesColors { get; set; } = new List<string>()
    {
        "#2485FA","#4d0702","#808285","#6002EE","#008b00","#262626","#424d44","#472b42","#1e4167","#3d1d00"
    };
	SfDialog? LoadingDialogue;

	public class OvcHivStat
	{
		public string DistrictDescription { get; set; }
		public double? OVCServ { get; set; }
		public double? HivPositive { get; set; }
		public double? HivNegative { get; set; }
		public double? Unknownstatus { get; set; }
		public double? UnknownTNR { get; set; }
		public double? CALHIV { get; set; }
	}
	public class OvcServeAgeGroups
	{
		public string DistrictDescription { get; set; }
		public double? OVCServTotal { get; set; }
		public double? Children { get; set; }
		public double? Adults { get; set; }
		public double? PercentageChildren { get; set; }
		public double? PercentageAdults { get; set; }
	}

	List<OvcHivStat> ovchivchildren = new List<OvcHivStat>();
	List<OvcHivStat> ovcadults = new List<OvcHivStat>();
	List<OvcServeAgeGroups> ovcservagegroups = new List<OvcServeAgeGroups>();

	public class OVCServeValueTargets
	{
		public double? TargetValue { get; set; }
		public int? DistrictId { get; set; }
		public int? FinancialYearId { get; set; }
		public string DistrictDescription { get; set; }
		public string FinancialYearDesc { get; set; }
		public int? VisitationMonth { get; set; }
		public int? Qtr { get; set; }
		public int? VisitationYear { get; set; }
		public double? ActualValue { get; set; }
		public double? Percentage { get; set; }
	}

	List<OVCServeValueTargets> TargetsList = new List<OVCServeValueTargets>();

	public class BeneficiaryRiskFactor
	{
		public string DistrictDescription { get; set; }
		public string KnownRiskFactorDescription { get; set; }
		public double? TotalNumber { get; set; }
		public int? DistrictId { get; set; }
		public double? AdolescentMother { get; set; }
		public double CALHIV  {get; set; }
		public double ChildofFSW  {get; set; }
		public double FSW  {get; set; }
		public double HEI { get; set; }
		public double LivinginHHwithAdolescentMother  {get; set; }
		public double LivinginHHwithFSW  {get; set; }
		public double LivinginHHwithHEI  {get; set; }
		public double LivinginHHwithPLHIV  {get; set; }
		public double LivinginHHwithSVAC { get; set; }
		public double Other { get; set; }
		public double PLHIV  {get; set; }
		public double SVAC  {get; set; }
	}
	List<BeneficiaryRiskFactor> beneficiaryriskfactorchildren = new List<BeneficiaryRiskFactor>();

	//Create Timer
	//https://www.educative.io/answers/how-to-create-a-timer-in-c-sharp
	//https://www.syncfusion.com/faq/blazor/general/how-do-i-force-page-reload-or-refresh-in-blazor
	//Timer t = new Timer(TimerCallback, null, 0, 1000);
	//private static void TimerCallback(Object o) {
 //     Console.WriteLine("In TimerCallback: " + DateTime.Now);
 //  }

	protected override async Task OnInitializedAsync()
	{
		try
		{	//Timer
			//System.Timers.Timer timer = new System.Timers.Timer();
   //         timer.Interval = 60000/*300000*/;
   //         timer.Elapsed += timer_Elapsed;
   //         timer.Start();
			await base.OnInitializedAsync();

			var currentMonth = DateTime.Now.Month;
			var currentYear = DateTime.Now.Year;

			
			SearchModel = new SearchPanel();
			SearchModel.Startdate = new DateTime(DateTime.Now.Year, 1, 1);
			SearchModel.Enddate = new DateTime(DateTime.Now.Year, 12, 31);

			int StartMonth = 1;
			int EndMonth = 12;

			if(currentMonth >= 1 && currentMonth <= 3)
			{
				QuarterNo = "TWO (JAN-MAR)";
				Qtr = "2";
				PreviousQtr = "1";
				StartMonth = 1;
				EndMonth = 3;
			}
			else if (currentMonth >= 4 && currentMonth <= 6)
			{
				QuarterNo = "THREE (APR-JUN)";
				Qtr = "3";
				PreviousQtr = "2";
				StartMonth = 4;
				EndMonth = 6;
			}
			else if (currentMonth >= 7 && currentMonth <= 9)
			{
				QuarterNo = "FOUR (JUL-SEP)";
				Qtr = "4";
				PreviousQtr = "3";
				StartMonth = 7;
				EndMonth = 9;
			}
			else if (currentMonth >= 10 && currentMonth <= 12)
			{
				QuarterNo = "ONE (OCT-DEC)";
				Qtr = "1";
				PreviousQtr = "4";
				StartMonth = 10;
				EndMonth = 12;
			}			

			//Datasources to load OVCServe Data and Targets

			TargetsData = dbcontext.ViewATargets.Where(o => o.FinancialYearDesc.Trim() == currentYear.ToString()).ToList();
			//OvcServeData = await dbcontext.spViewDashboardOvcserveVsTargetAsync(null, null, null, null, Qtr, currentYear.ToString(), null, null);

			OvcServeData =  dbcontext.ViewDashboardOvcserveVsTarget
			.Where(o => o.VisitationYear == currentYear && (o.Qtr.ToString() == Qtr 
			|| (o.Qtr.ToString() == PreviousQtr && o.ProgramParticipationId == 2)))
			.ToList();

			UnknownTNRData = dbcontext.ViewDashboardTnrhivstatus.Where(o => o.VisitationYear == currentYear && o.Qtr.ToString() == Qtr).ToList();
			ICAREBeneficiariesData = dbcontext.ViewDashboardBeneficiariesonIcarepivot.Where(o => o.VisitationYear == currentYear && (o.Qtr.ToString() == Qtr/*|| o.Qtr.ToString() == PreviousQtr*/)).ToList();
			RiskFactorsData = dbcontext.AKnownRiskFactorsBinding.ToList();
			HHNoVisitsData = dbcontext.ViewDashboardHouseHoldNoVisits.Where(o => o.VisitationYear == currentYear && o.Qtr == Qtr).ToList();
			HomeVisitData = dbcontext.ViewDashboardOvcServiceReportingToolDetail.Where(o => o.VisitationYear == currentYear && o.Qtr == Qtr).ToList();
			
			ovchivchildren = new List<OvcHivStat>();
			ovcadults = new List<OvcHivStat>();

			var _data = OvcServeData.Select(o => new { o.DistrictId, o.DistrictDescription,o.VisitationYear }).ToList().Distinct().ToList();

			//OvcHivStat
			foreach (var item in _data)
			{
				OvcHivStat mm = new OvcHivStat();
				mm.DistrictDescription = item.DistrictDescription;
				mm.OVCServ = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.AgeCategory == "0-17 Years").ToList().Count();
				mm.HivPositive = OvcServeData.Where(o=> o.DistrictId == item.DistrictId && o.HivstatusId == 1 && o.AgeCategory == "0-17 Years").ToList().Count();
				mm.HivNegative = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.HivstatusId == 2 && o.AgeCategory == "0-17 Years").ToList().Count();
				mm.Unknownstatus = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.HivstatusId == 3 && o.AgeCategory == "0-17 Years").ToList().Count();
				mm.UnknownTNR = UnknownTNRData.Where(o => o.DistrictId == item.DistrictId && o.AgeCategory == "0-17 Years").ToList().Count();

				if (mm.HivPositive > 0)
				{
					mm.CALHIV = Math.Round((((double)mm.HivPositive / (double)mm.OVCServ) * 100), 1);
				}
				ovchivchildren.Add(mm);
			}
			ovchivchildren = ovchivchildren.OrderByDescending(o=>o.CALHIV).ToList();

			//OvcHIVAdults
			foreach (var item in _data)
			{
				OvcHivStat mm = new OvcHivStat();
				mm.DistrictDescription = item.DistrictDescription;
				mm.OVCServ = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.AgeCategory == "18+ Years").ToList().Count();
				mm.HivPositive = OvcServeData.Where(o=> o.DistrictId == item.DistrictId && o.HivstatusId == 1 && o.AgeCategory == "18+ Years" && o.IsCareGiver == 1).ToList().Count();
				mm.HivNegative = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.HivstatusId == 2 && o.AgeCategory == "18+ Years" && o.IsCareGiver == 1).ToList().Count();
				mm.Unknownstatus = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.HivstatusId == 3 && o.AgeCategory == "18+ Years" && o.IsCareGiver == 1).ToList().Count();
				mm.UnknownTNR = UnknownTNRData.Where(o => o.DistrictId == item.DistrictId && o.AgeCategory == "18+ Years" && o.IsCareGiver == 1).ToList().Count();

				if (mm.HivPositive > 0)
				{
					mm.CALHIV = Math.Round((((double)mm.HivPositive / (double)mm.OVCServ) * 100), 1);
				}
				ovcadults.Add(mm);
			}
			ovcadults = ovcadults.OrderByDescending(o => o.CALHIV).ToList();

			//OVC_Serv Vs Target
			foreach (var item in _data)
			{
				int count = 0;
				if(OvcServeData!=null && OvcServeData.Count>0)
				{
					var ovcservefilter = OvcServeData.Where(o=>o.DistrictId == item.DistrictId && o.VisitationYear.ToString() == item.VisitationYear.ToString()).ToList();
					if(ovcservefilter!=null)
					{
						count = ovcservefilter.Count();
					}
				}

				OVCServeValueTargets mm = new OVCServeValueTargets();
				mm.DistrictDescription = item.DistrictDescription;
				var tvalue = TargetsData.FirstOrDefault(o => o.DistrictId == item.DistrictId && o.FinancialYearDesc == item.VisitationYear.ToString());
				if(tvalue!=null)
				{
					mm.TargetValue = tvalue.TargetValue;
				}
				else
				{
					mm.TargetValue = 0;
				}

				mm.ActualValue = count;

				if (mm.TargetValue > 0)
				{
					mm.Percentage = Math.Round((((double)mm.ActualValue / (double)mm.TargetValue) * 100), 1);
				}

				TargetsList.Add(mm);
			}
			TargetsList = TargetsList.OrderByDescending(o => o.Percentage).ToList();

			//Beneficiaries KnownRiskFactor
			foreach (var item in ICAREBeneficiariesData)
			{
				BeneficiaryRiskFactor mm = new BeneficiaryRiskFactor();
				mm.DistrictDescription = item.DistrictDescription;
				mm.AdolescentMother = item.AdolescentMother;
				mm.CALHIV = item.Calhiv;
				mm.ChildofFSW = item.ChildofFsw;
				mm.FSW = item.Fsw;
				mm.HEI = item.Hei;
				mm.LivinginHHwithAdolescentMother = item.LivinginHhwithAdolescentMother;
				mm.LivinginHHwithFSW = item.LivinginHhwithFsw;
				mm.LivinginHHwithHEI = item.LivinginHhwithHei;
				mm.LivinginHHwithPLHIV = item.LivinginHhwithPlhiv;
				mm.LivinginHHwithSVAC = item.LivinginHhwithSvac;
				mm.Other = item.Other;
				mm.PLHIV = item.Plhiv;
				mm.SVAC = item.Svac;

				beneficiaryriskfactorchildren.Add(mm);
			}
			beneficiaryriskfactorchildren = beneficiaryriskfactorchildren.OrderBy(o=>o.DistrictDescription).ThenByDescending(o => o.TotalNumber).ToList();

			//OvcServeAgeGroups
			foreach (var item in _data)
			{
				OvcServeAgeGroups mm = new OvcServeAgeGroups();
				mm.DistrictDescription = item.DistrictDescription;
				mm.OVCServTotal = OvcServeData.Where(o => o.DistrictId == item.DistrictId).ToList().Count();
				mm.Children = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.AgeCategory == "0-17 Years").ToList().Count();
				mm.Adults = OvcServeData.Where(o => o.DistrictId == item.DistrictId && o.AgeCategory == "18+ Years" && o.IsCareGiver == 1).ToList().Count();

				if (mm.OVCServTotal > 0)
				{
					mm.PercentageChildren = Math.Round((((double)mm.Children / (double)mm.OVCServTotal) * 100), 1);
					mm.PercentageAdults = Math.Round((((double)mm.Adults / (double)mm.OVCServTotal) * 100), 1);
				}
				ovcservagegroups.Add(mm);
			}
			ovcservagegroups = ovcservagegroups.OrderByDescending(o=>o.PercentageAdults).ThenByDescending(o=>o.PercentageChildren).ToList();

			await LoadDashboards(StartMonth, EndMonth, currentYear, Qtr);
		}
		catch (Exception ex)
		{
			await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
		}

		finally 
		{
			//await LoadingDialogue.HideAsync();
		}
	}

	//async void timer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
 //   {
 //       await LoadDashboards(0, 0, 0,null);
 //   }

	private void ClearSearchBtnClick()
	{
		SearchModel = new();
		//MainQuery = new Query();
	}

	private async Task SearchDashboard()
	{
		if(!SearchModel.Startdate.HasValue || !SearchModel.Enddate.HasValue)
		{
			ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please select the start and end date.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });			
		}
		else
		{
			int StartMonth = SearchModel.Startdate.Value.Month;
			int EndMonth = SearchModel.Enddate.Value.Month;

			int currentYear = SearchModel.Startdate.Value.Year;

			if (StartMonth >= 1 && EndMonth <= 3)
			{
				QuarterNo = "TWO (JAN-MAR)";
				Qtr = "2";
				//StartMonth = 1;
				//EndMonth = 3;
			}
			else if (StartMonth >= 4 && EndMonth <= 6)
			{
				QuarterNo = "THREE (APR-JUN)";
				Qtr = "3";
				//StartMonth = 4;
				//EndMonth = 6;
			}
			else if (StartMonth >= 7 && EndMonth <= 9)
			{
				QuarterNo = "FOUR (JUL-SEP)";
				Qtr = "4";
				//StartMonth = 7;
				//EndMonth = 9;
			}
			else if (StartMonth >= 10 && EndMonth <= 12)
			{
				QuarterNo = "ONE (OCT-DEC)";
				Qtr = "1";
				//StartMonth = 10;
				//EndMonth = 12;
			}

			await LoadDashboards(StartMonth, EndMonth, currentYear,Qtr);
		}
	}

	private async Task LoadDashboards(int StartMonth, int EndMonth, int currentYear, string Qtr)
	{
		try
		{
			//await LoadingDialogue.ShowAsync();
			Random rand = new Random();
			var ProgramStatus = dbcontext.ViewDashboardOvcServeIdentification
			.Where(o => o.VisitationMonth >= StartMonth && o.VisitationMonth <= EndMonth && o.VisitationYear == currentYear)
			.AsNoTracking().ToList();

			var programparrticipation = dbcontext.AProgramParticipationStatus.ToList();
			if (ProgramStatus != null)
			{
				ProgramStatusData = new List<SeriesModel>();
				AgeCategoryData = new List<SeriesModel>();
				RiskFactorData = new List<SeriesModel>();

				//Total number of HHs on ICARE By Program Participation and Gender
				var genderdata = ProgramStatus.Select(o => new { o.GenderId, o.GenderDescription }).ToList().Distinct().ToList();
				var mProgramStatusData = new SeriesModel();
				mProgramStatusData.ChartType = ChartSeriesType.Column;
				mProgramStatusData.SeriesName = "Overall";
				//mProgramStatusData.GroupBy = _item.GenderDescription;
				rand = new Random();
				int _index = rand.Next(0, (SeriesColors.Count() - 1));
				mProgramStatusData.SeriesColor = SeriesColors[_index];
				mProgramStatusData.ColumnWidth = 0.7;
				mProgramStatusData.YAxisTitle = "Number";
				mProgramStatusData.Interval = 1000;
				mProgramStatusData.Datasource = new List<DashboardModel>();

				foreach (var item in programparrticipation)
				{
					mProgramStatusData.Datasource.Add(new DashboardModel()
					{
						ColumnX = item.ProgramParticipationDescription,
						ColumnY = ProgramStatus.Where(o => o.ProgramParticipationId == item.ProgramParticipationId).ToList().Count
					});
				}
				ProgramStatusData.Add(mProgramStatusData);

				//Dissaggregate By Gender
				//foreach (var _item in genderdata)
				//{
				//	var _ProgramStatusData = new SeriesModel();
				//	_ProgramStatusData.ChartType = ChartSeriesType.Column;
				//	_ProgramStatusData.SeriesName = _item.GenderDescription;
				//	_ProgramStatusData.GroupBy = _item.GenderDescription;
				//	rand = new Random();
				//	int index = rand.Next(0, (SeriesColors.Count() - 1));
				//	_ProgramStatusData.SeriesColor = SeriesColors[index];
				//	_ProgramStatusData.ColumnWidth = 0.7;
				//	_ProgramStatusData.YAxisTitle = "Number";
				//	_ProgramStatusData.Interval = 1000;
				//	_ProgramStatusData.Datasource = new List<DashboardModel>();

				//	foreach (var item in programparrticipation)
				//	{
				//				_ProgramStatusData.Datasource.Add(new DashboardModel()
				//				{
				//					ColumnX = item.ProgramParticipationDescription,
				//					ColumnY = ProgramStatus.Where(o => o.ProgramParticipationId == item.ProgramParticipationId && o.GenderId == _item.GenderId).ToList().Count
				//				});
				//	}
				//	ProgramStatusData.Add(_ProgramStatusData);
				//}

				//Total number of HHs on ICARE By District

				DistrictData = new List<SeriesModel>();
				var _DistrictData = new SeriesModel();
				_DistrictData.ChartType = ChartSeriesType.Column;
				_DistrictData.SeriesName = "District";
				rand = new Random();
				int indexnew = rand.Next(0, (SeriesColors.Count() - 1));
				_DistrictData.SeriesColor = SeriesColors[indexnew];
				_DistrictData.ColumnWidth = 0.7;
				_DistrictData.YAxisTitle = "Number";
				_DistrictData.Interval = 1000;
				_DistrictData.Datasource = new List<DashboardModel>();
				var category = ProgramStatus.Select(o => o.DistrictDescription).ToList().Distinct().ToList();
				foreach (var item in category)
				{
					_DistrictData.Datasource.Add(new DashboardModel()
					{
							ColumnX = item,
							ColumnY = ProgramStatus.Where(o => o.DistrictDescription == item).ToList().Count
					});
				}
				DistrictData.Add(_DistrictData);	

				//Total number of Beneficiaries on ICARE - By Known Risk Factor
				var riskcategory = dbcontext.AKnownRiskFactors.ToList();

				var riskdata = ProgramStatus.Select(o => new { o.KnownRiskFactorId, o.KnownRiskFactorDescription }).Distinct().ToList();

				var _RiskFactorData = new SeriesModel();
				_RiskFactorData.ChartType = ChartSeriesType.Column;
				_RiskFactorData.SeriesName = "Known Risk Factors";
				rand = new Random();
				int _riskindex = rand.Next(0, (SeriesColors.Count() - 1));
				_RiskFactorData.SeriesColor = SeriesColors[_riskindex];
				_RiskFactorData.ColumnWidth = 0.7;
				_RiskFactorData.YAxisTitle = "Number";
				_RiskFactorData.Interval = 1000;
				_RiskFactorData.Datasource = new List<DashboardModel>();

				foreach (var item in riskcategory)
				{
					_RiskFactorData.Datasource.Add(new DashboardModel()
						{
							ColumnX = item.KnownRiskFactorDescription,
							ColumnY = ProgramStatus.Where(o => o.KnownRiskFactorId == item.KnownRiskFactorId).ToList().Count

						});
				}
				RiskFactorData.Add(_RiskFactorData);
			}

			//PositiveNegativeUnknown 0-17
			PositiveNegativeUnknownData = new List<DashboardModel>();
			var _PositiveNegativeUnknownData = new DashboardModel();
			rand = new Random();
			int indexstatus = rand.Next(0, (SeriesColors.Count() - 1));

			var riskstatus = ProgramStatus.Select(o => o.HivstatusDescription).ToList().Distinct().ToList();

			foreach (var item in riskstatus)
			{
				var overrall = ProgramStatus.ToList().Count;
				var desc = ProgramStatus.Where(o => o.HivstatusDescription == item && o.AgeCategory == "0-17 Years").ToList().Count;

				if (overrall>0)
				{
					var totalpercentage = ((double)(desc) / (double)(overrall)) * 100;

					PositiveNegativeUnknownData.Add(new DashboardModel()
							{
								ColumnX = item,
								ColumnY = Math.Round(totalpercentage, 1),
								DataLabelMappingName = item + " : " + Math.Round(totalpercentage, 1) + " % " + desc
							});
				}

			}

			//PositiveNegativeUnknown 18+
			PositiveNegativeUnknownData18Plus = new List<DashboardModel>();
			var _PositiveNegativeUnknownData18Plus = new DashboardModel();
			rand = new Random();
			int indexstatus18Plus = rand.Next(0, (SeriesColors.Count() - 1));

			var riskstatus18Plus = ProgramStatus.Select(o => o.HivstatusDescription).ToList().Distinct().ToList();

			foreach (var item in riskstatus18Plus)
			{
				var overrall = ProgramStatus.ToList().Count;					
				var desc = ProgramStatus.Where(o => o.HivstatusDescription == item && o.AgeCategory == "18+ Years").ToList().Count;

				if (overrall>0)
				{
					var totalpercentage = ((double)(desc)/(double)(overrall))*100;

					PositiveNegativeUnknownData18Plus.Add(new DashboardModel()
							{
								ColumnX = item,
								ColumnY = Math.Round(totalpercentage, 1),
								DataLabelMappingName = item + " : " + Math.Round(totalpercentage, 1) + " % " + desc
							});
				}

			}


			//OvcHIVPositiveClients
			var OVC_HIV = dbcontext.ViewDashboardOvcHiv.
			Where(o => o.FollowUpMonth >= StartMonth && o.FollowUpMonth <= EndMonth && o.FollowUpYear == currentYear).AsNoTracking().ToList();
			if (OVC_HIV != null)
			{
				var genderdata = OVC_HIV.Select(o => new { o.GenderId, o.GenderDescription }).ToList().Distinct().ToList();
				HIVStatusdData = new List<SeriesModel>();
				var _HIVStatusdData = new SeriesModel();
				_HIVStatusdData.ChartType = ChartSeriesType.Column;
				_HIVStatusdData.SeriesName = "Overall";
				rand = new Random();
				int index = rand.Next(0, (SeriesColors.Count() - 1));
				_HIVStatusdData.SeriesColor = SeriesColors[index];
				_HIVStatusdData.ColumnWidth = 0.7;
				_HIVStatusdData.YAxisTitle = "Number";
				_HIVStatusdData.Interval = 1000;
				_HIVStatusdData.Datasource = new List<DashboardModel>();
				var category = OVC_HIV.Select(o => o.AgeCategory).ToList().Distinct().ToList();

				foreach (var item in category)
				{
					_HIVStatusdData.Datasource.Add(new DashboardModel()
							{
								ColumnX = item,
								ColumnY = OVC_HIV.Where(o => o.AgeCategory == item).ToList().Count
							});
				}
				HIVStatusdData.Add(_HIVStatusdData);

				foreach (var item in genderdata)
				{
					var _gHIVStatusdData = new SeriesModel();
					_gHIVStatusdData.ChartType = ChartSeriesType.Column;
					_gHIVStatusdData.SeriesName = item.GenderDescription;
					_gHIVStatusdData.GroupBy = item.GenderDescription;
					rand = new Random();
					int gindex = rand.Next(0, (SeriesColors.Count() - 1));
					_gHIVStatusdData.SeriesColor = SeriesColors[gindex];
					_gHIVStatusdData.ColumnWidth = 0.7;
					_gHIVStatusdData.YAxisTitle = "Number";
					_gHIVStatusdData.Interval = 1000;
					_gHIVStatusdData.Datasource = new List<DashboardModel>();
					var gcategory = OVC_HIV.Select(o => o.AgeCategory).ToList().Distinct().ToList();

					foreach (var _item in category)
					{
						_gHIVStatusdData.Datasource.Add(new DashboardModel()
								{
									ColumnX = _item,
									ColumnY = OVC_HIV.Where(o => o.AgeCategory == _item && o.GenderId == item.GenderId).ToList().Count
								});
					}
					HIVStatusdData.Add(_gHIVStatusdData);
				}

			}

			//OvcHIVPositiveClientsOnArt
			var ClientsOnArt = dbcontext.ViewDashboardOvcHiv.
			Where(o => o.FollowUpMonth >= StartMonth && o.FollowUpMonth <= EndMonth && o.FollowUpYear == currentYear).AsNoTracking().ToList();
			if (ClientsOnArt != null)
			{
				var genderdata = ClientsOnArt.Select(o => new { o.GenderId, o.GenderDescription }).ToList().Distinct().ToList();
				ClientsOnArtData = new List<SeriesModel>();
				var _ClientsOnArtData = new SeriesModel();
				_ClientsOnArtData.ChartType = ChartSeriesType.Column;
				_ClientsOnArtData.SeriesName = "Overall";
				rand = new Random();
				int index = rand.Next(0, (SeriesColors.Count() - 1));
				_ClientsOnArtData.SeriesColor = SeriesColors[index];
				_ClientsOnArtData.ColumnWidth = 0.7;
				_ClientsOnArtData.YAxisTitle = "Number";
				_ClientsOnArtData.Interval = 1000;
				_ClientsOnArtData.Datasource = new List<DashboardModel>();
				var category = ClientsOnArt.Select(o => o.AgeCategory).ToList().Distinct().ToList();
				foreach (var item in category)
				{
					_ClientsOnArtData.Datasource.Add(new DashboardModel()
							{
								ColumnX = item,
								ColumnY = OVC_HIV.Where(o => o.AgeCategory == item && o.OnArt ==1).ToList().Count
							});
				}
				ClientsOnArtData.Add(_ClientsOnArtData);
				foreach (var item in genderdata)
				{
					var _gClientsOnArtData = new SeriesModel();
					_gClientsOnArtData.ChartType = ChartSeriesType.Column;
					_gClientsOnArtData.SeriesName = item.GenderDescription;
					_gClientsOnArtData.GroupBy = item.GenderDescription;
					rand = new Random();
					int gindex = rand.Next(0, (SeriesColors.Count() - 1));
					_gClientsOnArtData.SeriesColor = SeriesColors[gindex];
					_gClientsOnArtData.ColumnWidth = 0.7;
					_gClientsOnArtData.YAxisTitle = "Number";
					_gClientsOnArtData.Interval = 1000;
					_gClientsOnArtData.Datasource = new List<DashboardModel>();
					var gcategory = ClientsOnArt.Select(o => o.AgeCategory).ToList().Distinct().ToList();
					foreach (var _item in category)
					{
						_gClientsOnArtData.Datasource.Add(new DashboardModel()
								{
									ColumnX = _item,
									ColumnY = ClientsOnArt.Where(o => o.AgeCategory == _item && o.GenderId == item.GenderId && o.OnArt == 1).ToList().Count
								});
					}
					ClientsOnArtData.Add(_gClientsOnArtData);
				}
			}

			//OvcHIVPositiveClientsEligibleforVL
			var ClientsEligibleforVL = dbcontext.ViewDashboardOvcHiv.
			Where(o => o.FollowUpMonth >= StartMonth && o.FollowUpMonth <= EndMonth && o.FollowUpYear == currentYear).AsNoTracking().ToList();
			if (ClientsEligibleforVL != null)
			{
				var genderdata = ClientsEligibleforVL.Select(o => new { o.GenderId, o.GenderDescription }).ToList().Distinct().ToList();
				ClientsEligibleforVLData = new List<SeriesModel>();
				var _ClientsEligibleforVLData = new SeriesModel();
				_ClientsEligibleforVLData.ChartType = ChartSeriesType.Column;
				_ClientsEligibleforVLData.SeriesName = "Overall";
				rand = new Random();
				int index = rand.Next(0, (SeriesColors.Count() - 1));
				_ClientsEligibleforVLData.SeriesColor = SeriesColors[index];
				_ClientsEligibleforVLData.ColumnWidth = 0.7;
				_ClientsEligibleforVLData.YAxisTitle = "Number";
				_ClientsEligibleforVLData.Interval = 1000;
				_ClientsEligibleforVLData.Datasource = new List<DashboardModel>();
				var category = ClientsEligibleforVL.Select(o => o.AgeCategory).ToList().Distinct().ToList();
				foreach (var item in category)
				{
					_ClientsEligibleforVLData.Datasource.Add(new DashboardModel()
							{
								ColumnX = item,
								ColumnY = ClientsEligibleforVL.Where(o => o.AgeCategory == item && o.IsClientEligibleForViralload == 1).ToList().Count
							});
				}
				ClientsEligibleforVLData.Add(_ClientsEligibleforVLData);
				foreach (var item in genderdata)
				{
					var _gClientsEligibleforVLData = new SeriesModel();
					_gClientsEligibleforVLData.ChartType = ChartSeriesType.Column;
					_gClientsEligibleforVLData.SeriesName = item.GenderDescription;
					_gClientsEligibleforVLData.GroupBy = item.GenderDescription;
					rand = new Random();
					int gindex = rand.Next(0, (SeriesColors.Count() - 1));
					_gClientsEligibleforVLData.SeriesColor = SeriesColors[gindex];
					_gClientsEligibleforVLData.ColumnWidth = 0.7;
					_gClientsEligibleforVLData.YAxisTitle = "Number";
					_gClientsEligibleforVLData.Interval = 1000;
					_gClientsEligibleforVLData.Datasource = new List<DashboardModel>();
					var gcategory = ClientsEligibleforVL.Select(o => o.AgeCategory).ToList().Distinct().ToList();

					foreach (var _item in category)
					{
						_gClientsEligibleforVLData.Datasource.Add(new DashboardModel()
								{
									ColumnX = _item,
									ColumnY = ClientsEligibleforVL.Where(o => o.AgeCategory == _item && o.GenderId == item.GenderId && o.IsClientEligibleForViralload == 1).ToList().Count
								});
					}
					ClientsEligibleforVLData.Add(_gClientsEligibleforVLData);
				}
			}

			//OvcHIVPositiveClientswhoseVLTestDone
			var ClientsEligibleforVLTestDone = dbcontext.ViewDashboardOvcHiv.
			Where(o => o.FollowUpMonth >= StartMonth && o.FollowUpMonth <= EndMonth && o.FollowUpYear == currentYear).AsNoTracking().ToList();
			if (ClientsEligibleforVLTestDone != null)
			{
				var genderdata = ClientsEligibleforVLTestDone.Select(o => new { o.GenderId, o.GenderDescription }).ToList().Distinct().ToList();
				ClientsEligibleforVLTestDoneData = new List<SeriesModel>();
				var _ClientsEligibleforVLTestDoneData = new SeriesModel();
				_ClientsEligibleforVLTestDoneData.ChartType = ChartSeriesType.Column;
				_ClientsEligibleforVLTestDoneData.SeriesName = "Overall";
				rand = new Random();
				int index = rand.Next(0, (SeriesColors.Count() - 1));
				_ClientsEligibleforVLTestDoneData.SeriesColor = SeriesColors[index];
				_ClientsEligibleforVLTestDoneData.ColumnWidth = 0.7;
				_ClientsEligibleforVLTestDoneData.YAxisTitle = "Number";
				_ClientsEligibleforVLTestDoneData.Interval = 1000;
				_ClientsEligibleforVLTestDoneData.Datasource = new List<DashboardModel>();
				var category = ClientsEligibleforVLTestDone.Select(o => o.AgeCategory).ToList().Distinct().ToList();
				foreach (var item in category)
				{
					_ClientsEligibleforVLTestDoneData.Datasource.Add(new DashboardModel()
							{
								ColumnX = item,
								ColumnY = ClientsEligibleforVLTestDone.Where(o => o.AgeCategory == item && o.ViralloadTestDone == 1).ToList().Count
							});
				}
				ClientsEligibleforVLTestDoneData.Add(_ClientsEligibleforVLTestDoneData);
				foreach (var item in genderdata)
				{
					var _gClientsEligibleforVLTestDoneData = new SeriesModel();
					_gClientsEligibleforVLTestDoneData.ChartType = ChartSeriesType.Column;
					_gClientsEligibleforVLTestDoneData.SeriesName = item.GenderDescription;
					_gClientsEligibleforVLTestDoneData.GroupBy = item.GenderDescription;
					rand = new Random();
					int gindex = rand.Next(0, (SeriesColors.Count() - 1));
					_gClientsEligibleforVLTestDoneData.SeriesColor = SeriesColors[gindex];
					_gClientsEligibleforVLTestDoneData.ColumnWidth = 0.7;
					_gClientsEligibleforVLTestDoneData.YAxisTitle = "Number";
					_gClientsEligibleforVLTestDoneData.Interval = 1000;
					_gClientsEligibleforVLTestDoneData.Datasource = new List<DashboardModel>();
					var gcategory = ClientsEligibleforVLTestDone.Select(o => o.AgeCategory).ToList().Distinct().ToList();
					foreach (var _item in category)
					{
						_gClientsEligibleforVLTestDoneData.Datasource.Add(new DashboardModel()
								{
									ColumnX = _item,
									ColumnY = ClientsEligibleforVLTestDone.Where(o => o.AgeCategory == _item && o.GenderId == item.GenderId && o.ViralloadTestDone == 1).ToList().Count
								});
					}
					ClientsEligibleforVLTestDoneData.Add(_gClientsEligibleforVLTestDoneData);
				}
			}

			//OvcHIVPositiveClientswhoseVLTestResultsReceived
			var ClientsWhoseVLTestResultsReceived = dbcontext.ViewDashboardOvcHiv.
			Where(o => o.FollowUpMonth >= StartMonth && o.FollowUpMonth <= EndMonth && o.FollowUpYear == currentYear).AsNoTracking().ToList();
			if (ClientsWhoseVLTestResultsReceived != null)
			{
				var genderdata = ClientsWhoseVLTestResultsReceived.Select(o => new { o.GenderId, o.GenderDescription}).ToList().Distinct().ToList();
				ClientsVLTestResultsReceivedData = new List<SeriesModel>();
				var _ClientsVLTestResultsReceivedData = new SeriesModel();
				_ClientsVLTestResultsReceivedData.ChartType = ChartSeriesType.Column;
				_ClientsVLTestResultsReceivedData.SeriesName = "Overall";
				rand = new Random();
				int index = rand.Next(0, (SeriesColors.Count() - 1));
				_ClientsVLTestResultsReceivedData.SeriesColor = SeriesColors[index];
				_ClientsVLTestResultsReceivedData.ColumnWidth = 0.7;
				_ClientsVLTestResultsReceivedData.YAxisTitle = "Number";
				_ClientsVLTestResultsReceivedData.Interval = 1000;
				_ClientsVLTestResultsReceivedData.Datasource = new List<DashboardModel>();
				var category = ClientsWhoseVLTestResultsReceived.Select(o => o.AgeCategory).ToList().Distinct().ToList();
				foreach (var item in category)
				{
					_ClientsVLTestResultsReceivedData.Datasource.Add(new DashboardModel()
							{
								ColumnX = item,
								ColumnY = ClientsWhoseVLTestResultsReceived.Where(o => o.AgeCategory == item && o.ViralloadResultsReceived == 1).ToList().Count
							});
				}
				ClientsVLTestResultsReceivedData.Add(_ClientsVLTestResultsReceivedData);
				foreach (var item in genderdata)
				{
					var _gClientsVLTestResultsReceivedData = new SeriesModel();
					_gClientsVLTestResultsReceivedData.ChartType = ChartSeriesType.Column;
					_gClientsVLTestResultsReceivedData.SeriesName = item.GenderDescription;
					_gClientsVLTestResultsReceivedData.GroupBy = item.GenderDescription;
					rand = new Random();
					int gindex = rand.Next(0, (SeriesColors.Count() - 1));
					_gClientsVLTestResultsReceivedData.SeriesColor = SeriesColors[gindex];
					_gClientsVLTestResultsReceivedData.ColumnWidth = 0.7;
					_gClientsVLTestResultsReceivedData.YAxisTitle = "Number";
					_gClientsVLTestResultsReceivedData.Interval = 1000;
					_gClientsVLTestResultsReceivedData.Datasource = new List<DashboardModel>();
					var gcategory = ClientsWhoseVLTestResultsReceived.Select(o => o.AgeCategory).ToList().Distinct().ToList();
					foreach (var _item in category)
					{
						_gClientsVLTestResultsReceivedData.Datasource.Add(new DashboardModel()
								{
									ColumnX = _item,
									ColumnY = ClientsWhoseVLTestResultsReceived.Where(o => o.AgeCategory == _item && o.GenderId == item.GenderId && o.ViralloadResultsReceived == 1).ToList().Count
								});
					}
					ClientsVLTestResultsReceivedData.Add(_gClientsVLTestResultsReceivedData);
				}
			}

			//OvcHIVPositiveClientswithSuppressedResults
			var ClientsWithSuppressedResults = dbcontext.ViewDashboardOvcHiv.
			Where(o => o.FollowUpMonth >= StartMonth && o.FollowUpMonth <= EndMonth && o.FollowUpYear == currentYear).AsNoTracking().ToList();
			if (ClientsWithSuppressedResults != null)
			{
				var genderdata = ProgramStatus.Select(o => new { o.GenderId, o.GenderDescription }).ToList().Distinct().ToList();
				ClientsWithSuppressedResultsData = new List<SeriesModel>();
				var _ClientsWithSuppressedResultsData = new SeriesModel();
				_ClientsWithSuppressedResultsData.ChartType = ChartSeriesType.Column;
				_ClientsWithSuppressedResultsData.SeriesName = "Age Grouping";
				rand = new Random();
				int index = rand.Next(0, (SeriesColors.Count() - 1));
				_ClientsWithSuppressedResultsData.SeriesColor = SeriesColors[index];
				_ClientsWithSuppressedResultsData.ColumnWidth = 0.7;
				_ClientsWithSuppressedResultsData.YAxisTitle = "Number";
				_ClientsWithSuppressedResultsData.Interval = 1000;
				_ClientsWithSuppressedResultsData.Datasource = new List<DashboardModel>();
				var category = OVC_HIV.Select(o => o.AgeCategory).ToList().Distinct().ToList();
				foreach (var item in category)
				{
					_ClientsWithSuppressedResultsData.Datasource.Add(new DashboardModel()
							{
								ColumnX = item,
								ColumnY = OVC_HIV.Where(o => o.AgeCategory == item && o.ViralLoadSuppressedId == 1).ToList().Count
							});
				}
				ClientsWithSuppressedResultsData.Add(_ClientsWithSuppressedResultsData);
				foreach (var item in genderdata)
				{
					var _gClientsWithSuppressedResultsData = new SeriesModel();
					_gClientsWithSuppressedResultsData.ChartType = ChartSeriesType.Column;
					_gClientsWithSuppressedResultsData.SeriesName = item.GenderDescription;
					_gClientsWithSuppressedResultsData.GroupBy = item.GenderDescription;
					rand = new Random();
					int gindex = rand.Next(0, (SeriesColors.Count() - 1));
					_gClientsWithSuppressedResultsData.SeriesColor = SeriesColors[gindex];
					_gClientsWithSuppressedResultsData.ColumnWidth = 0.7;
					_gClientsWithSuppressedResultsData.YAxisTitle = "Number";
					_gClientsWithSuppressedResultsData.Interval = 1000;
					_gClientsWithSuppressedResultsData.Datasource = new List<DashboardModel>();
					var gcategory = ClientsWithSuppressedResults.Select(o => o.AgeCategory).ToList().Distinct().ToList();
					foreach (var _item in category)
					{
						_gClientsWithSuppressedResultsData.Datasource.Add(new DashboardModel()
								{
									ColumnX = _item,
									ColumnY = ClientsWithSuppressedResults.Where(o => o.AgeCategory == _item && o.GenderId == item.GenderId && o.ViralLoadSuppressedId == 1).ToList().Count
								});
					}
					ClientsWithSuppressedResultsData.Add(_gClientsWithSuppressedResultsData);
				}
			}


			//Total number of Active beneficiaries
			var NoActiveOfActiveBeneficiaries = dbcontext.ViewDashboardOvcServiceReportingToolDetail.
				Where(o => o.VisitationMonth >= StartMonth && o.VisitationMonth <= EndMonth && o.VisitationYear == currentYear).AsNoTracking().ToList();
			if (NoActiveOfActiveBeneficiaries != null)
			{
				NumberofActiveBeneficiariesData = new List<SeriesModel>();
				var category = NoActiveOfActiveBeneficiaries.Select(o => o.AgeCategory).ToList().Distinct().ToList();
				foreach (var item in category)
				{
					var _NumberofActiveBeneficiariesData = new SeriesModel();
					_NumberofActiveBeneficiariesData.ChartType = ChartSeriesType.StackingColumn;
					_NumberofActiveBeneficiariesData.SeriesName = item;
					rand = new Random();
					int index = rand.Next(0, (SeriesColors.Count() - 1));
					_NumberofActiveBeneficiariesData.SeriesColor = SeriesColors[index];
					_NumberofActiveBeneficiariesData.ColumnWidth = 0.7;
					_NumberofActiveBeneficiariesData.YAxisTitle = "Number";
					_NumberofActiveBeneficiariesData.Interval = 1000;
					_NumberofActiveBeneficiariesData.Datasource = new List<DashboardModel>();
					_NumberofActiveBeneficiariesData.Datasource.Add(new DashboardModel()
							{
								ColumnX = "OVC_SERV",
								ColumnY = NoActiveOfActiveBeneficiaries.Where(o => o.AgeCategory == item).ToList().Count
							});
					NumberofActiveBeneficiariesData.Add(_NumberofActiveBeneficiariesData);
				}
				//HIV STATUS DATA
				var hivstatus = NoActiveOfActiveBeneficiaries.Select(o => o.HivstatusDescription).ToList().Distinct().ToList();
				foreach (var _item in hivstatus)
				{
					var _HIVStatusData = new SeriesModel();
					_HIVStatusData.ChartType = ChartSeriesType.StackingColumn;
					_HIVStatusData.SeriesName = _item;
					rand = new Random();
					int _index = rand.Next(0, (SeriesColors.Count() - 1));
					_HIVStatusData.SeriesColor = SeriesColors[_index];
					_HIVStatusData.ColumnWidth = 0.7;
					_HIVStatusData.YAxisTitle = "Number";
					_HIVStatusData.Interval = 1000;
					_HIVStatusData.Datasource = new List<DashboardModel>();
					_HIVStatusData.Datasource.Add(new DashboardModel()
							{
								ColumnX = "OVC_HIVSTAT",

								ColumnY = NoActiveOfActiveBeneficiaries.Where(o => o.HivstatusDescription == _item && o.AgeCategory == "Children").ToList().Count
							});
					NumberofActiveBeneficiariesData.Add(_HIVStatusData);

				}
				//Eligibe
				var eligible = dbcontext.ViewVlrVlcVlsDashboard.
						Where(o => o.FollowUpDateMonth >= StartMonth && o.FollowUpDateMonth <= EndMonth && o.FollowUpDateYear == currentYear).AsNoTracking().ToList();
				//VLR_VLC_VLS_Dashboard
				var vlc_vlr = dbcontext.ViewVlrVlcVlsDashboard.
							Where(o => o.FollowUpDateMonth >= StartMonth && o.FollowUpDateMonth <= EndMonth && o.FollowUpDateYear == currentYear).AsNoTracking().ToList();
				var supressed = dbcontext.AViralLoadSuppressed.Where(o => (o.ViralLoadSuppressedId == 3) || (o.ViralLoadSuppressedId == 4)).ToList();
				if (vlc_vlr != null)
				{
					var _vlc = vlc_vlr.Select(o => o.ViralLoadSuppressedDescription).ToList().Distinct().ToList();
					foreach (var _item1 in supressed)
					{
						var _VLRData = new SeriesModel();
						_VLRData.ChartType = ChartSeriesType.StackingColumn;
						_VLRData.SeriesName = _item1.ViralLoadSuppressedDescription;
						rand = new Random();
						int _index1 = rand.Next(0, (SeriesColors.Count() - 1));
						_VLRData.SeriesColor = SeriesColors[_index1];
						_VLRData.ColumnWidth = 0.7;
						_VLRData.YAxisTitle = "Number";
						_VLRData.Interval = 1000;
						_VLRData.Datasource = new List<DashboardModel>();

						_VLRData.Datasource.Add(new DashboardModel()
								{
									ColumnX = "VLR/VLC",
									ColumnY = vlc_vlr.Where(o => o.ViralLoadSuppressedId == _item1.ViralLoadSuppressedId && o.AgeCategory == "Children" && o.IsClientEligibleForViralload == 1).ToList().Count
								});
						NumberofActiveBeneficiariesData.Add(_VLRData);
					}
				}
				//VLC_Dashboard
				var vlcs = dbcontext.ViewVlrVlcVlsDashboard.
						Where(o => o.FollowUpDateMonth >= StartMonth && o.FollowUpDateMonth <= EndMonth && o.FollowUpDateYear == currentYear).AsNoTracking().ToList();
				var vlcsuppresed = dbcontext.AViralLoadSuppressed.Where(o => (o.ViralLoadSuppressedId == 1) || (o.ViralLoadSuppressedId == 2)).ToList();
				if (vlcs != null)
				{
					//	var _vlc = vlc_vlr.Select(o => o.ViralLoadSuppressedDescription).ToList().Distinct().ToList();
					foreach (var _item2 in vlcsuppresed)
					{
						var _VLCData = new SeriesModel();
						_VLCData.ChartType = ChartSeriesType.StackingColumn;
						_VLCData.SeriesName = _item2.ViralLoadSuppressedDescription;
						rand = new Random();
						int _index1 = rand.Next(0, (SeriesColors.Count() - 1));
						_VLCData.SeriesColor = SeriesColors[_index1];
						_VLCData.ColumnWidth = 0.7;
						_VLCData.YAxisTitle = "Number";
						_VLCData.Interval = 1000;
						_VLCData.Datasource = new List<DashboardModel>();
						_VLCData.Datasource.Add(new DashboardModel()
								{
									ColumnX = "VLS",
									ColumnY = vlcs.Where(o => o.ViralLoadSuppressedId == _item2.ViralLoadSuppressedId && o.AgeCategory == "Children" && o.IsClientEligibleForViralload == 1).ToList().Count
								});
						NumberofActiveBeneficiariesData.Add(_VLCData);
					}
				}
			}

			//Number of Clients with Child-protection service(StackedColumn)
			var NoChildProtectionService = dbcontext.ViewDashboardOvcServiceReportingToolDetail.
				Where(o => o.VisitationMonth >= StartMonth && o.VisitationMonth <= EndMonth && o.VisitationYear == currentYear && o.ChildProtectionServiceReceived == "1").AsNoTracking().ToList();
			if (NoChildProtectionService != null)
			{
				NumberClientsWithChildProtectionServiceData = new List<SeriesModel>();
				var category = NoChildProtectionService.Select(o => o.AgeCategory).ToList().Distinct().ToList();
				foreach (var item in category)
				{
					var _NumberClientsWithChildProtectionServiceData = new SeriesModel();
					_NumberClientsWithChildProtectionServiceData.ChartType = ChartSeriesType.StackingColumn;
					_NumberClientsWithChildProtectionServiceData.SeriesName = item;
					rand = new Random();
					int index = rand.Next(0, (SeriesColors.Count() - 1));
					_NumberClientsWithChildProtectionServiceData.SeriesColor = SeriesColors[index];
					_NumberClientsWithChildProtectionServiceData.ColumnWidth = 0.7;
					_NumberClientsWithChildProtectionServiceData.YAxisTitle = "Number";
					_NumberClientsWithChildProtectionServiceData.Interval = 1000;
					_NumberClientsWithChildProtectionServiceData.Datasource = new List<DashboardModel>();
					_NumberClientsWithChildProtectionServiceData.Datasource.Add(new DashboardModel()
							{
								ColumnX = "OVC_SERV",
								ColumnY = NoChildProtectionService.Where(o => o.AgeCategory == item).ToList().Count
							});
					NumberClientsWithChildProtectionServiceData.Add(_NumberClientsWithChildProtectionServiceData);
				}
				//HIV STATUS DATA
				var hivstatus = NoChildProtectionService.Select(o => o.HivstatusDescription).ToList().Distinct().ToList();
				foreach (var _item in hivstatus)
				{
					var _HIVStatusData = new SeriesModel();
					_HIVStatusData.ChartType = ChartSeriesType.StackingColumn;
					_HIVStatusData.SeriesName = _item;
					rand = new Random();
					int _index = rand.Next(0, (SeriesColors.Count() - 1));
					_HIVStatusData.SeriesColor = SeriesColors[_index];
					_HIVStatusData.ColumnWidth = 0.7;
					_HIVStatusData.YAxisTitle = "Number";
					_HIVStatusData.Interval = 1000;
					_HIVStatusData.Datasource = new List<DashboardModel>();
					_HIVStatusData.Datasource.Add(new DashboardModel()
							{
								ColumnX = "OVC_HIVSTAT",
								ColumnY = NoChildProtectionService.Where(o => o.HivstatusDescription == _item && o.AgeCategory == "Children" && o.ChildProtectionServiceReceived == "1").ToList().Count
							});
					NumberClientsWithChildProtectionServiceData.Add(_HIVStatusData);
				}
				////Eligible_Dashboard
				//var eligble = dbcontext.ViewVlrVlcVlsDashboard.
				//			Where(o => o.FollowUpDateMonth >= StartMonth && o.FollowUpDateMonth <= EndMonth && o.FollowUpDateYear == currentYear).AsNoTracking().ToList();
				//var supressed = dbcontext.AViralLoadSuppressed.Where(o => (o.ViralLoadSuppressedId == 3) || (o.ViralLoadSuppressedId == 4)).ToList();
				//VLR_VLC_VLS_Dashboard
				var vlc_vlr = dbcontext.ViewVlrVlcVlsDashboard.
							Where(o => o.FollowUpDateMonth >= StartMonth && o.FollowUpDateMonth <= EndMonth && o.FollowUpDateYear == currentYear).AsNoTracking().ToList();
				var supressed = dbcontext.AViralLoadSuppressed.Where(o => (o.ViralLoadSuppressedId == 3) || (o.ViralLoadSuppressedId == 4)).ToList();
				if (vlc_vlr != null)
				{
					var _vlc = vlc_vlr.Select(o => o.ViralLoadSuppressedDescription).ToList().Distinct().ToList();
					foreach (var _item1 in supressed)
					{
						var _VLRData = new SeriesModel();
						_VLRData.ChartType = ChartSeriesType.StackingColumn;
						_VLRData.SeriesName = _item1.ViralLoadSuppressedDescription;
						rand = new Random();
						int _index1 = rand.Next(0, (SeriesColors.Count() - 1));
						_VLRData.SeriesColor = SeriesColors[_index1];
						_VLRData.ColumnWidth = 0.7;
						_VLRData.YAxisTitle = "Number";
						_VLRData.Interval = 1000;
						_VLRData.Datasource = new List<DashboardModel>();

						_VLRData.Datasource.Add(new DashboardModel()
								{
									ColumnX = "VLR/VLC",
									ColumnY = vlc_vlr.Where(o => o.ViralLoadSuppressedId == _item1.ViralLoadSuppressedId && o.AgeCategory == "Children" && o.IsClientEligibleForViralload == 1).ToList().Count
								});
						NumberClientsWithChildProtectionServiceData.Add(_VLRData);
					}
				}
				//VLC_Dashboard
				var vlcs = dbcontext.ViewVlrVlcVlsDashboard.
						Where(o => o.FollowUpDateMonth >= StartMonth && o.FollowUpDateMonth <= EndMonth && o.FollowUpDateYear == currentYear).AsNoTracking().ToList();
				var vlcsuppresed = dbcontext.AViralLoadSuppressed.Where(o => (o.ViralLoadSuppressedId == 1) || (o.ViralLoadSuppressedId == 2)).ToList();
				if (vlcs != null)
				{
					//	var _vlc = vlc_vlr.Select(o => o.ViralLoadSuppressedDescription).ToList().Distinct().ToList();
					foreach (var _item2 in vlcsuppresed)
					{
						var _VLCData = new SeriesModel();
						_VLCData.ChartType = ChartSeriesType.StackingColumn;
						_VLCData.SeriesName = _item2.ViralLoadSuppressedDescription;
						rand = new Random();
						int _index1 = rand.Next(0, (SeriesColors.Count() - 1));
						_VLCData.SeriesColor = SeriesColors[_index1];
						_VLCData.ColumnWidth = 0.7;
						_VLCData.YAxisTitle = "Number";
						_VLCData.Interval = 1000;
						_VLCData.Datasource = new List<DashboardModel>();
						_VLCData.Datasource.Add(new DashboardModel()
								{
									ColumnX = "VLS",
									ColumnY = vlcs.Where(o => o.ViralLoadSuppressedId == _item2.ViralLoadSuppressedId && o.AgeCategory == "Children" && o.IsClientEligibleForViralload == 1).ToList().Count
								});
						NumberClientsWithChildProtectionServiceData.Add(_VLCData);
					}
				}
			}

			//HOME VISIT TOOL(BarColumn)
			//Number of clients who received PSS
			var NoChildProtectionService1 = dbcontext.ViewDashboardOvcServiceReportingToolDetail.
				Where(o => o.VisitationMonth >= StartMonth && o.VisitationMonth <= EndMonth && o.VisitationYear == currentYear).AsNoTracking().ToList();
			if (NoChildProtectionService1 != null)
			{
				NumberClientsWithChildProtectionServiceData1 = new List<SeriesModel>();
				var category = NoChildProtectionService1.Select(o => o.AgeCategory).ToList().Distinct().ToList();
				foreach (var item in category)
				{
					var _NumberClientsWithChildProtectionServiceData1 = new SeriesModel();
					_NumberClientsWithChildProtectionServiceData1.ChartType = ChartSeriesType.StackingColumn100;
					_NumberClientsWithChildProtectionServiceData1.SeriesName = item;
					rand = new Random();
					int index = rand.Next(0, (SeriesColors.Count() - 1));
					_NumberClientsWithChildProtectionServiceData1.SeriesColor = SeriesColors[index];
					_NumberClientsWithChildProtectionServiceData1.ColumnWidth = 0.7;
					_NumberClientsWithChildProtectionServiceData1.YAxisTitle = "Number";
					_NumberClientsWithChildProtectionServiceData1.Interval = 1000;
					_NumberClientsWithChildProtectionServiceData1.Datasource = new List<DashboardModel>();
					_NumberClientsWithChildProtectionServiceData1.Datasource.Add(new DashboardModel()
							{
								ColumnX = "PSS",
								ColumnY = NoChildProtectionService1.Where(o => o.AgeCategory == item && o.Pssreceived == "1").ToList().Count
							});
					NumberClientsWithChildProtectionServiceData1.Add(_NumberClientsWithChildProtectionServiceData1);
				}
				//Number of clients who received Education
				var category1 = NoChildProtectionService1.Select(o => o.AgeCategory).ToList().Distinct().ToList();
				foreach (var _item in category1)
				{
					var _EducationData = new SeriesModel();
					_EducationData.ChartType = ChartSeriesType.StackingColumn100;
					_EducationData.SeriesName = _item;
					rand = new Random();
					int _index = rand.Next(0, (SeriesColors.Count() - 1));
					_EducationData.SeriesColor = SeriesColors[_index];
					_EducationData.ColumnWidth = 0.7;
					_EducationData.YAxisTitle = "Number";
					_EducationData.Interval = 1000;
					_EducationData.Datasource = new List<DashboardModel>();
					_EducationData.Datasource.Add(new DashboardModel()
							{
								ColumnX = "Education",
								ColumnY = NoChildProtectionService1.Where(o => o.AgeCategory == _item && o.EducationReceived == "1").ToList().Count
							});
					NumberClientsWithChildProtectionServiceData1.Add(_EducationData);
				}
				//Number of clients who received Food security &  Nutrition
				var category2 = NoChildProtectionService1.Select(o => o.AgeCategory).ToList().Distinct().ToList();
				foreach (var _item in category2)
				{
					var _FSNData = new SeriesModel();
					_FSNData.ChartType = ChartSeriesType.StackingColumn100;
					_FSNData.SeriesName = _item;
					rand = new Random();
					int _index = rand.Next(0, (SeriesColors.Count() - 1));
					_FSNData.SeriesColor = SeriesColors[_index];
					_FSNData.ColumnWidth = 0.7;
					_FSNData.YAxisTitle = "Number";
					_FSNData.Interval = 1000;
					_FSNData.Datasource = new List<DashboardModel>();
					_FSNData.Datasource.Add(new DashboardModel()
							{
								ColumnX = "FSN",
								ColumnY = NoChildProtectionService1.Where(o => o.AgeCategory == _item && o.FoodSecurityNutritionReceived == "1").ToList().Count
							});
					NumberClientsWithChildProtectionServiceData1.Add(_FSNData);
				}
				//Number of clients with Economic stability service
				var category3 = NoChildProtectionService1.Select(o => o.AgeCategory).ToList().Distinct().ToList();
				foreach (var _item in category3)
				{
					var _EconomicData = new SeriesModel();
					_EconomicData.ChartType = ChartSeriesType.StackingColumn100;
					_EconomicData.SeriesName = _item;
					rand = new Random();
					int _index = rand.Next(0, (SeriesColors.Count() - 1));
					_EconomicData.SeriesColor = SeriesColors[_index];
					_EconomicData.ColumnWidth = 0.7;
					_EconomicData.YAxisTitle = "Number";
					_EconomicData.Interval = 1000;
					_EconomicData.Datasource = new List<DashboardModel>();
					_EconomicData.Datasource.Add(new DashboardModel()
							{
								ColumnX = "Economic Stability",
								ColumnY = NoChildProtectionService1.Where(o => o.AgeCategory == _item && o.EconomicStabilityServiceReceived == "1").ToList().Count
							});
					NumberClientsWithChildProtectionServiceData1.Add(_EconomicData);
				}
				//Number of clients with Health service
				var category4 = NoChildProtectionService1.Select(o => o.AgeCategory).ToList().Distinct().ToList();
				foreach (var _item in category4)
				{
					var _HealthData = new SeriesModel();
					_HealthData.ChartType = ChartSeriesType.StackingColumn100;
					_HealthData.SeriesName = _item;
					rand = new Random();
					int _index = rand.Next(0, (SeriesColors.Count() - 1));
					_HealthData.SeriesColor = SeriesColors[_index];
					_HealthData.ColumnWidth = 0.7;
					_HealthData.YAxisTitle = "Number";
					_HealthData.Interval = 1000;
					_HealthData.Datasource = new List<DashboardModel>();
					_HealthData.Datasource.Add(new DashboardModel()
							{
								ColumnX = "Health",
								ColumnY = NoChildProtectionService1.Where(o => o.AgeCategory == _item && o.HealthServiceReceived == "1").ToList().Count
							});
					NumberClientsWithChildProtectionServiceData1.Add(_HealthData);
				}
				//Number of clients with Child-protection service
				var category5 = NoChildProtectionService1.Select(o => o.AgeCategory).ToList().Distinct().ToList();
				foreach (var _item in category5)
				{
					var _ChildData = new SeriesModel();
					_ChildData.ChartType = ChartSeriesType.StackingColumn100;
					_ChildData.SeriesName = _item;
					rand = new Random();
					int _index = rand.Next(0, (SeriesColors.Count() - 1));
					_ChildData.SeriesColor = SeriesColors[_index];
					_ChildData.ColumnWidth = 0.7;
					_ChildData.YAxisTitle = "Number";
					_ChildData.Interval = 1000;
					_ChildData.Datasource = new List<DashboardModel>();
					_ChildData.Datasource.Add(new DashboardModel()
							{
								ColumnX = "Child-Protection",
								ColumnY = NoChildProtectionService1.Where(o => o.AgeCategory == _item && o.AgeCategory == "Children" && o.ChildProtectionServiceReceived == "1").ToList().Count
							});
					NumberClientsWithChildProtectionServiceData1.Add(_ChildData);
				}

			}

				data = new List<DasboardDistricts>();
				TotalHouseHoldsToVisit = dbcontext.ViewDashboardBeneficiaryIdentificationRegister.ToList();
				TotalHouseholdsVisited = await dbcontext.spDashboardHouseHoldsGetAllAsync();
				
				var _district = TotalHouseholdsVisited.Select(o => new { o.DistrictId, o.DistrictDescription }).ToList().Distinct().ToList();
				foreach (var n in _district)
				{
					data.Add(new DasboardDistricts()
						{
							DistrictId = n.DistrictId,
							DistrictDescription = n.DistrictDescription
						});
				}
		}

		catch(Exception ex)
		{

		}
		finally
		{
			//await LoadingDialogue.HideAsync();
			StateHasChanged();			
		}
	}

	public class DasboardDistricts
	{
		public int? DistrictId { get; set; }
		public string DistrictDescription { get; set; }
	}

}

<style>
	.e-dashboardlayout {
		padding: 10px;
	}

		.e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header {
			line-height: 40px;
			height: 40px;
		}

	.fluent .e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header,
	.fluent-dark .e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header {
		height: 56px;
	}

	.bootstrap5 .e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header,
	.bootstrap5-dark .e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header,
	.tailwind .e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header,
	.fluent .e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header,
	.fluent-dark .e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header,
	.tailwind-dark .e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header {
		line-height: inherit;
	}

	.root-container {
		height: 100%;
	}

	.title {
		font-size: 16px;
		font-weight: 400;
	}

	.category-text {
		float: left;
		line-height: 30px;
	}

	.category-icon {
		float: left;
		background-repeat: no-repeat;
		background-position-x: center;
		background-size: 100%;
		height: 30px;
		width: 30px;
		display: inline-block;
		margin-right: 10px;
	}


	.item-container {
		display: flex;
		text-align: center;
		height: 70%;
		padding: 2rem;
		font-size: 22px;
		font-weight: 400;
	}

		.item-container.income {
			color: #17a00e
		}

		.item-container.balance {
			color: #008cff;
		}

		.item-container.transaction {
			color: #f41127;
		}

		.item-container.expense {
			color: #ca765a;
		}

	.bottom-container {
		text-align: center;
		font-weight: 400;
		font-size: 16px;
	}

	.mobile .bottom-container {
		font-size: 30px;
	}

	.material .bottom-container,
	.fabric .bottom-container,
	.bootstrap .bottom-container,
	.bootstrap4 .bottom-container,
	.tailwind .bottom-container,
	.bootstrap5 .bottom-container {
		color: #4c5258;
	}

	.amt-payment.expense-payment {
		font-weight: bold;
		color: #ff5e65;
	}

	.amt-payment.income-payment {
		font-weight: bold;
		color: #04cd93;
	}

	.auto-left {
		margin-left: auto;
	}

	.e-panel-cotent {
		padding: 1rem;
	}

	@@font-face {
		font-family: 'e-sb-icons';
		src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAALAIAAAwAwT1MvMg8SBb0AAAC8AAAAYGNtYXAXVtKKAAABHAAAAFRnYXNwAAAAEAAAAXAAAAAIZ2x5ZpcRWXQAAAF4AAAI2GhlYWQdVVVLAAAKUAAAADZoaGVhB5gDyQAACogAAAAkaG10eBXPAQ0AAAqsAAAAIGxvY2EGegRAAAAKzAAAABJtYXhwABEA7gAACuAAAAAgbmFtZZlKCfsAAAsAAAABhnBvc3QAAwAAAAAMiAAAACAAAwOQAZAABQAAApkCzAAAAI8CmQLMAAAB6wAzAQkAAAAAAAAAAAAAAAAAAAABEAAAAAAAAAAAAAAAAAAAAABAAADpAwPA/8AAQAPAAEAAAAABAAAAAAAAAAAAAAAgAAAAAAADAAAAAwAAABwAAQADAAAAHAADAAEAAAAcAAQAOAAAAAoACAACAAIAAQAg6QP//f//AAAAAAAg6QD//f//AAH/4xcEAAMAAQAAAAAAAAAAAAAAAQAB//8ADwABAAAAAAAAAAAAAgAANzkBAAAAAAEAAAAAAAAAAAACAAA3OQEAAAAAAQAAAAAAAAAAAAIAADc5AQAAAAAFAIEAVwNJAy0AKwA4AGkAeACFAAABDgEHBhY7AScuATc2Fh8BMzI2Jy4BNTQWFx4BMzI2Jy4BJy4BJy4BIyIGBzceAQcOAScuATc+ARcHDgEHDgEVFBYXMhcyFjMWMzI2Nz4BPQEjIiYnLgE1NDY3PgE7ATU0JicmJyYiBwYHBQ4BFx4BHwI1LwEiBgcXHgEHBiY1NDYzMhYXAQMQFwEBDB0qEAcFAgISEB9tSR8IBgcWFBIdMh4oAgIiFhZ+Q0NiAgIZD2wWBwoKFRMaCgoKFBvaBAkCAwIFDwIcG14+PkbAkwMDAmdEKgsZHxUNFjBPYQIDA2lq/mtrBQHqHiUEAxEQEdQCWyZABygKAQoPKhYMBA4EAtUkOAMGAgkEBwICBAcNAgUCBwEGBAgIAwIBAhAJCTYdHCk0JCIJFRgWCgkKGBgYBwycAgkEBnN4tUYGAQEBAwMCIyJCAwUMMB0RKwoQCFgwKwMDAQEBAQPIBzQcFBsMDAJRUgECAjcKGQsQEBUNFwYFAAMAGwBPA9EDLwBFAI0AtAAAEw4BBw4BHwIeARceATMyNjc+ATc+AT8BIxUUBg8CBiYnLgEnLgE1NDY3PgE3PgEXHgEXHgEdATMnLgEnLgEvAiYGBxciBhUUBgcOARceARceARUUBiMiJicuASMiBhUUFhceAR8BMzc+ATc+AScuAScuATU0NjMyFhceATMyNicuAScuATU0JicmBgUGFh8BIyIGBw4BFx4BMzIWFRQGBw4BFRQWMzI2Nz4BJy4BIyIGB4wcKg4XCAIBEwgWDSFLqY5DFB4xDgkGAgJTEBgSvl1rCRMcCQYEBAYJHBMJa1yLOA0YEVMCAgYIDSkaHc+OShLHAwMFCSEfAgM0MRwVFhgUDQUFDAwWDh8TDggBAT4BAQkSHBcCAzEuHxcYFw8MBQYNExoKCAYdEQsGBAQHJgHPDAoYG45qKAoNAgsGLGg8VRELDw0aDwwoRiIFGFEtDQoNBgMnCh4WIlPC6iIQGwkZCgMICy8eFSApPzgyKRANAgECAwYYEg9Jl5dJDxIYBgMCAQEECA8sMjg/KCISHCsNDgEBAgeZDggNCQMNMyQqLwQDDQ4PDQQJBwUIDxEoCAYJDRMUDgwKECkfKzACAg4QDw8ECQgECxUTHgYECA0KCwIDAUoQIBUZAwkLIAwHAwEBARILDxMIDhggQyEeF0skBgcAAAAIACn/zAPWA7YAIAA9AFsAdQCRALEAzgDrAAABBx8BBw4BFRQWFx4BNzY3PgE3NjU0JisBNycuASMiBgcBDgEHDgEVFBYXFhceATc2Nz4BNzYmJy4BJy4BBwUOAQcOARUUFhcWFx4BNzY3PgE3NiYnJicuAQcGBwUeARcWFxY2NzY3PgE1NCYHDgEHBiYnJgYXFwYWFx4BMzI2Nz4BPQEHDgEHBgciJicmJy4BBwUUFhcWFx4BNzY3PgE3PgEnJgYHBgcOASMmJy4BLwEVBRQWFxYXFjY3Njc+ATU0JgcOAQcGJicuATEiBhUFFBYXHgE3PgE3PgEnJgYHBgcGJicmJy4BIyIGFQK7DgMCIx4aLkgWHhEHGBgzFBQgIR0HDgkUJSIXCf37KEQODAQEDBImJl0yMSkhLQYGAgcGNyEhfSIB2SQtDAoEBAYSODeCPDwcCQYCAh40ESIhSyIjE/2bAQYKGzo6fjg4FgkFAwYZVCdElyITBwICBAMFDHdTS2YXCgQiDjMVIysqVCMjFAYKAgH4EBsWIyJPKCggJTwGBQMEAgoGFCMjUysrIxUzDiL+BQ4WIjg4dDIyFQsFAwYqTTxGXCsPGAIBAfsFCxiFS01gCAUBBAISCyIwMWgwMSILEgECAgOqC2BfAgIREgs3TRcKCgQZGDkZGAQUFb0NCQQECP7EBhYNCg8dHA8KEAsLCAIDCggWCgxGCQoYBwcFBaYIEgsJERkVFQcXDQwDCwoWCBAYKSIQBQMDAgIBBF0bEAgWCwoBDAsWChAZGQsDChMDBxESCQofewU7ChkfFxYJEBkmDQUNAwUBBwgHCwMCASMgGgsKBgcFAgEGCBwNCjsFAQIDCwcIBwEFAwwFDSWcHhsMEggIAwsMFAoPGxgLAhENAgIJDwUHEgwGGRAKFxkEBCEYDjMCAQQEDQYHAQYHDQMGFQ8ABQBIAHEDuAMHABoANQB4AJ0AwgAAAQ4BBw4BBwYUFx4BHwE3PgE3NiYnLgEnJgYHFxYXHgEHBgcGBwYmJyYnJicmNjc2Nz4BFx4BBxQGBw4BFRQWFx4BBw4BIyImJyYGBwYWFx4BFRQWMzI2NTQ2MzI2Nz4BNS4BJy4BNz4BFxY2NzYmJy4BJy4BIyIGFQUOARUUFhceAQcGFhceATMyJicuAScmNjc2FhceATM2JiMiBgcFHgEXFgYHDgEjIiYnLgEjBhYXFjY1NCYnLgE3NiYnLgEjIhYXAbQhNx8eIgoHCAwyXHJyXTIMESo3G0EeGV4YqTIeHRAPDygfJyhRJyceKQ4NGCMkNxIfHCAcUwcKDRYdGx4OCQUNDgkVBgsHAQEIEQ8JBQoLBAQFAw8HCwcBEyIcDwoFKAwJCgEBBw0NBwIBBgoJBf6JFR0JBwoEAhEYKxA4CQELCRcWAgIJBwMICgYLAQIrAgIfFAKyFxYCAQMFAwcBAQoGBwoBAScDAmcJBwoEAhEZKhA4CQELCQMFCSIfHzgnHU4eMERcc3NdRTBLjTQaJAcGAgZRGCoqYTExJx4PDwEPEB8rNDVkKikUBgQBAQdPCwkFByEOEB8NDxYPBwYEAwUFDwkHBQYHCgkFBQ0JCQoHCw8QGBkSEBcMBgIHBQgNCAcDBAgKCwYGCxcIDAIBBgMECAhBaC0SKA0JGDUkG0QLAwEFAwQDbQwHCBk1JRcjEg0UBQMDBAJqAwEmAwEGAwQICEFoLRIoDQkAAAEAAAAAAAAOGKYjXw889QALBAAAAAAA3TCIZgAAAADdMIhmAAD/zAPWA7YAAAAIAAIAAAAAAAAAAQAAA8D/wAAABAAAAAAAA9YAAQAAAAAAAAAAAAAAAAAAAAgEAAAAAAAAAAAAAAACAAAAA88AgQQAABsEAAApBAAASAAAAAAACgAUAB4A4gHmA0oEbAAAAAEAAAAIAOwACAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAOAK4AAQAAAAAAAQAHAAAAAQAAAAAAAgAHAGAAAQAAAAAAAwAHADYAAQAAAAAABAAHAHUAAQAAAAAABQALABUAAQAAAAAABgAHAEsAAQAAAAAACgAaAIoAAwABBAkAAQAOAAcAAwABBAkAAgAOAGcAAwABBAkAAwAOAD0AAwABBAkABAAOAHwAAwABBAkABQAWACAAAwABBAkABgAOAFIAAwABBAkACgA0AKRpY29tb29uAGkAYwBvAG0AbwBvAG5WZXJzaW9uIDEuMABWAGUAcgBzAGkAbwBuACAAMQAuADBpY29tb29uAGkAYwBvAG0AbwBvAG5pY29tb29uAGkAYwBvAG0AbwBvAG5SZWd1bGFyAFIAZQBnAHUAbABhAHJpY29tb29uAGkAYwBvAG0AbwBvAG5Gb250IGdlbmVyYXRlZCBieSBJY29Nb29uLgBGAG8AbgB0ACAAZwBlAG4AZQByAGEAdABlAGQAIABiAHkAIABJAGMAbwBNAG8AbwBuAC4AAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) format("truetype");
		font-weight: normal;
		font-style: normal;
	}

	.balance:after {
		//content: "\e900";
		font-size: 24px;
		font-family: "e-sb-icons";
	}

	.expense:after {
		//content: "\e901";
		font-size: 24px;
		font-family: "e-sb-icons";
	}

	.income:after {
		//content: "\e902";
		font-size: 24px;
		font-family: "e-sb-icons";
	}

	.transaction:after {
		content: "\e903";
		font-size: 24px;
		font-family: "e-sb-icons";
	}

	.e-headercelldiv span.e-headertext {
		font-size: 14px;
		font-weight: 500;
	}

	.e-grid .e-rowcell {
		font-size: 13px;
	}

	.mobile .e-control.e-lib.e-dashboardlayout.e-responsive {
		z-index: 0;
		overflow: scroll;
	}

	.mobile .item-container {
		padding: 40px;
		font-size: 40px;
	}

	.mobile .balance:after {
		content: "\e900";
		font-size: 40px;
		font-family: "e-sb-icons";
	}

	.mobile .expense:after {
		content: "\e901";
		font-size: 40px;
		font-family: "e-sb-icons";
	}

	.mobile .income:after {
		content: "\e902";
		font-size: 40px;
		font-family: "e-sb-icons";
	}

	.mobile .transaction:after {
		content: "\e903";
		font-size: 40px;
		font-family: "e-sb-icons";
	}

	.e-control.e-lib.e-dashboardlayout.e-responsive {
		z-index: 0;
	}

	.e-dashboardlayout.e-control .e-panel .e-panel-container .e-grid.sf-grid .e-gridcontent .e-content.e-yscroll {
		overflow: auto;
	}

	body.tailwind-dark .e-dashboardlayout.e-control .e-panel {
		border: 1px #435266 solid;
	}

	.e-gridheader {
		padding-right: 0px !important;
	}
</style>