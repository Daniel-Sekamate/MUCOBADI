<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>
@if (SmuSafetyPlanningFormPeopleToAskForHelpDataSource != null)
{
    <SfGrid @ref=@SmuSafetyPlanningFormPeopleToAskForHelpGrid TValue="SmuSafetyPlanningFormPeopleToAskForHelp"
            DataSource="SmuSafetyPlanningFormPeopleToAskForHelpDataSource" RowHeight="30"
            AllowSelection="true" AllowSorting="false" AllowGrouping="false" AllowPaging="false" AllowFiltering="false"
            AllowReordering="false" AllowResizing="true" GridLines="GridLine.Both" AllowTextWrap=true>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
        <GridPageSettings PageSizes="true"></GridPageSettings>
        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
        <GridEvents TValue="SmuSafetyPlanningFormPeopleToAskForHelp" CellSaved="OnCellSaved"></GridEvents>
        <GridEditSettings AllowAdding="false" AllowEditing="true" AllowDeleting="false" Mode="Syncfusion.Blazor.Grids.EditMode.Batch" ShowConfirmDialog=false></GridEditSettings>

        <GridColumns>
            <GridColumn HeaderText="Step 4: People whom I can ask for help" TextAlign="TextAlign.Left">
                <GridColumns>
                    <GridColumn Field=@nameof(SmuSafetyPlanningFormPeopleToAskForHelp.PeopleToAskForHelpId) HeaderText="PeopleToAskForHelpId" AllowEditing="false" Visible=false IsPrimaryKey="true" Width="120"></GridColumn>
                    <GridColumn Field=@nameof(SmuSafetyPlanningFormPeopleToAskForHelp.PeopleToAskForHelpNo) HeaderText="S/N" AllowEditing="true" Visible="true" Width="30"></GridColumn>
                    <GridColumn Field=@nameof(SmuSafetyPlanningFormPeopleToAskForHelp.PeopleToAskForHelpName) HeaderText="Name" AllowEditing="true" Visible="true" Width="200"></GridColumn>
                    <GridColumn Field=@nameof(SmuSafetyPlanningFormPeopleToAskForHelp.PeopleToAskForHelpPhone) HeaderText="Contact" AllowEditing="true" Visible="true" Width="70"></GridColumn>
                </GridColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>
}
@code {
    #region Toasters
    public static string? ToastContent { get; set; }
    SfToast? ToastObj;
    SfToast? DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
    {
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    #endregion Toasters
    [Parameter]
    public int? SafetyPlanningFormId { get; set; }
    [Parameter]
    public EventCallback<List<SmuSafetyPlanningFormPeopleToAskForHelp>?> SmuSafetyPlanningFormPeopleToAskForHelpCallBack { get; set; }
    [Parameter]
    public List<SmuSafetyPlanningFormPeopleToAskForHelp>? SmuSafetyPlanningFormPeopleToAskForHelpData { get; set; }
    int? PreviousSafetyPlanningFormId { get; set; }
    private SfGrid<SmuSafetyPlanningFormPeopleToAskForHelp>? SmuSafetyPlanningFormPeopleToAskForHelpGrid;
    List<SmuSafetyPlanningFormPeopleToAskForHelp>? SmuSafetyPlanningFormPeopleToAskForHelpDataSource { get; set; }
    public async Task OnCellSaved(CellSaveArgs<SmuSafetyPlanningFormPeopleToAskForHelp> args)
    {
        if (args.Data.PeopleToAskForHelpName != null
            && args.Data.PeopleToAskForHelpPhone != null
            )
        {
            await this.SmuSafetyPlanningFormPeopleToAskForHelpGrid?.EndEditAsync();
            await SmuSafetyPlanningFormPeopleToAskForHelpCallBack.InvokeAsync(SmuSafetyPlanningFormPeopleToAskForHelpDataSource);
        }
    }
    public async Task<List<SmuSafetyPlanningFormPeopleToAskForHelp>?> returnData()
    {
        if (SmuSafetyPlanningFormPeopleToAskForHelpGrid != null)
        {
            await SmuSafetyPlanningFormPeopleToAskForHelpGrid.EndEditAsync();
        }
        return SmuSafetyPlanningFormPeopleToAskForHelpDataSource;
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            SmuSafetyPlanningFormPeopleToAskForHelpDataSource = new List<SmuSafetyPlanningFormPeopleToAskForHelp>();
            if (SmuSafetyPlanningFormPeopleToAskForHelpData != null && SmuSafetyPlanningFormPeopleToAskForHelpData.Count > 0)
            {
                SmuSafetyPlanningFormPeopleToAskForHelpDataSource.AddRange(SmuSafetyPlanningFormPeopleToAskForHelpData.OrderBy(o => o.PeopleToAskForHelpId).ToList());
                int count = -100;
                for (int i = 1; i <= 3; i++)
                {
                    SmuSafetyPlanningFormPeopleToAskForHelpDataSource.Add(new SmuSafetyPlanningFormPeopleToAskForHelp()
                        {
                            PeopleToAskForHelpId = count,
                            SafetyPlanningFormId = SafetyPlanningFormId,
                        });
                    count++;
                }
            }
            else
            {
                int count = -100;
                for (int i = 1; i <= 3; i++)
                {
                    SmuSafetyPlanningFormPeopleToAskForHelpDataSource.Add(new SmuSafetyPlanningFormPeopleToAskForHelp()
                        {
                            PeopleToAskForHelpId = count,
                            SafetyPlanningFormId = SafetyPlanningFormId,
                        });
                    count++;
                }
            }
            PreviousSafetyPlanningFormId = SafetyPlanningFormId;
        }
        catch (Exception ex)
        {
        }

    }
}
