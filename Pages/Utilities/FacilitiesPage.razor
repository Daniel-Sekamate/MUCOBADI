@using MUCOBADI.Models;
@using System.Collections;
@using Microsoft.EntityFrameworkCore;
@using Syncfusion.Blazor.Data;
@using System.IO;
@using Syncfusion.DocIO.DLS;
@using Syncfusion.DocIORenderer;
@using Syncfusion.Pdf;
@inject MUCOBADIContext _context;
@inject NavigationManager Navigation;
@using MUCOBADI.Data;
@inject UserManagement userManagement;
@using Microsoft.AspNetCore.Hosting;
@inject IWebHostEnvironment hostingEnv;

<style>
    .pp {
        color: ghostwhite;
        background-color: #6F1E51;
        padding: 10px;
    }
</style>

<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;"> <strong>Facilities</strong></li>
</ol>

<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>


@{
    var Div = (new string[] { "DistrictDescription" });
}


<SfGrid @ref="FacilityGrid" TValue="ViewAFacility"
        Toolbar="@(new string[] {"Add","Edit","Delete","Update","Cancel","ColumnChooser"})" AllowGrouping="true" ShowColumnChooser="true" AllowTextWrap="true"
        AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true">
    <GridGroupSettings Columns="@Div" ShowDropArea="false">
        <CaptionTemplate>
            @{
                var dvn = (context as CaptionTemplateContext);
                string _field = string.Empty;
                if (dvn.Field.Contains("District"))
                {
                    _field = "District";
                }
                <div><p class="pp"><strong>@_field: @dvn.Key</strong></p></div>
            }

        </CaptionTemplate>
    </GridGroupSettings>
    <SfDataManager AdaptorInstance="@typeof(FacilityAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
    <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
    <GridEvents OnActionBegin="OnFacilityActionBegin" TValue="ViewAFacility"></GridEvents>
    <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="DialogParams">
        <HeaderTemplate>
            @{
                var text = GetFacilityHeader((context as ViewAFacility));
                <div class="headerbandimg" /><span>@text</span>
            }
        </HeaderTemplate>
        <Template Context="FacilityContext">
            @{
                var FacilityData = (FacilityContext as ViewAFacility);
                <div style="padding:15px;">
                    <div class="form-row">
                        <div class="form-group col-md-12" hidden>
                            <SfNumericTextBox ID="FacilityId" @bind-Value="@(FacilityData.FacilityId)" Enabled="false" Placeholder="District Id" Format="N0" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                        </div>
                        <div class="form-group col-md-12">
                            <SfDropDownList ID="DistrictId" @bind-Value="@(FacilityData.DistrictId)" TItem="ADistrict" AllowFiltering="true" TValue="int?" DataSource="@DistrictData" Placeholder="District" FloatLabelType="FloatLabelType.Always">
                                <DropDownListFieldSettings Value="@nameof(ADistrict.DistrictId)" Text="@nameof(ADistrict.DistrictDescription)"></DropDownListFieldSettings>
                                <DropDownListEvents TItem="ADistrict" TValue="int?" ValueChange="ChangeDistrict"></DropDownListEvents>
                            </SfDropDownList>
                        </div>
                        <div class="form-group col-md-12">
                            <SfTextBox Multiline="false" ID="FacilityName" @bind-Value="@(FacilityData.FacilityName)" Enabled="@FacilityTextBox" Placeholder="Facility" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                        </div>                      
                    </div>
                </div>
            }
        </Template>
    </GridEditSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSize="20"></GridPageSettings>
    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
        <GridColumn Field=@nameof(ViewAFacility.FacilityId) HeaderText="Facility Id" TextAlign="TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
        <GridColumn Field=@nameof(ViewAFacility.FacilityName) HeaderText="Facility"></GridColumn>
        <GridColumn Field=@nameof(ViewAFacility.DistrictDescription) HeaderText="District"></GridColumn>
    </GridColumns>
</SfGrid>

@code {
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
{
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    #endregion Toasters

    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "90vh", Width = "98%" };
    private SfGrid<ViewAFacility> FacilityGrid;
    private List<ADistrict> DistrictData { get; set; }
    public string ButtonText { get; set; }
    public bool FacilityTextBox = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!userManagement.IsSignedIn())
            {
                Navigation.NavigateTo("/", true);
            }

            DistrictData = _context.ADistrict.ToList();
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }

    public void ChangeDistrict(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ADistrict> args)
    {
        this.FacilityTextBox = true;
        StateHasChanged();
    }

    #region Facility Region
    public class FacilityAdapter : DataAdaptor
    {
        public IToastService toastService;
        private UserManagement _userManagement;
        public FacilityAdapter(IToastService ts, UserManagement userManagement)
        {
            _userManagement = userManagement;
            toastService = ts;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<ViewAFacility>();
            try
            {
                using (var dbContext = new MUCOBADIContext())
                {
                    data = await dbContext.ViewAFacility.OrderByDescending(o => o.FacilityId).ToListAsync();
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<ViewAFacility>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                using (var dbContext = new MUCOBADIContext())
                {
                    var val = (value as ViewAFacility);
                    AFacility fac = new AFacility();
                    var exists = dbContext.ViewAFacility.FirstOrDefault(o => o.FacilityId == val.FacilityId);
                    if (exists == null)
                    {
                        int id = 1;
                        var last = dbContext.ViewAFacility.OrderBy(o => o.FacilityId).LastOrDefault();
                        if (last != null)
                        {
                            id = (last.FacilityId + 1);
                        }

                        fac.FacilityId = id;
                        fac.DistrictId = val.DistrictId;
                        fac.FacilityName = val.FacilityName;

                        dbContext.AFacility.Add(fac);
                    }

                    await dbContext.SaveChangesAsync();
                    string result = "Record Saved Successfully";
                    toastService.ShowInfo(result);

                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }
        public override async Task<object> RemoveAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                int data = (int)value;
                using (var dbContext = new MUCOBADIContext())
                {
                    var exists = dbContext.AFacility.FirstOrDefault(o => o.FacilityId == data);
                    if (exists != null)
                    {
                        dbContext.AFacility.Remove(exists);
                    }
                    await dbContext.SaveChangesAsync();
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }


            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                using (var dbContext = new MUCOBADIContext())
                {
                    var val = (value as ViewAFacility);
                    AFacility fac = new AFacility();
                    var exists = dbContext.AFacility.FirstOrDefault(o => o.FacilityId == val.FacilityId);
                    if (exists != null)
                    {
                        fac.DistrictId = val.DistrictId;
                        fac.FacilityName = val.FacilityName;

                        dbContext.Entry(exists).CurrentValues.SetValues(val);
                        dbContext.Entry(exists).State = EntityState.Modified;
                    }

                    await dbContext.SaveChangesAsync();
                    string result = "Record Updated Successfully";
                    toastService.ShowInfo(result);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
    }
    public void OnFacilityActionBegin(ActionEventArgs<ViewAFacility> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            this.FacilityTextBox = true;
        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (args.Data.DistrictId == null)
            {
                ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please choose a District before saving this record.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }

            else if (string.IsNullOrEmpty(args.Data.FacilityName))
            {
                ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please fill in the Facility before saving this record.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }

            else
            {
                using (var db = new MUCOBADIContext())
                {
                    var exists = db.ViewAFacility.FirstOrDefault(o => (o.FacilityName.ToLower() == args.Data.FacilityName.ToLower()) && (o.DistrictId == args.Data.DistrictId));
                    if (exists != null && exists.FacilityId != args.Data.FacilityId)
                    {
                        ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = "This facility already exists in the database with in this district and will not be saved.", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                        args.Cancel = true;
                    }
                }
            }
        }
    }

    public string GetFacilityHeader(ViewAFacility Value)
    {
        if (Value.FacilityId == 0)
        {
            ButtonText = "Insert";
            return "Add a new Facility";
        }
        else
        {
            ButtonText = "Save Changes";
            return "Edit Details for " + Value.FacilityName;
        }
    }

    #endregion Facility Region
}
