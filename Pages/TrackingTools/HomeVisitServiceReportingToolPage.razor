@page "/HomeVisitServiceReportingToolPage"
@using MUCOBADI.Models;
@using MUCOBADI.Data;
@using System.Collections.ObjectModel;
@using System.IO;
@using Microsoft.EntityFrameworkCore;
@using System.Collections;
@inject UserManagement userManagement;
@inject NavigationManager Navigation;
@using Microsoft.AspNetCore.Hosting;
@inject IWebHostEnvironment hostingEnv;
<style>
    h4 {
        background-color: black;
        color: whitesmoke;
        padding: 10px;
    }
</style>
<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;"> <strong>USAID ICARE |</strong> Home Visit Service Reporting Tool</li>
</ol>

<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>
<div class="form-row">
    <div class="form-group col-md-12">
        <SfAccordion ExpandMode="@ExpandMode.Single">
            <AccordionItems>
                <AccordionItem Expanded="false">
                    <HeaderTemplate>Search Panel</HeaderTemplate>
                    <ContentTemplate>
                        <div style="padding:10px;">
                            <EditForm Model="@InputModel" OnValidSubmit="@SearchRecords">
                                <div class="form-row">
                                    <div class="form-group col-md-3">
                                        <p>District</p>
                                        <SfMultiSelect @bind-Value="@InputModel.DistrictId" Enabled="@isEnabled" TValue="int?[]" TItem="ADistrict" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_DistrictData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search District" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                            <MultiSelectFieldSettings Value="@nameof(ADistrict.DistrictId)" Text="@nameof(ADistrict.DistrictDescription)"></MultiSelectFieldSettings>
                                            <MultiSelectEvents TValue="int?[]" TItem="ADistrict" ValueChange="OnDistrictChange"></MultiSelectEvents>
                                        </SfMultiSelect>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <p>Sub-County</p>
                                        <SfMultiSelect @bind-Value="@InputModel.SubcountyId" TValue="int?[]" TItem="ASubcounty" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_SubcountyData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Sub-county" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                            <MultiSelectFieldSettings Value="@nameof(ASubcounty.SubcountyId)" Text="@nameof(ASubcounty.SubcountyDescription)"></MultiSelectFieldSettings>
                                            <MultiSelectEvents TValue="int?[]" TItem="ASubcounty" ValueChange="OnSubcountyChange"></MultiSelectEvents>
                                        </SfMultiSelect>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <p>Parish</p>
                                        <SfMultiSelect @bind-Value="@InputModel.ParishId" TValue="int?[]" TItem="AParish" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_ParishData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Parish" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                            <MultiSelectFieldSettings Value="@nameof(AParish.ParishId)" Text="@nameof(AParish.ParishDescription)"></MultiSelectFieldSettings>
                                            <MultiSelectEvents TValue="int?[]" TItem="AParish" ValueChange="OnParishChange"></MultiSelectEvents>
                                        </SfMultiSelect>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <p>Village</p>
                                        <SfMultiSelect @bind-Value="@InputModel.VillageId" TValue="int?[]" TItem="AVillage" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_VillageData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Village" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                            <MultiSelectFieldSettings Value="@nameof(AVillage.VillageId)" Text="@nameof(AVillage.VillageDescription)"></MultiSelectFieldSettings>
                                        </SfMultiSelect>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <BSButton Color="Color.Primary" ButtonType="BlazorStrap.ButtonType.Submit">Search</BSButton>
                                        <BSButton Color="Color.Secondary" ButtonType="BlazorStrap.ButtonType.Button" @onclick="ClearSearchBtnClick">Clear Search</BSButton>
                                    </div>
                                    <div class="form-group col-md-12">
                                        <DataAnnotationsValidator />
                                        <ValidationSummary />
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </ContentTemplate>
                </AccordionItem>
            </AccordionItems>
        </SfAccordion>
    </div>
    <div class="form-group col-md-12">

        <SfGrid @ref="BeneficiaryRegisterGrid" TValue="spBeneficiaryIdentificationRegisterGetAllResult" Query="@MainQuery"
                AllowGrouping="false" ShowColumnChooser="true" AllowTextWrap="true"
                AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true">
            @*<GridGroupSettings Columns="@GroupedColumns"></GridGroupSettings>*@
            <SfDataManager AdaptorInstance="@typeof(ServiceReportBeneficiaryRegisterAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
            <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
            <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
            <GridEvents OnActionComplete="BeneficiaryRegisterActionComplete" TValue="spBeneficiaryIdentificationRegisterGetAllResult"></GridEvents>
            <GridEditSettings AllowAdding="false" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog">
                <Template Context="RegisterContext">
                    @{
                        BeneficiaryRegisterData = (RegisterContext as spBeneficiaryIdentificationRegisterGetAllResult);
                            <div style="padding:3px;">
                                <div class="form-row">
                                    <div class="form-group col-md-3">
                                        <p>District</p>
                                        <p><b>@BeneficiaryRegisterData.DistrictDescription</b></p>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <p>Sub-County</p>
                                        <p><b>@BeneficiaryRegisterData.SubcountyDescription</b></p>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <p>Parish</p>
                                        <p><b>@BeneficiaryRegisterData.ParishDescription</b></p>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <p>Village</p>
                                        <p><b>@BeneficiaryRegisterData.VillageDescription</b></p>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <p>Household Code</p>
                                        <p><b>@BeneficiaryRegisterData.HouseHoldCode</b></p>
                                    </div>
                                    <div class="form-group col-md-12">
                                        <SfGrid @ref="ReportingToolHeaderGrid" TValue="HomeVisitServiceReportingToolHeader" Query="@(new Query().AddParams("HouseHoldId",BeneficiaryRegisterData.HouseHoldId))"
                                            AllowGrouping="false" ShowColumnChooser="true" AllowTextWrap="true"
                                            AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true"
                                            Toolbar="@(new string[] {"Add","Edit","Delete","Update","Cancel","ColumnChooser"})">
                                            @*<GridGroupSettings Columns="@GroupedColumns"></GridGroupSettings>*@
                                            <SfDataManager AdaptorInstance="@typeof(HomeVisitServiceReportingToolHeaderHeaderAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
                                            <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                            <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
                                            <GridEvents OnActionBegin="OnReviewHeaderActionBegin" OnActionComplete="ActionComplete" TValue="HomeVisitServiceReportingToolHeader"></GridEvents>
                                            <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog">
                                                <Template Context="ReviewHeaderContext">
                                                    @{
                                                    ReportingToolHeaderData = (ReviewHeaderContext as HomeVisitServiceReportingToolHeader);
                                                            <div style="margin-top: 10px; padding: 10px; border-color: black; border-width: 2px; border-style: solid; ">
                                                                <div class="form-row">
                                                                    <div class="form-group col-md-12" hidden>
                                                                        <SfNumericTextBox @bind-Value="@ReportingToolHeaderData.VisitServiceReportingToolHeaderId" Enabled="false"></SfNumericTextBox>
                                                                    </div>
                                                                    <div class="form-group col-md-12">
                                                                        <h4>Home Visit Service Reporting Tool</h4>
                                                                    </div>
                                                                    <div class="form-group col-md-3">
                                                                        <p>District</p>
                                                                        <p><b>@BeneficiaryRegisterData.DistrictDescription</b></p>
                                                                    </div>
                                                                    <div class="form-group col-md-3">
                                                                        <p>Sub-County</p>
                                                                        <p><b>@BeneficiaryRegisterData.SubcountyDescription</b></p>
                                                                    </div>
                                                                    <div class="form-group col-md-3">
                                                                        <p>Parish</p>
                                                                        <p><b>@BeneficiaryRegisterData.ParishDescription</b></p>
                                                                    </div>
                                                                    <div class="form-group col-md-3">
                                                                        <p>Village</p>
                                                                        <p><b>@BeneficiaryRegisterData.VillageDescription</b></p>
                                                                    </div>
                                                                    <div class="form-group col-md-3">
                                                                        <p>Household Code</p>
                                                                        <p><b>@BeneficiaryRegisterData.HouseHoldCode</b></p>
                                                                    </div>
                                                                    <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                                    <div class="form-group col-md-4">
                                                                        <p>Unique Identifiers of Persons Talked to During Visit</p>
                                                                        <SfMultiSelect @ref="HouseHoldMembersObj" TValue="int[]" TItem="HouseHoldMembers" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@HouseHoldMembersData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                                                            <MultiSelectTemplates TItem="HouseHoldMembers">
                                                                                <ItemTemplate>
                                                                                    <div style="margin-left:10px;">
                                                                                        <table>
                                                                                            <tr>
                                                                                                <td><p>@((context as HouseHoldMembers).HouseHoldMemberCode)</p></td>
                                                                                                <td><p style="margin-left:10px;">@((context as HouseHoldMembers).Surname) @((context as HouseHoldMembers).Givenname)</p></td>
                                                                                            </tr>
                                                                                        </table>
                                                                                    </div>
                                                                                </ItemTemplate>
                                                                                <ValueTemplate>
                                                                                    <div class="dropdown-width" style="width: 100%; height: 100%; margin-left: 10px;">
                                                                                        <table>
                                                                                            <tr>
                                                                                                <td><p>@((context as HouseHoldMembers).HouseHoldMemberCode)</p></td>
                                                                                                <td><p style="margin-left:10px;">@((context as HouseHoldMembers).Surname) @((context as HouseHoldMembers).Givenname)</p></td>
                                                                                            </tr>
                                                                                        </table>
                                                                                    </div>
                                                                                </ValueTemplate>
                                                                            </MultiSelectTemplates>
                                                                            <MultiSelectFieldSettings Value="@nameof(HouseHoldMembers.HouseHoldMemberId)" Text="@nameof(HouseHoldMembers.HouseHoldMemberCode)"></MultiSelectFieldSettings>
                                                                            <MultiSelectEvents TValue="int[]" TItem="HouseHoldMembers" ValueChange="OnHouseHoldMembersChange" DataBound="OnHouseHoldMembersBound"></MultiSelectEvents>
                                                                        </SfMultiSelect>
                                                                    </div>
                                                                    <div class="form-group col-md-4">
                                                                        <p>Date of Visit</p>
                                                                        <SfDatePicker @bind-Value="@(ReportingToolHeaderData.VisitationDate)" Format="dd/MM/yyyy" Placeholder="Enter Date of Visit" FloatLabelType="FloatLabelType.Never" />
                                                                    </div>
                                                                    <div class="form-group col-md-4">
                                                                        <p>Program Participation status of Enrilled HH </p>
                                                                        <SfDropDownList @bind-Value="@(ReportingToolHeaderData.ProgramParticipationId)" Enabled="true" TItem="AProgramParticipationStatus" TValue="int?" DataSource="@ProgramParticipationData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                            <DropDownListFieldSettings Value="@nameof(AProgramParticipationStatus.ProgramParticipationId)" Text="@nameof(AProgramParticipationStatus.ProgramParticipationDescription)"></DropDownListFieldSettings>
                                                                        </SfDropDownList>
                                                                    </div>
                                                                    <div class="form-group col-md-4">
                                                                        <p>Reason(s) for visit to Enrolled Household</p>
                                                                        <SfMultiSelect @ref="HomeVisitReasonObj" TValue="int[]" TItem="AHomeVisitReason" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@HomeVisitReasonData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                                                            <MultiSelectFieldSettings Value="@nameof(AHomeVisitReason.HomeVisitReasonId)" Text="@nameof(AHomeVisitReason.HomeVisitReasonDesc)"></MultiSelectFieldSettings>
                                                                            <MultiSelectEvents TValue="int[]" TItem="AHomeVisitReason" ValueChange="OnHomeVisitReasonChange" DataBound="OnHomeVisitReasonBound"></MultiSelectEvents>
                                                                        </SfMultiSelect>
                                                                    </div>
                                                                    @if(HomeVisitReasonObj != null && HomeVisitReasonObj.Value != null && HomeVisitReasonObj.Value.Any(o=> o == 8))
                                                            {
                                                                        <div class="form-group col-md-4">
                                                                            <p>Other Reason for visit to Enrolled Household</p>
                                                                            <SfTextBox Multiline="false" @bind-Value="@(ReportingToolHeaderData.HomeVisitReasonOther)" Enabled="true" Placeholder="Enter Other Reason" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                        </div>
                                                            }
                                                                    <div class="form-group col-md-4">
                                                                    <p>Latitudde</p>
                                                                        <SfNumericTextBox @bind-Value="@ReportingToolHeaderData.Latitudde" Format="N3" Enabled="true"></SfNumericTextBox>
                                                                    </div>
                                                                    <div class="form-group col-md-4">
                                                                    <p>Longitudde</p>
                                                                        <SfNumericTextBox @bind-Value="@ReportingToolHeaderData.Longitudde" Format="N3" Enabled="true"></SfNumericTextBox>
                                                                    </div>
                                                                    <div class="form-group col-md-12" style="border-top-color: black; border-top-width: 2px; border-top-style: solid; "></div>
                                                                    <div class="form-group col-md-12">
                                                                        <h4>Detail of member of index household Indicating Service Received</h4>
                                                                    </div>
                                                                    <div class="form-group col-md-12">
                                                                @{
                                                                    childQuery = new Query().AddParams("HouseHoldId", ReportingToolHeaderData.HouseHoldId).AddParams("VisitServiceReportingToolHeaderId", ReportingToolHeaderData.VisitServiceReportingToolHeaderId);
                                                                }
                                                                        <SfGrid @ref="ServiceMemberGrid" TValue="spHomeVisitServiceReportingToolDetailGetAllResult" Query="@childQuery" FrozenColumns="8" Height="400px"
                                                                        Toolbar="@(new string[] {"Add","Edit","Delete","Update","Cancel","ColumnChooser"})" AllowGrouping="false" ShowColumnChooser="true" AllowTextWrap="false"
                                                                        AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true">
                                                                            <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                                                            <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
                                                                            <SfDataManager AdaptorInstance="@typeof(HomevisitDetailAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
                                                                            <GridEvents OnActionBegin="OnMemberActionBegin" OnActionComplete="@OnMemberActionComplete" CellSaved="HomevisitDetailCellSavedHandler" CellSelected="HomevisitDetailCellSelectHandler" TValue="spHomeVisitServiceReportingToolDetailGetAllResult"></GridEvents>
                                                                            <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Batch" ShowConfirmDialog="false">
                                                                                <Template Context="MemberServiceContext">
                                                                                    @{
                                                                                ReportingToolDetailData = (MemberServiceContext as spHomeVisitServiceReportingToolDetailGetAllResult);
                                                                                            <div style="margin-top: 10px; padding: 10px; border-color: black; border-width: 2px; border-style: solid; ">
                                                                                                <div class="form-row">
                                                                                                    <div class="form-group col-md-12" hidden>
                                                                                                        <SfNumericTextBox @bind-Value="@ReportingToolDetailData.VisitServiceReportingToolDetailId" Enabled="false"></SfNumericTextBox>
                                                                                                    </div>
                                                                                                    <div class="form-group col-md-12">
                                                                                                        <h4>Household member Details</h4>
                                                                                                    </div>
                                                                                                    <div class="form-group col-md-3">
                                                                                                        <p>Household Member Code</p>
                                                                                                        <p><b>@ReportingToolDetailData.HouseHoldMemberCode</b></p>
                                                                                                    </div>
                                                                                                    <div class="form-group col-md-3">
                                                                                                        <p>Name</p>
                                                                                                        <p><b>@ReportingToolDetailData.FullName</b></p>
                                                                                                    </div>
                                                                                                    <div class="form-group col-md-3">
                                                                                                        <p>Date of birth</p>
                                                                                                        @if (@ReportingToolDetailData.DoB.HasValue)
                                                                                            {
                                                                                                            <p><b>@ReportingToolDetailData.DoB.Value.ToString("dd/MM/yyyy")</b></p>
                                                                                            }
                                                                                                    </div>
                                                                                                    <div class="form-group col-md-3">
                                                                                                        <p>Age</p>
                                                                                                        <p><b>@ReportingToolDetailData.Age</b></p>
                                                                                                    </div>
                                                                                                    <div class="form-group col-md-3">
                                                                                                        <p>Gender</p>
                                                                                                        <p><b>@ReportingToolDetailData.GenderDescription</b></p>
                                                                                                    </div>
                                                                                                    @*<div class="form-group col-md-3">
                                                                                            <p>Program Participation Status</p>
                                                                                            <p><b>@ReportingToolDetailData.ProgramParticipationDescription</b></p>
                                                                                        </div>*@
                                                                                                    <div class="form-group col-md-3">
                                                                                                        <p>Risk Factor</p>
                                                                                                        <p><b>@ReportingToolDetailData.KnownRiskFactorDescription</b></p>
                                                                                                    </div>
                                                                                                    <div class="form-group col-md-4">
                                                                                                        <p>Program Participation status</p>
                                                                                                        <SfDropDownList @bind-Value="@(ReportingToolDetailData.ProgramParticipationId)" Enabled="true" TItem="AProgramParticipationStatus" TValue="int?" DataSource="@ProgramParticipationData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                                                            <DropDownListFieldSettings Value="@nameof(AProgramParticipationStatus.ProgramParticipationId)" Text="@nameof(AProgramParticipationStatus.ProgramParticipationDescription)"></DropDownListFieldSettings>
                                                                                                        </SfDropDownList>
                                                                                                    </div>
                                                                                                    <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                                                                    <div class="form-group col-md-12">
                                                                                                        <h4>Services Received by Service Category (Use Codes Provided on the Back Page  For services received per beneficiary)</h4>
                                                                                                    </div>

                                                                                                    <div class="form-group col-md-6">
                                                                                                        <p>Stable</p>
                                                                                                        <SfMultiSelect @ref="StableObj" TValue="int[]" TItem="AServiceReceived" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@StableData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                                                                                            <MultiSelectFieldSettings Value="@nameof(AServiceReceived.ServiceReceivedId)" Text="@nameof(AServiceReceived.ServiceReceivedDesc)" GroupBy="@nameof(AServiceReceived.ServiceClassiffication)"></MultiSelectFieldSettings>
                                                                                                            <MultiSelectEvents TValue="int[]" TItem="AServiceReceived" ValueChange="OnStableChange" DataBound="OnStableBound"></MultiSelectEvents>
                                                                                                        </SfMultiSelect>
                                                                                                    </div>
                                                                                                    @if(StableObj != null && StableObj.Value != null && StableObj.Value.Any(o=> o == 10))
                                                                                        {
                                                                                                        <div class="form-group col-md-6">
                                                                                                            <p>Other Stable</p>
                                                                                                            <SfTextBox Multiline="false" @bind-Value="@(ReportingToolDetailData.StableOther)" Enabled="true" Placeholder="Enter Other Reason" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                        </div>
                                                                                         }
                                                                                                    
                                                                                                    <div class="form-group col-md-6">
                                                                                                        <p>Schooled</p>
                                                                                                        <SfMultiSelect @ref="SchoolObj" TValue="int[]" TItem="AServiceReceived" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@SchoolData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                                                                                            <MultiSelectFieldSettings Value="@nameof(AServiceReceived.ServiceReceivedId)" Text="@nameof(AServiceReceived.ServiceReceivedDesc)" GroupBy="@nameof(AServiceReceived.ServiceClassiffication)"></MultiSelectFieldSettings>
                                                                                                            <MultiSelectEvents TValue="int[]" TItem="AServiceReceived" ValueChange="OnSchoolChange" DataBound="OnSchoolBound"></MultiSelectEvents>
                                                                                                        </SfMultiSelect>
                                                                                                    </div>
                                                                                                    @if(SchoolObj != null && SchoolObj.Value != null && SchoolObj.Value.Any(o=> o == 19))
                                                                                        {
                                                                                                        <div class="form-group col-md-6">
                                                                                                            <p>Other Schooled</p>
                                                                                                            <SfTextBox Multiline="false" @bind-Value="@(ReportingToolDetailData.SchooledOther)" Enabled="true" Placeholder="Enter Other Reason" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                        </div>
                                                                                         }
                                                                                                    
                                                                                                    <div class="form-group col-md-6">
                                                                                                        <p>Safe</p>
                                                                                                        <SfMultiSelect @ref="SafeObj" TValue="int[]" TItem="AServiceReceived" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@SafeData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                                                                                            <MultiSelectFieldSettings Value="@nameof(AServiceReceived.ServiceReceivedId)" Text="@nameof(AServiceReceived.ServiceReceivedDesc)" GroupBy="@nameof(AServiceReceived.ServiceClassiffication)"></MultiSelectFieldSettings>
                                                                                                            <MultiSelectEvents TValue="int[]" TItem="AServiceReceived" ValueChange="OnSafeChange" DataBound="OnSafeBound"></MultiSelectEvents>
                                                                                                        </SfMultiSelect>
                                                                                                    </div>
                                                                                                    @if(SafeObj != null && SafeObj.Value != null && (SafeObj.Value.Any(o => o == 26) || SafeObj.Value.Any(o=> o == 35)))
                                                                                        {
                                                                                                        <div class="form-group col-md-6">
                                                                                                            <p>Other Safe</p>
                                                                                                            <SfTextBox Multiline="false" @bind-Value="@(ReportingToolDetailData.SafeOther)" Enabled="true" Placeholder="Enter Other Reason" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                        </div>
                                                                                         }
                                                                                                    
                                                                                                    <div class="form-group col-md-6">
                                                                                                        <p>Healthy</p>
                                                                                                        <SfMultiSelect @ref="HealthyObj" TValue="int[]" TItem="AServiceReceived" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@HealthyData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                                                                                            <MultiSelectFieldSettings Value="@nameof(AServiceReceived.ServiceReceivedId)" Text="@nameof(AServiceReceived.ServiceReceivedDesc)" GroupBy="@nameof(AServiceReceived.ServiceClassiffication)"></MultiSelectFieldSettings>
                                                                                                            <MultiSelectEvents TValue="int[]" TItem="AServiceReceived" ValueChange="OnHealthyChange" DataBound="OnHealthyBound"></MultiSelectEvents>
                                                                                                        </SfMultiSelect>
                                                                                                    </div>
                                                                                                    @if(HealthyObj != null && HealthyObj.Value != null && (HealthyObj.Value.Any(o=> o == 49) || HealthyObj.Value.Any(o => o == 60) || HealthyObj.Value.Any(o => o == 71) || HealthyObj.Value.Any(o => o == 79)))
                                                                                        {
                                                                                                        <div class="form-group col-md-6">
                                                                                                            <p>Other Healthy</p>
                                                                                                            <SfTextBox Multiline="false" @bind-Value="@(ReportingToolDetailData.HealthyOther)" Enabled="true" Placeholder="Enter Other Reason" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                                                        </div>
                                                                                         }
                                                                                                    
                                                                                                </div>
                                                                                            </div>
                                                                                    }
                                                                                </Template>
                                                                                <FooterTemplate>
                                                                                    <SfButton CssClass="e-btn e-success" OnClick="SaveDetailFormBtnClick"> Save Form</SfButton>
                                                                                    <SfButton CssClass="e-btn e-danger" OnClick="CancelDetailFormBtnClick"> Cancel</SfButton>
                                                                                </FooterTemplate>
                                                                            </GridEditSettings>
                                                                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                                                            <GridPageSettings PageSize="20"></GridPageSettings>
                                                                            <GridColumns>
                                                                                @*<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
                                                                                <GridColumn HeaderText="Manage Records" Width="120" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left">
                                                                                    <GridCommandColumns>
                                                                                        <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="Edit" })" Title="Edit"></GridCommandColumn>
                                                                                    </GridCommandColumns>
                                                                                </GridColumn>*@
                                                                                <GridColumn Field=@nameof(spHomeVisitServiceReportingToolDetailGetAllResult.VisitServiceReportingToolDetailId) AllowEditing="false" HeaderText="HIV TB Tracking Form Id" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
                                                                                <GridColumn Field=@nameof(spHomeVisitServiceReportingToolDetailGetAllResult.HouseHoldMemberCode) AllowEditing="false" HeaderText="HouseHold Member Code" Width="150"></GridColumn>
                                                                                <GridColumn Field=@nameof(spHomeVisitServiceReportingToolDetailGetAllResult.FullName) AllowEditing="false" Visible="true" HeaderText="Name" Width="200"></GridColumn>
                                                                                <GridColumn Field=@nameof(spHomeVisitServiceReportingToolDetailGetAllResult.DoB) AllowEditing="false" HeaderText="Date of birth" Format="dd/MM/yyyy" Width="110"></GridColumn>
                                                                                <GridColumn Field=@nameof(spHomeVisitServiceReportingToolDetailGetAllResult.Age) AllowEditing="false" Visible="true" HeaderText="Age" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="80"></GridColumn>
                                                                                <GridColumn Field=@nameof(spHomeVisitServiceReportingToolDetailGetAllResult.GenderDescription) AllowEditing="false" Visible="true" HeaderText="Gender" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="100"></GridColumn>
                                                                                <GridForeignColumn Field=@nameof(spHomeVisitServiceReportingToolDetailGetAllResult.ProgramParticipationId) Visible="true" HeaderText="Program Participation" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left"  ForeignKeyField="@nameof(AProgramParticipationStatus.ProgramParticipationId)" ForeignKeyValue="@nameof(AProgramParticipationStatus.ProgramParticipationDescription)" ForeignDataSource="@ProgramParticipationData" Width="140">
                                                                                    <EditTemplate>
                                                                                        <SfDropDownList @bind-Value="@((context as spHomeVisitServiceReportingToolDetailGetAllResult).ProgramParticipationId)" Enabled="true" TItem="AProgramParticipationStatus" TValue="int?" DataSource="@ProgramParticipationData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true" PopupWidth="150%">
                                                                                            <DropDownListFieldSettings Value="@nameof(AProgramParticipationStatus.ProgramParticipationId)" Text="@nameof(AProgramParticipationStatus.ProgramParticipationDescription)"></DropDownListFieldSettings>
                                                                                        </SfDropDownList>
                                                                                    </EditTemplate>
                                                                                </GridForeignColumn>
                                                                                <GridColumn Field=@nameof(spHomeVisitServiceReportingToolDetailGetAllResult.KnownRiskFactorDescription) AllowEditing="false" Visible="true" HeaderText="Risk Factor" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="140"></GridColumn>
                                                                                <GridColumn Field=@nameof(spHomeVisitServiceReportingToolDetailGetAllResult.HIVStatusDescription) AllowEditing="false" Visible="true" HeaderText="HIV Status" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="140"></GridColumn>
                                                                               <GridColumn HeaderText="(A) HVAT Gap/Need ">
                                                                                    <GridColumns>
                                                                                        <GridColumn HeaderText="Stable" Width="130" ClipMode="ClipMode.EllipsisWithTooltip">
                                                                                            <EditTemplate>
                                                                                                @{
                                                                                                     List<int> c = new List<int>();
                                                                                                                if (!string.IsNullOrEmpty((context as spHomeVisitServiceReportingToolDetailGetAllResult).Gap_Needed_Stable))
                                                                                                                {
                                                                                                                    var a = (context as spHomeVisitServiceReportingToolDetailGetAllResult).Gap_Needed_Stable.Split(',');
                                                                                                                    foreach (var n in a)
                                                                                                                    {
                                                                                                                        int b = Convert.ToInt32(n.Trim());
                                                                                                                        c.Add(b);
                                                                                                                    }
                                                                                                                    //StableObj.Value = c.ToArray();
                                                                                                                }
                                                                                                }
                                                                                                <SfMultiSelect Value="c.ToArray()" TValue="int[]" TItem="AHomeVisitServicesNeeded" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@NeededStableData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" PopupWidth="200%">
                                                                                                    <MultiSelectFieldSettings Value="@nameof(AHomeVisitServicesNeeded.ServiceNeededId)" Text="@nameof(AHomeVisitServicesNeeded.ServiceNeededDesc)" GroupBy="@nameof(AHomeVisitServicesNeeded.ServiceClassiffication)"></MultiSelectFieldSettings>
                                                                                                     <MultiSelectEvents TValue="int[]" TItem="AHomeVisitServicesNeeded" ValueChange="@((Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)=>{
                                                                                                            if (args.Value != null)
                                                                                                            {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Gap_Needed_Stable = string.Join(",", args.Value);
                                                                                                            }
                                                                                                            else {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Gap_Needed_Stable = null;
                                                                                                            }
                                                                                                            })">
                                                                                                    </MultiSelectEvents>
                                                                                                </SfMultiSelect>
                                                                                            </EditTemplate>
                                                                                            <Template>
                                                                                                @{
                                                                                            var data = (context as spHomeVisitServiceReportingToolDetailGetAllResult);
                                                                                            if (!string.IsNullOrEmpty(data.Gap_Needed_Stable))
                                                                                            {
                                                                                                string result = string.Empty;
                                                                                                var a = data.Gap_Needed_Stable.Split(",");
                                                                                                int count = 1;
                                                                                                foreach (var n in a)
                                                                                                {
                                                                                                    int b = Convert.ToInt32(n.Trim());
                                                                                                    var x = NeededStableData.FirstOrDefault(o => o.ServiceNeededId == b);
                                                                                                    if (x != null)
                                                                                                    {
                                                                                                        if (count != a.Length)
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc + ", ";
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc;
                                                                                                        }
                                                                                                    }
                                                                                                    count++;
                                                                                                }
                                                                                                            <p>@result</p>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                            <p></p>
                                                                                            }
                                                                                                }
                                                                                            </Template>
                                                                                        </GridColumn>
                                                                                        <GridColumn HeaderText="Schooled" Width="130" ClipMode="ClipMode.EllipsisWithTooltip">
                                                                                         <EditTemplate>
                                                                                                @{
                                                                                                     List<int> c = new List<int>();
                                                                                                                if (!string.IsNullOrEmpty((context as spHomeVisitServiceReportingToolDetailGetAllResult).Gap_Needed_Schooled))
                                                                                                                {
                                                                                                                    var a = (context as spHomeVisitServiceReportingToolDetailGetAllResult).Gap_Needed_Schooled.Split(',');
                                                                                                                    foreach (var n in a)
                                                                                                                    {
                                                                                                                        int b = Convert.ToInt32(n.Trim());
                                                                                                                        c.Add(b);
                                                                                                                    }
                                                                                                                    //StableObj.Value = c.ToArray();
                                                                                                                }
                                                                                                }
                                                                                                <SfMultiSelect Value="c.ToArray()" TValue="int[]" TItem="AHomeVisitServicesNeeded" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@NeededSchoolData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" PopupWidth="200%">
                                                                                                    <MultiSelectFieldSettings Value="@nameof(AHomeVisitServicesNeeded.ServiceNeededId)" Text="@nameof(AHomeVisitServicesNeeded.ServiceNeededDesc)" GroupBy="@nameof(AHomeVisitServicesNeeded.ServiceClassiffication)"></MultiSelectFieldSettings>
                                                                                                     <MultiSelectEvents TValue="int[]" TItem="AHomeVisitServicesNeeded" ValueChange="@((Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)=>{
                                                                                                            if (args.Value != null)
                                                                                                            {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Gap_Needed_Schooled = string.Join(",", args.Value);
                                                                                                            }
                                                                                                            else {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Gap_Needed_Schooled = null;
                                                                                                            }
                                                                                                            })">
                                                                                                    </MultiSelectEvents>
                                                                                                </SfMultiSelect>
                                                                                            </EditTemplate>
                                                                                            <Template>
                                                                                                @{
                                                                                            var data = (context as spHomeVisitServiceReportingToolDetailGetAllResult);
                                                                                            if (!string.IsNullOrEmpty(data.Gap_Needed_Schooled))
                                                                                            {
                                                                                                string result = string.Empty;
                                                                                                var a = data.Gap_Needed_Schooled.Split(",");
                                                                                                int count = 1;
                                                                                                foreach (var n in a)
                                                                                                {
                                                                                                    int b = Convert.ToInt32(n.Trim());
                                                                                                    var x = NeededSchoolData.FirstOrDefault(o => o.ServiceNeededId == b);
                                                                                                    if (x != null)
                                                                                                    {
                                                                                                        if (count != a.Length)
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc + ", ";
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc;
                                                                                                        }
                                                                                                    }
                                                                                                    count++;
                                                                                                }
                                                                                                            <p>@result</p>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                            <p></p>
                                                                                            }
                                                                                                }
                                                                                            </Template>
                                                                                        </GridColumn>
                                                                                        <GridColumn HeaderText="Safe" Width="130" ClipMode="ClipMode.EllipsisWithTooltip">
                                                                                        <EditTemplate>
                                                                                                @{
                                                                                                     List<int> c = new List<int>();
                                                                                                                if (!string.IsNullOrEmpty((context as spHomeVisitServiceReportingToolDetailGetAllResult).Gap_Needed_Safe))
                                                                                                                {
                                                                                                                    var a = (context as spHomeVisitServiceReportingToolDetailGetAllResult).Gap_Needed_Safe.Split(',');
                                                                                                                    foreach (var n in a)
                                                                                                                    {
                                                                                                                        int b = Convert.ToInt32(n.Trim());
                                                                                                                        c.Add(b);
                                                                                                                    }
                                                                                                                    //StableObj.Value = c.ToArray();
                                                                                                                }
                                                                                                }
                                                                                                <SfMultiSelect Value="c.ToArray()" TValue="int[]" TItem="AHomeVisitServicesNeeded" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@NeededSafeData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" PopupWidth="200%">
                                                                                                    <MultiSelectFieldSettings Value="@nameof(AHomeVisitServicesNeeded.ServiceNeededId)" Text="@nameof(AHomeVisitServicesNeeded.ServiceNeededDesc)" GroupBy="@nameof(AHomeVisitServicesNeeded.ServiceClassiffication)"></MultiSelectFieldSettings>
                                                                                                     <MultiSelectEvents TValue="int[]" TItem="AHomeVisitServicesNeeded" ValueChange="@((Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)=>{
                                                                                                            if (args.Value != null)
                                                                                                            {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Gap_Needed_Safe = string.Join(",", args.Value);
                                                                                                            }
                                                                                                            else {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Gap_Needed_Safe = null;
                                                                                                            }
                                                                                                            })">
                                                                                                    </MultiSelectEvents>
                                                                                                </SfMultiSelect>
                                                                                            </EditTemplate>
                                                                                            <Template>
                                                                                                @{
                                                                                            var data = (context as spHomeVisitServiceReportingToolDetailGetAllResult);
                                                                                            if (!string.IsNullOrEmpty(data.Gap_Needed_Safe))
                                                                                            {
                                                                                                string result = string.Empty;
                                                                                                var a = data.Gap_Needed_Safe.Split(",");
                                                                                                int count = 1;
                                                                                                foreach (var n in a)
                                                                                                {
                                                                                                    int b = Convert.ToInt32(n.Trim());
                                                                                                    var x = NeededSafeData.FirstOrDefault(o => o.ServiceNeededId == b);
                                                                                                    if (x != null)
                                                                                                    {
                                                                                                        if (count != a.Length)
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc + ", ";
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc;
                                                                                                        }
                                                                                                    }
                                                                                                    count++;
                                                                                                }
                                                                                                            <p>@result</p>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                            <p></p>
                                                                                            }
                                                                                                }
                                                                                            </Template>
                                                                                        </GridColumn>
                                                                                        <GridColumn HeaderText="Healthy" Width="130" ClipMode="ClipMode.EllipsisWithTooltip">
                                                                                        <EditTemplate>
                                                                                                @{
                                                                                                     List<int> c = new List<int>();
                                                                                                                if (!string.IsNullOrEmpty((context as spHomeVisitServiceReportingToolDetailGetAllResult).Gap_Needed_Healthy))
                                                                                                                {
                                                                                                                    var a = (context as spHomeVisitServiceReportingToolDetailGetAllResult).Gap_Needed_Healthy.Split(',');
                                                                                                                    foreach (var n in a)
                                                                                                                    {
                                                                                                                        int b = Convert.ToInt32(n.Trim());
                                                                                                                        c.Add(b);
                                                                                                                    }
                                                                                                                    //StableObj.Value = c.ToArray();
                                                                                                                }
                                                                                                }
                                                                                                <SfMultiSelect Value="c.ToArray()" TValue="int[]" TItem="AHomeVisitServicesNeeded" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@NeededHealthyData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" PopupWidth="200%">
                                                                                                    <MultiSelectFieldSettings Value="@nameof(AHomeVisitServicesNeeded.ServiceNeededId)" Text="@nameof(AHomeVisitServicesNeeded.ServiceNeededDesc)" GroupBy="@nameof(AHomeVisitServicesNeeded.ServiceClassiffication)"></MultiSelectFieldSettings>
                                                                                                     <MultiSelectEvents TValue="int[]" TItem="AHomeVisitServicesNeeded" ValueChange="@((Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)=>{
                                                                                                            if (args.Value != null)
                                                                                                            {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Gap_Needed_Healthy = string.Join(",", args.Value);
                                                                                                            }
                                                                                                            else {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Gap_Needed_Healthy = null;
                                                                                                            }
                                                                                                            })">
                                                                                                    </MultiSelectEvents>
                                                                                                </SfMultiSelect>
                                                                                            </EditTemplate>
                                                                                            <Template>
                                                                                                @{
                                                                                            var data = (context as spHomeVisitServiceReportingToolDetailGetAllResult);
                                                                                            if (!string.IsNullOrEmpty(data.Gap_Needed_Healthy))
                                                                                            {
                                                                                                string result = string.Empty;
                                                                                                var a = data.Gap_Needed_Healthy.Split(",");
                                                                                                int count = 1;
                                                                                                foreach (var n in a)
                                                                                                {
                                                                                                    int b = Convert.ToInt32(n.Trim());
                                                                                                    var x = NeededHealthyData.FirstOrDefault(o => o.ServiceNeededId == b);
                                                                                                    if (x != null)
                                                                                                    {
                                                                                                        if (count != a.Length)
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc + ", ";
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc;
                                                                                                        }
                                                                                                    }
                                                                                                    count++;
                                                                                                }
                                                                                                            <p>@result</p>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                            <p></p>
                                                                                            }
                                                                                                }
                                                                                            </Template>
                                                                                        </GridColumn>
                                                                                    </GridColumns>
                                                                                </GridColumn> 

                                                                                <GridColumn HeaderText="(B) New/ Emerging Need from Home Visit or Facility (different from HVAT) ">
                                                                                    <GridColumns>
                                                                                        <GridColumn HeaderText="Stable" Width="130" ClipMode="ClipMode.EllipsisWithTooltip">
                                                                                            <EditTemplate>
                                                                                                @{
                                                                                                     List<int> c = new List<int>();
                                                                                                                if (!string.IsNullOrEmpty((context as spHomeVisitServiceReportingToolDetailGetAllResult).Emerging_Need_Stable))
                                                                                                                {
                                                                                                                    var a = (context as spHomeVisitServiceReportingToolDetailGetAllResult).Emerging_Need_Stable.Split(',');
                                                                                                                    foreach (var n in a)
                                                                                                                    {
                                                                                                                        int b = Convert.ToInt32(n.Trim());
                                                                                                                        c.Add(b);
                                                                                                                    }
                                                                                                                    //StableObj.Value = c.ToArray();
                                                                                                                }
                                                                                                }
                                                                                                <SfMultiSelect Value="c.ToArray()" TValue="int[]" TItem="AHomeVisitServicesNeeded" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@NeededStableData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" PopupWidth="200%">
                                                                                                    <MultiSelectFieldSettings Value="@nameof(AHomeVisitServicesNeeded.ServiceNeededId)" Text="@nameof(AHomeVisitServicesNeeded.ServiceNeededDesc)" GroupBy="@nameof(AHomeVisitServicesNeeded.ServiceClassiffication)"></MultiSelectFieldSettings>
                                                                                                     <MultiSelectEvents TValue="int[]" TItem="AHomeVisitServicesNeeded" ValueChange="@((Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)=>{
                                                                                                            if (args.Value != null)
                                                                                                            {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Emerging_Need_Stable = string.Join(",", args.Value);
                                                                                                            }
                                                                                                            else {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Emerging_Need_Stable = null;
                                                                                                            }
                                                                                                            })">
                                                                                                    </MultiSelectEvents>
                                                                                                </SfMultiSelect>
                                                                                            </EditTemplate>
                                                                                            <Template>
                                                                                                @{
                                                                                            var data = (context as spHomeVisitServiceReportingToolDetailGetAllResult);
                                                                                            if (!string.IsNullOrEmpty(data.Emerging_Need_Stable))
                                                                                            {
                                                                                                string result = string.Empty;
                                                                                                var a = data.Emerging_Need_Stable.Split(",");
                                                                                                int count = 1;
                                                                                                foreach (var n in a)
                                                                                                {
                                                                                                    int b = Convert.ToInt32(n.Trim());
                                                                                                    var x = NeededStableData.FirstOrDefault(o => o.ServiceNeededId == b);
                                                                                                    if (x != null)
                                                                                                    {
                                                                                                        if (count != a.Length)
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc + ", ";
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc;
                                                                                                        }
                                                                                                    }
                                                                                                    count++;
                                                                                                }
                                                                                                            <p>@result</p>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                            <p></p>
                                                                                            }
                                                                                                }
                                                                                            </Template>
                                                                                        </GridColumn>
                                                                                        <GridColumn HeaderText="Schooled" Width="130" ClipMode="ClipMode.EllipsisWithTooltip">
                                                                                         <EditTemplate>
                                                                                                @{
                                                                                                     List<int> c = new List<int>();
                                                                                                                if (!string.IsNullOrEmpty((context as spHomeVisitServiceReportingToolDetailGetAllResult).Emerging_Need_Schooled))
                                                                                                                {
                                                                                                                    var a = (context as spHomeVisitServiceReportingToolDetailGetAllResult).Emerging_Need_Schooled.Split(',');
                                                                                                                    foreach (var n in a)
                                                                                                                    {
                                                                                                                        int b = Convert.ToInt32(n.Trim());
                                                                                                                        c.Add(b);
                                                                                                                    }
                                                                                                                    //StableObj.Value = c.ToArray();
                                                                                                                }
                                                                                                }
                                                                                                <SfMultiSelect Value="c.ToArray()" TValue="int[]" TItem="AHomeVisitServicesNeeded" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@NeededSchoolData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" PopupWidth="200%">
                                                                                                    <MultiSelectFieldSettings Value="@nameof(AHomeVisitServicesNeeded.ServiceNeededId)" Text="@nameof(AHomeVisitServicesNeeded.ServiceNeededDesc)" GroupBy="@nameof(AHomeVisitServicesNeeded.ServiceClassiffication)"></MultiSelectFieldSettings>
                                                                                                     <MultiSelectEvents TValue="int[]" TItem="AHomeVisitServicesNeeded" ValueChange="@((Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)=>{
                                                                                                            if (args.Value != null)
                                                                                                            {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Emerging_Need_Schooled = string.Join(",", args.Value);
                                                                                                            }
                                                                                                            else {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Emerging_Need_Schooled = null;
                                                                                                            }
                                                                                                            })">
                                                                                                    </MultiSelectEvents>
                                                                                                </SfMultiSelect>
                                                                                            </EditTemplate>
                                                                                            <Template>
                                                                                                @{
                                                                                            var data = (context as spHomeVisitServiceReportingToolDetailGetAllResult);
                                                                                            if (!string.IsNullOrEmpty(data.Emerging_Need_Schooled))
                                                                                            {
                                                                                                string result = string.Empty;
                                                                                                var a = data.Emerging_Need_Schooled.Split(",");
                                                                                                int count = 1;
                                                                                                foreach (var n in a)
                                                                                                {
                                                                                                    int b = Convert.ToInt32(n.Trim());
                                                                                                    var x = NeededSchoolData.FirstOrDefault(o => o.ServiceNeededId == b);
                                                                                                    if (x != null)
                                                                                                    {
                                                                                                        if (count != a.Length)
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc + ", ";
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc;
                                                                                                        }
                                                                                                    }
                                                                                                    count++;
                                                                                                }
                                                                                                            <p>@result</p>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                            <p></p>
                                                                                            }
                                                                                                }
                                                                                            </Template>
                                                                                        </GridColumn>
                                                                                        <GridColumn HeaderText="Safe" Width="130" ClipMode="ClipMode.EllipsisWithTooltip">
                                                                                        <EditTemplate>
                                                                                                @{
                                                                                                     List<int> c = new List<int>();
                                                                                                                if (!string.IsNullOrEmpty((context as spHomeVisitServiceReportingToolDetailGetAllResult).Emerging_Need_Safe))
                                                                                                                {
                                                                                                                    var a = (context as spHomeVisitServiceReportingToolDetailGetAllResult).Emerging_Need_Safe.Split(',');
                                                                                                                    foreach (var n in a)
                                                                                                                    {
                                                                                                                        int b = Convert.ToInt32(n.Trim());
                                                                                                                        c.Add(b);
                                                                                                                    }
                                                                                                                    //StableObj.Value = c.ToArray();
                                                                                                                }
                                                                                                }
                                                                                                <SfMultiSelect Value="c.ToArray()" TValue="int[]" TItem="AHomeVisitServicesNeeded" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@NeededSafeData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" PopupWidth="200%">
                                                                                                    <MultiSelectFieldSettings Value="@nameof(AHomeVisitServicesNeeded.ServiceNeededId)" Text="@nameof(AHomeVisitServicesNeeded.ServiceNeededDesc)" GroupBy="@nameof(AHomeVisitServicesNeeded.ServiceClassiffication)"></MultiSelectFieldSettings>
                                                                                                     <MultiSelectEvents TValue="int[]" TItem="AHomeVisitServicesNeeded" ValueChange="@((Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)=>{
                                                                                                            if (args.Value != null)
                                                                                                            {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Emerging_Need_Safe = string.Join(",", args.Value);
                                                                                                            }
                                                                                                            else {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Emerging_Need_Safe = null;
                                                                                                            }
                                                                                                            })">
                                                                                                    </MultiSelectEvents>
                                                                                                </SfMultiSelect>
                                                                                            </EditTemplate>
                                                                                            <Template>
                                                                                                @{
                                                                                            var data = (context as spHomeVisitServiceReportingToolDetailGetAllResult);
                                                                                            if (!string.IsNullOrEmpty(data.Emerging_Need_Safe))
                                                                                            {
                                                                                                string result = string.Empty;
                                                                                                var a = data.Emerging_Need_Safe.Split(",");
                                                                                                int count = 1;
                                                                                                foreach (var n in a)
                                                                                                {
                                                                                                    int b = Convert.ToInt32(n.Trim());
                                                                                                    var x = NeededSafeData.FirstOrDefault(o => o.ServiceNeededId == b);
                                                                                                    if (x != null)
                                                                                                    {
                                                                                                        if (count != a.Length)
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc + ", ";
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc;
                                                                                                        }
                                                                                                    }
                                                                                                    count++;
                                                                                                }
                                                                                                            <p>@result</p>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                            <p></p>
                                                                                            }
                                                                                                }
                                                                                            </Template>
                                                                                        </GridColumn>
                                                                                        <GridColumn HeaderText="Healthy" Width="130" ClipMode="ClipMode.EllipsisWithTooltip">
                                                                                        <EditTemplate>
                                                                                                @{
                                                                                                     List<int> c = new List<int>();
                                                                                                                if (!string.IsNullOrEmpty((context as spHomeVisitServiceReportingToolDetailGetAllResult).Emerging_Need_Healthy))
                                                                                                                {
                                                                                                                    var a = (context as spHomeVisitServiceReportingToolDetailGetAllResult).Emerging_Need_Healthy.Split(',');
                                                                                                                    foreach (var n in a)
                                                                                                                    {
                                                                                                                        int b = Convert.ToInt32(n.Trim());
                                                                                                                        c.Add(b);
                                                                                                                    }
                                                                                                                    //StableObj.Value = c.ToArray();
                                                                                                                }
                                                                                                }
                                                                                                <SfMultiSelect Value="c.ToArray()" TValue="int[]" TItem="AHomeVisitServicesNeeded" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@NeededHealthyData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" PopupWidth="200%">
                                                                                                    <MultiSelectFieldSettings Value="@nameof(AHomeVisitServicesNeeded.ServiceNeededId)" Text="@nameof(AHomeVisitServicesNeeded.ServiceNeededDesc)" GroupBy="@nameof(AHomeVisitServicesNeeded.ServiceClassiffication)"></MultiSelectFieldSettings>
                                                                                                     <MultiSelectEvents TValue="int[]" TItem="AHomeVisitServicesNeeded" ValueChange="@((Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)=>{
                                                                                                            if (args.Value != null)
                                                                                                            {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Emerging_Need_Healthy = string.Join(",", args.Value);
                                                                                                            }
                                                                                                            else {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Emerging_Need_Healthy = null;
                                                                                                            }
                                                                                                            })">
                                                                                                    </MultiSelectEvents>
                                                                                                </SfMultiSelect>
                                                                                            </EditTemplate>
                                                                                            <Template>
                                                                                                @{
                                                                                            var data = (context as spHomeVisitServiceReportingToolDetailGetAllResult);
                                                                                            if (!string.IsNullOrEmpty(data.Emerging_Need_Healthy))
                                                                                            {
                                                                                                string result = string.Empty;
                                                                                                var a = data.Emerging_Need_Healthy.Split(",");
                                                                                                int count = 1;
                                                                                                foreach (var n in a)
                                                                                                {
                                                                                                    int b = Convert.ToInt32(n.Trim());
                                                                                                    var x = NeededHealthyData.FirstOrDefault(o => o.ServiceNeededId == b);
                                                                                                    if (x != null)
                                                                                                    {
                                                                                                        if (count != a.Length)
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc + ", ";
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc;
                                                                                                        }
                                                                                                    }
                                                                                                    count++;
                                                                                                }
                                                                                                            <p>@result</p>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                            <p></p>
                                                                                            }
                                                                                                }
                                                                                            </Template>
                                                                                        </GridColumn>
                                                                                    </GridColumns>
                                                                                </GridColumn>

                                                                                <GridColumn HeaderText="(C) Service Received">
                                                                                    <GridColumns>
                                                                                        <GridColumn HeaderText="Stable" Width="130" ClipMode="ClipMode.EllipsisWithTooltip">
                                                                                            <EditTemplate>
                                                                                                @{
                                                                                                     List<int> c = new List<int>();
                                                                                                                if (!string.IsNullOrEmpty((context as spHomeVisitServiceReportingToolDetailGetAllResult).Stable))
                                                                                                                {
                                                                                                                    var a = (context as spHomeVisitServiceReportingToolDetailGetAllResult).Stable.Split(',');
                                                                                                                    foreach (var n in a)
                                                                                                                    {
                                                                                                                        int b = Convert.ToInt32(n.Trim());
                                                                                                                        c.Add(b);
                                                                                                                    }
                                                                                                                    //StableObj.Value = c.ToArray();
                                                                                                                }
                                                                                                }
                                                                                                <SfMultiSelect Value="c.ToArray()" TValue="int[]" TItem="AServiceReceived" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@StableData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" PopupWidth="200%">
                                                                                                    <MultiSelectFieldSettings Value="@nameof(AServiceReceived.ServiceReceivedId)" Text="@nameof(AServiceReceived.ServiceReceivedDesc)" GroupBy="@nameof(AServiceReceived.ServiceClassiffication)"></MultiSelectFieldSettings>
                                                                                                     <MultiSelectEvents TValue="int[]" TItem="AServiceReceived" ValueChange="@((Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)=>{
                                                                                                            if (args.Value != null)
                                                                                                            {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Stable = string.Join(",", args.Value);
                                                                                                            }
                                                                                                            else {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Stable = null;
                                                                                                            }
                                                                                                            })">
                                                                                                    </MultiSelectEvents>
                                                                                                </SfMultiSelect>
                                                                                            </EditTemplate>
                                                                                            <Template>
                                                                                                @{
                                                                                            var data = (context as spHomeVisitServiceReportingToolDetailGetAllResult);
                                                                                            if (!string.IsNullOrEmpty(data.Stable))
                                                                                            {
                                                                                                string result = string.Empty;
                                                                                                var a = data.Stable.Split(",");
                                                                                                int count = 1;
                                                                                                foreach (var n in a)
                                                                                                {
                                                                                                    int b = Convert.ToInt32(n.Trim());
                                                                                                    var x = StableData.FirstOrDefault(o => o.ServiceReceivedId == b);
                                                                                                    if (x != null)
                                                                                                    {
                                                                                                        if (count != a.Length)
                                                                                                        {
                                                                                                            result += x.ServiceReceivedDesc + ", ";
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            result += x.ServiceReceivedDesc;
                                                                                                        }
                                                                                                    }
                                                                                                    count++;
                                                                                                }
                                                                                                            <p>@result</p>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                            <p></p>
                                                                                            }
                                                                                                }
                                                                                            </Template>
                                                                                        </GridColumn>
                                                                                        <GridColumn HeaderText="Schooled" Width="130" ClipMode="ClipMode.EllipsisWithTooltip">
                                                                                         <EditTemplate>
                                                                                                @{
                                                                                                     List<int> c = new List<int>();
                                                                                                                if (!string.IsNullOrEmpty((context as spHomeVisitServiceReportingToolDetailGetAllResult).Schooled))
                                                                                                                {
                                                                                                                    var a = (context as spHomeVisitServiceReportingToolDetailGetAllResult).Schooled.Split(',');
                                                                                                                    foreach (var n in a)
                                                                                                                    {
                                                                                                                        int b = Convert.ToInt32(n.Trim());
                                                                                                                        c.Add(b);
                                                                                                                    }
                                                                                                                    //StableObj.Value = c.ToArray();
                                                                                                                }
                                                                                                }
                                                                                                <SfMultiSelect Value="c.ToArray()" TValue="int[]" TItem="AServiceReceived" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@SchoolData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" PopupWidth="200%">
                                                                                                    <MultiSelectFieldSettings Value="@nameof(AServiceReceived.ServiceReceivedId)" Text="@nameof(AServiceReceived.ServiceReceivedDesc)" GroupBy="@nameof(AServiceReceived.ServiceClassiffication)"></MultiSelectFieldSettings>
                                                                                                     <MultiSelectEvents TValue="int[]" TItem="AServiceReceived" ValueChange="@((Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)=>{
                                                                                                            if (args.Value != null)
                                                                                                            {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Schooled = string.Join(",", args.Value);
                                                                                                            }
                                                                                                            else {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Schooled = null;
                                                                                                            }
                                                                                                            })">
                                                                                                    </MultiSelectEvents>
                                                                                                </SfMultiSelect>
                                                                                            </EditTemplate>
                                                                                            <Template>
                                                                                                @{
                                                                                            var data = (context as spHomeVisitServiceReportingToolDetailGetAllResult);
                                                                                            if (!string.IsNullOrEmpty(data.Schooled))
                                                                                            {
                                                                                                string result = string.Empty;
                                                                                                var a = data.Schooled.Split(",");
                                                                                                int count = 1;
                                                                                                foreach (var n in a)
                                                                                                {
                                                                                                    int b = Convert.ToInt32(n.Trim());
                                                                                                    var x = SchoolData.FirstOrDefault(o => o.ServiceReceivedId == b);
                                                                                                    if (x != null)
                                                                                                    {
                                                                                                        if (count != a.Length)
                                                                                                        {
                                                                                                            result += x.ServiceReceivedDesc + ", ";
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            result += x.ServiceReceivedDesc;
                                                                                                        }
                                                                                                    }
                                                                                                    count++;
                                                                                                }
                                                                                                            <p>@result</p>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                            <p></p>
                                                                                            }
                                                                                                }
                                                                                            </Template>
                                                                                        </GridColumn>
                                                                                        <GridColumn HeaderText="Safe" Width="130" ClipMode="ClipMode.EllipsisWithTooltip">
                                                                                        <EditTemplate>
                                                                                                @{
                                                                                                     List<int> c = new List<int>();
                                                                                                                if (!string.IsNullOrEmpty((context as spHomeVisitServiceReportingToolDetailGetAllResult).Safe))
                                                                                                                {
                                                                                                                    var a = (context as spHomeVisitServiceReportingToolDetailGetAllResult).Safe.Split(',');
                                                                                                                    foreach (var n in a)
                                                                                                                    {
                                                                                                                        int b = Convert.ToInt32(n.Trim());
                                                                                                                        c.Add(b);
                                                                                                                    }
                                                                                                                    //StableObj.Value = c.ToArray();
                                                                                                                }
                                                                                                }
                                                                                                <SfMultiSelect Value="c.ToArray()" TValue="int[]" TItem="AServiceReceived" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@SafeData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" PopupWidth="200%">
                                                                                                    <MultiSelectFieldSettings Value="@nameof(AServiceReceived.ServiceReceivedId)" Text="@nameof(AServiceReceived.ServiceReceivedDesc)" GroupBy="@nameof(AServiceReceived.ServiceClassiffication)"></MultiSelectFieldSettings>
                                                                                                     <MultiSelectEvents TValue="int[]" TItem="AServiceReceived" ValueChange="@((Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)=>{
                                                                                                            if (args.Value != null)
                                                                                                            {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Safe = string.Join(",", args.Value);
                                                                                                            }
                                                                                                            else {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Safe = null;
                                                                                                            }
                                                                                                            })">
                                                                                                    </MultiSelectEvents>
                                                                                                </SfMultiSelect>
                                                                                            </EditTemplate>
                                                                                            <Template>
                                                                                                @{
                                                                                            var data = (context as spHomeVisitServiceReportingToolDetailGetAllResult);
                                                                                            if (!string.IsNullOrEmpty(data.Safe))
                                                                                            {
                                                                                                string result = string.Empty;
                                                                                                var a = data.Safe.Split(",");
                                                                                                int count = 1;
                                                                                                foreach (var n in a)
                                                                                                {
                                                                                                    int b = Convert.ToInt32(n.Trim());
                                                                                                    var x = SafeData.FirstOrDefault(o => o.ServiceReceivedId == b);
                                                                                                    if (x != null)
                                                                                                    {
                                                                                                        if (count != a.Length)
                                                                                                        {
                                                                                                            result += x.ServiceReceivedDesc + ", ";
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            result += x.ServiceReceivedDesc;
                                                                                                        }
                                                                                                    }
                                                                                                    count++;
                                                                                                }
                                                                                                            <p>@result</p>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                            <p></p>
                                                                                            }
                                                                                                }
                                                                                            </Template>
                                                                                        </GridColumn>
                                                                                        <GridColumn HeaderText="Healthy" Width="130" ClipMode="ClipMode.EllipsisWithTooltip">
                                                                                        <EditTemplate>
                                                                                                @{
                                                                                                     List<int> c = new List<int>();
                                                                                                                if (!string.IsNullOrEmpty((context as spHomeVisitServiceReportingToolDetailGetAllResult).Healthy))
                                                                                                                {
                                                                                                                    var a = (context as spHomeVisitServiceReportingToolDetailGetAllResult).Healthy.Split(',');
                                                                                                                    foreach (var n in a)
                                                                                                                    {
                                                                                                                        int b = Convert.ToInt32(n.Trim());
                                                                                                                        c.Add(b);
                                                                                                                    }
                                                                                                                    //StableObj.Value = c.ToArray();
                                                                                                                }
                                                                                                }
                                                                                                <SfMultiSelect Value="c.ToArray()" TValue="int[]" TItem="AServiceReceived" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@HealthyData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" PopupWidth="200%">
                                                                                                    <MultiSelectFieldSettings Value="@nameof(AServiceReceived.ServiceReceivedId)" Text="@nameof(AServiceReceived.ServiceReceivedDesc)" GroupBy="@nameof(AServiceReceived.ServiceClassiffication)"></MultiSelectFieldSettings>
                                                                                                     <MultiSelectEvents TValue="int[]" TItem="AServiceReceived" ValueChange="@((Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)=>{
                                                                                                            if (args.Value != null)
                                                                                                            {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Healthy = string.Join(",", args.Value);
                                                                                                            }
                                                                                                            else {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Healthy = null;
                                                                                                            }
                                                                                                            })">
                                                                                                    </MultiSelectEvents>
                                                                                                </SfMultiSelect>
                                                                                            </EditTemplate>
                                                                                            <Template>
                                                                                                @{
                                                                                            var data = (context as spHomeVisitServiceReportingToolDetailGetAllResult);
                                                                                            if (!string.IsNullOrEmpty(data.Healthy))
                                                                                            {
                                                                                                string result = string.Empty;
                                                                                                var a = data.Healthy.Split(",");
                                                                                                int count = 1;
                                                                                                foreach (var n in a)
                                                                                                {
                                                                                                    int b = Convert.ToInt32(n.Trim());
                                                                                                    var x = HealthyData.FirstOrDefault(o => o.ServiceReceivedId == b);
                                                                                                    if (x != null)
                                                                                                    {
                                                                                                        if (count != a.Length)
                                                                                                        {
                                                                                                            result += x.ServiceReceivedDesc + ", ";
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            result += x.ServiceReceivedDesc;
                                                                                                        }
                                                                                                    }
                                                                                                    count++;
                                                                                                }
                                                                                                            <p>@result</p>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                            <p></p>
                                                                                            }
                                                                                                }
                                                                                            </Template>
                                                                                        </GridColumn>
                                                                                    </GridColumns>
                                                                                </GridColumn> 
                                                                                
                                                                                <GridColumn HeaderText="(D) Follow-up/ Unmet Need">
                                                                                    <GridColumns>
                                                                                        <GridColumn HeaderText="Stable" Width="130" ClipMode="ClipMode.EllipsisWithTooltip">
                                                                                            <EditTemplate>
                                                                                                @{
                                                                                                     List<int> c = new List<int>();
                                                                                                                if (!string.IsNullOrEmpty((context as spHomeVisitServiceReportingToolDetailGetAllResult).Unmet_Need_Stable))
                                                                                                                {
                                                                                                                    var a = (context as spHomeVisitServiceReportingToolDetailGetAllResult).Unmet_Need_Stable.Split(',');
                                                                                                                    foreach (var n in a)
                                                                                                                    {
                                                                                                                        int b = Convert.ToInt32(n.Trim());
                                                                                                                        c.Add(b);
                                                                                                                    }
                                                                                                                    //StableObj.Value = c.ToArray();
                                                                                                                }
                                                                                                }
                                                                                                <SfMultiSelect Value="c.ToArray()" TValue="int[]" TItem="AHomeVisitServicesNeeded" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@NeededStableData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" PopupWidth="200%">
                                                                                                    <MultiSelectFieldSettings Value="@nameof(AHomeVisitServicesNeeded.ServiceNeededId)" Text="@nameof(AHomeVisitServicesNeeded.ServiceNeededDesc)" GroupBy="@nameof(AHomeVisitServicesNeeded.ServiceClassiffication)"></MultiSelectFieldSettings>
                                                                                                     <MultiSelectEvents TValue="int[]" TItem="AHomeVisitServicesNeeded" ValueChange="@((Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)=>{
                                                                                                            if (args.Value != null)
                                                                                                            {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Unmet_Need_Stable = string.Join(",", args.Value);
                                                                                                            }
                                                                                                            else {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Unmet_Need_Stable = null;
                                                                                                            }
                                                                                                            })">
                                                                                                    </MultiSelectEvents>
                                                                                                </SfMultiSelect>
                                                                                            </EditTemplate>
                                                                                            <Template>
                                                                                                @{
                                                                                            var data = (context as spHomeVisitServiceReportingToolDetailGetAllResult);
                                                                                            if (!string.IsNullOrEmpty(data.Unmet_Need_Stable))
                                                                                            {
                                                                                                string result = string.Empty;
                                                                                                var a = data.Unmet_Need_Stable.Split(",");
                                                                                                int count = 1;
                                                                                                foreach (var n in a)
                                                                                                {
                                                                                                    int b = Convert.ToInt32(n.Trim());
                                                                                                    var x = NeededStableData.FirstOrDefault(o => o.ServiceNeededId == b);
                                                                                                    if (x != null)
                                                                                                    {
                                                                                                        if (count != a.Length)
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc + ", ";
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc;
                                                                                                        }
                                                                                                    }
                                                                                                    count++;
                                                                                                }
                                                                                                            <p>@result</p>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                            <p></p>
                                                                                            }
                                                                                                }
                                                                                            </Template>
                                                                                        </GridColumn>
                                                                                        <GridColumn HeaderText="Schooled" Width="130" ClipMode="ClipMode.EllipsisWithTooltip">
                                                                                         <EditTemplate>
                                                                                                @{
                                                                                                     List<int> c = new List<int>();
                                                                                                                if (!string.IsNullOrEmpty((context as spHomeVisitServiceReportingToolDetailGetAllResult).Unmet_Need_Schooled))
                                                                                                                {
                                                                                                                    var a = (context as spHomeVisitServiceReportingToolDetailGetAllResult).Unmet_Need_Schooled.Split(',');
                                                                                                                    foreach (var n in a)
                                                                                                                    {
                                                                                                                        int b = Convert.ToInt32(n.Trim());
                                                                                                                        c.Add(b);
                                                                                                                    }
                                                                                                                    //StableObj.Value = c.ToArray();
                                                                                                                }
                                                                                                }
                                                                                                <SfMultiSelect Value="c.ToArray()" TValue="int[]" TItem="AHomeVisitServicesNeeded" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@NeededSchoolData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" PopupWidth="200%">
                                                                                                    <MultiSelectFieldSettings Value="@nameof(AHomeVisitServicesNeeded.ServiceNeededId)" Text="@nameof(AHomeVisitServicesNeeded.ServiceNeededDesc)" GroupBy="@nameof(AHomeVisitServicesNeeded.ServiceClassiffication)"></MultiSelectFieldSettings>
                                                                                                     <MultiSelectEvents TValue="int[]" TItem="AHomeVisitServicesNeeded" ValueChange="@((Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)=>{
                                                                                                            if (args.Value != null)
                                                                                                            {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Unmet_Need_Schooled = string.Join(",", args.Value);
                                                                                                            }
                                                                                                            else {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Unmet_Need_Schooled = null;
                                                                                                            }
                                                                                                            })">
                                                                                                    </MultiSelectEvents>
                                                                                                </SfMultiSelect>
                                                                                            </EditTemplate>
                                                                                            <Template>
                                                                                                @{
                                                                                            var data = (context as spHomeVisitServiceReportingToolDetailGetAllResult);
                                                                                            if (!string.IsNullOrEmpty(data.Unmet_Need_Schooled))
                                                                                            {
                                                                                                string result = string.Empty;
                                                                                                var a = data.Unmet_Need_Schooled.Split(",");
                                                                                                int count = 1;
                                                                                                foreach (var n in a)
                                                                                                {
                                                                                                    int b = Convert.ToInt32(n.Trim());
                                                                                                    var x = NeededSchoolData.FirstOrDefault(o => o.ServiceNeededId == b);
                                                                                                    if (x != null)
                                                                                                    {
                                                                                                        if (count != a.Length)
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc + ", ";
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc;
                                                                                                        }
                                                                                                    }
                                                                                                    count++;
                                                                                                }
                                                                                                            <p>@result</p>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                            <p></p>
                                                                                            }
                                                                                                }
                                                                                            </Template>
                                                                                        </GridColumn>
                                                                                        <GridColumn HeaderText="Safe" Width="130" ClipMode="ClipMode.EllipsisWithTooltip">
                                                                                        <EditTemplate>
                                                                                                @{
                                                                                                     List<int> c = new List<int>();
                                                                                                                if (!string.IsNullOrEmpty((context as spHomeVisitServiceReportingToolDetailGetAllResult).Unmet_Need_Safe))
                                                                                                                {
                                                                                                                    var a = (context as spHomeVisitServiceReportingToolDetailGetAllResult).Unmet_Need_Safe.Split(',');
                                                                                                                    foreach (var n in a)
                                                                                                                    {
                                                                                                                        int b = Convert.ToInt32(n.Trim());
                                                                                                                        c.Add(b);
                                                                                                                    }
                                                                                                                    //StableObj.Value = c.ToArray();
                                                                                                                }
                                                                                                }
                                                                                                <SfMultiSelect Value="c.ToArray()" TValue="int[]" TItem="AHomeVisitServicesNeeded" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@NeededSafeData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" PopupWidth="200%">
                                                                                                    <MultiSelectFieldSettings Value="@nameof(AHomeVisitServicesNeeded.ServiceNeededId)" Text="@nameof(AHomeVisitServicesNeeded.ServiceNeededDesc)" GroupBy="@nameof(AHomeVisitServicesNeeded.ServiceClassiffication)"></MultiSelectFieldSettings>
                                                                                                     <MultiSelectEvents TValue="int[]" TItem="AHomeVisitServicesNeeded" ValueChange="@((Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)=>{
                                                                                                            if (args.Value != null)
                                                                                                            {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Unmet_Need_Safe = string.Join(",", args.Value);
                                                                                                            }
                                                                                                            else {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Unmet_Need_Safe = null;
                                                                                                            }
                                                                                                            })">
                                                                                                    </MultiSelectEvents>
                                                                                                </SfMultiSelect>
                                                                                            </EditTemplate>
                                                                                            <Template>
                                                                                                @{
                                                                                            var data = (context as spHomeVisitServiceReportingToolDetailGetAllResult);
                                                                                            if (!string.IsNullOrEmpty(data.Unmet_Need_Safe))
                                                                                            {
                                                                                                string result = string.Empty;
                                                                                                var a = data.Unmet_Need_Safe.Split(",");
                                                                                                int count = 1;
                                                                                                foreach (var n in a)
                                                                                                {
                                                                                                    int b = Convert.ToInt32(n.Trim());
                                                                                                    var x = NeededSafeData.FirstOrDefault(o => o.ServiceNeededId == b);
                                                                                                    if (x != null)
                                                                                                    {
                                                                                                        if (count != a.Length)
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc + ", ";
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc;
                                                                                                        }
                                                                                                    }
                                                                                                    count++;
                                                                                                }
                                                                                                            <p>@result</p>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                            <p></p>
                                                                                            }
                                                                                                }
                                                                                            </Template>
                                                                                        </GridColumn>
                                                                                        <GridColumn HeaderText="Healthy" Width="130" ClipMode="ClipMode.EllipsisWithTooltip">
                                                                                        <EditTemplate>
                                                                                                @{
                                                                                                     List<int> c = new List<int>();
                                                                                                                if (!string.IsNullOrEmpty((context as spHomeVisitServiceReportingToolDetailGetAllResult).Unmet_Need_Healthy))
                                                                                                                {
                                                                                                                    var a = (context as spHomeVisitServiceReportingToolDetailGetAllResult).Unmet_Need_Healthy.Split(',');
                                                                                                                    foreach (var n in a)
                                                                                                                    {
                                                                                                                        int b = Convert.ToInt32(n.Trim());
                                                                                                                        c.Add(b);
                                                                                                                    }
                                                                                                                    //StableObj.Value = c.ToArray();
                                                                                                                }
                                                                                                }
                                                                                                <SfMultiSelect Value="c.ToArray()" TValue="int[]" TItem="AHomeVisitServicesNeeded" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@NeededHealthyData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="--- Please select---" FloatLabelType="FloatLabelType.Never" PopupHeight="350px" PopupWidth="200%">
                                                                                                    <MultiSelectFieldSettings Value="@nameof(AHomeVisitServicesNeeded.ServiceNeededId)" Text="@nameof(AHomeVisitServicesNeeded.ServiceNeededDesc)" GroupBy="@nameof(AHomeVisitServicesNeeded.ServiceClassiffication)"></MultiSelectFieldSettings>
                                                                                                     <MultiSelectEvents TValue="int[]" TItem="AHomeVisitServicesNeeded" ValueChange="@((Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)=>{
                                                                                                            if (args.Value != null)
                                                                                                            {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Unmet_Need_Healthy = string.Join(",", args.Value);
                                                                                                            }
                                                                                                            else {
                                                                                                                (context as spHomeVisitServiceReportingToolDetailGetAllResult).Unmet_Need_Healthy = null;
                                                                                                            }
                                                                                                            })">
                                                                                                    </MultiSelectEvents>
                                                                                                </SfMultiSelect>
                                                                                            </EditTemplate>
                                                                                            <Template>
                                                                                                @{
                                                                                            var data = (context as spHomeVisitServiceReportingToolDetailGetAllResult);
                                                                                            if (!string.IsNullOrEmpty(data.Unmet_Need_Healthy))
                                                                                            {
                                                                                                string result = string.Empty;
                                                                                                var a = data.Unmet_Need_Healthy.Split(",");
                                                                                                int count = 1;
                                                                                                foreach (var n in a)
                                                                                                {
                                                                                                    int b = Convert.ToInt32(n.Trim());
                                                                                                    var x = NeededHealthyData.FirstOrDefault(o => o.ServiceNeededId == b);
                                                                                                    if (x != null)
                                                                                                    {
                                                                                                        if (count != a.Length)
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc + ", ";
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            result += x.ServiceNeededDesc;
                                                                                                        }
                                                                                                    }
                                                                                                    count++;
                                                                                                }
                                                                                                            <p>@result</p>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                            <p></p>
                                                                                            }
                                                                                                }
                                                                                            </Template>
                                                                                        </GridColumn>
                                                                                    </GridColumns>
                                                                                </GridColumn>
                                                                                <GridColumn Field=@nameof(spHomeVisitServiceReportingToolDetailGetAllResult.Issues_Identified) HeaderText="Provide Details Of the problem/Key issues identified during the visit and Actions taken" Width="300">
                                                                                    <EditTemplate>
                                                                                          <SfTextBox Multiline="true" @bind-Value="@((context as spHomeVisitServiceReportingToolDetailGetAllResult).Issues_Identified)" Enabled="true" Placeholder="Enter Issues" FloatLabelType="FloatLabelType.Never"></SfTextBox>      
                                                                                    </EditTemplate>
                                                                                </GridColumn>
                                                                            </GridColumns>
                                                                        </SfGrid>
                                                                    </div>
                                                                    <div class="form-group col-md-6">
                                                                            <p>Name of the home visitor</p>
                                                                            <SfTextBox Multiline="false" @bind-Value="@(ReportingToolHeaderData.HomeVisitorName)" Enabled="true" Placeholder="Enter Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                    </div>
                                                                    <div class="form-group col-md-6">
                                                                            <p>Title of the home visitor</p>
                                                                            <SfTextBox Multiline="false" @bind-Value="@(ReportingToolHeaderData.VisitorTitle)" Enabled="true" Placeholder="Enter title" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                    </div>
                                                                    <div class="form-group col-md-4">
                                                                            <p>Name of the Reviewer</p>
                                                                            <SfTextBox Multiline="false" @bind-Value="@(ReportingToolHeaderData.ReviewerName)" Enabled="true" Placeholder="Enter Name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                    </div>
                                                                    <div class="form-group col-md-4">
                                                                            <p>Title of the Reviewer</p>
                                                                            <SfTextBox Multiline="false" @bind-Value="@(ReportingToolHeaderData.ReviewerTitle)" Enabled="true" Placeholder="Enter Title" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                                    </div>
                                                                    <div class="form-group col-md-4">
                                                                        <p>Date of Review</p>
                                                                        <SfDatePicker @bind-Value="@(ReportingToolHeaderData.ReviewDate)" Format="dd/MM/yyyy" Placeholder="Enter Date of Review" FloatLabelType="FloatLabelType.Never" />
                                                                    </div>
                                                                </div>
                                                            </div>
                                                    }
                                                </Template>
                                                <FooterTemplate>
                                                    <SfButton CssClass="e-btn e-success" OnClick="SaveFormBtnClick"> Save Form</SfButton>
                                                    <SfButton CssClass="e-btn e-danger" OnClick="CancelFormBtnClick"> Cancel</SfButton>
                                                </FooterTemplate>
                                            </GridEditSettings>
                                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                            <GridPageSettings PageSize="20"></GridPageSettings>
                                            <GridColumns>
                                                @*<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>*@
                                                <GridColumn Field=@nameof(HomeVisitServiceReportingToolHeader.VisitServiceReportingToolHeaderId) HeaderText="HIV TB Tracking Form Id" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
                                                <GridColumn Field=@nameof(HomeVisitServiceReportingToolHeader.VisitationDate) HeaderText="Visitation Date" Format="dd/MM/yyyy" Width="100"></GridColumn>
                                                <GridColumn Field=@nameof(HomeVisitServiceReportingToolHeader.HouseHoldId) Visible="false" HeaderText="HouseHold Code" Width="100"></GridColumn>
                                                @*<GridColumn Field=@nameof(HomeVisitServiceReportingToolHeader.HomeVisitReasonId) HeaderText="Home Visit Reason" Width="100"></GridColumn>*@
                                                <GridColumn HeaderText="Home Visit Reason" Width="100">
                                                    <Template>
                                                        @{
                                                        var data = (context as HomeVisitServiceReportingToolHeader);
                                                        if (!string.IsNullOrEmpty(data.HomeVisitReasonId))
                                                        {
                                                            string result = string.Empty;
                                                            var a = data.HomeVisitReasonId.Split(",");
                                                            int count = 1;
                                                            foreach (var n in a)
                                                            {
                                                                int b = Convert.ToInt32(n.Trim());
                                                                var x = HomeVisitReasonData.FirstOrDefault(o => o.HomeVisitReasonId == b);
                                                                if (x != null)
                                                                {
                                                                    if (count != a.Length)
                                                                    {
                                                                        result += x.HomeVisitReasonDesc + ", ";
                                                                    }
                                                                    else
                                                                    {
                                                                        result += x.HomeVisitReasonDesc;
                                                                    }
                                                                }
                                                                count++;
                                                            }
                                                                    <p>@result</p>
                                                        }
                                                        else
                                                        {
                                                                    <p></p>
                                                        }
                                                        }
                                                    </Template>
                                                </GridColumn>
                                                <GridColumn Field=@nameof(HomeVisitServiceReportingToolHeader.HomeVisitReasonOther) Visible="true" HeaderText="Other Home Visit Reason" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="100"></GridColumn>
                                                <GridForeignColumn Field=@nameof(HomeVisitServiceReportingToolHeader.ProgramParticipationId) HeaderText="Program Participation" ForeignKeyField="@nameof(AProgramParticipationStatus.ProgramParticipationId)" ForeignKeyValue="@nameof(AProgramParticipationStatus.ProgramParticipationDescription)" ForeignDataSource="@ProgramParticipationData" Width="130" ClipMode="ClipMode.EllipsisWithTooltip"></GridForeignColumn>
                                                <GridColumn HeaderText="Manage Records" Width="120" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left">
                                                    <GridCommandColumns>
                                                        <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="Edit" })" Title="Edit"></GridCommandColumn>
                                                    </GridCommandColumns>
                                                </GridColumn>
                                            </GridColumns>
                                        </SfGrid>
                                    </div>
                                </div>
                            </div>
                    }
                </Template>
                <FooterTemplate>
                    <SfButton CssClass="e-btn e-success" OnClick="SaveRegisterBtnClick"> Save Form</SfButton>
                    <SfButton CssClass="e-btn e-danger" OnClick="CancelRegisterBtnClick"> Cancel</SfButton>
                </FooterTemplate>
            </GridEditSettings>
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
            <GridPageSettings PageSize="20"></GridPageSettings>
            <GridColumns>
                @*<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>*@
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.HouseHoldId) HeaderText="HIV TB Tracking Form Id" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.HouseHoldCode) HeaderText="HouseHold Code" Width="100"></GridColumn>
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.DistrictDescription) HeaderText="District" Width="100"></GridColumn>
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.SubcountyDescription) Visible="true" HeaderText="Sub county" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="100"></GridColumn>
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.ParishDescription) HeaderText="Parish" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="100"></GridColumn>
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.VillageDescription) HeaderText="Village" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="100"></GridColumn>
                @*<GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.VillageDescription) HeaderText="Given Name" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="100"></GridColumn>*@
                <GridColumn HeaderText="Manage Records" Width="120" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left">
                    <GridCommandColumns>
                        <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="view" })" Title="view"></GridCommandColumn>
                    </GridCommandColumns>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>
@code {
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
{
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    #endregion Toasters
    SfGrid<spHomeVisitServiceReportingToolDetailGetAllResult> ServiceMemberGrid;
    SfGrid<spBeneficiaryIdentificationRegisterGetAllResult> BeneficiaryRegisterGrid;
    SfGrid<HomeVisitServiceReportingToolHeader> ReportingToolHeaderGrid;
    private spBeneficiaryIdentificationRegisterGetAllResult BeneficiaryRegisterData { get; set; }
    private HomeVisitServiceReportingToolHeader ReportingToolHeaderData { get; set; }
    spHomeVisitServiceReportingToolDetailGetAllResult ReportingToolDetailData { get; set; }
    public Query MainQuery = new Query();
    List<AProgramParticipationStatus> ProgramParticipationData { get; set; }
    List<AServiceReceived> StableData { get; set; }
    List<AServiceReceived> SchoolData { get; set; }
    List<AServiceReceived> SafeData { get; set; }
    List<AServiceReceived> HealthyData { get; set; }

    List<AHomeVisitServicesNeeded> NeededStableData { get; set; }
    List<AHomeVisitServicesNeeded> NeededSchoolData { get; set; }
    List<AHomeVisitServicesNeeded> NeededSafeData { get; set; }
    List<AHomeVisitServicesNeeded> NeededHealthyData { get; set; }

    List<AHomeVisitReason> HomeVisitReasonData { get; set; }
    List<HouseHoldMembers> HouseHoldMembersData { get; set; }
    List<spHomeVisitServiceReportingToolDetailGetAllResult> MemberServiceData = new List<spHomeVisitServiceReportingToolDetailGetAllResult>();
    SfMultiSelect<int[], AHomeVisitReason> HomeVisitReasonObj;
    SfMultiSelect<int[], HouseHoldMembers> HouseHoldMembersObj;
    SfMultiSelect<int[], AServiceReceived> StableObj;
    SfMultiSelect<int[], AServiceReceived> SchoolObj;
    SfMultiSelect<int[], AServiceReceived> SafeObj;
    SfMultiSelect<int[], AServiceReceived> HealthyObj;

    private SearchPanel InputModel = new();



    List<AVillage> _VillageData { get; set; }
    List<AParish> _ParishData { get; set; }
    List<ASubcounty> _SubcountyData { get; set; }
    List<ADistrict> _DistrictData { get; set; }
    bool isEnabled { get; set; } = false;
    Query childQuery = new();


    private void SaveRegisterBtnClick()
    {
        BeneficiaryRegisterGrid.EndEdit();
    }
    private void CancelRegisterBtnClick()
    {
        BeneficiaryRegisterGrid.CloseEdit();
    }
    private void SaveFormBtnClick()
    {
        ReportingToolHeaderGrid.EndEdit();
    }
    private void CancelFormBtnClick()
    {
        ReportingToolHeaderGrid.CloseEdit();
    }
    private void SaveDetailFormBtnClick()
    {
        ServiceMemberGrid.EndEdit();
    }
    private void CancelDetailFormBtnClick()
    {
        ServiceMemberGrid.CloseEdit();
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            using (var db = new MUCOBADIContext())
            {
                HomeVisitReasonData = db.AHomeVisitReason.AsNoTracking().ToList();
                ProgramParticipationData = db.AProgramParticipationStatus.AsNoTracking().ToList();
                StableData = db.AServiceReceived.Where(o => o.ServiceCategoryId == 1).AsNoTracking().ToList();
                SchoolData = db.AServiceReceived.Where(o => o.ServiceCategoryId == 2).AsNoTracking().ToList();
                SafeData = db.AServiceReceived.Where(o => o.ServiceCategoryId == 3).AsNoTracking().ToList();
                HealthyData = db.AServiceReceived.Where(o => o.ServiceCategoryId == 4).AsNoTracking().ToList();

                NeededStableData = db.AHomeVisitServicesNeeded.Where(o => o.ServiceCategoryId == 1).AsNoTracking().ToList();
                NeededSchoolData = db.AHomeVisitServicesNeeded.Where(o => o.ServiceCategoryId == 2).AsNoTracking().ToList();
                NeededSafeData = db.AHomeVisitServicesNeeded.Where(o => o.ServiceCategoryId == 3).AsNoTracking().ToList();
                NeededHealthyData = db.AHomeVisitServicesNeeded.Where(o => o.ServiceCategoryId == 4).AsNoTracking().ToList();

                InputModel = new();
                _DistrictData = db.ADistrict.AsNoTracking().ToList();
                var user = db.ViewUserManagement.FirstOrDefault(o => o.UserName == userManagement.GetUserName());
               if (!user.RoleName.Contains("Super Administrator") && !user.RoleName.Contains("Administrator") && !user.RoleName.Contains("mel director") && !user.RoleName.Contains("mel manager") && !user.RoleName.Contains("cluster manager"))
                {
                    var districtlist = userManagement.GetUserDistrict();
                    if (districtlist != null && districtlist.Count > 0)
                    {
                        List<int?> m = new List<int?>();
                        foreach (var n in districtlist)
                        {
                            m.Add(n);
                        }

                        InputModel.DistrictId = m.ToArray();
                        _SubcountyData = db.ASubcounty.AsNoTracking().ToList().Where(o => districtlist.Any(a => a == o.DistrictId)).ToList();
                        MainQuery = new Query();
                        MainQuery.AddParams("DistrictId", string.Join(",", districtlist.ToArray()));
                    }
                    var subcountyList = userManagement.GetUserSubcounty();
                    if (subcountyList != null && subcountyList.Count > 0)
                    {
                        List<int?> m = new List<int?>();
                        foreach (var n in subcountyList)
                        {
                            m.Add(n);
                        }
                        InputModel.SubcountyId = m.ToArray();
                        _ParishData = db.AParish.AsNoTracking().ToList().Where(o => subcountyList.Any(a => a == o.SubcountyId)).ToList();
                        MainQuery = new Query();
                        MainQuery.AddParams("SubcountyId", string.Join(",", subcountyList.ToArray()));
                    }
                }
                else
                {
                    isEnabled = true;
                }
            }

        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }

    private void SearchRecords()
    {
        try
        {
            MainQuery = new Query();
            if (InputModel.DistrictId != null)
            {
                MainQuery.AddParams("DistrictId", string.Join(",", InputModel.DistrictId));
            }
            if (InputModel.SubcountyId != null)
            {
                MainQuery.AddParams("SubcountyId", string.Join(",", InputModel.SubcountyId));
            }
            if (InputModel.ParishId != null)
            {
                MainQuery.AddParams("ParishId", string.Join(",", InputModel.ParishId));
            }
            if (InputModel.VillageId != null)
            {
                MainQuery.AddParams("VillageId", string.Join(",", InputModel.VillageId));
            }
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    private void ClearSearchBtnClick()
    {
        InputModel = new();
        MainQuery = new Query();
        using (var db = new MUCOBADIContext())
        {
            var user = db.ViewUserManagement.FirstOrDefault(o => o.UserName == userManagement.GetUserName());
           if (!user.RoleName.Contains("Super Administrator") && !user.RoleName.Contains("Administrator") && !user.RoleName.Contains("mel director") && !user.RoleName.Contains("mel manager") && !user.RoleName.Contains("cluster manager"))
            {
                var districtlist = userManagement.GetUserDistrict();
                if (districtlist != null && districtlist.Count > 0)
                {
                    List<int?> m = new List<int?>();
                    foreach (var n in districtlist)
                    {
                        m.Add(n);
                    }

                    InputModel.DistrictId = m.ToArray();
                    _SubcountyData = db.ASubcounty.AsNoTracking().ToList().Where(o => districtlist.Any(a => a == o.DistrictId)).ToList();
                    MainQuery = new Query();
                    MainQuery.AddParams("DistrictId", string.Join(",", districtlist.ToArray()));
                }
                var subcountyList = userManagement.GetUserSubcounty();
                if (subcountyList != null && subcountyList.Count > 0)
                {
                    List<int?> m = new List<int?>();
                    foreach (var n in subcountyList)
                    {
                        m.Add(n);
                    }
                    InputModel.SubcountyId = m.ToArray();
                    _ParishData = db.AParish.AsNoTracking().ToList().Where(o => subcountyList.Any(a => a == o.SubcountyId)).ToList();
                    MainQuery = new Query();
                    MainQuery.AddParams("SubcountyId", string.Join(",", subcountyList.ToArray()));
                }
            }
            else
            {
                isEnabled = true;
            }
        }
    }


    public void OnDistrictChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            using (var db = new MUCOBADIContext())
            {
                _SubcountyData = db.ASubcounty.Where(o => args.Value.Any(a => a == o.DistrictId) == true).AsNoTracking().ToList();
            }
        }
    }
    public void OnSubcountyChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            using (var db = new MUCOBADIContext())
            {
                _ParishData = db.AParish.Where(o => args.Value.Any(a => a == o.SubcountyId) == true).AsNoTracking().ToList();
            }
        }
    }
    public void OnParishChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            using (var db = new MUCOBADIContext())
            {
                _VillageData = db.AVillage.Where(o => args.Value.Any(a => a == o.ParishId) == true).AsNoTracking().ToList();
            }
        }
    }

    private void OnHouseHoldMembersChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        if (args.Value != null)
        {
            ReportingToolHeaderData.HouseHoldMembersTalkedTo = string.Join(",", args.Value);
        }
        else
        {
            ReportingToolHeaderData.HouseHoldMembersTalkedTo=null;
        }
    }

    private void OnHouseHoldMembersBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(ReportingToolHeaderData.HouseHoldMembersTalkedTo))
        {
            var a = ReportingToolHeaderData.HouseHoldMembersTalkedTo.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            HouseHoldMembersObj.Value = c.ToArray();
        }
    }
    private void OnSafeChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        if (args.Value != null)
        {
            ReportingToolDetailData.Safe = string.Join(",", args.Value);

        }
        else
        {
            ReportingToolDetailData.Safe = null;
        }
    }

    private void OnSafeBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(ReportingToolDetailData.Safe))
        {
            var a = ReportingToolDetailData.Safe.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            SafeObj.Value = c.ToArray();
        }
    }
    private void OnSchoolChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        if (args.Value != null)
        {
            ReportingToolDetailData.Schooled = string.Join(",", args.Value);
        }
        else
        {
            ReportingToolDetailData.Schooled = null;
        }
    }

    private void OnSchoolBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(ReportingToolDetailData.Schooled))
        {
            var a = ReportingToolDetailData.Schooled.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            SchoolObj.Value = c.ToArray();
        }
    }
    private void OnStableChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        if (args.Value != null)
        {
            ReportingToolDetailData.Stable = string.Join(",", args.Value);
        }
        else {
            ReportingToolDetailData.Stable = null;
        }
    }

    private void OnStableBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(ReportingToolDetailData.Stable))
        {
            var a = ReportingToolDetailData.Stable.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            StableObj.Value = c.ToArray();
        }
    }
    private void OnHealthyChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        if (args.Value != null)
        {
            ReportingToolDetailData.Healthy = string.Join(",", args.Value);
        }
        else
        {
            ReportingToolDetailData.Healthy = null;
        }
    }

    private void OnHealthyBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(ReportingToolDetailData.Healthy))
        {
            var a = ReportingToolDetailData.Healthy.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            HealthyObj.Value = c.ToArray();
        }
    }

    private void OnHomeVisitReasonChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        if (args.Value != null)
        {
            ReportingToolHeaderData.HomeVisitReasonId = string.Join(",", args.Value);
        }
        else
        {
            ReportingToolHeaderData.HomeVisitReasonId = null;
        }
    }

    private void OnHomeVisitReasonBound(Syncfusion.Blazor.DropDowns.DataBoundEventArgs args)
    {
        if (!string.IsNullOrEmpty(ReportingToolHeaderData.HomeVisitReasonId))
        {
            var a = ReportingToolHeaderData.HomeVisitReasonId.Split(',');
            List<int> c = new List<int>();
            foreach (var n in a)
            {
                int b = Convert.ToInt32(n.Trim());
                c.Add(b);
            }
            HomeVisitReasonObj.Value = c.ToArray();
        }
    }

    #region Beneficiary Register
    public class ServiceReportBeneficiaryRegisterAdapter : DataAdaptor
    {
        public IToastService toastService;
        //private UserManagement _userManagement;
        public ServiceReportBeneficiaryRegisterAdapter(IToastService ts/*, UserManagement userManagement*/)
        {
            //_userManagement = userManagement;
            toastService = ts;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<spBeneficiaryIdentificationRegisterGetAllResult>();
            try
            {
                string DistrictId = null;
                string SubcountyId = null;
                string ParishId = null;
                string VillageId = null;
                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;
                    if (val.FirstOrDefault(o => o.Key == "DistrictId").Value != null)
                    {
                        DistrictId = val.FirstOrDefault(o => o.Key == "DistrictId").Value.ToString();
                    }
                    if (val.FirstOrDefault(o => o.Key == "SubcountyId").Value != null)
                    {
                        SubcountyId = val.FirstOrDefault(o => o.Key == "SubcountyId").Value.ToString();
                    }
                    if (val.FirstOrDefault(o => o.Key == "ParishId").Value != null)
                    {
                        ParishId = val.FirstOrDefault(o => o.Key == "ParishId").Value.ToString();
                    }
                    if (val.FirstOrDefault(o => o.Key == "VillageId").Value != null)
                    {
                        VillageId = val.FirstOrDefault(o => o.Key == "VillageId").Value.ToString();
                    }
                }
                using (var dbContext = new SPToCoreContext())
                {
                    data = await dbContext.spBeneficiaryIdentificationRegisterGetAllAsync(DistrictId, SubcountyId, ParishId, VillageId, null, null, null);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<spBeneficiaryIdentificationRegisterGetAllResult>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override Object Insert(DataManager dataManager, object value, string key)
        {
            return value;
        }
        public override object Remove(DataManager dataManager, object value, string keyField, string key)
        {
            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            return value;
        }
    }
    public void BeneficiaryRegisterActionComplete(ActionEventArgs<spBeneficiaryIdentificationRegisterGetAllResult> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            BeneficiaryRegisterGrid.PreventRender(false);
            using (var db = new MUCOBADIContext())
            {
                HouseHoldMembersData = db.HouseHoldMembers.Where(o => o.HouseHoldId == args.Data.HouseHoldId).AsNoTracking().ToList();
            }
        }
    }
    #endregion Beneficiary Register
    #region Review Header
    public class HomeVisitServiceReportingToolHeaderHeaderAdapter : DataAdaptor
    {
        public IToastService toastService;
        //private UserManagement _userManagement;
        public HomeVisitServiceReportingToolHeaderHeaderAdapter(IToastService ts/*, UserManagement userManagement*/)
        {
            //_userManagement = userManagement;
            toastService = ts;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<HomeVisitServiceReportingToolHeader>();
            try
            {
                int? HouseHoldId = null;
                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;
                    if (val.FirstOrDefault(o => o.Key == "HouseHoldId").Value != null)
                    {
                        HouseHoldId = Convert.ToInt32(val.FirstOrDefault(o => o.Key == "HouseHoldId").Value.ToString());
                    }
                }
                using (var dbContext = new SPToCoreContext())
                {
                    data = await dbContext.HomeVisitServiceReportingToolHeader.Where(o=> o.HouseHoldId== HouseHoldId).ToListAsync();
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<HomeVisitServiceReportingToolHeader>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override Object Insert(DataManager dataManager, object value, string key)
        {
            try
            {
                using (var dbContext = new MUCOBADIContext())
                {
                    var val = (value as HomeVisitServiceReportingToolHeader);
                    var exists = dbContext.HomeVisitServiceReportingToolHeader.FirstOrDefault(o => o.VisitServiceReportingToolHeaderId == val.VisitServiceReportingToolHeaderId);
                    if (exists == null)
                    {
                        int id = 1;
                        var last = dbContext.HomeVisitServiceReportingToolHeader.OrderBy(o => o.VisitServiceReportingToolHeaderId).LastOrDefault();
                        if (last != null)
                        {
                            id = (last.VisitServiceReportingToolHeaderId + 1);
                        }
                        val.VisitServiceReportingToolHeaderId = id;

                        dbContext.HomeVisitServiceReportingToolHeader.Add(val);
                        dbContext.SaveChanges();
                    }
                    else
                    {
                        dbContext.Entry(exists).CurrentValues.SetValues(val);
                        dbContext.Entry(exists).State = EntityState.Modified;
                        dbContext.SaveChanges();
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return value;
        }
        public override object Remove(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                int data = (int)value;
                using (var dbContext = new MUCOBADIContext())
                {
                    //var exists = dbContext.HomeVisitServiceReportingToolHeader.FirstOrDefault(o => o.HomeVisitServiceReportingToolHeaderId == data);
                    //if (exists != null)
                    //{
                    //    dbContext.HomeVisitServiceReportingToolHeader.Remove(exists);
                    //}
                    //await dbContext.SaveChangesAsync();
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }


            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                using (var db = new MUCOBADIContext())
                {
                    var val = (value as HomeVisitServiceReportingToolHeader);
                    var exist = db.HomeVisitServiceReportingToolHeader.FirstOrDefault(o => o.VisitServiceReportingToolHeaderId == val.VisitServiceReportingToolHeaderId);
                    if (exist != null)
                    {
                        db.Entry(exist).CurrentValues.SetValues(val);
                        db.Entry(exist).State = EntityState.Modified;
                        await db.SaveChangesAsync();
                    }

                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            return value;
        }
        //public void saveLog(int HouseHoldId, string Editedcolumn, string previousvalue, string newvalue, string actiontaken)
        //{
        //    try
        //    {
        //        using (var db = new MUCOBADIContext())
        //        {
        //            double id = 1;
        //            var exist = db.HomeVisitServiceReportingToolHeaderLog.OrderBy(o => o.HouseHoldLogId).LastOrDefault();
        //            if (exist != null)
        //            {
        //                id = (exist.HouseHoldLogId + 1);
        //            }
        //            HomeVisitServiceReportingToolHeaderLog m = new HomeVisitServiceReportingToolHeaderLog()
        //            {
        //                HouseHoldLogId = id,
        //                ColumnEdited = Editedcolumn,
        //                HouseHoldId = HouseHoldId,
        //                PreviousValue = previousvalue,
        //                NewValue = newvalue,
        //                // ActionMadeBy = _userManagement.GetStaffName(),
        //                ActionDate = DateTime.Now,
        //                ActionTaken = actiontaken
        //            };
        //            db.HomeVisitServiceReportingToolHeaderLog.Add(m);
        //            db.SaveChanges();
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        toastService.ShowError(ex.Message.ToString());
        //    }
        //}
    }
    public async Task OnReviewHeaderActionBegin(ActionEventArgs<HomeVisitServiceReportingToolHeader> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {
                using (var db = new SPToCoreContext())
                {
                    HouseHoldMembersData = db.HouseHoldMembers.Where(o => o.HouseHoldId == BeneficiaryRegisterData.HouseHoldId).AsNoTracking().ToList();
                   // MemberServiceData = await db.spHomeVisitServiceReportingToolDetailGetAllAsync(BeneficiaryRegisterData.HouseHoldId.ToString(), args.RowData.VisitServiceReportingToolHeaderId);
                }
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {
                args.RowData.HouseHoldId = BeneficiaryRegisterData.HouseHoldId;
                using (var db = new SPToCoreContext())
                {
                    HouseHoldMembersData = db.HouseHoldMembers.Where(o => o.HouseHoldId == BeneficiaryRegisterData.HouseHoldId).AsNoTracking().ToList();
                    //MemberServiceData = await db.spHomeVisitServiceReportingToolDetailGetAllAsync(BeneficiaryRegisterData.HouseHoldId.ToString(), args.RowData.VisitServiceReportingToolHeaderId);
                }
                //ChildQuery = new Query().AddParams("HomeVisitServiceReportingToolHeaderId", args.RowData.HomeVisitServiceReportingToolHeaderId);
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (args.Data.ProgramParticipationId == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Program Participation status of Enrilled HH", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (args.Data.ProgramParticipationId == 1)
                {
                    if (string.IsNullOrEmpty(args.Data.HouseHoldMembersTalkedTo))
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Unique Identifiers of Persons Talked to During Visit", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (args.Data.VisitationDate == null)
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Date of Visit", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }

                    else if (string.IsNullOrEmpty(args.Data.HomeVisitReasonId))
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Reason(s) for visit to Enrolled Household", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else if (args.Data.HomeVisitReasonId.Contains("8") && string.IsNullOrEmpty(args.Data.HomeVisitReasonId))
                    {
                        await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Reason(s) for visit to Enrolled Household", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                        args.Cancel = true;
                    }
                    else
                    {
                        using (var db = new MUCOBADIContext())
                        {
                            if (args.Data.VisitServiceReportingToolHeaderId == 0)
                            {
                                var record = db.HomeVisitServiceReportingToolHeader.FirstOrDefault(o => o.VisitationDate == args.Data.VisitationDate && o.HouseHoldId == args.Data.HouseHoldId);
                                if (record != null && record.VisitServiceReportingToolHeaderId != args.Data.VisitServiceReportingToolHeaderId)
                                {
                                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "There is already an existing house hold visit that was registered on this day.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                                    args.Cancel = true;
                                }
                                //else
                                //{
                                //    var exist = db.HomeVisitServiceReportingToolHeader.FirstOrDefault(o => o.VisitServiceReportingToolHeaderId == args.Data.VisitServiceReportingToolHeaderId);
                                //    if (exist == null)
                                //    {
                                //        int id = 1;
                                //        var last = db.HomeVisitServiceReportingToolHeader.OrderBy(o => o.VisitServiceReportingToolHeaderId).AsNoTracking().ToList().LastOrDefault();
                                //        if (last != null)
                                //        {
                                //            id = (last.VisitServiceReportingToolHeaderId + 1);
                                //        }
                                //        ReportingToolHeaderData.VisitServiceReportingToolHeaderId = id;
                                //        args.Data.VisitServiceReportingToolHeaderId = id;

                                //        db.HomeVisitServiceReportingToolHeader.Add(ReportingToolHeaderData);
                                //        db.SaveChanges();
                                //    }

                                //    foreach (var n in MemberServiceData)
                                //    {
                                //        var _exist = db.HomeVisitServiceReportingToolDetail.FirstOrDefault(o => o.HouseHoldMemberId == n.HouseHoldMemberId && o.VisitServiceReportingToolHeaderId == ReportingToolHeaderData.VisitServiceReportingToolHeaderId);
                                //        if (_exist == null)
                                //        {
                                //            HomeVisitServiceReportingToolDetail m = new HomeVisitServiceReportingToolDetail();
                                //            int id = 1;
                                //            var last = db.HomeVisitServiceReportingToolDetail.OrderBy(o => o.VisitServiceReportingToolDetailId).AsNoTracking().ToList().LastOrDefault();
                                //            if (last != null)
                                //            {
                                //                id = (last.VisitServiceReportingToolDetailId + 1);
                                //            }
                                //            m.VisitServiceReportingToolDetailId = id;
                                //            m.VisitServiceReportingToolHeaderId = ReportingToolHeaderData.VisitServiceReportingToolHeaderId;
                                //            m.HouseHoldMemberId = n.HouseHoldMemberId;
                                //            m.ProgramParticipationId = n.ProgramParticipationId;
                                //            m.Stable = n.Stable;
                                //            m.StableOther = n.StableOther;
                                //            m.Schooled = n.Schooled;
                                //            m.SchooledOther = n.SchooledOther;
                                //            m.Safe = n.Safe;
                                //            m.SafeOther = n.SafeOther;
                                //            m.Healthy = n.Healthy;
                                //            m.HealthyOther = n.HealthyOther;

                                //             m.GapNeededStable = n.Gap_Needed_Stable;
                                //            m.GapNeededSchooled = n.Gap_Needed_Schooled;
                                //            m.GapNeededSafe = n.Gap_Needed_Safe;
                                //            m.GapNeededHealthy = n.Gap_Needed_Healthy;
                                //             m.EmergingNeedStable = n.Emerging_Need_Stable;
                                //            m.EmergingNeedSchooled = n.Emerging_Need_Schooled;
                                //            m.EmergingNeedSafe = n.Emerging_Need_Safe;
                                //            m.EmergingNeedHealthy = n.Emerging_Need_Healthy;
                                //             m.UnmetNeedStable = n.Unmet_Need_Stable;
                                //            m.UnmetNeedSchooled = n.Unmet_Need_Schooled;
                                //            m.UnmetNeedSafe = n.Unmet_Need_Safe;
                                //            m.UnmetNeedHealthy = n.Unmet_Need_Healthy;
                                //            m.IssuesIdentified = n.Issues_Identified;

                                //            db.HomeVisitServiceReportingToolDetail.Add(m);
                                //            db.SaveChanges();
                                //        }
                                //        else
                                //        {
                                //            _exist.ProgramParticipationId = n.ProgramParticipationId;
                                //            _exist.Stable = n.Stable;
                                //            _exist.StableOther = n.StableOther;
                                //            _exist.Schooled = n.Schooled;
                                //            _exist.SchooledOther = n.SchooledOther;
                                //            _exist.Safe = n.Safe;
                                //            _exist.SafeOther = n.SafeOther;
                                //            _exist.Healthy = n.Healthy;
                                //            _exist.HealthyOther = n.HealthyOther;

                                //             _exist.GapNeededStable = n.Gap_Needed_Stable;
                                //            _exist.GapNeededSchooled = n.Gap_Needed_Schooled;
                                //            _exist.GapNeededSafe = n.Gap_Needed_Safe;
                                //           _exist.GapNeededHealthy = n.Gap_Needed_Healthy;
                                //            _exist.EmergingNeedStable = n.Emerging_Need_Stable;
                                //            _exist.EmergingNeedSchooled = n.Emerging_Need_Schooled;
                                //            _exist.EmergingNeedSafe = n.Emerging_Need_Safe;
                                //           _exist.EmergingNeedHealthy = n.Emerging_Need_Healthy;
                                //             _exist.UnmetNeedStable = n.Unmet_Need_Stable;
                                //            _exist.UnmetNeedSchooled = n.Unmet_Need_Schooled;
                                //            _exist.UnmetNeedSafe = n.Unmet_Need_Safe;
                                //            _exist.UnmetNeedHealthy = n.Unmet_Need_Healthy;
                                //           _exist.IssuesIdentified = n.Issues_Identified;

                                //            //db.Entry(_exist).CurrentValues.SetValues(n);
                                //            db.Entry(_exist).State = EntityState.Modified;
                                //            db.SaveChanges();
                                //        }
                                //    }
                                //}
                            }
                            //else
                            //{
                            //    var exist = db.HomeVisitServiceReportingToolHeader.FirstOrDefault(o => o.VisitServiceReportingToolHeaderId == args.Data.VisitServiceReportingToolHeaderId);
                            //    if (exist == null)
                            //    {
                            //        int id = 1;
                            //        var last = db.HomeVisitServiceReportingToolHeader.OrderBy(o => o.VisitServiceReportingToolHeaderId).AsNoTracking().ToList().LastOrDefault();
                            //        if (last != null)
                            //        {
                            //            id = (last.VisitServiceReportingToolHeaderId + 1);
                            //        }
                            //        ReportingToolHeaderData.VisitServiceReportingToolHeaderId = id;
                            //        args.Data.VisitServiceReportingToolHeaderId = id;

                            //        db.HomeVisitServiceReportingToolHeader.Add(ReportingToolHeaderData);
                            //        db.SaveChanges();
                            //    }

                            //    foreach (var n in MemberServiceData)
                            //    {
                            //        var _exist = db.HomeVisitServiceReportingToolDetail.FirstOrDefault(o => o.HouseHoldMemberId == n.HouseHoldMemberId && o.VisitServiceReportingToolHeaderId == ReportingToolHeaderData.VisitServiceReportingToolHeaderId);
                            //        if (_exist == null)
                            //        {
                            //            HomeVisitServiceReportingToolDetail m = new HomeVisitServiceReportingToolDetail();
                            //            int id = 1;
                            //            var last = db.HomeVisitServiceReportingToolDetail.OrderBy(o => o.VisitServiceReportingToolDetailId).AsNoTracking().ToList().LastOrDefault();
                            //            if (last != null)
                            //            {
                            //                id = (last.VisitServiceReportingToolDetailId + 1);
                            //            }
                            //            m.VisitServiceReportingToolDetailId = id;
                            //            m.VisitServiceReportingToolHeaderId = ReportingToolHeaderData.VisitServiceReportingToolHeaderId;
                            //            m.HouseHoldMemberId = n.HouseHoldMemberId;
                            //            m.ProgramParticipationId = n.ProgramParticipationId;
                            //            m.Stable = n.Stable;
                            //            m.StableOther = n.StableOther;
                            //            m.Schooled = n.Schooled;
                            //            m.SchooledOther = n.SchooledOther;
                            //            m.Safe = n.Safe;
                            //            m.SafeOther = n.SafeOther;
                            //            m.Healthy = n.Healthy;
                            //            m.HealthyOther = n.HealthyOther;

                            //             m.GapNeededStable = n.Gap_Needed_Stable;
                            //                m.GapNeededSchooled = n.Gap_Needed_Schooled;
                            //                m.GapNeededSafe = n.Gap_Needed_Safe;
                            //                m.GapNeededHealthy = n.Gap_Needed_Healthy;
                            //                 m.EmergingNeedStable = n.Emerging_Need_Stable;
                            //                m.EmergingNeedSchooled = n.Emerging_Need_Schooled;
                            //                m.EmergingNeedSafe = n.Emerging_Need_Safe;
                            //                m.EmergingNeedHealthy = n.Emerging_Need_Healthy;
                            //                 m.UnmetNeedStable = n.Unmet_Need_Stable;
                            //                m.UnmetNeedSchooled = n.Unmet_Need_Schooled;
                            //                m.UnmetNeedSafe = n.Unmet_Need_Safe;
                            //                m.UnmetNeedHealthy = n.Unmet_Need_Healthy;
                            //                m.IssuesIdentified = n.Issues_Identified;

                            //            db.HomeVisitServiceReportingToolDetail.Add(m);
                            //            db.SaveChanges();
                            //        }
                            //        else
                            //        {
                            //            _exist.ProgramParticipationId = n.ProgramParticipationId;
                            //            _exist.Stable = n.Stable;
                            //            _exist.StableOther = n.StableOther;
                            //            _exist.Schooled = n.Schooled;
                            //            _exist.SchooledOther = n.SchooledOther;
                            //            _exist.Safe = n.Safe;
                            //            _exist.SafeOther = n.SafeOther;
                            //            _exist.Healthy = n.Healthy;
                            //            _exist.HealthyOther = n.HealthyOther;

                            //             _exist.GapNeededStable = n.Gap_Needed_Stable;
                            //                _exist.GapNeededSchooled = n.Gap_Needed_Schooled;
                            //                _exist.GapNeededSafe = n.Gap_Needed_Safe;
                            //               _exist.GapNeededHealthy = n.Gap_Needed_Healthy;
                            //                _exist.EmergingNeedStable = n.Emerging_Need_Stable;
                            //                _exist.EmergingNeedSchooled = n.Emerging_Need_Schooled;
                            //                _exist.EmergingNeedSafe = n.Emerging_Need_Safe;
                            //               _exist.EmergingNeedHealthy = n.Emerging_Need_Healthy;
                            //                 _exist.UnmetNeedStable = n.Unmet_Need_Stable;
                            //                _exist.UnmetNeedSchooled = n.Unmet_Need_Schooled;
                            //                _exist.UnmetNeedSafe = n.Unmet_Need_Safe;
                            //                _exist.UnmetNeedHealthy = n.Unmet_Need_Healthy;
                            //               _exist.IssuesIdentified = n.Issues_Identified;

                            //            //db.Entry(_exist).CurrentValues.SetValues(n);
                            //            db.Entry(_exist).State = EntityState.Modified;
                            //            db.SaveChanges();
                            //        }
                            //    }
                            //}
                        }
                    }
                }
                else
                {
                    using (var db = new MUCOBADIContext())
                    {
                        if (args.Data.VisitServiceReportingToolHeaderId == 0)
                        {
                            var record = db.HomeVisitServiceReportingToolHeader.FirstOrDefault(o => o.VisitationDate == args.Data.VisitationDate && o.HouseHoldId == args.Data.HouseHoldId);
                            if (record != null && record.VisitServiceReportingToolHeaderId != args.Data.VisitServiceReportingToolHeaderId)
                            {
                                await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "There is already an existing house hold visit that was registered on this day.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                                args.Cancel = true;
                            }
                            //else
                            //{
                            //    var exist = db.HomeVisitServiceReportingToolHeader.FirstOrDefault(o => o.VisitServiceReportingToolHeaderId == args.Data.VisitServiceReportingToolHeaderId);
                            //    if (exist == null)
                            //    {
                            //        int id = 1;
                            //        var last = db.HomeVisitServiceReportingToolHeader.OrderBy(o => o.VisitServiceReportingToolHeaderId).AsNoTracking().ToList().LastOrDefault();
                            //        if (last != null)
                            //        {
                            //            id = (last.VisitServiceReportingToolHeaderId + 1);
                            //        }
                            //        ReportingToolHeaderData.VisitServiceReportingToolHeaderId = id;
                            //        args.Data.VisitServiceReportingToolHeaderId = id;

                            //        db.HomeVisitServiceReportingToolHeader.Add(ReportingToolHeaderData);
                            //        db.SaveChanges();
                            //    }

                            //    foreach (var n in MemberServiceData)
                            //    {
                            //        var _exist = db.HomeVisitServiceReportingToolDetail.FirstOrDefault(o => o.HouseHoldMemberId == n.HouseHoldMemberId && o.VisitServiceReportingToolHeaderId == ReportingToolHeaderData.VisitServiceReportingToolHeaderId);
                            //        if (_exist == null)
                            //        {
                            //            HomeVisitServiceReportingToolDetail m = new HomeVisitServiceReportingToolDetail();
                            //            int id = 1;
                            //            var last = db.HomeVisitServiceReportingToolDetail.OrderBy(o => o.VisitServiceReportingToolDetailId).AsNoTracking().ToList().LastOrDefault();
                            //            if (last != null)
                            //            {
                            //                id = (last.VisitServiceReportingToolDetailId + 1);
                            //            }
                            //            m.VisitServiceReportingToolDetailId = id;
                            //            m.VisitServiceReportingToolHeaderId = ReportingToolHeaderData.VisitServiceReportingToolHeaderId;
                            //            m.HouseHoldMemberId = n.HouseHoldMemberId;
                            //            m.ProgramParticipationId = n.ProgramParticipationId;
                            //            m.Stable = n.Stable;
                            //            m.StableOther = n.StableOther;
                            //            m.Schooled = n.Schooled;
                            //            m.SchooledOther = n.SchooledOther;
                            //            m.Safe = n.Safe;
                            //            m.SafeOther = n.SafeOther;
                            //            m.Healthy = n.Healthy;
                            //            m.HealthyOther = n.HealthyOther;

                            //            db.HomeVisitServiceReportingToolDetail.Add(m);
                            //            db.SaveChanges();
                            //        }
                            //        else
                            //        {
                            //            _exist.ProgramParticipationId = n.ProgramParticipationId;
                            //            _exist.Stable = n.Stable;
                            //            _exist.StableOther = n.StableOther;
                            //            _exist.Schooled = n.Schooled;
                            //            _exist.SchooledOther = n.SchooledOther;
                            //            _exist.Safe = n.Safe;
                            //            _exist.SafeOther = n.SafeOther;
                            //            _exist.Healthy = n.Healthy;
                            //            _exist.HealthyOther = n.HealthyOther;

                            //            db.Entry(_exist).CurrentValues.SetValues(n);
                            //            db.Entry(_exist).State = EntityState.Modified;
                            //            db.SaveChanges();
                            //        }
                            //    }
                            //}
                        }
                        //else
                        //{
                        //    var exist = db.HomeVisitServiceReportingToolHeader.FirstOrDefault(o => o.VisitServiceReportingToolHeaderId == args.Data.VisitServiceReportingToolHeaderId);
                        //    if (exist == null)
                        //    {
                        //        int id = 1;
                        //        var last = db.HomeVisitServiceReportingToolHeader.OrderBy(o => o.VisitServiceReportingToolHeaderId).AsNoTracking().ToList().LastOrDefault();
                        //        if (last != null)
                        //        {
                        //            id = (last.VisitServiceReportingToolHeaderId + 1);
                        //        }
                        //        ReportingToolHeaderData.VisitServiceReportingToolHeaderId = id;
                        //        args.Data.VisitServiceReportingToolHeaderId = id;

                        //        db.HomeVisitServiceReportingToolHeader.Add(ReportingToolHeaderData);
                        //        db.SaveChanges();
                        //    }

                        //    foreach (var n in MemberServiceData)
                        //    {
                        //        var _exist = db.HomeVisitServiceReportingToolDetail.FirstOrDefault(o => o.HouseHoldMemberId == n.HouseHoldMemberId && o.VisitServiceReportingToolHeaderId == ReportingToolHeaderData.VisitServiceReportingToolHeaderId);
                        //        if (_exist == null)
                        //        {
                        //            HomeVisitServiceReportingToolDetail m = new HomeVisitServiceReportingToolDetail();
                        //            int id = 1;
                        //            var last = db.HomeVisitServiceReportingToolDetail.OrderBy(o => o.VisitServiceReportingToolDetailId).AsNoTracking().ToList().LastOrDefault();
                        //            if (last != null)
                        //            {
                        //                id = (last.VisitServiceReportingToolDetailId + 1);
                        //            }
                        //            m.VisitServiceReportingToolDetailId = id;
                        //            m.VisitServiceReportingToolHeaderId = ReportingToolHeaderData.VisitServiceReportingToolHeaderId;
                        //            m.HouseHoldMemberId = n.HouseHoldMemberId;
                        //            m.ProgramParticipationId = n.ProgramParticipationId;
                        //            m.Stable = n.Stable;
                        //            m.StableOther = n.StableOther;
                        //            m.Schooled = n.Schooled;
                        //            m.SchooledOther = n.SchooledOther;
                        //            m.Safe = n.Safe;
                        //            m.SafeOther = n.SafeOther;
                        //            m.Healthy = n.Healthy;
                        //            m.HealthyOther = n.HealthyOther;

                        //            db.HomeVisitServiceReportingToolDetail.Add(m);
                        //            db.SaveChanges();
                        //        }
                        //        else
                        //        {
                        //            _exist.ProgramParticipationId = n.ProgramParticipationId;
                        //            _exist.Stable = n.Stable;
                        //            _exist.StableOther = n.StableOther;
                        //            _exist.Schooled = n.Schooled;
                        //            _exist.SchooledOther = n.SchooledOther;
                        //            _exist.Safe = n.Safe;
                        //            _exist.SafeOther = n.SafeOther;
                        //            _exist.Healthy = n.Healthy;
                        //            _exist.HealthyOther = n.HealthyOther;

                        //            db.Entry(_exist).CurrentValues.SetValues(n);
                        //            db.Entry(_exist).State = EntityState.Modified;
                        //            db.SaveChanges();
                        //        }
                        //    }
                        //}
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        //finally { StateHasChanged(); }
    }
    public void ActionComplete(ActionEventArgs<HomeVisitServiceReportingToolHeader> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            ReportingToolHeaderGrid.PreventRender(false);
        }
    }
    #endregion Review Header
    public void OnMemberActionBegin(Syncfusion.Blazor.Grids.ActionEventArgs<spHomeVisitServiceReportingToolDetailGetAllResult> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            //args.RowData.HouseHoldMemberCode = ReviewHeaderData.HouseHoldCode;
            //args.RowData.HouseHoldId = ReviewHeaderData.HouseHoldId;
            // args.RowData.ApplicantId = ApplicantData.ApplicantId;
            args.RowData.VisitServiceReportingToolHeaderId = ReportingToolHeaderData.VisitServiceReportingToolHeaderId;
        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            //if (string.IsNullOrEmpty(args.Data.Stable))
            //{
            //    ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Stable Services", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
            //    args.Cancel = true;
            //}
            //else 
            if (args.Data.Stable != null && args.Data.Stable.Contains("10") && string.IsNullOrEmpty(args.Data.StableOther))
            {
                ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Stable service and the Provider", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            //else if (string.IsNullOrEmpty(args.Data.Schooled))
            //{
            //    ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Schooled Services", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
            //    args.Cancel = true;
            //}
            else if (args.Data.Schooled != null && args.Data.Schooled.Contains("19") && string.IsNullOrEmpty(args.Data.SchooledOther))
            {
                ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Schooled service and the Provider", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            //else if (string.IsNullOrEmpty(args.Data.Safe))
            //{
            //    ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Safe Services", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
            //    args.Cancel = true;
            //}
            else if (args.Data.Safe != null && (args.Data.Safe.Contains("26")|| args.Data.Safe.Contains("35")) && string.IsNullOrEmpty(args.Data.SafeOther))
            {
                ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Safe service and the Provider", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
            //else if (string.IsNullOrEmpty(args.Data.Healthy))
            //{
            //    ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Healthy Services", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
            //    args.Cancel = true;
            //}
            else if (args.Data.Healthy!= null && (args.Data.Healthy.Contains("49") || args.Data.Healthy.Contains("60") || args.Data.Healthy.Contains("71") || args.Data.Healthy.Contains("79")) && string.IsNullOrEmpty(args.Data.Healthy))
            {
                ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Healthy service and the Provider", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
        }
    }
    public void OnMemberActionComplete(Syncfusion.Blazor.Grids.ActionEventArgs<spHomeVisitServiceReportingToolDetailGetAllResult> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            ServiceMemberGrid.PreventRender(false);
        }
    }

     public class HomevisitDetailAdapter : DataAdaptor
    {
        public IToastService toastService;
        //private UserManagement _userManagement;
        public HomevisitDetailAdapter(IToastService ts/*, UserManagement userManagement*/)
        {
            //_userManagement = userManagement;
            toastService = ts;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<spHomeVisitServiceReportingToolDetailGetAllResult>();
            try
            {
                string HouseHoldId = null;
                int? VisitServiceReportingToolHeaderId = null;
                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;
                    if (val.FirstOrDefault(o => o.Key == "HouseHoldId").Value != null)
                    {
                        HouseHoldId = val.FirstOrDefault(o => o.Key == "HouseHoldId").Value.ToString();
                    }
                    if (val.FirstOrDefault(o => o.Key == "VisitServiceReportingToolHeaderId").Value != null)
                    {
                        VisitServiceReportingToolHeaderId = Convert.ToInt32(val.FirstOrDefault(o => o.Key == "VisitServiceReportingToolHeaderId").Value.ToString());
                    }
                }
                using (var dbContext = new SPToCoreContext())
                {
                    data = await dbContext.spHomeVisitServiceReportingToolDetailGetAllAsync(HouseHoldId,VisitServiceReportingToolHeaderId);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<spHomeVisitServiceReportingToolDetailGetAllResult>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override Object Insert(DataManager dataManager, object value, string key)
        {
            try
            {
                var n = (value as spHomeVisitServiceReportingToolDetailGetAllResult);
                using (var db = new MUCOBADIContext())
                {
                     var _exist = db.HomeVisitServiceReportingToolDetail.FirstOrDefault(o => o.HouseHoldMemberId == n.HouseHoldMemberId && o.VisitServiceReportingToolHeaderId == n.VisitServiceReportingToolHeaderId);
                                        if (_exist == null)
                                        {
                                            HomeVisitServiceReportingToolDetail m = new HomeVisitServiceReportingToolDetail();
                                            int id = 1;
                                            var last = db.HomeVisitServiceReportingToolDetail.OrderBy(o => o.VisitServiceReportingToolDetailId).AsNoTracking().ToList().LastOrDefault();
                                            if (last != null)
                                            {
                                                id = (last.VisitServiceReportingToolDetailId + 1);
                                            }
                                            m.VisitServiceReportingToolDetailId = id;
                                            m.VisitServiceReportingToolHeaderId = n.VisitServiceReportingToolHeaderId.Value;
                                            m.HouseHoldMemberId = n.HouseHoldMemberId;
                                            m.ProgramParticipationId = n.ProgramParticipationId;
                                            m.Stable = n.Stable;
                                            m.StableOther = n.StableOther;
                                            m.Schooled = n.Schooled;
                                            m.SchooledOther = n.SchooledOther;
                                            m.Safe = n.Safe;
                                            m.SafeOther = n.SafeOther;
                                            m.Healthy = n.Healthy;
                                            m.HealthyOther = n.HealthyOther;

                                             m.GapNeededStable = n.Gap_Needed_Stable;
                                            m.GapNeededSchooled = n.Gap_Needed_Schooled;
                                            m.GapNeededSafe = n.Gap_Needed_Safe;
                                            m.GapNeededHealthy = n.Gap_Needed_Healthy;
                                             m.EmergingNeedStable = n.Emerging_Need_Stable;
                                            m.EmergingNeedSchooled = n.Emerging_Need_Schooled;
                                            m.EmergingNeedSafe = n.Emerging_Need_Safe;
                                            m.EmergingNeedHealthy = n.Emerging_Need_Healthy;
                                             m.UnmetNeedStable = n.Unmet_Need_Stable;
                                            m.UnmetNeedSchooled = n.Unmet_Need_Schooled;
                                            m.UnmetNeedSafe = n.Unmet_Need_Safe;
                                            m.UnmetNeedHealthy = n.Unmet_Need_Healthy;
                                            m.IssuesIdentified = n.Issues_Identified;

                                            db.HomeVisitServiceReportingToolDetail.Add(m);
                                            db.SaveChanges();
                                        }
                                        else
                                        {
                                            _exist.ProgramParticipationId = n.ProgramParticipationId;
                                            _exist.Stable = n.Stable;
                                            _exist.StableOther = n.StableOther;
                                            _exist.Schooled = n.Schooled;
                                            _exist.SchooledOther = n.SchooledOther;
                                            _exist.Safe = n.Safe;
                                            _exist.SafeOther = n.SafeOther;
                                            _exist.Healthy = n.Healthy;
                                            _exist.HealthyOther = n.HealthyOther;

                                             _exist.GapNeededStable = n.Gap_Needed_Stable;
                                            _exist.GapNeededSchooled = n.Gap_Needed_Schooled;
                                            _exist.GapNeededSafe = n.Gap_Needed_Safe;
                                           _exist.GapNeededHealthy = n.Gap_Needed_Healthy;
                                            _exist.EmergingNeedStable = n.Emerging_Need_Stable;
                                            _exist.EmergingNeedSchooled = n.Emerging_Need_Schooled;
                                            _exist.EmergingNeedSafe = n.Emerging_Need_Safe;
                                           _exist.EmergingNeedHealthy = n.Emerging_Need_Healthy;
                                             _exist.UnmetNeedStable = n.Unmet_Need_Stable;
                                            _exist.UnmetNeedSchooled = n.Unmet_Need_Schooled;
                                            _exist.UnmetNeedSafe = n.Unmet_Need_Safe;
                                            _exist.UnmetNeedHealthy = n.Unmet_Need_Healthy;
                                           _exist.IssuesIdentified = n.Issues_Identified;

                                            //db.Entry(_exist).CurrentValues.SetValues(n);
                                            db.Entry(_exist).State = EntityState.Modified;
                                            db.SaveChanges();
                                        }
                }
            }
            catch (Exception)
            {

                throw;
            }
            return value;
        }
        public override object Remove(DataManager dataManager, object value, string keyField, string key)
        {
            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                var n = (value as spHomeVisitServiceReportingToolDetailGetAllResult);
                using (var db = new MUCOBADIContext())
                {
                    var _exist = db.HomeVisitServiceReportingToolDetail.FirstOrDefault(o => o.HouseHoldMemberId == n.HouseHoldMemberId && o.VisitServiceReportingToolHeaderId == n.VisitServiceReportingToolHeaderId);
                                        if (_exist == null)
                                        {
                                            HomeVisitServiceReportingToolDetail m = new HomeVisitServiceReportingToolDetail();
                                            int id = 1;
                                            var last = db.HomeVisitServiceReportingToolDetail.OrderBy(o => o.VisitServiceReportingToolDetailId).AsNoTracking().ToList().LastOrDefault();
                                            if (last != null)
                                            {
                                                id = (last.VisitServiceReportingToolDetailId + 1);
                                            }
                                            m.VisitServiceReportingToolDetailId = id;
                                            m.VisitServiceReportingToolHeaderId = n.VisitServiceReportingToolHeaderId.Value;
                                            m.HouseHoldMemberId = n.HouseHoldMemberId;
                                            m.ProgramParticipationId = n.ProgramParticipationId;
                                            m.Stable = n.Stable;
                                            m.StableOther = n.StableOther;
                                            m.Schooled = n.Schooled;
                                            m.SchooledOther = n.SchooledOther;
                                            m.Safe = n.Safe;
                                            m.SafeOther = n.SafeOther;
                                            m.Healthy = n.Healthy;
                                            m.HealthyOther = n.HealthyOther;

                                             m.GapNeededStable = n.Gap_Needed_Stable;
                                            m.GapNeededSchooled = n.Gap_Needed_Schooled;
                                            m.GapNeededSafe = n.Gap_Needed_Safe;
                                            m.GapNeededHealthy = n.Gap_Needed_Healthy;
                                             m.EmergingNeedStable = n.Emerging_Need_Stable;
                                            m.EmergingNeedSchooled = n.Emerging_Need_Schooled;
                                            m.EmergingNeedSafe = n.Emerging_Need_Safe;
                                            m.EmergingNeedHealthy = n.Emerging_Need_Healthy;
                                             m.UnmetNeedStable = n.Unmet_Need_Stable;
                                            m.UnmetNeedSchooled = n.Unmet_Need_Schooled;
                                            m.UnmetNeedSafe = n.Unmet_Need_Safe;
                                            m.UnmetNeedHealthy = n.Unmet_Need_Healthy;
                                            m.IssuesIdentified = n.Issues_Identified;

                                            db.HomeVisitServiceReportingToolDetail.Add(m);
                                            db.SaveChanges();
                                        }
                                        else
                                        {
                                            _exist.ProgramParticipationId = n.ProgramParticipationId;
                                            _exist.Stable = n.Stable;
                                            _exist.StableOther = n.StableOther;
                                            _exist.Schooled = n.Schooled;
                                            _exist.SchooledOther = n.SchooledOther;
                                            _exist.Safe = n.Safe;
                                            _exist.SafeOther = n.SafeOther;
                                            _exist.Healthy = n.Healthy;
                                            _exist.HealthyOther = n.HealthyOther;

                                             _exist.GapNeededStable = n.Gap_Needed_Stable;
                                            _exist.GapNeededSchooled = n.Gap_Needed_Schooled;
                                            _exist.GapNeededSafe = n.Gap_Needed_Safe;
                                           _exist.GapNeededHealthy = n.Gap_Needed_Healthy;
                                            _exist.EmergingNeedStable = n.Emerging_Need_Stable;
                                            _exist.EmergingNeedSchooled = n.Emerging_Need_Schooled;
                                            _exist.EmergingNeedSafe = n.Emerging_Need_Safe;
                                           _exist.EmergingNeedHealthy = n.Emerging_Need_Healthy;
                                             _exist.UnmetNeedStable = n.Unmet_Need_Stable;
                                            _exist.UnmetNeedSchooled = n.Unmet_Need_Schooled;
                                            _exist.UnmetNeedSafe = n.Unmet_Need_Safe;
                                            _exist.UnmetNeedHealthy = n.Unmet_Need_Healthy;
                                           _exist.IssuesIdentified = n.Issues_Identified;

                                            //db.Entry(_exist).CurrentValues.SetValues(n);
                                            db.Entry(_exist).State = EntityState.Modified;
                                            db.SaveChanges();
                                        }
                }
            }
            catch (Exception)
            {

                throw;
            }
            return value;
        }
        public override async Task<object> BatchUpdateAsync(DataManager dm, object Changed, object Added, object Deleted, string KeyField, string Key, int? dropIndex)
        {
            object products = null;
            try
            {
                if (Changed != null)
                {
                    products = Changed;
                    foreach (var n in (List<spHomeVisitServiceReportingToolDetailGetAllResult>)Changed)
                    {
                        using (var db = new MUCOBADIContext())
                        {
                            var _exist = db.HomeVisitServiceReportingToolDetail.FirstOrDefault(o => o.HouseHoldMemberId == n.HouseHoldMemberId && o.VisitServiceReportingToolHeaderId == n.VisitServiceReportingToolHeaderId);
                                        if (_exist == null)
                                        {
                                            HomeVisitServiceReportingToolDetail m = new HomeVisitServiceReportingToolDetail();
                                            int id = 1;
                                            var last = db.HomeVisitServiceReportingToolDetail.OrderBy(o => o.VisitServiceReportingToolDetailId).AsNoTracking().ToList().LastOrDefault();
                                            if (last != null)
                                            {
                                                id = (last.VisitServiceReportingToolDetailId + 1);
                                            }
                                            m.VisitServiceReportingToolDetailId = id;
                                            m.VisitServiceReportingToolHeaderId = n.VisitServiceReportingToolHeaderId.Value;
                                            m.HouseHoldMemberId = n.HouseHoldMemberId;
                                            m.ProgramParticipationId = n.ProgramParticipationId;
                                            m.Stable = n.Stable;
                                            m.StableOther = n.StableOther;
                                            m.Schooled = n.Schooled;
                                            m.SchooledOther = n.SchooledOther;
                                            m.Safe = n.Safe;
                                            m.SafeOther = n.SafeOther;
                                            m.Healthy = n.Healthy;
                                            m.HealthyOther = n.HealthyOther;

                                             m.GapNeededStable = n.Gap_Needed_Stable;
                                            m.GapNeededSchooled = n.Gap_Needed_Schooled;
                                            m.GapNeededSafe = n.Gap_Needed_Safe;
                                            m.GapNeededHealthy = n.Gap_Needed_Healthy;
                                             m.EmergingNeedStable = n.Emerging_Need_Stable;
                                            m.EmergingNeedSchooled = n.Emerging_Need_Schooled;
                                            m.EmergingNeedSafe = n.Emerging_Need_Safe;
                                            m.EmergingNeedHealthy = n.Emerging_Need_Healthy;
                                             m.UnmetNeedStable = n.Unmet_Need_Stable;
                                            m.UnmetNeedSchooled = n.Unmet_Need_Schooled;
                                            m.UnmetNeedSafe = n.Unmet_Need_Safe;
                                            m.UnmetNeedHealthy = n.Unmet_Need_Healthy;
                                            m.IssuesIdentified = n.Issues_Identified;

                                            db.HomeVisitServiceReportingToolDetail.Add(m);
                                            db.SaveChanges();
                                        }
                                        else
                                        {
                                            _exist.ProgramParticipationId = n.ProgramParticipationId;
                                            _exist.Stable = n.Stable;
                                            _exist.StableOther = n.StableOther;
                                            _exist.Schooled = n.Schooled;
                                            _exist.SchooledOther = n.SchooledOther;
                                            _exist.Safe = n.Safe;
                                            _exist.SafeOther = n.SafeOther;
                                            _exist.Healthy = n.Healthy;
                                            _exist.HealthyOther = n.HealthyOther;

                                             _exist.GapNeededStable = n.Gap_Needed_Stable;
                                            _exist.GapNeededSchooled = n.Gap_Needed_Schooled;
                                            _exist.GapNeededSafe = n.Gap_Needed_Safe;
                                           _exist.GapNeededHealthy = n.Gap_Needed_Healthy;
                                            _exist.EmergingNeedStable = n.Emerging_Need_Stable;
                                            _exist.EmergingNeedSchooled = n.Emerging_Need_Schooled;
                                            _exist.EmergingNeedSafe = n.Emerging_Need_Safe;
                                           _exist.EmergingNeedHealthy = n.Emerging_Need_Healthy;
                                             _exist.UnmetNeedStable = n.Unmet_Need_Stable;
                                            _exist.UnmetNeedSchooled = n.Unmet_Need_Schooled;
                                            _exist.UnmetNeedSafe = n.Unmet_Need_Safe;
                                            _exist.UnmetNeedHealthy = n.Unmet_Need_Healthy;
                                           _exist.IssuesIdentified = n.Issues_Identified;

                                            //db.Entry(_exist).CurrentValues.SetValues(n);
                                            db.Entry(_exist).State = EntityState.Modified;
                                            db.SaveChanges();
                                        }
                        }
                    }

                }
                if (Added != null)
                {
                    products = Added;
                    foreach (var n in (List<spHomeVisitServiceReportingToolDetailGetAllResult>)Added)
                    {
                        using (var db = new MUCOBADIContext())
                        {
                            var _exist = db.HomeVisitServiceReportingToolDetail.FirstOrDefault(o => o.HouseHoldMemberId == n.HouseHoldMemberId && o.VisitServiceReportingToolHeaderId == n.VisitServiceReportingToolHeaderId);
                                        if (_exist == null)
                                        {
                                            HomeVisitServiceReportingToolDetail m = new HomeVisitServiceReportingToolDetail();
                                            int id = 1;
                                            var last = db.HomeVisitServiceReportingToolDetail.OrderBy(o => o.VisitServiceReportingToolDetailId).AsNoTracking().ToList().LastOrDefault();
                                            if (last != null)
                                            {
                                                id = (last.VisitServiceReportingToolDetailId + 1);
                                            }
                                            m.VisitServiceReportingToolDetailId = id;
                                            m.VisitServiceReportingToolHeaderId = n.VisitServiceReportingToolHeaderId.Value;
                                            m.HouseHoldMemberId = n.HouseHoldMemberId;
                                            m.ProgramParticipationId = n.ProgramParticipationId;
                                            m.Stable = n.Stable;
                                            m.StableOther = n.StableOther;
                                            m.Schooled = n.Schooled;
                                            m.SchooledOther = n.SchooledOther;
                                            m.Safe = n.Safe;
                                            m.SafeOther = n.SafeOther;
                                            m.Healthy = n.Healthy;
                                            m.HealthyOther = n.HealthyOther;

                                             m.GapNeededStable = n.Gap_Needed_Stable;
                                            m.GapNeededSchooled = n.Gap_Needed_Schooled;
                                            m.GapNeededSafe = n.Gap_Needed_Safe;
                                            m.GapNeededHealthy = n.Gap_Needed_Healthy;
                                             m.EmergingNeedStable = n.Emerging_Need_Stable;
                                            m.EmergingNeedSchooled = n.Emerging_Need_Schooled;
                                            m.EmergingNeedSafe = n.Emerging_Need_Safe;
                                            m.EmergingNeedHealthy = n.Emerging_Need_Healthy;
                                             m.UnmetNeedStable = n.Unmet_Need_Stable;
                                            m.UnmetNeedSchooled = n.Unmet_Need_Schooled;
                                            m.UnmetNeedSafe = n.Unmet_Need_Safe;
                                            m.UnmetNeedHealthy = n.Unmet_Need_Healthy;
                                            m.IssuesIdentified = n.Issues_Identified;

                                            db.HomeVisitServiceReportingToolDetail.Add(m);
                                            db.SaveChanges();
                                        }
                                        else
                                        {
                                            _exist.ProgramParticipationId = n.ProgramParticipationId;
                                            _exist.Stable = n.Stable;
                                            _exist.StableOther = n.StableOther;
                                            _exist.Schooled = n.Schooled;
                                            _exist.SchooledOther = n.SchooledOther;
                                            _exist.Safe = n.Safe;
                                            _exist.SafeOther = n.SafeOther;
                                            _exist.Healthy = n.Healthy;
                                            _exist.HealthyOther = n.HealthyOther;

                                             _exist.GapNeededStable = n.Gap_Needed_Stable;
                                            _exist.GapNeededSchooled = n.Gap_Needed_Schooled;
                                            _exist.GapNeededSafe = n.Gap_Needed_Safe;
                                           _exist.GapNeededHealthy = n.Gap_Needed_Healthy;
                                            _exist.EmergingNeedStable = n.Emerging_Need_Stable;
                                            _exist.EmergingNeedSchooled = n.Emerging_Need_Schooled;
                                            _exist.EmergingNeedSafe = n.Emerging_Need_Safe;
                                           _exist.EmergingNeedHealthy = n.Emerging_Need_Healthy;
                                             _exist.UnmetNeedStable = n.Unmet_Need_Stable;
                                            _exist.UnmetNeedSchooled = n.Unmet_Need_Schooled;
                                            _exist.UnmetNeedSafe = n.Unmet_Need_Safe;
                                            _exist.UnmetNeedHealthy = n.Unmet_Need_Healthy;
                                           _exist.IssuesIdentified = n.Issues_Identified;

                                            //db.Entry(_exist).CurrentValues.SetValues(n);
                                            db.Entry(_exist).State = EntityState.Modified;
                                            db.SaveChanges();
                                        }
                        }
                    }

                }
                if (Deleted != null)
                {
                    products = Deleted;
                    //foreach (var rec in (List<OrderDetails>)Deleted)
                    //{
                    //    Orders.Remove(Orders.Where(or => or.OrderID == rec.OrderID).FirstOrDefault());
                    //}

                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }
            return products;
        }
    }

     public async Task HomevisitDetailCellSelectHandler(CellSelectEventArgs<spHomeVisitServiceReportingToolDetailGetAllResult> args)
    {
        //get selected cell index
        var CellIndexes = await ServiceMemberGrid.GetSelectedRowCellIndexes();

        //get the row and cell index
        var CurrentEditRowIndex = CellIndexes[0].Item1;
        var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

        //get the available fields
        var fields = await ServiceMemberGrid.GetColumnFieldNames();
        // edit the selected cell using the cell index and column name
        await ServiceMemberGrid.EditCell(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
    }

    public async Task HomevisitDetailCellSavedHandler(CellSaveArgs<spHomeVisitServiceReportingToolDetailGetAllResult> args)
    {
        try
        {
            var index = await ServiceMemberGrid.GetRowIndexByPrimaryKey(args.RowData.VisitServiceReportingToolDetailId);
            if (ReportingToolHeaderData.VisitServiceReportingToolHeaderId == 0)
            {
                using (var db = new MUCOBADIContext())
                {
                    var exist = db.HomeVisitServiceReportingToolHeader.FirstOrDefault(o => o.VisitServiceReportingToolHeaderId == ReportingToolHeaderData.VisitServiceReportingToolHeaderId);
                    if (exist == null)
                    {
                        int id = 1;
                        var last = db.HomeVisitServiceReportingToolHeader.OrderBy(o => o.VisitServiceReportingToolHeaderId).LastOrDefault();
                        if (last != null)
                        {
                            id = (last.VisitServiceReportingToolHeaderId + 1);
                        }
                        ReportingToolHeaderData.VisitServiceReportingToolHeaderId = id;
                        args.Data.VisitServiceReportingToolHeaderId = id;
                        db.HomeVisitServiceReportingToolHeader.Add(ReportingToolHeaderData);
                        db.SaveChanges();
                    }
                    await ServiceMemberGrid.UpdateCell(index, nameof(spHomeVisitServiceReportingToolDetailGetAllResult.VisitServiceReportingToolHeaderId), ReportingToolHeaderData.VisitServiceReportingToolHeaderId);
                }
            }
            else
            {
                args.Data.VisitServiceReportingToolHeaderId = ReportingToolHeaderData.VisitServiceReportingToolHeaderId;
                await ServiceMemberGrid.UpdateCell(index, nameof(spHomeVisitServiceReportingToolDetailGetAllResult.VisitServiceReportingToolHeaderId), ReportingToolHeaderData.VisitServiceReportingToolHeaderId);
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        finally
        {
            await ServiceMemberGrid.EndEditAsync();
            //await OnDetailDataBound();
            childQuery = new Query().AddParams("HouseHoldId", ReportingToolHeaderData.HouseHoldId).AddParams("VisitServiceReportingToolHeaderId", ReportingToolHeaderData.VisitServiceReportingToolHeaderId);
        }
    }
}
