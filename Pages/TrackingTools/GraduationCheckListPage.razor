@page "/GraduationCheckListPage"
@using MUCOBADI.Models;
@using MUCOBADI.Data;
@using System.Collections.ObjectModel;
@using System.IO;
@using Microsoft.EntityFrameworkCore;
@using System.Collections;
@inject UserManagement userManagement;
@inject NavigationManager Navigation;
@using Microsoft.AspNetCore.Hosting;
@inject IWebHostEnvironment hostingEnv;

<style>
    h4 {
        background-color: black;
        color: whitesmoke;
        padding: 10px;
    }

    td {
        padding: 10px;
    }

    h3 {
        color: red;
    }
    .pp {
        color: ghostwhite;
        background-color: #6F1E51;
        padding: 10px;
    }
</style>
<ol class="breadcrumb" style="margin-top:5px;">
    <li class="breadcrumb-item active" style="color: brown;"> <strong>USAID ICARE |</strong> OVC HOUSEHOLD GRADUATION CHECKLIST</li>
</ol>
<div class="row">
    <div class="col-lg-12 control-section">
        <SfToast @ref="ToastObj" ID="toast_type">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
    </div>
</div>

<div class="form-row">
    <div class="form-group col-md-12">
        <SfAccordion ExpandMode="@ExpandMode.Single">
            <AccordionItems>
                <AccordionItem Expanded="false">
                    <HeaderTemplate>Search Panel</HeaderTemplate>
                    <ContentTemplate>
                        <div style="padding:10px;">
                            <EditForm Model="@InputModel" OnValidSubmit="@SearchRecords">
                                <div class="form-row">
                                    <div class="form-group col-md-3">
                                        <p>District</p>
                                        <SfMultiSelect @bind-Value="@InputModel.DistrictId" Enabled="@isEnabled" TValue="int?[]" TItem="ADistrict" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_DistrictData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search District" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                            <MultiSelectFieldSettings Value="@nameof(ADistrict.DistrictId)" Text="@nameof(ADistrict.DistrictDescription)"></MultiSelectFieldSettings>
                                            <MultiSelectEvents TValue="int?[]" TItem="ADistrict" ValueChange="OnDistrictChange"></MultiSelectEvents>
                                        </SfMultiSelect>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <p>Sub-County</p>
                                        <SfMultiSelect @bind-Value="@InputModel.SubcountyId" TValue="int?[]" TItem="ASubcounty" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_SubcountyData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Sub-county" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                            <MultiSelectFieldSettings Value="@nameof(ASubcounty.SubcountyId)" Text="@nameof(ASubcounty.SubcountyDescription)"></MultiSelectFieldSettings>
                                            <MultiSelectEvents TValue="int?[]" TItem="ASubcounty" ValueChange="OnSubcountyChange"></MultiSelectEvents>
                                        </SfMultiSelect>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <p>Parish</p>
                                        <SfMultiSelect @bind-Value="@InputModel.ParishId" TValue="int?[]" TItem="AParish" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_ParishData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Parish" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                            <MultiSelectFieldSettings Value="@nameof(AParish.ParishId)" Text="@nameof(AParish.ParishDescription)"></MultiSelectFieldSettings>
                                            <MultiSelectEvents TValue="int?[]" TItem="AParish" ValueChange="OnParishChange"></MultiSelectEvents>
                                        </SfMultiSelect>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <p>Village</p>
                                        <SfMultiSelect @bind-Value="@InputModel.VillageId" TValue="int?[]" TItem="AVillage" AllowFiltering="true" Placeholder="Please select" Mode="@VisualMode.CheckBox" DataSource="@_VillageData" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search Village" FloatLabelType="FloatLabelType.Never" PopupHeight="350px">
                                            <MultiSelectFieldSettings Value="@nameof(AVillage.VillageId)" Text="@nameof(AVillage.VillageDescription)"></MultiSelectFieldSettings>
                                        </SfMultiSelect>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <BSButton Color="BlazorStrap.Color.Primary" ButtonType="BlazorStrap.ButtonType.Submit">Search</BSButton>
                                        <BSButton Color="BlazorStrap.Color.Secondary" ButtonType="BlazorStrap.ButtonType.Button" @onclick="ClearSearchBtnClick">Clear Search</BSButton>
                                    </div>
                                    <div class="form-group col-md-12">
                                        <DataAnnotationsValidator />
                                        <ValidationSummary />
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </ContentTemplate>
                </AccordionItem>
            </AccordionItems>
        </SfAccordion>
    </div>
    <div class="form-group col-md-12">
        <SfGrid @ref="BeneficiaryRegisterGrid" TValue="spBeneficiaryIdentificationRegisterGetAllResult" Query="@MainQuery"
                AllowGrouping="false" ShowColumnChooser="true" AllowTextWrap="true"
                AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true">
            @*Toolbar="@(new string[] {"Add","Edit","Delete","Update","Cancel","ColumnChooser"})"*@
            @*<GridGroupSettings Columns="@GroupedColumns"></GridGroupSettings>*@
            <SfDataManager AdaptorInstance="@typeof(GraduationChecklistBeneficiaryRegisterAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
            <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
            <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
            <GridEvents OnActionComplete="BeneficiaryRegisterActionComplete" TValue="spBeneficiaryIdentificationRegisterGetAllResult"></GridEvents>
            <GridEditSettings AllowAdding="false" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="DialogParams">
                <Template Context="RegisterContext">
                    @{
                        BeneficiaryRegisterData = (RegisterContext as spBeneficiaryIdentificationRegisterGetAllResult);
                        <div style="padding:3px;">
                            <div class="form-row">
                                <div class="form-group col-md-3">
                                    <p>District</p>
                                    <p><b>@BeneficiaryRegisterData.DistrictDescription</b></p>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>Sub-County</p>
                                    <p><b>@BeneficiaryRegisterData.SubcountyDescription</b></p>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>Parish</p>
                                    <p><b>@BeneficiaryRegisterData.ParishDescription</b></p>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>Village</p>
                                    <p><b>@BeneficiaryRegisterData.VillageDescription</b></p>
                                </div>
                                <div class="form-group col-md-3">
                                    <p>Household Code</p>
                                    <p><b>@BeneficiaryRegisterData.HouseHoldCode</b></p>
                                </div>
                                <div class="form-group col-md-12">
                                    <SfGrid @ref="GraduationChecklistHeaderGrid" TValue="GraduationChecklistHeader" Query="@(new Query().AddParams("HouseHoldId",BeneficiaryRegisterData.HouseHoldId))"
                                            Toolbar="@(new string[] {"Add","Edit","Delete","Update","Cancel","ColumnChooser"})" AllowGrouping="false" ShowColumnChooser="true" AllowTextWrap="true"
                                            AllowPaging="true" AllowFiltering="true" GridLines="GridLine.Both" AllowSelection="true">
                                        <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                        <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
                                        <SfDataManager AdaptorInstance="@typeof(GraduationChecklistHeaderAdapter)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
                                        <GridEvents OnActionBegin="OnGraduationChecklistHeaderActionBegin" OnActionComplete="@OnGraduationChecklistHeaderActionComplete" TValue="GraduationChecklistHeader"></GridEvents>
                                        <GridEditSettings AllowAdding="true" AllowDeleting="false" AllowEditing="true" Mode="@EditMode.Dialog" Dialog="DialogParams">
                                            <Template Context="GraduationChecklistHeaderContext">
                                                @{
                                                    GraduationChecklistHeaderReviewData = (GraduationChecklistHeaderContext as GraduationChecklistHeader);
                                                    <div style="margin-top: 10px; padding: 10px; border-color: black; border-width: 2px; border-style: solid; ">
                                                        <div class="form-row">
                                                            <div class="form-group col-md-12" hidden>
                                                                <SfNumericTextBox @bind-Value="@GraduationChecklistHeaderReviewData.GraduationChecklistId" Enabled="false"></SfNumericTextBox>
                                                            </div>
                                                            <div class="form-group col-md-12" hidden>
                                                                <SfNumericTextBox @bind-Value="@GraduationChecklistHeaderReviewData.HouseHoldId" Enabled="false"></SfNumericTextBox>
                                                            </div>
                                                            <div class="form-group col-md-6">
                                                                <p>Household CareGiver's Unique identifier and Name</p>
                                                                <SfDropDownList @bind-Value="@(GraduationChecklistHeaderReviewData.HouseHoldMemberId)" Enabled="true" TItem="ViewHouseHoldMembers" TValue="int?" DataSource="@HouseHoldMembersData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never" AllowFiltering="true">
                                                                    <DropDownListTemplates TItem="ViewHouseHoldMembers">
                                                                        <ItemTemplate>
                                                                            <div style="margin-left:10px;">
                                                                                <table>
                                                                                    <tr>
                                                                                        <td><p>@((context as ViewHouseHoldMembers).HouseHoldMemberCode)</p></td>
                                                                                        <td><p style="margin-left:10px;">@((context as ViewHouseHoldMembers).Surname) @((context as ViewHouseHoldMembers).Givenname)</p></td>
                                                                                    </tr>
                                                                                </table>
                                                                            </div>
                                                                        </ItemTemplate>
                                                                        <ValueTemplate>
                                                                            @((context as ViewHouseHoldMembers).HouseHoldMemberCode) @((context as ViewHouseHoldMembers).FullName)
                                                                            @*<div class="dropdown-width" style="width: 100%; height: 100%; margin-left: 10px;">
                                                                                <table>
                                                                                    <tr>
                                                                                        <td><p>@((context as ViewHouseHoldMembers).HouseHoldMemberCode)</p></td>
                                                                                        <td><p style="margin-left:10px;">@((context as ViewHouseHoldMembers).Surname) @((context as ViewHouseHoldMembers).Givenname)</p></td>
                                                                                    </tr>
                                                                                </table>
                                                                            </div>*@
                                                                        </ValueTemplate>
                                                                    </DropDownListTemplates>
                                                                    <DropDownListFieldSettings Value="@nameof(ViewHouseHoldMembers.HouseHoldMemberId)" Text="@nameof(ViewHouseHoldMembers.HouseHoldMemberCode)"></DropDownListFieldSettings>
                                                                </SfDropDownList>
                                                            </div>
                                                            <div class="form-group col-md-6">
                                                                <p>Date of Assessment</p>
                                                                <SfDatePicker @bind-Value="@(GraduationChecklistHeaderReviewData.AssessmentDate)" Format="dd/MM/yyyy" Placeholder="Enter Date" FloatLabelType="FloatLabelType.Never"> </SfDatePicker>
                                                            </div>
                                                            <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                            <div class="form-group col-md-12">
                                                                <SfGrid @ref="GraduationChecklistDetailsGrid" DataSource="@GraduationChecklistDetailDatasource" TValue="spGraduationChecklistDetailGetAllResult" AllowPaging="true" AllowFiltering="true"
                                                                        GridLines="GridLine.Both" AllowTextWrap="true" AllowSelection="true" AllowGrouping="true">
                                                                    <GridGroupSettings Columns="@Grouping" ShowDropArea="false">
                                                                        <CaptionTemplate>
                                                                            @{
                                                                                var dvn = (context as CaptionTemplateContext);
                                                                                <div><p class="pp"><strong>@dvn.Key @*: @dvn.Count Decisions*@</strong></p></div>
                                                                            }
                                                                        </CaptionTemplate>
                                                                    </GridGroupSettings>
                                                                    <GridPageSettings PageSize="20"></GridPageSettings>
                                                                    <GridEditSettings AllowAdding="false" AllowDeleting="false" AllowEditing="true" ShowConfirmDialog="false" Mode="@EditMode.Batch">
                                                                        <Template Context="GraduationChecklistDetailContext">
                                                                            @{
                                                                                var GraduationChecklistDetailReviewData = (GraduationChecklistDetailContext as spGraduationChecklistDetailGetAllResult);
                                                                                <div class="form-row" style="padding:10px;">
                                                                                    <div class="form-group col-md-12" hidden>
                                                                                        <SfNumericTextBox @bind-Value="@GraduationChecklistDetailReviewData.GraduationChecklistId" Enabled="false"></SfNumericTextBox>
                                                                                    </div>
                                                                                    <div class="form-group col-md-12" hidden>
                                                                                        <SfNumericTextBox @bind-Value="@GraduationChecklistDetailReviewData.GraduationChecklistDetailId" Enabled="false"></SfNumericTextBox>
                                                                                    </div>
                                                                                    <div class="form-group col-md-12">
                                                                                        <p>Graduation Criteria</p>
                                                                                        <p>@GraduationChecklistDetailReviewData.GraduationCriteriaCategory</p>
                                                                                    </div>
                                                                                    <div class="form-group col-md-12">
                                                                                        <p>@GraduationChecklistDetailReviewData.GraduationCriteriaDesc</p>
                                                                                    </div>
                                                                                    <div class="form-group col-md-12">
                                                                                        <p>
                                                                                            Satisfied
                                                                                            graduation criteria
                                                                                        </p>
                                                                                        <p>@GraduationChecklistDetailReviewData.GraduationCriteriaGuidline</p>
                                                                                    </div>
                                                                                    <div class="form-group col-md-12">
                                                                                        <p>Responses</p>
                                                                                        <SfDropDownList ID="Response_YesNoId" @bind-Value="@(GraduationChecklistDetailReviewData.Response_YesNoId)" Enabled="true" TItem="AYesNo" TValue="int" DataSource="@YesNoData" Placeholder="Please select" FloatLabelType="FloatLabelType.Never">
                                                                                            <DropDownListFieldSettings Value="@nameof(AYesNo.YesNoId)" Text="@nameof(AYesNo.YesNoDescription)"></DropDownListFieldSettings>
                                                                                        </SfDropDownList>
                                                                                    </div>
                                                                                </div>
                                                                            }
                                                                        </Template>
                                                                    </GridEditSettings>
                                                                    @*<GridSearchSettings IgnoreCase="true"></GridSearchSettings>*@
                                                                    <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Both"></GridSelectionSettings>
                                                                    <GridEvents OnActionComplete="TemplateActionComplete" CellSelected="GraduationChecklistDetailCellSelectHandler" TValue="spGraduationChecklistDetailGetAllResult"></GridEvents>
                                                                    @*<GridEvents CellSaved="OnCellSaved" OnActionComplete="TemplateActionComplete" OnBatchSave="BatchSaveHandler" QueryCellInfo="QueryCellInfoHandler" TValue="CouncilofDecisionsCountry"></GridEvents>*@
                                                                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                                                    <GridColumns>
                                                                        @*<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>*@
                                                                        <GridColumn Field=@nameof(spGraduationChecklistDetailGetAllResult.GraduationChecklistDetailId) AllowEditing="false" Visible="false" HeaderText="Graduation Checklist Detail Id" IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="110"> </GridColumn>
                                                                        <GridColumn Field=@nameof(spGraduationChecklistDetailGetAllResult.GraduationCriteriaId) AllowEditing="false" Visible="false" HeaderText="Graduation Criteria Id" TextAlign="TextAlign.Left" Width="110"> </GridColumn>
                                                                        <GridColumn Field=@nameof(spGraduationChecklistDetailGetAllResult.GraduationCriteriaCategory) AllowEditing="false" Visible="true" HeaderText="Graduation Criteria Category" TextAlign="TextAlign.Left" Width="110" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                                                                        <GridColumn Field=@nameof(spGraduationChecklistDetailGetAllResult.GraduationCriteriaDesc) AllowEditing="false" Visible="true" HeaderText="Graduation Criteria" TextAlign="TextAlign.Left" Width="300" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                                                                        <GridForeignColumn Field=@nameof(spGraduationChecklistDetailGetAllResult.Response_YesNoId) HeaderText="Responses" AllowEditing="true" EditType="EditType.DropDownEdit" TextAlign="TextAlign.Left" ForeignKeyField="@nameof(AYesNo.YesNoId)" ForeignKeyValue="@nameof(AYesNo.YesNoDescription)" ForeignDataSource="@YesNoData" Width="110"></GridForeignColumn>
                                                                        <GridColumn Field=@nameof(spGraduationChecklistDetailGetAllResult.GraduationCriteriaGuidline) AllowEditing="false" Visible="true" HeaderText="Satisfied graduation criteria" TextAlign="TextAlign.Left" Width="180" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                                                                    </GridColumns>
                                                                </SfGrid>
                                                            </div>
                                                            <div class="form-group col-md-12" style="border-bottom-color:black; border-bottom-width:2px; border-bottom-style:solid;"></div>
                                                            <div class="form-group col-md-4">
                                                                <p>Name of Assessor</p>
                                                                <SfTextBox Multiline="false" @bind-Value="@(GraduationChecklistHeaderReviewData.AssessorName)" Enabled="true" Placeholder="Pleses enter the name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>Title</p>
                                                                <SfTextBox Multiline="false" @bind-Value="@(GraduationChecklistHeaderReviewData.AssessorTitle)" Enabled="true" Placeholder="Pleses enter the Title" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>Tele</p>
                                                                <SfTextBox Multiline="false" @bind-Value="@(GraduationChecklistHeaderReviewData.AssessorTel)" Enabled="true" Placeholder="Pleses enter the Phone Number" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>Reviewed By</p>
                                                                <SfTextBox Multiline="false" @bind-Value="@(GraduationChecklistHeaderReviewData.ReviewerName)" Enabled="true" Placeholder="Pleses enter the name" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>Title</p>
                                                                <SfTextBox Multiline="false" @bind-Value="@(GraduationChecklistHeaderReviewData.ReviewerTitle)" Enabled="true" Placeholder="Pleses enter the Title" FloatLabelType="FloatLabelType.Never"></SfTextBox>
                                                            </div>
                                                            <div class="form-group col-md-4">
                                                                <p>Date</p>
                                                                <SfDatePicker @bind-Value="@(GraduationChecklistHeaderReviewData.ReviewDate)" Format="dd/MM/yyyy" Placeholder="Enter Date" FloatLabelType="FloatLabelType.Never"> </SfDatePicker>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </Template>
                                            <FooterTemplate>
                                                <SfButton CssClass="e-btn e-success" OnClick="SaveGraduationChecklistHeaderBtnClick"> Save Form</SfButton>
                                                <SfButton CssClass="e-btn e-danger" OnClick="CancelGraduationChecklistHeaderBtnClick"> Cancel</SfButton>
                                            </FooterTemplate>
                                        </GridEditSettings>
                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                        <GridPageSettings PageSize="20"></GridPageSettings>
                                        <GridColumns>
                                            @*<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>*@
                                            <GridColumn HeaderText="Manage Records" Width="120" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left">
                                                <GridCommandColumns>
                                                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="Edit" })" Title="Edit"></GridCommandColumn>
                                                </GridCommandColumns>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(GraduationChecklistHeader.GraduationChecklistId) HeaderText="Case Care Details Id" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
                                            <GridForeignColumn Field=@nameof(GraduationChecklistHeader.HouseHoldMemberId) HeaderText="HouseHold Member Code For CareGiver" ForeignKeyField="@nameof(ViewHouseHoldMembers.HouseHoldMemberId)" ForeignKeyValue="@nameof(ViewHouseHoldMembers.HouseHoldMemberCode)" ForeignDataSource="@HouseHoldMembersData" Width="200"></GridForeignColumn>
                                            <GridForeignColumn Field=@nameof(GraduationChecklistHeader.HouseHoldMemberId) HeaderText="HouseHold CareGiver Name" ForeignKeyField="@nameof(ViewHouseHoldMembers.HouseHoldMemberId)" ForeignKeyValue="@nameof(ViewHouseHoldMembers.FullName)" ForeignDataSource="@HouseHoldMembersData" Width="200"></GridForeignColumn>
                                            <GridColumn Field=@nameof(GraduationChecklistHeader.AssessmentDate) HeaderText="Date of Assessment" Format="dd/MM/yyyy" EditType="EditType.DatePickerEdit" Width="160"></GridColumn>
                                            <GridColumn Field=@nameof(GraduationChecklistHeader.AssessorName) HeaderText="Name of Assessor" Width="220"></GridColumn>
                                            <GridColumn Field=@nameof(GraduationChecklistHeader.AssessorTel) HeaderText="Tel" Width="220"></GridColumn>
                                            <GridColumn Field=@nameof(GraduationChecklistHeader.ReviewerName) HeaderText="Reviewed By" Width="220"></GridColumn>
                                        </GridColumns>
                                    </SfGrid>
                                </div>
                            </div>
                        </div>
                    }
                </Template>
                <FooterTemplate>
                    <SfButton CssClass="e-btn e-success" OnClick="SaveRegisterBtnClick"> Save Form</SfButton>
                    <SfButton CssClass="e-btn e-danger" OnClick="CancelRegisterBtnClick"> Cancel</SfButton>
                </FooterTemplate>
            </GridEditSettings>
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
            <GridPageSettings PageSize="20"></GridPageSettings>
            <GridColumns>
                @*<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>*@
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.HouseHoldId) HeaderText="HIV TB Tracking Form Id" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" IsPrimaryKey="true" IsIdentity="true" Visible="false" Width="100"></GridColumn>
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.HouseHoldCode) HeaderText="HouseHold Code" Width="100"></GridColumn>
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.DistrictDescription) HeaderText="District" Width="100"></GridColumn>
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.SubcountyDescription) Visible="true" HeaderText="Sub county" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="100"></GridColumn>
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.ParishDescription) HeaderText="Parish" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="100"></GridColumn>
                <GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.VillageDescription) HeaderText="Village" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="100"></GridColumn>
                @*<GridColumn Field=@nameof(spBeneficiaryIdentificationRegisterGetAllResult.VillageDescription) HeaderText="Given Name" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="100"></GridColumn>*@
                <GridColumn HeaderText="Manage Records" Width="120" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left">
                    <GridCommandColumns>
                        <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { CssClass="e-icons e-view-details",Content="view" })" Title="view"></GridCommandColumn>
                    </GridCommandColumns>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>

@code {
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
        {
            new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
            new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
            new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
            new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
        };
    #endregion Toasters

    private DialogSettings DialogParams = new DialogSettings { Height = "auto", MinHeight = "90vh", Width = "98%" };

    string[] Grouping = (new string[] { "GraduationCriteriaCategory" });

    SfGrid<spBeneficiaryIdentificationRegisterGetAllResult> BeneficiaryRegisterGrid;
    private spBeneficiaryIdentificationRegisterGetAllResult BeneficiaryRegisterData { get; set; }

    SfGrid<GraduationChecklistHeader> GraduationChecklistHeaderGrid;
    private GraduationChecklistHeader GraduationChecklistHeaderReviewData { get; set; }

    SfGrid<spGraduationChecklistDetailGetAllResult> GraduationChecklistDetailsGrid;
    List<spGraduationChecklistDetailGetAllResult> GraduationChecklistDetailDatasource = new();

    List<ViewHouseHoldMembers> HouseHoldMembersData { get; set; }
    List<AYesNo> YesNoData { get; set; }

    public Query MainQuery = new Query();
    public Query ChildQuery = new Query();

    private SearchPanel InputModel = new();



    List<AVillage> _VillageData { get; set; }
    List<AParish> _ParishData { get; set; }
    List<ASubcounty> _SubcountyData { get; set; }
    List<ADistrict> _DistrictData { get; set; }
    bool isEnabled { get; set; } = false;

    private void SaveRegisterBtnClick()
    {
        BeneficiaryRegisterGrid.EndEdit();
    }
    private void CancelRegisterBtnClick()
    {
        BeneficiaryRegisterGrid.CloseEdit();
    }
    private async Task SaveGraduationChecklistHeaderBtnClick()
    {
        await GraduationChecklistDetailsGrid.EndEditAsync();
        await GraduationChecklistHeaderGrid.EndEditAsync();
    }
    private async Task CancelGraduationChecklistHeaderBtnClick()
    {
        await GraduationChecklistDetailsGrid.EndEditAsync();
        await GraduationChecklistHeaderGrid.CloseEditAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            if (!userManagement.IsSignedIn())
            {
                Navigation.NavigateTo("/", true);
            }
            else
            {
                using (var db = new MUCOBADIContext())
                {

                    YesNoData = db.AYesNo.AsNoTracking().ToList();
                    InputModel = new();
                    _DistrictData = db.ADistrict.AsNoTracking().ToList();
                    var user = db.ViewUserManagement.FirstOrDefault(o => o.UserName == userManagement.GetUserName());
                   if (!user.RoleName.Contains("Super Administrator") && !user.RoleName.Contains("Administrator") && !user.RoleName.Contains("mel director") && !user.RoleName.Contains("mel manager") && !user.RoleName.Contains("cluster manager"))
                    {
                        var districtlist = userManagement.GetUserDistrict();
                        if (districtlist != null && districtlist.Count > 0)
                        {
                            List<int?> m = new List<int?>();
                            foreach (var n in districtlist)
                            {
                                m.Add(n);
                            }

                            InputModel.DistrictId = m.ToArray();
                            _SubcountyData = db.ASubcounty.AsNoTracking().ToList().Where(o => districtlist.Any(a => a == o.DistrictId)).ToList();
                            MainQuery = new Query();
                            MainQuery.AddParams("DistrictId", string.Join(",", districtlist.ToArray()));
                        }
                        var subcountyList = userManagement.GetUserSubcounty();
                        if (subcountyList != null && subcountyList.Count > 0)
                        {
                            List<int?> m = new List<int?>();
                            foreach (var n in subcountyList)
                            {
                                m.Add(n);
                            }
                            InputModel.SubcountyId = m.ToArray();
                            _ParishData = db.AParish.AsNoTracking().ToList().Where(o => subcountyList.Any(a => a == o.SubcountyId)).ToList();
                            MainQuery = new Query();
                            MainQuery.AddParams("SubcountyId", string.Join(",", subcountyList.ToArray()));
                        }
                    }
                    else
                    {
                        isEnabled = true;
                    }

                }
            }

        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    private void SearchRecords()
    {
        try
        {
            MainQuery = new Query();
            if (InputModel.DistrictId != null)
            {
                MainQuery.AddParams("DistrictId", string.Join(",", InputModel.DistrictId));
            }
            if (InputModel.SubcountyId != null)
            {
                MainQuery.AddParams("SubcountyId", string.Join(",", InputModel.SubcountyId));
            }
            if (InputModel.ParishId != null)
            {
                MainQuery.AddParams("ParishId", string.Join(",", InputModel.ParishId));
            }
            if (InputModel.VillageId != null)
            {
                MainQuery.AddParams("VillageId", string.Join(",", InputModel.VillageId));
            }
        }
        catch (Exception ex)
        {
            ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    private void ClearSearchBtnClick()
    {
        InputModel = new();
        MainQuery = new Query();
        using (var db = new MUCOBADIContext())
        {
            var user = db.ViewUserManagement.FirstOrDefault(o => o.UserName == userManagement.GetUserName());
           if (!user.RoleName.Contains("Super Administrator") && !user.RoleName.Contains("Administrator") && !user.RoleName.Contains("mel director") && !user.RoleName.Contains("mel manager") && !user.RoleName.Contains("cluster manager"))
            {
                var districtlist = userManagement.GetUserDistrict();
                if (districtlist != null && districtlist.Count > 0)
                {
                    List<int?> m = new List<int?>();
                    foreach (var n in districtlist)
                    {
                        m.Add(n);
                    }

                    InputModel.DistrictId = m.ToArray();
                    _SubcountyData = db.ASubcounty.AsNoTracking().ToList().Where(o => districtlist.Any(a => a == o.DistrictId)).ToList();
                    MainQuery = new Query();
                    MainQuery.AddParams("DistrictId", string.Join(",", districtlist.ToArray()));
                }
                var subcountyList = userManagement.GetUserSubcounty();
                if (subcountyList != null && subcountyList.Count > 0)
                {
                    List<int?> m = new List<int?>();
                    foreach (var n in subcountyList)
                    {
                        m.Add(n);
                    }
                    InputModel.SubcountyId = m.ToArray();
                    _ParishData = db.AParish.AsNoTracking().ToList().Where(o => subcountyList.Any(a => a == o.SubcountyId)).ToList();
                    MainQuery = new Query();
                    MainQuery.AddParams("SubcountyId", string.Join(",", subcountyList.ToArray()));
                }
            }
            else
            {
                isEnabled = true;
            }
        }
    }


    public void OnDistrictChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            using (var db = new MUCOBADIContext())
            {
                _SubcountyData = db.ASubcounty.Where(o => args.Value.Any(a => a == o.DistrictId) == true).AsNoTracking().ToList();
            }
        }
    }
    public void OnSubcountyChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            using (var db = new MUCOBADIContext())
            {
                _ParishData = db.AParish.Where(o => args.Value.Any(a => a == o.SubcountyId) == true).AsNoTracking().ToList();
            }
        }
    }
    public void OnParishChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int?[]> args)
    {
        if (args.Value != null)
        {
            using (var db = new MUCOBADIContext())
            {
                _VillageData = db.AVillage.Where(o => args.Value.Any(a => a == o.ParishId) == true).AsNoTracking().ToList();
            }
        }
    }


    #region Beneficiary Register
    public class GraduationChecklistBeneficiaryRegisterAdapter : DataAdaptor
    {
        public IToastService toastService;
        //private UserManagement _userManagement;
        public GraduationChecklistBeneficiaryRegisterAdapter(IToastService ts/*, UserManagement userManagement*/)
        {
            //_userManagement = userManagement;
            toastService = ts;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<spBeneficiaryIdentificationRegisterGetAllResult>();
            try
            {
                string DistrictId = null;
                string SubcountyId = null;
                string ParishId = null;
                string VillageId = null;
                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;
                    if (val.FirstOrDefault(o => o.Key == "DistrictId").Value != null)
                    {
                        DistrictId = val.FirstOrDefault(o => o.Key == "DistrictId").Value.ToString();
                    }
                    if (val.FirstOrDefault(o => o.Key == "SubcountyId").Value != null)
                    {
                        SubcountyId = val.FirstOrDefault(o => o.Key == "SubcountyId").Value.ToString();
                    }
                    if (val.FirstOrDefault(o => o.Key == "ParishId").Value != null)
                    {
                        ParishId = val.FirstOrDefault(o => o.Key == "ParishId").Value.ToString();
                    }
                    if (val.FirstOrDefault(o => o.Key == "VillageId").Value != null)
                    {
                        VillageId = val.FirstOrDefault(o => o.Key == "VillageId").Value.ToString();
                    }
                }
                using (var dbContext = new SPToCoreContext())
                {
                    data = await dbContext.spBeneficiaryIdentificationRegisterGetAllAsync(DistrictId, SubcountyId, ParishId, VillageId, null, null, null);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<spBeneficiaryIdentificationRegisterGetAllResult>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override Object Insert(DataManager dataManager, object value, string key)
        {
            return value;
        }
        public override object Remove(DataManager dataManager, object value, string keyField, string key)
        {
            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            return value;
        }
    }
    public void BeneficiaryRegisterActionComplete(ActionEventArgs<spBeneficiaryIdentificationRegisterGetAllResult> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            BeneficiaryRegisterGrid.PreventRender(false);
            ChildQuery = new Query().AddParams("HouseHoldId", args.Data.HouseHoldId);
            using (var db = new MUCOBADIContext())
            {
                HouseHoldMembersData = db.ViewHouseHoldMembers.Where(o => o.HouseHoldId == args.Data.HouseHoldId).AsNoTracking().ToList();
            }
        }
    }
    #endregion Beneficiary Register
    #region Graduation Checklist Header
    public class GraduationChecklistHeaderAdapter : DataAdaptor
    {
        public IToastService toastService;
        //private UserManagement _userManagement;
        public GraduationChecklistHeaderAdapter(IToastService ts/*, UserManagement userManagement*/)
        {
            //_userManagement = userManagement;
            toastService = ts;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<GraduationChecklistHeader>();
            try
            {
                int? HouseHoldId = null;
                if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
                {
                    var val = dataManagerRequest.Params;
                    if (val.FirstOrDefault(o => o.Key == "HouseHoldId").Value != null)
                    {
                        HouseHoldId = Convert.ToInt32(val.FirstOrDefault(o => o.Key == "HouseHoldId").Value.ToString());
                    }
                }
                using (var dbContext = new SPToCoreContext())
                {
                    data = await dbContext.GraduationChecklistHeader.Where(o => o.HouseHoldId == HouseHoldId).ToListAsync();
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
            {
                // Filtering
                GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<GraduationChecklistHeader>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override Object Insert(DataManager dataManager, object value, string key)
        {
            try
            {
                var val = (value as GraduationChecklistHeader);
                using (var db = new MUCOBADIContext())
                {
                    var exist = db.GraduationChecklistHeader.FirstOrDefault(o => o.GraduationChecklistId == val.GraduationChecklistId);
                    if (exist == null)
                    {
                        int id = 1;
                        var last = db.GraduationChecklistHeader.OrderBy(o => o.GraduationChecklistId).LastOrDefault();
                        if (last != null)
                        {
                            id = (last.GraduationChecklistId + 1);
                        }
                        val.GraduationChecklistId = id;
                        db.GraduationChecklistHeader.Add(val);
                        db.SaveChanges();
                        toastService.ShowSuccess("Record Saved Successfully", "Success");
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message, "Error");
            }
            return value;
        }
        public override object Remove(DataManager dataManager, object value, string keyField, string key)
        {
            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                var val = (value as GraduationChecklistHeader);
                using (var db = new MUCOBADIContext())
                {
                    var exist = db.GraduationChecklistHeader.FirstOrDefault(o => o.GraduationChecklistId == val.GraduationChecklistId);
                    if (exist != null)
                    {
                        db.Entry(exist).CurrentValues.SetValues(val);
                        db.Entry(exist).State = EntityState.Modified;
                        await db.SaveChangesAsync();
                        toastService.ShowSuccess("Record updated Successfully", "Success");
                    }
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message, "Error");
            }
            return value;
        }
    }
    public async Task OnGraduationChecklistHeaderActionBegin(Syncfusion.Blazor.Grids.ActionEventArgs<GraduationChecklistHeader> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {
                using (var db = new SPToCoreContext())
                {
                    GraduationChecklistDetailDatasource = await db.spGraduationChecklistDetailGetAllAsync(args.RowData.GraduationChecklistId);
                }
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {
                args.RowData.HouseHoldId = BeneficiaryRegisterData.HouseHoldId;
                using (var db = new SPToCoreContext())
                {
                    GraduationChecklistDetailDatasource = await db.spGraduationChecklistDetailGetAllAsync(args.RowData.GraduationChecklistId);
                }
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (args.Data.HouseHoldMemberId == 0)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please Select the Household CareGiver", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (args.Data.AssessmentDate == null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please Select the Date of Assessment", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (String.IsNullOrEmpty(args.Data.AssessorName))
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Name of the person that ASSENTED this record", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (String.IsNullOrEmpty(args.Data.AssessorTitle))
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the title of the assessor.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (String.IsNullOrEmpty(args.Data.AssessorTel))
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Phone number of the assessor.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (String.IsNullOrEmpty(args.Data.ReviewerName))
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the Name of the person that Reviewed this record", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (String.IsNullOrEmpty(args.Data.ReviewerTitle))
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the title of the reviewer.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else if (args.Data.ReviewDate== null)
                {
                    await ToastObj.ShowAsync(new ToastModel { Title = "Warning!", Content = "Please enter the date of review.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                    args.Cancel = true;
                }
                else
                {
                    using(var db = new MUCOBADIContext())
                    {
                        var exist = db.GraduationChecklistHeader.FirstOrDefault(o => o.GraduationChecklistId == args.Data.GraduationChecklistId);
                        if (exist == null)
                        {
                            int id = 1;
                            var last = db.GraduationChecklistHeader.OrderBy(o => o.GraduationChecklistId).LastOrDefault();
                            if (last != null)
                            {
                                id = (last.GraduationChecklistId + 1);
                            }
                            args.Data.GraduationChecklistId = id;
                            db.GraduationChecklistHeader.Add(args.Data);
                            db.SaveChanges();
                        }
                        foreach(var n in GraduationChecklistDetailDatasource)
                        {
                            var _exist = db.GraduationChecklistDetail.FirstOrDefault(o => o.GraduationChecklistId == args.Data.GraduationChecklistId && o.GraduationCriteriaId == n.GraduationCriteriaId);
                            if(_exist== null)
                            {
                                GraduationChecklistDetail m = new();
                                m.GraduationChecklistId = args.Data.GraduationChecklistId;
                                m.GraduationCriteriaId = n.GraduationCriteriaId;
                                m.ResponseYesNoId = n.Response_YesNoId;
                                int id = 1;
                                var last = db.GraduationChecklistDetail.OrderBy(o => o.GraduationChecklistDetailId).LastOrDefault();
                                if (last != null)
                                {
                                    id = (last.GraduationChecklistDetailId + 1);
                                }
                                m.GraduationChecklistDetailId = id;
                                db.GraduationChecklistDetail.Add(m);
                                db.SaveChanges();
                            }
                            else
                            {
                                _exist.ResponseYesNoId = n.Response_YesNoId;
                                db.Entry(_exist).State = EntityState.Modified;
                                db.SaveChanges();
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await ToastObj.ShowAsync(new ToastModel { Title = "Error!", Content = ex.Message.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    public void OnGraduationChecklistHeaderActionComplete(Syncfusion.Blazor.Grids.ActionEventArgs<GraduationChecklistHeader> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add) || args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            GraduationChecklistHeaderGrid.PreventRender(false);
        }
    }

    public async Task CellSelectHandler(CellSelectEventArgs<spGraduationChecklistDetailGetAllResult> args)
    {
        //get selected cell index
        var CellIndexes = await GraduationChecklistDetailsGrid.GetSelectedRowCellIndexes();

        //get the row and cell index
        var CurrentEditRowIndex = CellIndexes[0].Item1;
        var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

        //get the available fields
        var fields = await GraduationChecklistDetailsGrid.GetColumnFieldNames();
        //await GraduationChecklistDetailsGrid.ClearSelectionAsync();
        // edit the selected cell using the cell index and column name
        await GraduationChecklistDetailsGrid.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
    }
    public void TemplateActionComplete(ActionEventArgs<spGraduationChecklistDetailGetAllResult> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BatchSave)
        {
            GraduationChecklistDetailsGrid.Refresh();
        }
        else
        {

        }
        GraduationChecklistDetailsGrid.PreventRender(false);
    }
    public async Task GraduationChecklistDetailCellSelectHandler(CellSelectEventArgs<spGraduationChecklistDetailGetAllResult> args)
    {
        //get selected cell index
        var CellIndexes = await GraduationChecklistDetailsGrid.GetSelectedRowCellIndexes();

        //get the row and cell index
        var CurrentEditRowIndex = CellIndexes[0].Item1;
        var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

        //get the available fields
        var fields = await GraduationChecklistDetailsGrid.GetColumnFieldNames();
        //await VslaGroupShareOutDirectMemberGrid.ClearSelectionAsync();
        // edit the selected cell using the cell index and column name
        await GraduationChecklistDetailsGrid.EditCellAsync(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
    }
    #endregion Graduation Checklist Header
}
